
AVRASM ver. 2.1.30  C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm Wed Sep 09 14:40:32 2015

C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1058): warning: Register r4 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1059): warning: Register r6 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1060): warning: Register r8 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1061): warning: Register r10 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1062): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32A
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _flagtancong=R4
                 	.DEF _offsetphongthu=R6
                 	.DEF _goctancong=R8
                 	.DEF _cmdCtrlRobot=R10
                 	.DEF _idRobot=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02b4 	JMP  __RESET
000002 940c 0723 	JMP  _ext_int0_isr
000004 940c 0728 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 12f6 	JMP  _timer2_comp_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 09b1 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0689 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 06d1 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _ASCII:
00002a 0000
00002b 0000
00002c 0000
00002d 5f00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5F
00002e 0000
00002f 0700
000030 0700
000031 1400      	.DB  0x0,0x0,0x0,0x7,0x0,0x7,0x0,0x14
000032 147f
000033 147f
000034 2a24
000035 2a7f      	.DB  0x7F,0x14,0x7F,0x14,0x24,0x2A,0x7F,0x2A
000036 2312
000037 0813
000038 6264
000039 4936      	.DB  0x12,0x23,0x13,0x8,0x64,0x62,0x36,0x49
00003a 2255
00003b 0050
00003c 0305
00003d 0000      	.DB  0x55,0x22,0x50,0x0,0x5,0x3,0x0,0x0
00003e 1c00
00003f 4122
000040 0000
000041 2241      	.DB  0x0,0x1C,0x22,0x41,0x0,0x0,0x41,0x22
000042 001c
000043 0814
000044 083e
000045 0814      	.DB  0x1C,0x0,0x14,0x8,0x3E,0x8,0x14,0x8
000046 3e08
000047 0808
000048 5000
000049 0030      	.DB  0x8,0x3E,0x8,0x8,0x0,0x50,0x30,0x0
00004a 0800
00004b 0808
00004c 0808
00004d 6000      	.DB  0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x60
00004e 0060
00004f 2000
000050 0810
000051 0204      	.DB  0x60,0x0,0x0,0x20,0x10,0x8,0x4,0x2
000052 513e
000053 4549
000054 003e
000055 7f42      	.DB  0x3E,0x51,0x49,0x45,0x3E,0x0,0x42,0x7F
000056 0040
000057 6142
000058 4951
000059 2146      	.DB  0x40,0x0,0x42,0x61,0x51,0x49,0x46,0x21
00005a 4541
00005b 314b
00005c 1418
00005d 7f12      	.DB  0x41,0x45,0x4B,0x31,0x18,0x14,0x12,0x7F
00005e 2710
00005f 4545
000060 3945
000061 4a3c      	.DB  0x10,0x27,0x45,0x45,0x45,0x39,0x3C,0x4A
000062 4949
000063 0130
000064 0971
000065 0305      	.DB  0x49,0x49,0x30,0x1,0x71,0x9,0x5,0x3
000066 4936
000067 4949
000068 0636
000069 4949      	.DB  0x36,0x49,0x49,0x49,0x36,0x6,0x49,0x49
00006a 1e29
00006b 3600
00006c 0036
00006d 0000      	.DB  0x29,0x1E,0x0,0x36,0x36,0x0,0x0,0x0
00006e 3656
00006f 0000
000070 1408
000071 4122      	.DB  0x56,0x36,0x0,0x0,0x8,0x14,0x22,0x41
000072 1400
000073 1414
000074 1414
000075 4100      	.DB  0x0,0x14,0x14,0x14,0x14,0x14,0x0,0x41
000076 1422
000077 0208
000078 5101
000079 0609      	.DB  0x22,0x14,0x8,0x2,0x1,0x51,0x9,0x6
00007a 4932
00007b 4179
00007c 7e3e
00007d 1111      	.DB  0x32,0x49,0x79,0x41,0x3E,0x7E,0x11,0x11
00007e 7e11
00007f 497f
000080 4949
000081 3e36      	.DB  0x11,0x7E,0x7F,0x49,0x49,0x49,0x36,0x3E
000082 4141
000083 2241
000084 417f
000085 2241      	.DB  0x41,0x41,0x41,0x22,0x7F,0x41,0x41,0x22
000086 7f1c
000087 4949
000088 4149
000089 097f      	.DB  0x1C,0x7F,0x49,0x49,0x49,0x41,0x7F,0x9
00008a 0909
00008b 3e01
00008c 4941
00008d 7a49      	.DB  0x9,0x9,0x1,0x3E,0x41,0x49,0x49,0x7A
00008e 087f
00008f 0808
000090 007f
000091 7f41      	.DB  0x7F,0x8,0x8,0x8,0x7F,0x0,0x41,0x7F
000092 0041
000093 4020
000094 3f41
000095 7f01      	.DB  0x41,0x0,0x20,0x40,0x41,0x3F,0x1,0x7F
000096 1408
000097 4122
000098 407f
000099 4040      	.DB  0x8,0x14,0x22,0x41,0x7F,0x40,0x40,0x40
00009a 7f40
00009b 0c02
00009c 7f02
00009d 047f      	.DB  0x40,0x7F,0x2,0xC,0x2,0x7F,0x7F,0x4
00009e 1008
00009f 3e7f
0000a0 4141
0000a1 3e41      	.DB  0x8,0x10,0x7F,0x3E,0x41,0x41,0x41,0x3E
0000a2 097f
0000a3 0909
0000a4 3e06
0000a5 5141      	.DB  0x7F,0x9,0x9,0x9,0x6,0x3E,0x41,0x51
0000a6 5e21
0000a7 097f
0000a8 2919
0000a9 4646      	.DB  0x21,0x5E,0x7F,0x9,0x19,0x29,0x46,0x46
0000aa 4949
0000ab 3149
0000ac 0101
0000ad 017f      	.DB  0x49,0x49,0x49,0x31,0x1,0x1,0x7F,0x1
0000ae 3f01
0000af 4040
0000b0 3f40
0000b1 201f      	.DB  0x1,0x3F,0x40,0x40,0x40,0x3F,0x1F,0x20
0000b2 2040
0000b3 3f1f
0000b4 3840
0000b5 3f40      	.DB  0x40,0x20,0x1F,0x3F,0x40,0x38,0x40,0x3F
0000b6 1463
0000b7 1408
0000b8 0763
0000b9 7008      	.DB  0x63,0x14,0x8,0x14,0x63,0x7,0x8,0x70
0000ba 0708
0000bb 5161
0000bc 4549
0000bd 0043      	.DB  0x8,0x7,0x61,0x51,0x49,0x45,0x43,0x0
0000be 417f
0000bf 0041
0000c0 0402
0000c1 1008      	.DB  0x7F,0x41,0x41,0x0,0x2,0x4,0x8,0x10
0000c2 0020
0000c3 4141
0000c4 007f
0000c5 0204      	.DB  0x20,0x0,0x41,0x41,0x7F,0x0,0x4,0x2
0000c6 0201
0000c7 4004
0000c8 4040
0000c9 4040      	.DB  0x1,0x2,0x4,0x40,0x40,0x40,0x40,0x40
0000ca 0100
0000cb 0402
0000cc 2000
0000cd 5454      	.DB  0x0,0x1,0x2,0x4,0x0,0x20,0x54,0x54
0000ce 7854
0000cf 487f
0000d0 4444
0000d1 3838      	.DB  0x54,0x78,0x7F,0x48,0x44,0x44,0x38,0x38
0000d2 4444
0000d3 2044
0000d4 4438
0000d5 4844      	.DB  0x44,0x44,0x44,0x20,0x38,0x44,0x44,0x48
0000d6 387f
0000d7 5454
0000d8 1854
0000d9 7e08      	.DB  0x7F,0x38,0x54,0x54,0x54,0x18,0x8,0x7E
0000da 0109
0000db 0c02
0000dc 5252
0000dd 3e52      	.DB  0x9,0x1,0x2,0xC,0x52,0x52,0x52,0x3E
0000de 087f
0000df 0404
0000e0 0078
0000e1 7d44      	.DB  0x7F,0x8,0x4,0x4,0x78,0x0,0x44,0x7D
0000e2 0040
0000e3 4020
0000e4 3d44
0000e5 7f00      	.DB  0x40,0x0,0x20,0x40,0x44,0x3D,0x0,0x7F
0000e6 2810
0000e7 0044
0000e8 4100
0000e9 407f      	.DB  0x10,0x28,0x44,0x0,0x0,0x41,0x7F,0x40
0000ea 7c00
0000eb 1804
0000ec 7804
0000ed 087c      	.DB  0x0,0x7C,0x4,0x18,0x4,0x78,0x7C,0x8
0000ee 0404
0000ef 3878
0000f0 4444
0000f1 3844      	.DB  0x4,0x4,0x78,0x38,0x44,0x44,0x44,0x38
0000f2 147c
0000f3 1414
0000f4 0808
0000f5 1414      	.DB  0x7C,0x14,0x14,0x14,0x8,0x8,0x14,0x14
0000f6 7c18
0000f7 087c
0000f8 0404
0000f9 4808      	.DB  0x18,0x7C,0x7C,0x8,0x4,0x4,0x8,0x48
0000fa 5454
0000fb 2054
0000fc 3f04
0000fd 4044      	.DB  0x54,0x54,0x54,0x20,0x4,0x3F,0x44,0x40
0000fe 3c20
0000ff 4040
000100 7c20
000101 201c      	.DB  0x20,0x3C,0x40,0x40,0x20,0x7C,0x1C,0x20
000102 2040
000103 3c1c
000104 3040
000105 3c40      	.DB  0x40,0x20,0x1C,0x3C,0x40,0x30,0x40,0x3C
000106 2844
000107 2810
000108 0c44
000109 5050      	.DB  0x44,0x28,0x10,0x28,0x44,0xC,0x50,0x50
00010a 3c50
00010b 6444
00010c 4c54
00010d 0044      	.DB  0x50,0x3C,0x44,0x64,0x54,0x4C,0x44,0x0
00010e 3608
00010f 0041
000110 0000
000111 007f      	.DB  0x8,0x36,0x41,0x0,0x0,0x0,0x7F,0x0
000112 0000
000113 3641
000114 0008
000115 0810      	.DB  0x0,0x0,0x41,0x36,0x8,0x0,0x10,0x8
000116 1008
000117 7808
000118 4146
000119 7846      	.DB  0x8,0x10,0x8,0x78,0x46,0x41,0x46,0x78
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00011a 0000      	.DW  0x0000
                 
                 _0x3:
00011b e7e7
00011c e7e7
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1160): warning: .cseg .db misalignment - padding zero byte
00011d 00e7      	.DB  0xE7,0xE7,0xE7,0xE7,0xE7
                 _0x4:
00011e e7e7
00011f e7e7
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1162): warning: .cseg .db misalignment - padding zero byte
000120 00e7      	.DB  0xE7,0xE7,0xE7,0xE7,0xE7
                 _0x20006:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1164): warning: .cseg .db misalignment - padding zero byte
000121 0001      	.DB  0x1
                 _0x20007:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1166): warning: .cseg .db misalignment - padding zero byte
000122 000a      	.DB  0xA
                 _0x20008:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1168): warning: .cseg .db misalignment - padding zero byte
000123 0001      	.DB  0x1
                 _0x20009:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1170): warning: .cseg .db misalignment - padding zero byte
000124 000a      	.DB  0xA
                 _0x2000A:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1172): warning: .cseg .db misalignment - padding zero byte
000125 0001      	.DB  0x1
                 _0x20053:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1174): warning: .cseg .db misalignment - padding zero byte
000126 0001      	.DB  0x1
                 _0x201E6:
000127 0000
000128 0000
000129 0000
00012a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012b 0000
00012c 0000
00012d 0000
00012e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012f 0000
000130 0000
000131 0000
000132 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000133 0000
000134 0000
000135 0000
000136 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000137 0000
000138 0000
000139 0000
00013a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013b 0000
00013c 0000
00013d 0000
00013e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013f 0000
000140 0000
000141 0000
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1182): warning: .cseg .db misalignment - padding zero byte
000142 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x20335:
000143 0001
000144 0000
000145 0000      	.DB  0x1,0x0,0x0,0x0,0x0,0x0
                 _0x20000:
000146 6425
000147 2500
000148 2e30
000149 6632      	.DB  0x25,0x64,0x0,0x25,0x30,0x2E,0x32,0x66
00014a 2000
00014b 413c
00014c 424b
00014d 544f      	.DB  0x0,0x20,0x3C,0x41,0x4B,0x42,0x4F,0x54
00014e 494b
00014f 3e54
000150 5200
000151 424f      	.DB  0x4B,0x49,0x54,0x3E,0x0,0x52,0x4F,0x42
000152 544f
000153 5720
000154 4c41
000155 004c      	.DB  0x4F,0x54,0x20,0x57,0x41,0x4C,0x4C,0x0
000156 4857
000157 5449
000158 2045
000159 494c      	.DB  0x57,0x48,0x49,0x54,0x45,0x20,0x4C,0x49
00015a 454e
00015b 4600
00015c 4c4f
00015d 574f      	.DB  0x4E,0x45,0x0,0x46,0x4F,0x4C,0x4F,0x57
00015e 5245
00015f 4200
000160 414c
000161 4b43      	.DB  0x45,0x52,0x0,0x42,0x4C,0x41,0x43,0x4B
000162 4c20
000163 4e49
000164 0045
000165 4c42      	.DB  0x20,0x4C,0x49,0x4E,0x45,0x0,0x42,0x4C
000166 4555
000167 4f54
000168 544f
000169 0048      	.DB  0x55,0x45,0x54,0x4F,0x4F,0x54,0x48,0x0
00016a 5244
00016b 5649
00016c 0045
00016d 4554      	.DB  0x44,0x52,0x49,0x56,0x45,0x0,0x54,0x45
00016e 5453
00016f 4d20
000170 544f
000171 524f      	.DB  0x53,0x54,0x20,0x4D,0x4F,0x54,0x4F,0x52
000172 4d00
000173 746f
000174 726f
000175 004c      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x4C,0x0
000176 6f4d
000177 6f74
000178 5272
000179 5400      	.DB  0x4D,0x6F,0x74,0x6F,0x72,0x52,0x0,0x54
00017a 5345
00017b 2054
00017c 4155
00017d 5452      	.DB  0x45,0x53,0x54,0x20,0x55,0x41,0x52,0x54
00017e 5400
00017f 5345
000180 2054
000181 5249      	.DB  0x0,0x54,0x45,0x53,0x54,0x20,0x49,0x52
000182 3000
000183 002e
000184 2e31
000185 3200      	.DB  0x0,0x30,0x2E,0x0,0x31,0x2E,0x0,0x32
000186 002e
000187 2e33
000188 3400
000189 002e      	.DB  0x2E,0x0,0x33,0x2E,0x0,0x34,0x2E,0x0
00018a 2e35
00018b 3600
00018c 002e
00018d 2e37      	.DB  0x35,0x2E,0x0,0x36,0x2E,0x0,0x37,0x2E
00018e 3c00
00018f 4553
000190 464c
000191 5420      	.DB  0x0,0x3C,0x53,0x45,0x4C,0x46,0x20,0x54
000192 5345
000193 3e54
000194 2a00
000195 2a2a      	.DB  0x45,0x53,0x54,0x3E,0x0,0x2A,0x2A,0x2A
000196 2a2a
000197 2a2a
000198 2a2a
000199 2a2a      	.DB  0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A
00019a 002a
00019b 4352
00019c 5320
00019d 5245      	.DB  0x2A,0x0,0x52,0x43,0x20,0x53,0x45,0x52
00019e 4f56
00019f 3100
0001a0 522e
0001a1 424f      	.DB  0x56,0x4F,0x0,0x31,0x2E,0x52,0x4F,0x42
0001a2 544f
0001a3 5720
0001a4 4c41
0001a5 004c      	.DB  0x4F,0x54,0x20,0x57,0x41,0x4C,0x4C,0x0
0001a6 2e32
0001a7 4c42
0001a8 4555
0001a9 4f54      	.DB  0x32,0x2E,0x42,0x4C,0x55,0x45,0x54,0x4F
0001aa 544f
0001ab 2048
0001ac 3300
0001ad 572e      	.DB  0x4F,0x54,0x48,0x20,0x0,0x33,0x2E,0x57
0001ae 4948
0001af 4554
0001b0 4c20
0001b1 4e49      	.DB  0x48,0x49,0x54,0x45,0x20,0x4C,0x49,0x4E
0001b2 0045
0001b3 2e34
0001b4 4c42
0001b5 4341      	.DB  0x45,0x0,0x34,0x2E,0x42,0x4C,0x41,0x43
0001b6 204b
0001b7 494c
0001b8 454e
0001b9 3500      	.DB  0x4B,0x20,0x4C,0x49,0x4E,0x45,0x0,0x35
0001ba 542e
0001bb 5345
0001bc 2054
0001bd 4f4d      	.DB  0x2E,0x54,0x45,0x53,0x54,0x20,0x4D,0x4F
0001be 4f54
0001bf 0052
0001c0 2e36
0001c1 4554      	.DB  0x54,0x4F,0x52,0x0,0x36,0x2E,0x54,0x45
0001c2 5453
0001c3 4920
0001c4 2052
0001c5 2020      	.DB  0x53,0x54,0x20,0x49,0x52,0x20,0x20,0x20
0001c6 3700
0001c7 542e
0001c8 5345
0001c9 2054      	.DB  0x0,0x37,0x2E,0x54,0x45,0x53,0x54,0x20
0001ca 4652
0001cb 2020
0001cc 0020
0001cd 2e38      	.DB  0x52,0x46,0x20,0x20,0x20,0x0,0x38,0x2E
0001ce 4554
0001cf 5453
0001d0 5520
0001d1 5241      	.DB  0x54,0x45,0x53,0x54,0x20,0x55,0x41,0x52
0001d2 2054
0001d3 3900
0001d4 522e
0001d5 2043      	.DB  0x54,0x20,0x0,0x39,0x2E,0x52,0x43,0x20
0001d6 4553
0001d7 5652
0001d8 204f
0001d9 3100      	.DB  0x53,0x45,0x52,0x56,0x4F,0x20,0x0,0x31
0001da 2e30
0001db 5055
0001dc 4144
0001dd 4554      	.DB  0x30,0x2E,0x55,0x50,0x44,0x41,0x54,0x45
0001de 5220
0001df 0042
0001e0 414d
0001e1 4e49      	.DB  0x20,0x52,0x42,0x0,0x4D,0x41,0x49,0x4E
0001e2 5020
0001e3 4f52
0001e4 5247
0001e5 4d41      	.DB  0x20,0x50,0x52,0x4F,0x47,0x52,0x41,0x4D
0001e6 4400
0001e7 7369
0001e8 6174
0001e9 636e      	.DB  0x0,0x44,0x69,0x73,0x74,0x61,0x6E,0x63
0001ea 3a65
0001eb 2520
0001ec 2066
0001ed 0d0a      	.DB  0x65,0x3A,0x20,0x25,0x66,0x20,0xA,0xD
0001ee 4f00
0001ef 6972
0001f0 6e65
0001f1 6174      	.DB  0x0,0x4F,0x72,0x69,0x65,0x6E,0x74,0x61
0001f2 6974
0001f3 6e6f
0001f4 203a
0001f5 6625      	.DB  0x74,0x69,0x6F,0x6E,0x3A,0x20,0x25,0x66
0001f6 0a20
0001f7 000d
0001f8 654c
0001f9 7466      	.DB  0x20,0xA,0xD,0x0,0x4C,0x65,0x66,0x74
0001fa 5320
0001fb 6570
0001fc 6465
0001fd 203a      	.DB  0x20,0x53,0x70,0x65,0x65,0x64,0x3A,0x20
0001fe 6425
0001ff 0a20
000200 000d
000201 6952      	.DB  0x25,0x64,0x20,0xA,0xD,0x0,0x52,0x69
000202 6867
000203 2074
000204 7053
000205 6565      	.DB  0x67,0x68,0x74,0x20,0x53,0x70,0x65,0x65
000206 3a64
000207 2520
000208 2064
000209 0d0a      	.DB  0x64,0x3A,0x20,0x25,0x64,0x20,0xA,0xD
00020a 2d00
00020b 2d2d
00020c 2d2d
00020d 2d2d      	.DB  0x0,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00020e 2d2d
00020f 2d2d
000210 2d2d
000211 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000212 2d2d
000213 2d2d
000214 2d2d
000215 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000216 2d2d
000217 202d
000218 0d0a
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1238): warning: .cseg .db misalignment - padding zero byte
000219 0000      	.DB  0x2D,0x2D,0x2D,0x20,0xA,0xD,0x0
                 _0x2040000:
00021a 4e2d
00021b 4e41
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1240): warning: .cseg .db misalignment - padding zero byte
00021c 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1242): warning: .cseg .db misalignment - padding zero byte
00021d 0001      	.DB  0x1
                 _0x20A0000:
00021e 4e2d
00021f 4e41
000220 4900
000221 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1245): warning: .cseg .db misalignment - padding zero byte
000222 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000223 0001      	.DW  0x01
000224 0002      	.DW  0x02
000225 0234      	.DW  __REG_BIT_VARS*2
                 
000226 0005      	.DW  0x05
000227 03c5      	.DW  _TX_ADDRESS
000228 0236      	.DW  _0x3*2
                 
000229 0005      	.DW  0x05
00022a 03ca      	.DW  _RX_ADDRESS
00022b 023c      	.DW  _0x4*2
                 
00022c 0001      	.DW  0x01
00022d 04dd      	.DW  _id
00022e 0242      	.DW  _0x20006*2
                 
00022f 0001      	.DW  0x01
000230 0508      	.DW  _KpR
000231 0244      	.DW  _0x20007*2
                 
000232 0001      	.DW  0x01
000233 050a      	.DW  _KiR
000234 0246      	.DW  _0x20008*2
                 
000235 0001      	.DW  0x01
000236 050c      	.DW  _KpL
000237 0248      	.DW  _0x20009*2
                 
000238 0001      	.DW  0x01
000239 050e      	.DW  _KiL
00023a 024a      	.DW  _0x2000A*2
                 
00023b 000c      	.DW  0x0C
00023c 0260      	.DW  _0x2008F
00023d 0295      	.DW  _0x20000*2+9
                 
00023e 000b      	.DW  0x0B
00023f 026c      	.DW  _0x2019F
000240 02a1      	.DW  _0x20000*2+21
                 
000241 000b      	.DW  0x0B
000242 0277      	.DW  _0x201B4
000243 02ac      	.DW  _0x20000*2+32
                 
000244 0008      	.DW  0x08
000245 0282      	.DW  _0x201B4+11
000246 02b7      	.DW  _0x20000*2+43
                 
000247 000b      	.DW  0x0B
000248 028a      	.DW  _0x201E7
000249 02bf      	.DW  _0x20000*2+51
                 
00024a 0008      	.DW  0x08
00024b 0295      	.DW  _0x201E7+11
00024c 02b7      	.DW  _0x20000*2+43
                 
00024d 000a      	.DW  0x0A
00024e 029d      	.DW  _0x20235
00024f 02ca      	.DW  _0x20000*2+62
                 
000250 0006      	.DW  0x06
000251 02a7      	.DW  _0x20235+10
000252 02d4      	.DW  _0x20000*2+72
                 
000253 000b      	.DW  0x0B
000254 02ad      	.DW  _0x2024C
000255 02da      	.DW  _0x20000*2+78
                 
000256 0007      	.DW  0x07
000257 02b8      	.DW  _0x2024C+11
000258 02e5      	.DW  _0x20000*2+89
                 
000259 0007      	.DW  0x07
00025a 02bf      	.DW  _0x2024C+18
00025b 02ec      	.DW  _0x20000*2+96
                 
00025c 000a      	.DW  0x0A
00025d 02c6      	.DW  _0x20251
00025e 02f3      	.DW  _0x20000*2+103
                 
00025f 0008      	.DW  0x08
000260 02d0      	.DW  _0x20252
000261 02fd      	.DW  _0x20000*2+113
                 
000262 0003      	.DW  0x03
000263 02d8      	.DW  _0x20252+8
000264 0305      	.DW  _0x20000*2+121
                 
000265 0003      	.DW  0x03
000266 02db      	.DW  _0x20252+11
000267 0308      	.DW  _0x20000*2+124
                 
000268 0003      	.DW  0x03
000269 02de      	.DW  _0x20252+14
00026a 030b      	.DW  _0x20000*2+127
                 
00026b 0003      	.DW  0x03
00026c 02e1      	.DW  _0x20252+17
00026d 030e      	.DW  _0x20000*2+130
                 
00026e 0003      	.DW  0x03
00026f 02e4      	.DW  _0x20252+20
000270 0311      	.DW  _0x20000*2+133
                 
000271 0003      	.DW  0x03
000272 02e7      	.DW  _0x20252+23
000273 0314      	.DW  _0x20000*2+136
                 
000274 0003      	.DW  0x03
000275 02ea      	.DW  _0x20252+26
000276 0317      	.DW  _0x20000*2+139
                 
000277 0003      	.DW  0x03
000278 02ed      	.DW  _0x20252+29
000279 031a      	.DW  _0x20000*2+142
                 
00027a 000c      	.DW  0x0C
00027b 02f0      	.DW  _0x20256
00027c 031d      	.DW  _0x20000*2+145
                 
00027d 000d      	.DW  0x0D
00027e 02fc      	.DW  _0x20256+12
00027f 0329      	.DW  _0x20000*2+157
                 
000280 0009      	.DW  0x09
000281 0309      	.DW  _0x202BF
000282 0336      	.DW  _0x20000*2+170
                 
000283 000d      	.DW  0x0D
000284 0312      	.DW  _0x202CB
000285 033f      	.DW  _0x20000*2+179
                 
000286 000d      	.DW  0x0D
000287 031f      	.DW  _0x202CB+13
000288 033f      	.DW  _0x20000*2+179
                 
000289 000d      	.DW  0x0D
00028a 032c      	.DW  _0x202CB+26
00028b 034c      	.DW  _0x20000*2+192
                 
00028c 000d      	.DW  0x0D
00028d 0339      	.DW  _0x202CB+39
00028e 0359      	.DW  _0x20000*2+205
                 
00028f 000d      	.DW  0x0D
000290 0346      	.DW  _0x202CB+52
000291 0366      	.DW  _0x20000*2+218
                 
000292 000d      	.DW  0x0D
000293 0353      	.DW  _0x202CB+65
000294 0373      	.DW  _0x20000*2+231
                 
000295 000d      	.DW  0x0D
000296 0360      	.DW  _0x202CB+78
000297 0380      	.DW  _0x20000*2+244
                 
000298 000d      	.DW  0x0D
000299 036d      	.DW  _0x202CB+91
00029a 038d      	.DW  _0x20000*2+257
                 
00029b 000d      	.DW  0x0D
00029c 037a      	.DW  _0x202CB+104
00029d 039a      	.DW  _0x20000*2+270
                 
00029e 000c      	.DW  0x0C
00029f 0387      	.DW  _0x202CB+117
0002a0 03a7      	.DW  _0x20000*2+283
                 
0002a1 000d      	.DW  0x0D
0002a2 0393      	.DW  _0x202CB+129
0002a3 03b3      	.DW  _0x20000*2+295
                 
0002a4 000b      	.DW  0x0B
0002a5 03a0      	.DW  _0x2030C
0002a6 0296      	.DW  _0x20000*2+10
                 
0002a7 000d      	.DW  0x0D
0002a8 03ab      	.DW  _0x2030C+11
0002a9 0329      	.DW  _0x20000*2+157
                 
0002aa 000d      	.DW  0x0D
0002ab 03b8      	.DW  _0x2030C+24
0002ac 03c0      	.DW  _0x20000*2+308
                 
0002ad 0006      	.DW  0x06
0002ae 0004      	.DW  0x04
0002af 0286      	.DW  _0x20335*2
                 
0002b0 0001      	.DW  0x01
0002b1 054e      	.DW  __seed_G105
0002b2 043a      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
0002b3 0000      	.DW  0
                 
                 __RESET:
0002b4 94f8      	CLI
0002b5 27ee      	CLR  R30
0002b6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002b7 e0f1      	LDI  R31,1
0002b8 bff5      	OUT  MCUCR,R31
0002b9 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0002ba e1f8      	LDI  R31,0x18
0002bb bdf1      	OUT  WDTCR,R31
0002bc bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0002bd e08d      	LDI  R24,(14-2)+1
0002be e0a2      	LDI  R26,2
0002bf 27bb      	CLR  R27
                 __CLEAR_REG:
0002c0 93ed      	ST   X+,R30
0002c1 958a      	DEC  R24
0002c2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002c3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002c4 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002c5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0002c6 93ed      	ST   X+,R30
0002c7 9701      	SBIW R24,1
0002c8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002c9 e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002ca e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002cb 9185      	LPM  R24,Z+
0002cc 9195      	LPM  R25,Z+
0002cd 9700      	SBIW R24,0
0002ce f061      	BREQ __GLOBAL_INI_END
0002cf 91a5      	LPM  R26,Z+
0002d0 91b5      	LPM  R27,Z+
0002d1 9005      	LPM  R0,Z+
0002d2 9015      	LPM  R1,Z+
0002d3 01bf      	MOVW R22,R30
0002d4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002d5 9005      	LPM  R0,Z+
0002d6 920d      	ST   X+,R0
0002d7 9701      	SBIW R24,1
0002d8 f7e1      	BRNE __GLOBAL_INI_LOOP
0002d9 01fb      	MOVW R30,R22
0002da cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002db e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002dc bfed      	OUT  SPL,R30
0002dd e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002de bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002df e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002e0 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002e1 940c 13d5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <nRF24L01/nRF24L01.h>
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;
                 ;#define CSN    PORTC.2
                 ;#define CE     PORTC.3
                 ;#define SCK    PORTB.7
                 ;#define MISO   PINB.6
                 ;#define MOSI   PORTB.5
                 ;//********************************************************************************
                 ;//unsigned char const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};	//
                 ;//unsigned char const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};	//
                 ;unsigned char const TX_ADDRESS[TX_ADR_WIDTH]= {0xE7,0xE7,0xE7,0xE7,0xE7};	// dia chi phat du lieu
                 
                 	.DSEG
                 ;unsigned char const RX_ADDRESS[RX_ADR_WIDTH]= {0xE7,0xE7,0xE7,0xE7,0xE7};	// dia chi nhan du lieu
                 ;//****************************************************************************************
                 ;//*NRF24L01
                 ;//***************************************************************************************/
                 ;void init_NRF24L01(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _init_NRF24L01:
                 ; 0000 0016     //init SPI
                 ; 0000 0017     SPCR=0x51; //set this to 0x50 for 1 mbits
0002e3 e5e1      	LDI  R30,LOW(81)
0002e4 b9ed      	OUT  0xD,R30
                 ; 0000 0018     SPSR=0x00;
0002e5 e0e0      	LDI  R30,LOW(0)
0002e6 b9ee      	OUT  0xE,R30
                 ; 0000 0019 
                 ; 0000 001A     //inerDelay_us(100);
                 ; 0000 001B     delay_us(100);
                +
0002e7 ec88     +LDI R24 , LOW ( 200 )
0002e8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e9 9701     +SBIW R24 , 1
0002ea f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
                 ; 0000 001C  	CE=0;    // chip enable
0002eb 98ab      	CBI  0x15,3
                 ; 0000 001D  	CSN=1;   // Spi disable
0002ec 9aaa      	SBI  0x15,2
                 ; 0000 001E  	//SCK=0;   // Spi clock line init high
                 ; 0000 001F 	SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    //
0002ed e3e0      	LDI  R30,LOW(48)
0002ee 93ea      	ST   -Y,R30
0002ef ece5      	LDI  R30,LOW(_TX_ADDRESS)
0002f0 e0f3      	LDI  R31,HIGH(_TX_ADDRESS)
0002f1 940e 1b03 	CALL SUBOPT_0x0
                 ; 0000 0020 	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); //
0002f3 e2ea      	LDI  R30,LOW(42)
0002f4 93ea      	ST   -Y,R30
0002f5 ecea      	LDI  R30,LOW(_RX_ADDRESS)
0002f6 e0f3      	LDI  R31,HIGH(_RX_ADDRESS)
0002f7 940e 1b03 	CALL SUBOPT_0x0
                 ; 0000 0021 	SPI_RW_Reg(WRITE_REG + EN_AA, 0x00);      // EN P0, 2-->P1
0002f9 e2e1      	LDI  R30,LOW(33)
0002fa 93ea      	ST   -Y,R30
0002fb e0e0      	LDI  R30,LOW(0)
0002fc 93ea      	ST   -Y,R30
0002fd d02d      	RCALL _SPI_RW_Reg
                 ; 0000 0022 	SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //Enable data P0
0002fe e2e2      	LDI  R30,LOW(34)
0002ff 93ea      	ST   -Y,R30
000300 e0e1      	LDI  R30,LOW(1)
000301 93ea      	ST   -Y,R30
000302 d028      	RCALL _SPI_RW_Reg
                 ; 0000 0023 	SPI_RW_Reg(WRITE_REG + RF_CH, 2);        // Chanel 0 RF = 2400 + RF_CH* (1or 2 M)
000303 e2e5      	LDI  R30,LOW(37)
000304 93ea      	ST   -Y,R30
000305 e0e2      	LDI  R30,LOW(2)
000306 93ea      	ST   -Y,R30
000307 d023      	RCALL _SPI_RW_Reg
                 ; 0000 0024 	SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); // Do rong data truyen 32 byte
000308 e3e1      	LDI  R30,LOW(49)
000309 93ea      	ST   -Y,R30
00030a e2e0      	LDI  R30,LOW(32)
00030b 93ea      	ST   -Y,R30
00030c d01e      	RCALL _SPI_RW_Reg
                 ; 0000 0025 	SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   		// 1M, 0dbm
00030d e2e6      	LDI  R30,LOW(38)
00030e 93ea      	ST   -Y,R30
00030f e0e7      	LDI  R30,LOW(7)
000310 93ea      	ST   -Y,R30
000311 d019      	RCALL _SPI_RW_Reg
                 ; 0000 0026 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		 // Enable CRC, 2 byte CRC, Send
000312 e2e0      	LDI  R30,LOW(32)
000313 93ea      	ST   -Y,R30
000314 e0ee      	LDI  R30,LOW(14)
000315 93ea      	ST   -Y,R30
000316 d014      	RCALL _SPI_RW_Reg
                 ; 0000 0027 
                 ; 0000 0028 }
000317 9508      	RET
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_RW(unsigned char Buff)
                 ;//NRF24L01
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_RW(unsigned char Buff)
                 ; 0000 002E {
                 _SPI_RW:
                 ; 0000 002F    return spi(Buff);
                 ;	Buff -> Y+0
000318 81e8      	LD   R30,Y
000319 93ea      	ST   -Y,R30
00031a 940e 14db 	CALL _spi
00031c 940c 0767 	JMP  _0x20C0010
                 ; 0000 0030 }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_Read(unsigned char reg)
                 ;//NRF24L01
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_Read(unsigned char reg)
                 ; 0000 0036 {
                 _SPI_Read:
                 ; 0000 0037 	unsigned char reg_val;
                 ; 0000 0038 
                 ; 0000 0039 	CSN = 0;                // CSN low, initialize SPI communication...
00031e 931a      	ST   -Y,R17
                 ;	reg -> Y+1
                 ;	reg_val -> R17
00031f 98aa      	CBI  0x15,2
                 ; 0000 003A 	SPI_RW(reg);            // Select register to read from..
000320 81e9      	LDD  R30,Y+1
000321 93ea      	ST   -Y,R30
000322 dff5      	RCALL _SPI_RW
                 ; 0000 003B 	reg_val = SPI_RW(0);    // ..then read registervalue
000323 e0e0      	LDI  R30,LOW(0)
000324 940e 1b0b 	CALL SUBOPT_0x1
                 ; 0000 003C 	CSN = 1;                // CSN high, terminate SPI communication
000326 9aaa      	SBI  0x15,2
                 ; 0000 003D 
                 ; 0000 003E 	return(reg_val);        // return register value
000327 2fe1      	MOV  R30,R17
000328 8118      	LDD  R17,Y+0
000329 940c 066e 	JMP  _0x20C0011
                 ; 0000 003F }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
                 ; 0000 0044 {
                 _SPI_RW_Reg:
                 ; 0000 0045 	unsigned char status;
                 ; 0000 0046 
                 ; 0000 0047 	CSN = 0;                   // CSN low, init SPI transaction
00032b 931a      	ST   -Y,R17
                 ;	reg -> Y+2
                 ;	value -> Y+1
                 ;	status -> R17
00032c 98aa      	CBI  0x15,2
                 ; 0000 0048 	status = SPI_RW(reg);      // select register
00032d 81ea      	LDD  R30,Y+2
00032e 940e 1b0b 	CALL SUBOPT_0x1
                 ; 0000 0049 	SPI_RW(value);             // ..and write value to it..
000330 81e9      	LDD  R30,Y+1
000331 93ea      	ST   -Y,R30
000332 dfe5      	RCALL _SPI_RW
                 ; 0000 004A 	CSN = 1;                   // CSN high again
000333 9aaa      	SBI  0x15,2
                 ; 0000 004B 
                 ; 0000 004C 	return(status);            // return nRF24L01 status uchar
000334 2fe1      	MOV  R30,R17
000335 8118      	LDD  R17,Y+0
000336 c2ad      	RJMP _0x20C0015
                 ; 0000 004D }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
                 ;//
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
                 ; 0000 0053 {
                 _SPI_Read_Buf:
                 ; 0000 0054 	unsigned char status,uchar_ctr;
                 ; 0000 0055 
                 ; 0000 0056 	CSN = 0;                    		// Set CSN low, init SPI tranaction
000337 931a      	ST   -Y,R17
000338 930a      	ST   -Y,R16
                 ;	reg -> Y+5
                 ;	*pBuf -> Y+3
                 ;	uchars -> Y+2
                 ;	status -> R17
                 ;	uchar_ctr -> R16
000339 98aa      	CBI  0x15,2
                 ; 0000 0057 	status = SPI_RW(reg);       		// Select register to write to and read status uchar
00033a 81ed      	LDD  R30,Y+5
00033b 940e 1b0b 	CALL SUBOPT_0x1
                 ; 0000 0058 
                 ; 0000 0059 	for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
00033d e000      	LDI  R16,LOW(0)
                 _0x14:
00033e 81ea      	LDD  R30,Y+2
00033f 170e      	CP   R16,R30
000340 f480      	BRSH _0x15
                 ; 0000 005A 		pBuf[uchar_ctr] = SPI_RW(0);    //
000341 2fe0      	MOV  R30,R16
000342 81ab      	LDD  R26,Y+3
000343 81bc      	LDD  R27,Y+3+1
000344 e0f0      	LDI  R31,0
000345 0fea      	ADD  R30,R26
000346 1ffb      	ADC  R31,R27
000347 93ff      	PUSH R31
000348 93ef      	PUSH R30
000349 e0e0      	LDI  R30,LOW(0)
00034a 93ea      	ST   -Y,R30
00034b dfcc      	RCALL _SPI_RW
00034c 91af      	POP  R26
00034d 91bf      	POP  R27
00034e 93ec      	ST   X,R30
00034f 5f0f      	SUBI R16,-1
000350 cfed      	RJMP _0x14
                 _0x15:
                 ; 0000 005C PORTC.2 = 1;
000351 9aaa      	SBI  0x15,2
                 ; 0000 005D 
                 ; 0000 005E 	return(status);                    // return nRF24L01 status uchar
000352 2fe1      	MOV  R30,R17
000353 8119      	LDD  R17,Y+1
000354 8108      	LDD  R16,Y+0
000355 9626      	ADIW R28,6
000356 9508      	RET
                 ; 0000 005F }
                 ;/*********************************************************************************************************/
                 ;//uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
                 ;/*****************************************************************************************************/
                 ;unsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned uchars)
                 ; 0000 0064 {
                 _SPI_Write_Buf:
                 ; 0000 0065 	unsigned char status,uchar_ctr;
                 ; 0000 0066 	CSN = 0;            //SPI
000357 931a      	ST   -Y,R17
000358 930a      	ST   -Y,R16
                 ;	reg -> Y+6
                 ;	*pBuf -> Y+4
                 ;	uchars -> Y+2
                 ;	status -> R17
                 ;	uchar_ctr -> R16
000359 98aa      	CBI  0x15,2
                 ; 0000 0067 	status = SPI_RW(reg);
00035a 81ee      	LDD  R30,Y+6
00035b 940e 1b0b 	CALL SUBOPT_0x1
                 ; 0000 0068 	for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
00035d e000      	LDI  R16,LOW(0)
                 _0x1B:
00035e 81ea      	LDD  R30,Y+2
00035f 81fb      	LDD  R31,Y+2+1
000360 2fa0      	MOV  R26,R16
000361 e0b0      	LDI  R27,0
000362 17ae      	CP   R26,R30
000363 07bf      	CPC  R27,R31
000364 f448      	BRSH _0x1C
                 ; 0000 0069 	SPI_RW(*pBuf++);
000365 81ac      	LDD  R26,Y+4
000366 81bd      	LDD  R27,Y+4+1
000367 91ed      	LD   R30,X+
000368 83ac      	STD  Y+4,R26
000369 83bd      	STD  Y+4+1,R27
00036a 93ea      	ST   -Y,R30
00036b dfac      	RCALL _SPI_RW
00036c 5f0f      	SUBI R16,-1
00036d cff0      	RJMP _0x1B
                 _0x1C:
                 ; 0000 006A PORTC.2 = 1;
00036e 9aaa      	SBI  0x15,2
                 ; 0000 006B 	return(status);    //
00036f 2fe1      	MOV  R30,R17
000370 8119      	LDD  R17,Y+1
000371 8108      	LDD  R16,Y+0
000372 9627      	ADIW R28,7
000373 9508      	RET
                 ; 0000 006C }
                 ;/****************************************************************************************************/
                 ;//void SetRX_Mode(void)
                 ;//
                 ;/****************************************************************************************************/
                 ;void SetRX_Mode(void)
                 ; 0000 0072 {
                 _SetRX_Mode:
                 ; 0000 0073 	CE=0;
000374 98ab      	CBI  0x15,3
                 ; 0000 0074 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x07);   		// enable power up and prx
000375 e2e0      	LDI  R30,LOW(32)
000376 93ea      	ST   -Y,R30
000377 e0e7      	LDI  R30,LOW(7)
000378 93ea      	ST   -Y,R30
000379 dfb1      	RCALL _SPI_RW_Reg
                 ; 0000 0075 	CE = 1;
00037a 9aab      	SBI  0x15,3
                 ; 0000 0076 	delay_us(130);    //
                +
00037b e084     +LDI R24 , LOW ( 260 )
00037c e091     +LDI R25 , HIGH ( 260 )
                +__DELAY_USW_LOOP :
00037d 9701     +SBIW R24 , 1
00037e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 260
                 ; 0000 0077 }
00037f 9508      	RET
                 ;/****************************************************************************************************/
                 ;//void SetTX_Mode(void)
                 ;//
                 ;/****************************************************************************************************/
                 ;void SetTX_Mode(void)
                 ; 0000 007D {
                 ; 0000 007E 	CE=0;
                 ; 0000 007F 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		// Enable CRC, 2 byte CRC, Send
                 ; 0000 0080 	CE = 1;
                 ; 0000 0081 	delay_us(130);    //
                 ; 0000 0082 }
                 ;
                 ;/******************************************************************************************************/
                 ;//unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
                 ;/******************************************************************************************************/
                 ;unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
                 ; 0000 0088 {
                 _nRF24L01_RxPacket:
                 ; 0000 0089     unsigned char revale=0;
                 ; 0000 008A     unsigned char sta;
                 ; 0000 008B 	sta=SPI_Read(STATUS);	// Read Status
000380 931a      	ST   -Y,R17
000381 930a      	ST   -Y,R16
                 ;	*rx_buf -> Y+2
                 ;	revale -> R17
                 ;	sta -> R16
000382 e010      	LDI  R17,0
000383 e0e7      	LDI  R30,LOW(7)
000384 93ea      	ST   -Y,R30
000385 df98      	RCALL _SPI_Read
000386 2f0e      	MOV  R16,R30
                 ; 0000 008C 	//if(RX_DR)				// Data in RX FIFO
                 ; 0000 008D     if((sta&0x40)!=0)		// Data in RX FIFO
000387 ff06      	SBRS R16,6
000388 c00b      	RJMP _0x27
                 ; 0000 008E 	{
                 ; 0000 008F 	    CE = 0; 			//SPI
000389 98ab      	CBI  0x15,3
                 ; 0000 0090 		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
00038a e6e1      	LDI  R30,LOW(97)
00038b 93ea      	ST   -Y,R30
00038c 81eb      	LDD  R30,Y+3
00038d 81fc      	LDD  R31,Y+3+1
00038e 93fa      	ST   -Y,R31
00038f 93ea      	ST   -Y,R30
000390 e2e0      	LDI  R30,LOW(32)
000391 93ea      	ST   -Y,R30
000392 dfa4      	RCALL _SPI_Read_Buf
                 ; 0000 0091 		revale =1;
000393 e011      	LDI  R17,LOW(1)
                 ; 0000 0092 	}
                 ; 0000 0093 	SPI_RW_Reg(WRITE_REG+STATUS,sta);
                 _0x27:
000394 e2e7      	LDI  R30,LOW(39)
000395 93ea      	ST   -Y,R30
000396 930a      	ST   -Y,R16
000397 df93      	RCALL _SPI_RW_Reg
                 ; 0000 0094     CE = 1; 			//SPI
000398 9aab      	SBI  0x15,3
                 ; 0000 0095 	return revale;
000399 2fe1      	MOV  R30,R17
00039a 8119      	LDD  R17,Y+1
00039b 8108      	LDD  R16,Y+0
00039c c229      	RJMP _0x20C0016
                 ; 0000 0096 }
                 ;/***********************************************************************************************************/
                 ;//void nRF24L01_TxPacket(unsigned char * tx_buf)
                 ;//
                 ;/**********************************************************************************************************/
                 ;void nRF24L01_TxPacket(unsigned char * tx_buf)
                 ; 0000 009C {
                 ; 0000 009D 	CE=0;
                 ;	*tx_buf -> Y+0
                 ; 0000 009E 	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Send Address
                 ; 0000 009F 	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 //send data
                 ; 0000 00A0 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		 // Send Out
                 ; 0000 00A1 	CE=1;
                 ; 0000 00A2 }
                 ;
                 ;// --------------------END OF FILE------------------------
                 ;// -------------------------------------------------------
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Evaluation
                 ;Automatic Program Generator
                 ;� Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 6/4/2015
                 ;Author  : Freeware, for evaluation and non-commercial use only
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;#include <nRF24L01/nRF24L01.h>
                 ;#include <math.h>
                 ;
                 ;/* Debug mode definition */
                 ;#define DEBUG_MODE 1    // USE OUR CODE, ask Phat for more details
                 ;#define DEBUG_EN 1      // Blue tooth mode
                 ;
                 ;/* PIN DEFINITION */
                 ;// PIN LED ROBO KIT
                 ;
                 ;//Hung comment a xamlin thing
                 ;
                 ;#define LEDL	PORTC.4
                 ;#define LEDR	PORTC.5
                 ;#define LEDFL   PORTA.4
                 ;#define LEDFR   PORTA.5
                 ;#define LEDBL   PORTA.6
                 ;#define LEDBR   PORTA.7
                 ;#define keyKT   PINC.0 // Nut ben trai
                 ;#define keyKP   PINC.1 // Nut ben phai
                 ;#define S0  PINA.0
                 ;#define S1  PINA.1
                 ;#define S2  PINA.2
                 ;#define S3  PINA.3
                 ;#define S4  PINA.7
                 ;#define MLdir   PORTC.6
                 ;#define MRdir   PORTC.7
                 ;// PIN NOKIA 5110
                 ;#define RST    PORTB.0
                 ;#define SCE    PORTB.1
                 ;#define DC     PORTB.2
                 ;#define DIN    PORTB.5
                 ;#define SCK    PORTB.7
                 ;#define LCD_C     0
                 ;#define LCD_D     1
                 ;#define LCD_X     84
                 ;#define LCD_Y     48
                 ;#define Black 1
                 ;#define White 0
                 ;#define Filled 1
                 ;#define NotFilled 0
                 ;// VARIABLES FOR ROBOT CONTROL
                 ;#define CtrVelocity    //uncomment de chon chay pid dieu khien van toc, va su dung cac ham vMLtoi,vMLlui,....
                 ;#define ROBOT_ID 4
                 ;#define SAN_ID 1  //CHON HUONG TAN CONG LA X >0;
                 ;#define M_PI    3.14159265358979323846    /* pi */
                 ;
                 ;typedef   signed          char int8_t;
                 ;typedef   signed           int int16_t;
                 ;typedef   signed  long    int int32_t;
                 ;typedef   unsigned         char uint8_t;
                 ;typedef   unsigned        int  uint16_t;
                 ;typedef   unsigned long    int  uint32_t;
                 ;typedef   float            float32_t;
                 ;typedef struct   {
                 ;	float x;
                 ;	float y;
                 ;} Ball;
                 ;typedef struct {
                 ;	int x;
                 ;	int y;
                 ;} IntBall;
                 ;typedef struct   {
                 ;	float id;
                 ;	float x;
                 ;	float y;
                 ;	float ox;
                 ;	float oy;
                 ;	Ball ball;
                 ;} Robot;
                 ;typedef struct {
                 ;	int id;
                 ;	int x;
                 ;	int y;
                 ;	int ox;
                 ;	int oy;
                 ;	IntBall ball;
                 ;} IntRobot;
                 ;
                 ;// Nguyen move here
                 ;
                 ;#ifdef DEBUG_EN
                 ;char debugMsgBuff[32];
                 ;#endif
                 ;void debug_out(char *pMsg, unsigned char len)
                 ; 0001 0073 {
                 
                 	.CSEG
                 _debug_out:
                 ; 0001 0074 #ifdef DEBUG_EN
                 ; 0001 0075 	char i = 0;
                 ; 0001 0076 	for (i = 0; i < len; i++)
00039d 931a      	ST   -Y,R17
                 ;	*pMsg -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
00039e e010      	LDI  R17,0
00039f e010      	LDI  R17,LOW(0)
                 _0x20004:
0003a0 81e9      	LDD  R30,Y+1
0003a1 171e      	CP   R17,R30
0003a2 f468      	BRSH _0x20005
                 ; 0001 0077 	{
                 ; 0001 0078 		putchar(*pMsg++);
0003a3 81aa      	LDD  R26,Y+2
0003a4 81bb      	LDD  R27,Y+2+1
0003a5 91ed      	LD   R30,X+
0003a6 83aa      	STD  Y+2,R26
0003a7 83bb      	STD  Y+2+1,R27
0003a8 93ea      	ST   -Y,R30
0003a9 d349      	RCALL _putchar
                 ; 0001 0079 		delay_us(300);
                +
0003aa e588     +LDI R24 , LOW ( 600 )
0003ab e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
0003ac 9701     +SBIW R24 , 1
0003ad f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 007A 	}
0003ae 5f1f      	SUBI R17,-1
0003af cff0      	RJMP _0x20004
                 _0x20005:
                 ; 0001 007B #endif
                 ; 0001 007C 	return;
0003b0 8118      	LDD  R17,Y+0
0003b1 c214      	RJMP _0x20C0016
                 ; 0001 007D }
                 ;
                 ;// FUNCTION DECLARATION
                 ;IntRobot convertRobot2IntRobot(Robot robot);
                 ;unsigned char readposition();
                 ;void runEscBlindSpot();
                 ;void ctrrobot();// can phai luon luon chay de dieu khien robot
                 ;void rb_move(float x, float y);
                 ;int rb_wait(unsigned long int time);
                 ;void rb_rotate(int angle);     // goc xoay so voi truc x cua toa do
                 ;void calcvitri(float x, float y);
                 ;int calcVangle(int angle);
                 ;
                 ;// VARIABLES DECLARATION
                 ;Robot rb;
                 ;IntRobot robot11, robot12, robot13, robot21, robot22, robot23, robotctrl;
                 ;float errangle = 0, distance = 0, orientation = 0;
                 ;int flagtancong = 1;
                 ;int offsetphongthu = 0;
                 ;int goctancong = 0;
                 ;unsigned char RxBuf[32];
                 ;float setRobotX = 0;
                 ;float setRobotY = 0;
                 ;float setRobotXmin = 0;
                 ;float setRobotXmax = 0;
                 ;float setRobotAngleX = 0;
                 ;float setRobotAngleY = 0;
                 ;float offestsanco = 0;
                 ;float rbctrlHomeX = 0;
                 ;float rbctrlHomeY = 0;
                 ;float rbctrlPenaltyX = 0;
                 ;float rbctrlPenaltyY = 0;
                 ;float rbctrlPenaltyAngle = 0;
                 ;float rbctrlHomeAngle = 0;
                 ;unsigned int cmdCtrlRobot, idRobot;
                 ;unsigned int cntsethomeRB = 0;
                 ;unsigned int cntstuckRB = 0;
                 ;unsigned int cntunlookRB = 0;
                 ;unsigned int flagunlookRB = 0;
                 ;unsigned int cntunsignalRF = 0;
                 ;unsigned int flagunsignalRF = 0;
                 ;unsigned int flagsethome = 0;
                 ;unsigned int flagselftest = 0;
                 ;unsigned int cntselftest = 0;
                 ;int leftSpeed = 0;
                 ;int rightSpeed = 0;
                 ;
                 ;//======USER VARIABLES=========
                 ;unsigned char id = 1;
                 
                 	.DSEG
                 ;//======IR READER VARIABLES====
                 ;unsigned int IRFL = 0;
                 ;unsigned int IRFR = 0;
                 ;unsigned int IRBL = 0;
                 ;unsigned int IRLINE[5];
                 ;//======MOTOR CONTROL========
                 ;//------VELOCITY CONTROL=====
                 ;unsigned int timerstick = 0, timerstickdis = 0, timerstickang = 0, timerstickctr = 0;
                 ;unsigned int vQEL = 0;  //do (xung/250ms)
                 ;unsigned int vQER = 0;  //do (xung/250ms)
                 ;unsigned int oldQEL = 0;
                 ;unsigned int oldQER = 0;
                 ;unsigned int svQEL = 0;  //dat (xung/250ms) (range: 0-22)
                 ;unsigned int svQER = 0;  //dat (xung/250ms) (range: 0-22)
                 ;static int seRki = 0, seLki = 0;
                 ;int uL = 0;
                 ;int uR = 0;
                 ;int KpR = 10;
                 ;int KiR = 1;
                 ;int KpL = 10;
                 ;int KiL = 1;
                 ;#define LDIVR 1
                 ;
                 ;// Robot Control Algorithm
                 ;// The idea is simple. There are two vectors: robot direction (vrb) and robot to target (vdes).
                 ;// The vector vrb will rotate at an  angle of 'delta' which is equal to the  angle between 2 vectors.
                 ;// So that two vectors will be on a same line and the robot can reach its destination.
                 ;// However, in order to achieve robot's arrival with desired orientation, a new vector (vgoal), which
                 ;// shows the desired orientation, is introduced and added to vrb before the rotation.
                 ;
                 ;// Return the absolute value
                 ;int absolute(int a) {
                 ; 0001 00CD int absolute(int a) {
                 
                 	.CSEG
                 _absolute:
                 ; 0001 00CE 	if (a > 0) return a;
                 ;	a -> Y+0
0003b2 81a8      	LD   R26,Y
0003b3 81b9      	LDD  R27,Y+1
0003b4 940e 23af 	CALL __CPW02
0003b6 f41c      	BRGE _0x2000B
0003b7 81e8      	LD   R30,Y
0003b8 81f9      	LDD  R31,Y+1
0003b9 c2b4      	RJMP _0x20C0011
                 ; 0001 00CF 	return (-a);
                 _0x2000B:
0003ba 81e8      	LD   R30,Y
0003bb 81f9      	LDD  R31,Y+1
0003bc 940e 227a 	CALL __ANEGW1
0003be c2af      	RJMP _0x20C0011
                 ; 0001 00D0 }
                 ;
                 ;float fabsolute(float a) {
                 ; 0001 00D2 float fabsolute(float a) {
                 ; 0001 00D3 	if (a > 0) return a;
                 ;	a -> Y+0
                 ; 0001 00D4 	return (-a);
                 ; 0001 00D5 }
                 ;float min3(float a, float b, float c){
                 ; 0001 00D6 float min3(float a, float b, float c){
                 _min3:
                 ; 0001 00D7 	float m = a;
                 ; 0001 00D8 	if (m > b) m = b;
0003bf 940e 1b10 	CALL SUBOPT_0x2
                 ;	a -> Y+12
                 ;	b -> Y+8
                 ;	c -> Y+4
                 ;	m -> Y+0
0003c1 f009      	BREQ PC+2
0003c2 f410      	BRCC PC+3
0003c3 940c 03c7 	JMP  _0x2000D
0003c5 940e 1b20 	CALL SUBOPT_0x3
                 ; 0001 00D9 	if (m > c) m = c;
                 _0x2000D:
0003c7 940e 1b27 	CALL SUBOPT_0x4
0003c9 940e 1b2c 	CALL SUBOPT_0x5
0003cb f009      	BREQ PC+2
0003cc f410      	BRCC PC+3
0003cd 940c 03d1 	JMP  _0x2000E
0003cf 940e 1b31 	CALL SUBOPT_0x6
                 ; 0001 00DA 	return m;
                 _0x2000E:
0003d1 c00c      	RJMP _0x20C0017
                 ; 0001 00DB }
                 ;float max3(float a, float b, float c){
                 ; 0001 00DC float max3(float a, float b, float c){
                 _max3:
                 ; 0001 00DD 	float m = a;
                 ; 0001 00DE 	if (m < b) m = b;
0003d2 940e 1b10 	CALL SUBOPT_0x2
                 ;	a -> Y+12
                 ;	b -> Y+8
                 ;	c -> Y+4
                 ;	m -> Y+0
0003d4 f410      	BRSH _0x2000F
0003d5 940e 1b20 	CALL SUBOPT_0x3
                 ; 0001 00DF 	if (m < c) m = c;
                 _0x2000F:
0003d7 940e 1b27 	CALL SUBOPT_0x4
0003d9 940e 1b2c 	CALL SUBOPT_0x5
0003db f410      	BRSH _0x20010
0003dc 940e 1b31 	CALL SUBOPT_0x6
                 ; 0001 00E0 	return m;
                 _0x20010:
                 _0x20C0017:
0003de 940e 236d 	CALL __GETD1S0
0003e0 9660      	ADIW R28,16
0003e1 9508      	RET
                 ; 0001 00E1 }
                 ;
                 ;void setSpeed(int leftSpeed, int rightSpeed) {
                 ; 0001 00E3 void setSpeed(int leftSpeed, int rightSpeed) {
                 _setSpeed:
                 ; 0001 00E4 	// Reset I of both wheel
                 ; 0001 00E5 	seRki = 0;//reset thanh phan I
                 ;	leftSpeed -> Y+2
                 ;	rightSpeed -> Y+0
0003e2 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 00E6 	seLki = 0;//reset thanh phan I
                 ; 0001 00E7 
                 ; 0001 00E8 	// Left speed control
                 ; 0001 00E9 	if (leftSpeed > 0) { // forward
0003e4 81aa      	LDD  R26,Y+2
0003e5 81bb      	LDD  R27,Y+2+1
0003e6 940e 23af 	CALL __CPW02
0003e8 f414      	BRGE _0x20011
                 ; 0001 00EA 		MLdir = 1;
0003e9 9aae      	SBI  0x15,6
                 ; 0001 00EB 	}
                 ; 0001 00EC 	else {
0003ea c007      	RJMP _0x20014
                 _0x20011:
                 ; 0001 00ED 		MLdir = 0;
0003eb 98ae      	CBI  0x15,6
                 ; 0001 00EE 		leftSpeed = -leftSpeed;
0003ec 81ea      	LDD  R30,Y+2
0003ed 81fb      	LDD  R31,Y+2+1
0003ee 940e 227a 	CALL __ANEGW1
0003f0 83ea      	STD  Y+2,R30
0003f1 83fb      	STD  Y+2+1,R31
                 ; 0001 00EF 	}
                 _0x20014:
                 ; 0001 00F0 	svQEL = leftSpeed; // Don't know this
0003f2 81ea      	LDD  R30,Y+2
0003f3 81fb      	LDD  R31,Y+2+1
0003f4 940e 1b3f 	CALL SUBOPT_0x8
                 ; 0001 00F1 
                 ; 0001 00F2 	// Right speed control
                 ; 0001 00F3 	if (rightSpeed > 0) { // forward
0003f6 81a8      	LD   R26,Y
0003f7 81b9      	LDD  R27,Y+1
0003f8 940e 23af 	CALL __CPW02
0003fa f414      	BRGE _0x20017
                 ; 0001 00F4 		MRdir = 1;
0003fb 9aaf      	SBI  0x15,7
                 ; 0001 00F5 	}
                 ; 0001 00F6 	else {
0003fc c007      	RJMP _0x2001A
                 _0x20017:
                 ; 0001 00F7 		MRdir = 0;
0003fd 98af      	CBI  0x15,7
                 ; 0001 00F8 		rightSpeed = -rightSpeed;
0003fe 81e8      	LD   R30,Y
0003ff 81f9      	LDD  R31,Y+1
000400 940e 227a 	CALL __ANEGW1
000402 83e8      	ST   Y,R30
000403 83f9      	STD  Y+1,R31
                 ; 0001 00F9 	}
                 _0x2001A:
                 ; 0001 00FA 	svQER = rightSpeed;
000404 81e8      	LD   R30,Y
000405 81f9      	LDD  R31,Y+1
000406 93e0 04fe 	STS  _svQER,R30
000408 93f0 04ff 	STS  _svQER+1,R31
                 ; 0001 00FB }
00040a c1bb      	RJMP _0x20C0016
                 ;
                 ;/* For Dat */
                 ;#define VBASE 15
                 ;#define KMOVE 25
                 ;
                 ;int map(int x, int in_min, int in_max, int out_min, int out_max)
                 ; 0001 0102 {
                 _map:
                 ; 0001 0103   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
                 ;	x -> Y+8
                 ;	in_min -> Y+6
                 ;	in_max -> Y+4
                 ;	out_min -> Y+2
                 ;	out_max -> Y+0
00040b 81ae      	LDD  R26,Y+6
00040c 81bf      	LDD  R27,Y+6+1
00040d 85e8      	LDD  R30,Y+8
00040e 85f9      	LDD  R31,Y+8+1
00040f 1bea      	SUB  R30,R26
000410 0bfb      	SBC  R31,R27
000411 010f      	MOVW R0,R30
000412 81aa      	LDD  R26,Y+2
000413 81bb      	LDD  R27,Y+2+1
000414 81e8      	LD   R30,Y
000415 81f9      	LDD  R31,Y+1
000416 1bea      	SUB  R30,R26
000417 0bfb      	SBC  R31,R27
000418 01d0      	MOVW R26,R0
000419 940e 22c4 	CALL __MULW12
00041b 010f      	MOVW R0,R30
00041c 81ae      	LDD  R26,Y+6
00041d 81bf      	LDD  R27,Y+6+1
00041e 81ec      	LDD  R30,Y+4
00041f 81fd      	LDD  R31,Y+4+1
000420 1bea      	SUB  R30,R26
000421 0bfb      	SBC  R31,R27
000422 01d0      	MOVW R26,R0
000423 940e 22f4 	CALL __DIVW21
000425 81aa      	LDD  R26,Y+2
000426 81bb      	LDD  R27,Y+2+1
000427 0fea      	ADD  R30,R26
000428 1ffb      	ADC  R31,R27
000429 962a      	ADIW R28,10
00042a 9508      	RET
                 ; 0001 0104 }
                 ;void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
                 ; 0001 0105 void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
                 ; 0001 0106 
                 ; 0001 0107 	int vx_des, vy_des, vx_goal, vy_goal;                    // vdes & vgoal coordinates
                 ; 0001 0108 	int rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
                 ; 0001 0109 	int rotation_angle;                           // this is needed to calculate motor velocity
                 ; 0001 010A 	int minimum, maximum;                       //  this is needed to check whether vector a is between vector b and c
                 ; 0001 010B 	int wl, wr;
                 ; 0001 010C 	int vx_rb, vy_rb;
                 ; 0001 010D 
                 ; 0001 010E 	vx_des = x_des - robotctrl.x;            // vdes calculation
                 ;	x_des -> Y+37
                 ;	y_des -> Y+35
                 ;	x_goal -> Y+33
                 ;	y_goal -> Y+31
                 ;	mode -> Y+30
                 ;	vx_des -> R16,R17
                 ;	vy_des -> R18,R19
                 ;	vx_goal -> R20,R21
                 ;	vy_goal -> Y+28
                 ;	rb_angle -> Y+26
                 ;	des_angle -> Y+24
                 ;	goal_angle -> Y+22
                 ;	new_angle -> Y+20
                 ;	rotation_angle -> Y+18
                 ;	minimum -> Y+16
                 ;	maximum -> Y+14
                 ;	wl -> Y+12
                 ;	wr -> Y+10
                 ;	vx_rb -> Y+8
                 ;	vy_rb -> Y+6
                 ; 0001 010F 	vy_des = y_des - robotctrl.y;
                 ; 0001 0110 
                 ; 0001 0111 	vx_goal = x_goal - x_des;            //vgoal calculation
                 ; 0001 0112 	vy_goal = y_goal - y_des;
                 ; 0001 0113 
                 ; 0001 0114 	// Conversion to unit vector
                 ; 0001 0115 	if (x_goal == 0)
                 ; 0001 0116 		y_goal = y_goal / absolute(y_goal);
                 ; 0001 0117 	else if (y_goal == 0)
                 ; 0001 0118 		x_goal = x_goal / absolute(x_goal);
                 ; 0001 0119 	else {
                 ; 0001 011A 		y_goal = y_goal / absolute(x_goal);
                 ; 0001 011B 		x_goal = x_goal / absolute(x_goal);
                 ; 0001 011C 	}
                 ; 0001 011D 
                 ; 0001 011E 	// Angle calculation
                 ; 0001 011F 	goal_angle = atan2(vy_goal, vx_goal);
                 ; 0001 0120 	rb_angle = atan2(robotctrl.ox, robotctrl.oy);			// done
                 ; 0001 0121 	des_angle = atan2(vy_des, vx_des);
                 ; 0001 0122 
                 ; 0001 0123 	// Adding vgoal to vrb
                 ; 0001 0124 	// NEED TESTING
                 ; 0001 0125 	vx_rb = robotctrl.ox + vx_goal;
                 ; 0001 0126 	vy_rb = robotctrl.oy + vy_goal;
                 ; 0001 0127 
                 ; 0001 0128 	new_angle = atan2(vx_rb, vy_rb);
                 ; 0001 0129 	rotation_angle = new_angle - des_angle;
                 ; 0001 012A 
                 ; 0001 012B 	//  *rotation_angle > 180* counter-measure
                 ; 0001 012C 	if (rotation_angle < -PI) {
                 ; 0001 012D 		rotation_angle = 2 * PI + rotation_angle;
                 ; 0001 012E 		if (new_angle > des_angle)
                 ; 0001 012F 			rotation_angle = -rotation_angle;
                 ; 0001 0130 	}
                 ; 0001 0131 
                 ; 0001 0132 	if (rotation_angle > PI) {
                 ; 0001 0133 		rotation_angle = 2 * PI - rotation_angle;
                 ; 0001 0134 		if (new_angle > des_angle)
                 ; 0001 0135 			rotation_angle = -rotation_angle;
                 ; 0001 0136 	}
                 ; 0001 0137 
                 ; 0001 0138 	// *Spiral* counter-measure: Spiral happens when vdes is between the new vector and vrb
                 ; 0001 0139 	minimum = min3(rb_angle, des_angle, new_angle);
                 ; 0001 013A 	maximum = max3(rb_angle, des_angle, new_angle);
                 ; 0001 013B 
                 ; 0001 013C 	if (absolute(rb_angle - new_angle) > PI) {
                 ; 0001 013D 		if (des_angle == maximum || des_angle == minimum)
                 ; 0001 013E 			rotation_angle = rotation_angle / 15;
                 ; 0001 013F 		else if (minimum < des_angle && des_angle < maximum)
                 ; 0001 0140 			rotation_angle = rotation_angle / 15;
                 ; 0001 0141 	}
                 ; 0001 0142 
                 ; 0001 0143 	// Motor speed calculation
                 ; 0001 0144 	switch (mode) {
                 ; 0001 0145 	case 'f': // Going forward
                 ; 0001 0146 		wl = 30 + rotation_angle * 50;
                 ; 0001 0147 		wr = 30 - rotation_angle * 50;
                 ; 0001 0148 		break;
                 ; 0001 0149 	case 'b': // Going backward
                 ; 0001 014A 		rotation_angle = -rotation_angle;
                 ; 0001 014B 		wl = 30 - rotation_angle * 50;
                 ; 0001 014C 		wr = 30 + rotation_angle * 50;
                 ; 0001 014D 		break;
                 ; 0001 014E 	}
                 ; 0001 014F 
                 ; 0001 0150 	// Set the speed immediately
                 ; 0001 0151 	leftSpeed = wl;
                 ; 0001 0152 	rightSpeed = wr;
                 ; 0001 0153 }
                 ;//DAT
                 ;int xrb_last=0;
                 ;int yrb_last=0;
                 ;float angle_last = 0;
                 ;
                 ;#define V_THRESHOLD 10
                 ;
                 ;float get_angle(){
                 ; 0001 015B float get_angle(){
                 ; 0001 015C 	int vx, vy;
                 ; 0001 015D 	vx = (robotctrl.x - xrb_last);
                 ;	vx -> R16,R17
                 ;	vy -> R18,R19
                 ; 0001 015E 	vy = (robotctrl.y - yrb_last);
                 ; 0001 015F 	if ((fabsolute(vx) > V_THRESHOLD) || (fabsolute(vy) > V_THRESHOLD)) {
                 ; 0001 0160 		xrb_last = robotctrl.x;
                 ; 0001 0161 		yrb_last = robotctrl.y;
                 ; 0001 0162 		angle_last = atan2(vy, vx);
                 ; 0001 0163 	}
                 ; 0001 0164 	return angle_last;
                 ; 0001 0165 }
                 ;void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
                 ; 0001 0166 void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
                 _movePoint:
                 ; 0001 0167 
                 ; 0001 0168 	int vx_des, vy_des, vx_goal, vy_goal;	                // vdes & vgoal coordinates
                 ; 0001 0169 	float rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
                 ; 0001 016A 	int rotation_angle;
                 ; 0001 016B 	int minimum, maximum;
                 ; 0001 016C 	int wl, wr;
                 ; 0001 016D 	int vx_rb, vy_rb;
                 ; 0001 016E 	int dirx, diry;
                 ; 0001 016F 
                 ; 0001 0170 	vx_des = x_des - rbctrl.x;			// vdes calculation
00042b 97a4      	SBIW R28,36
00042c 940e 23be 	CALL __SAVELOCR6
                 ;	rbctrl -> Y+49
                 ;	x_des -> Y+47
                 ;	y_des -> Y+45
                 ;	angle -> Y+43
                 ;	mode -> Y+42
                 ;	vx_des -> R16,R17
                 ;	vy_des -> R18,R19
                 ;	vx_goal -> R20,R21
                 ;	vy_goal -> Y+40
                 ;	rb_angle -> Y+36
                 ;	des_angle -> Y+32
                 ;	goal_angle -> Y+28
                 ;	new_angle -> Y+24
                 ;	rotation_angle -> Y+22
                 ;	minimum -> Y+20
                 ;	maximum -> Y+18
                 ;	wl -> Y+16
                 ;	wr -> Y+14
                 ;	vx_rb -> Y+12
                 ;	vy_rb -> Y+10
                 ;	dirx -> Y+8
                 ;	diry -> Y+6
00042e a9ab      	LDD  R26,Y+51
00042f a9bc      	LDD  R27,Y+51+1
000430 a5ef      	LDD  R30,Y+47
000431 a9f8      	LDD  R31,Y+47+1
000432 1bea      	SUB  R30,R26
000433 0bfb      	SBC  R31,R27
000434 018f      	MOVW R16,R30
                 ; 0001 0171 	vy_des = y_des - rbctrl.y;
000435 a9ad      	LDD  R26,Y+53
000436 a9be      	LDD  R27,Y+53+1
000437 a5ed      	LDD  R30,Y+45
000438 a5fe      	LDD  R31,Y+45+1
000439 1bea      	SUB  R30,R26
00043a 0bfb      	SBC  R31,R27
00043b 019f      	MOVW R18,R30
                 ; 0001 0172 
                 ; 0001 0173 //	dirx = robotctrl.ox - robotctrl.x;
                 ; 0001 0174 //	diry = robotctrl.oy - robotctrl.y;
                 ; 0001 0175 
                 ; 0001 0176 	switch (angle) { // vgoal calculation
00043c a5eb      	LDD  R30,Y+43
00043d a5fc      	LDD  R31,Y+43+1
                 ; 0001 0177 	case 0: 	vx_goal = 1; vy_goal = 0; break;
00043e 9730      	SBIW R30,0
00043f f431      	BRNE _0x20038
                +
000440 e041     +LDI R20 , LOW ( 1 )
000441 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000442 e0e0      	LDI  R30,LOW(0)
000443 a7e8      	STD  Y+40,R30
000444 a7e9      	STD  Y+40+1,R30
000445 c033      	RJMP _0x20037
                 ; 0001 0178 	case 90: 	vx_goal = 0; vy_goal = 1; break;
                 _0x20038:
000446 35ea      	CPI  R30,LOW(0x5A)
000447 e0a0      	LDI  R26,HIGH(0x5A)
000448 07fa      	CPC  R31,R26
000449 f439      	BRNE _0x20039
                +
00044a e040     +LDI R20 , LOW ( 0 )
00044b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00044c e0e1      	LDI  R30,LOW(1)
00044d e0f0      	LDI  R31,HIGH(1)
00044e a7e8      	STD  Y+40,R30
00044f a7f9      	STD  Y+40+1,R31
000450 c028      	RJMP _0x20037
                 ; 0001 0179 	case 180: vx_goal = -1; vy_goal = 0; break;
                 _0x20039:
000451 3be4      	CPI  R30,LOW(0xB4)
000452 e0a0      	LDI  R26,HIGH(0xB4)
000453 07fa      	CPC  R31,R26
000454 f431      	BRNE _0x2003A
                +
000455 ef4f     +LDI R20 , LOW ( - 1 )
000456 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000457 e0e0      	LDI  R30,LOW(0)
000458 a7e8      	STD  Y+40,R30
000459 a7e9      	STD  Y+40+1,R30
00045a c01e      	RJMP _0x20037
                 ; 0001 017A 	case -90: vx_goal = 0; vy_goal = -1; break;
                 _0x2003A:
00045b 3ae6      	CPI  R30,LOW(0xFFFFFFA6)
00045c efaf      	LDI  R26,HIGH(0xFFFFFFA6)
00045d 07fa      	CPC  R31,R26
00045e f439      	BRNE _0x2003C
                +
00045f e040     +LDI R20 , LOW ( 0 )
000460 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000461 efef      	LDI  R30,LOW(65535)
000462 efff      	LDI  R31,HIGH(65535)
000463 a7e8      	STD  Y+40,R30
000464 a7f9      	STD  Y+40+1,R31
000465 c013      	RJMP _0x20037
                 ; 0001 017B 	default:	vx_goal = 1; vy_goal = vx_goal * tan(angle); break;
                 _0x2003C:
                +
000466 e041     +LDI R20 , LOW ( 1 )
000467 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000468 a5eb      	LDD  R30,Y+43
000469 a5fc      	LDD  R31,Y+43+1
00046a 940e 1b44 	CALL SUBOPT_0x9
00046c 940e 1928 	CALL _tan
00046e 01da      	MOVW R26,R20
00046f 940e 2291 	CALL __CWD2
000471 940e 238b 	CALL __CDF2
000473 940e 2183 	CALL __MULF12
000475 01de      	MOVW R26,R28
000476 9698      	ADIW R26,40
000477 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 017C 	}
                 _0x20037:
                 ; 0001 017D 
                 ; 0001 017E 	// Angle calculation
                 ; 0001 017F 	//rb_angle = get_angle();
                 ; 0001 0180 	rb_angle = orientation;
000479 940e 1b50 	CALL SUBOPT_0xB
                +
00047b a3ec     +STD Y + 36 , R30
00047c a3fd     +STD Y + 36 + 1 , R31
00047d a36e     +STD Y + 36 + 2 , R22
00047e a37f     +STD Y + 36 + 3 , R23
                 	__PUTD1S 36
                 ; 0001 0181 	des_angle = atan2(vy_des, vx_des);
00047f 01f9      	MOVW R30,R18
000480 940e 1b44 	CALL SUBOPT_0x9
000482 01f8      	MOVW R30,R16
000483 940e 1b44 	CALL SUBOPT_0x9
000485 940e 1a20 	CALL _atan2
                +
000487 a3e8     +STD Y + 32 , R30
000488 a3f9     +STD Y + 32 + 1 , R31
000489 a36a     +STD Y + 32 + 2 , R22
00048a a37b     +STD Y + 32 + 3 , R23
                 	__PUTD1S 32
                 ; 0001 0182 
                 ; 0001 0183 	// Adding vgoal to vrb
                 ; 0001 0184 	vx_rb = dirx + vx_goal;
00048b 01fa      	MOVW R30,R20
00048c 85a8      	LDD  R26,Y+8
00048d 85b9      	LDD  R27,Y+8+1
00048e 0fea      	ADD  R30,R26
00048f 1ffb      	ADC  R31,R27
000490 87ec      	STD  Y+12,R30
000491 87fd      	STD  Y+12+1,R31
                 ; 0001 0185 	vy_rb = diry + vy_goal;
000492 a5e8      	LDD  R30,Y+40
000493 a5f9      	LDD  R31,Y+40+1
000494 81ae      	LDD  R26,Y+6
000495 81bf      	LDD  R27,Y+6+1
000496 0fea      	ADD  R30,R26
000497 1ffb      	ADC  R31,R27
000498 87ea      	STD  Y+10,R30
000499 87fb      	STD  Y+10+1,R31
                 ; 0001 0186 
                 ; 0001 0187 	new_angle = atan2(vy_rb, vx_rb);
00049a 940e 1b44 	CALL SUBOPT_0x9
00049c 89e8      	LDD  R30,Y+16
00049d 89f9      	LDD  R31,Y+16+1
00049e 940e 1b44 	CALL SUBOPT_0x9
0004a0 940e 1a20 	CALL _atan2
                +
0004a2 8fe8     +STD Y + 24 , R30
0004a3 8ff9     +STD Y + 24 + 1 , R31
0004a4 8f6a     +STD Y + 24 + 2 , R22
0004a5 8f7b     +STD Y + 24 + 3 , R23
                 	__PUTD1S 24
                 ; 0001 0188 	rotation_angle = new_angle - des_angle;
0004a6 940e 1b59 	CALL SUBOPT_0xC
                +
0004a8 8de8     +LDD R30 , Y + 24
0004a9 8df9     +LDD R31 , Y + 24 + 1
0004aa 8d6a     +LDD R22 , Y + 24 + 2
0004ab 8d7b     +LDD R23 , Y + 24 + 3
                 	__GETD1S 24
0004ac 940e 1b5e 	CALL SUBOPT_0xD
                 ; 0001 0189 
                 ; 0001 018A 	//  *rotation_angle > 180* counter-measure
                 ; 0001 018B 	if (rotation_angle < -PI) {
0004ae 940e 1b63 	CALL SUBOPT_0xE
0004b0 01df      	MOVW R26,R30
0004b1 01cb      	MOVW R24,R22
0004b2 940e 1b6a 	CALL SUBOPT_0xF
0004b4 f4a0      	BRSH _0x2003D
                 ; 0001 018C 		rotation_angle = 2 * PI + rotation_angle;
0004b5 940e 1b63 	CALL SUBOPT_0xE
                +
0004b7 edab     +LDI R26 , LOW ( 0x40C90FDB )
0004b8 e0bf     +LDI R27 , HIGH ( 0x40C90FDB )
0004b9 ec89     +LDI R24 , BYTE3 ( 0x40C90FDB )
0004ba e490     +LDI R25 , BYTE4 ( 0x40C90FDB )
                 	__GETD2N 0x40C90FDB
0004bb 940e 2133 	CALL __ADDF12
0004bd 01de      	MOVW R26,R28
0004be 9656      	ADIW R26,22
0004bf 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 018D 		if (new_angle > des_angle)               rotation_angle = -rotation_angle;
0004c1 940e 1b71 	CALL SUBOPT_0x10
0004c3 f009      	BREQ PC+2
0004c4 f410      	BRCC PC+3
0004c5 940c 04c9 	JMP  _0x2003E
0004c7 940e 1b7c 	CALL SUBOPT_0x11
                 ; 0001 018E 	}
                 _0x2003E:
                 ; 0001 018F 	if (rotation_angle > PI) {
                 _0x2003D:
0004c9 940e 1b63 	CALL SUBOPT_0xE
0004cb 940e 1b83 	CALL SUBOPT_0x12
0004cd f009      	BREQ PC+2
0004ce f410      	BRCC PC+3
0004cf 940c 04e3 	JMP  _0x2003F
                 ; 0001 0190 		rotation_angle = 2 * PI - rotation_angle;
0004d1 940e 1b63 	CALL SUBOPT_0xE
                +
0004d3 edab     +LDI R26 , LOW ( 0x40C90FDB )
0004d4 e0bf     +LDI R27 , HIGH ( 0x40C90FDB )
0004d5 ec89     +LDI R24 , BYTE3 ( 0x40C90FDB )
0004d6 e490     +LDI R25 , BYTE4 ( 0x40C90FDB )
                 	__GETD2N 0x40C90FDB
0004d7 940e 238e 	CALL __SWAPD12
0004d9 940e 1b5e 	CALL SUBOPT_0xD
                 ; 0001 0191 		if (new_angle > des_angle)                rotation_angle = -rotation_angle;
0004db 940e 1b71 	CALL SUBOPT_0x10
0004dd f009      	BREQ PC+2
0004de f410      	BRCC PC+3
0004df 940c 04e3 	JMP  _0x20040
0004e1 940e 1b7c 	CALL SUBOPT_0x11
                 ; 0001 0192 	}
                 _0x20040:
                 ; 0001 0193 
                 ; 0001 0194 	// *SPIral* counter-measure: SPIral happens when vdes is between the new vector and vrb
                 ; 0001 0195 	minimum = min3(rb_angle, des_angle, new_angle);
                 _0x2003F:
0004e3 940e 1b8c 	CALL SUBOPT_0x13
0004e5 940e 1b8c 	CALL SUBOPT_0x13
0004e7 940e 1b93 	CALL SUBOPT_0x14
0004e9 ded5      	RCALL _min3
0004ea 01de      	MOVW R26,R28
0004eb 9654      	ADIW R26,20
0004ec 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 0196 	maximum = max3(rb_angle, des_angle, new_angle);
0004ee 940e 1b8c 	CALL SUBOPT_0x13
0004f0 940e 1b8c 	CALL SUBOPT_0x13
0004f2 940e 1b93 	CALL SUBOPT_0x14
0004f4 dedd      	RCALL _max3
0004f5 01de      	MOVW R26,R28
0004f6 9652      	ADIW R26,18
0004f7 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 0197 
                 ; 0001 0198 	if (absolute(rb_angle - new_angle) > PI) {
                +
0004f9 8da8     +LDD R26 , Y + 24
0004fa 8db9     +LDD R27 , Y + 24 + 1
0004fb 8d8a     +LDD R24 , Y + 24 + 2
0004fc 8d9b     +LDD R25 , Y + 24 + 3
                 	__GETD2S 24
0004fd 940e 1b9a 	CALL SUBOPT_0x15
0004ff 940e 212c 	CALL __SUBF12
000501 940e 20c2 	CALL __CFD1
000503 93fa      	ST   -Y,R31
000504 93ea      	ST   -Y,R30
000505 deac      	RCALL _absolute
000506 940e 1b9f 	CALL SUBOPT_0x16
000508 940e 1b83 	CALL SUBOPT_0x12
00050a f009      	BREQ PC+2
00050b f410      	BRCC PC+3
00050c 940c 0536 	JMP  _0x20041
                 ; 0001 0199 		if (des_angle == maximum || des_angle == minimum)                rotation_angle = rotation_angle / 15;
00050e 940e 1ba4 	CALL SUBOPT_0x17
000510 940e 23b9 	CALL __CPD12
000512 f049      	BREQ _0x20043
000513 89ec      	LDD  R30,Y+20
000514 89fd      	LDD  R31,Y+20+1
000515 940e 1b59 	CALL SUBOPT_0xC
000517 940e 1b9f 	CALL SUBOPT_0x16
000519 940e 23b9 	CALL __CPD12
00051b f409      	BRNE _0x20042
                 _0x20043:
00051c c011      	RJMP _0x2031A
                 ; 0001 019A 		else
                 _0x20042:
                 ; 0001 019B 			if (minimum < des_angle && des_angle < maximum)               rotation_angle = rotation_angle / 15;
00051d 940e 1ba8 	CALL SUBOPT_0x18
00051f 89ac      	LDD  R26,Y+20
000520 89bd      	LDD  R27,Y+20+1
000521 940e 2291 	CALL __CWD2
000523 940e 238b 	CALL __CDF2
000525 940e 2216 	CALL __CMPF12
000527 f428      	BRSH _0x20047
000528 940e 1ba4 	CALL SUBOPT_0x17
00052a 940e 2216 	CALL __CMPF12
00052c f008      	BRLO _0x20048
                 _0x20047:
00052d c008      	RJMP _0x20046
                 _0x20048:
                 _0x2031A:
00052e 89ae      	LDD  R26,Y+22
00052f 89bf      	LDD  R27,Y+22+1
000530 e0ef      	LDI  R30,LOW(15)
000531 e0f0      	LDI  R31,HIGH(15)
000532 940e 22f4 	CALL __DIVW21
000534 8bee      	STD  Y+22,R30
000535 8bff      	STD  Y+22+1,R31
                 ; 0001 019C 	}
                 _0x20046:
                 ; 0001 019D 
                 ; 0001 019E 	// Motor speed calculation
                 ; 0001 019F 	switch (mode) {
                 _0x20041:
000536 a5ea      	LDD  R30,Y+42
000537 e0f0      	LDI  R31,0
                 ; 0001 01A0 	case 'f': // Going forward
000538 36e6      	CPI  R30,LOW(0x66)
000539 e0a0      	LDI  R26,HIGH(0x66)
00053a 07fa      	CPC  R31,R26
00053b f471      	BRNE _0x2004C
                 ; 0001 01A1 		wl = VBASE + rotation_angle * KMOVE;
00053c 940e 1bad 	CALL SUBOPT_0x19
00053e 963f      	ADIW R30,15
00053f 8be8      	STD  Y+16,R30
000540 8bf9      	STD  Y+16+1,R31
                 ; 0001 01A2 		wr = VBASE - rotation_angle * KMOVE;
000541 940e 1bad 	CALL SUBOPT_0x19
000543 e0af      	LDI  R26,LOW(15)
000544 e0b0      	LDI  R27,HIGH(15)
000545 1bae      	SUB  R26,R30
000546 0bbf      	SBC  R27,R31
000547 87ae      	STD  Y+14,R26
000548 87bf      	STD  Y+14+1,R27
                 ; 0001 01A3 		break;
000549 c013      	RJMP _0x2004B
                 ; 0001 01A4 	case 'b': // Going backward
                 _0x2004C:
00054a 36e2      	CPI  R30,LOW(0x62)
00054b e0a0      	LDI  R26,HIGH(0x62)
00054c 07fa      	CPC  R31,R26
00054d f479      	BRNE _0x2004B
                 ; 0001 01A5 		rotation_angle = -rotation_angle;
00054e 940e 1b7c 	CALL SUBOPT_0x11
                 ; 0001 01A6 		wl = VBASE - rotation_angle * KMOVE;
000550 940e 1bad 	CALL SUBOPT_0x19
000552 e0af      	LDI  R26,LOW(15)
000553 e0b0      	LDI  R27,HIGH(15)
000554 1bae      	SUB  R26,R30
000555 0bbf      	SBC  R27,R31
000556 8ba8      	STD  Y+16,R26
000557 8bb9      	STD  Y+16+1,R27
                 ; 0001 01A7 		wr = VBASE + rotation_angle * KMOVE;
000558 940e 1bad 	CALL SUBOPT_0x19
00055a 963f      	ADIW R30,15
00055b 87ee      	STD  Y+14,R30
00055c 87ff      	STD  Y+14+1,R31
                 ; 0001 01A8 		break;
                 ; 0001 01A9 	}
                 _0x2004B:
                 ; 0001 01AA 	// Set speed for motor
                 ; 0001 01AB     /*if (wl > 15){
                 ; 0001 01AC         wl = map(wl,0,82,5,22);}
                 ; 0001 01AD     else{
                 ; 0001 01AE         wl = map(-wl,0,82,5,22);
                 ; 0001 01AF         wl = -wl;
                 ; 0001 01B0     }
                 ; 0001 01B1     if (wr > 0){
                 ; 0001 01B2         wr = map(wr,0,82,5,22);}
                 ; 0001 01B3     else{
                 ; 0001 01B4         wr = map(-wr,0,82,5,22);
                 ; 0001 01B5         wr = -wr;
                 ; 0001 01B6     } */
                 ; 0001 01B7 
                 ; 0001 01B8 	if (wl>15){
00055d 89a8      	LDD  R26,Y+16
00055e 89b9      	LDD  R27,Y+16+1
00055f 9750      	SBIW R26,16
000560 f02c      	BRLT _0x2004E
                 ; 0001 01B9 		wl = map(wl, 15, 82, 5, 22);
000561 940e 1bb4 	CALL SUBOPT_0x1A
000563 e5e2      	LDI  R30,LOW(82)
000564 e0f0      	LDI  R31,HIGH(82)
000565 c004      	RJMP _0x2031B
                 ; 0001 01BA 	}
                 ; 0001 01BB 	else{
                 _0x2004E:
                 ; 0001 01BC 		wl = map(wl, 15, -60, 5, 22);
000566 940e 1bb4 	CALL SUBOPT_0x1A
000568 ece4      	LDI  R30,LOW(65476)
000569 efff      	LDI  R31,HIGH(65476)
                 _0x2031B:
00056a 93fa      	ST   -Y,R31
00056b 93ea      	ST   -Y,R30
00056c 940e 1bbd 	CALL SUBOPT_0x1B
00056e 8be8      	STD  Y+16,R30
00056f 8bf9      	STD  Y+16+1,R31
                 ; 0001 01BD 
                 ; 0001 01BE 	}
                 ; 0001 01BF 	if (wl>15){
000570 89a8      	LDD  R26,Y+16
000571 89b9      	LDD  R27,Y+16+1
000572 9750      	SBIW R26,16
000573 f02c      	BRLT _0x20050
                 ; 0001 01C0 		wr = map(wl, 15, 82, 5, 22);
000574 940e 1bb4 	CALL SUBOPT_0x1A
000576 e5e2      	LDI  R30,LOW(82)
000577 e0f0      	LDI  R31,HIGH(82)
000578 c004      	RJMP _0x2031C
                 ; 0001 01C1 	}
                 ; 0001 01C2 	else{
                 _0x20050:
                 ; 0001 01C3 		wr = map(wl, 15, -60, 5, 22);
000579 940e 1bb4 	CALL SUBOPT_0x1A
00057b ece4      	LDI  R30,LOW(65476)
00057c efff      	LDI  R31,HIGH(65476)
                 _0x2031C:
00057d 93fa      	ST   -Y,R31
00057e 93ea      	ST   -Y,R30
00057f 940e 1bbd 	CALL SUBOPT_0x1B
000581 87ee      	STD  Y+14,R30
000582 87ff      	STD  Y+14+1,R31
                 ; 0001 01C4 	}
                 ; 0001 01C5 
                 ; 0001 01C6 	if (wl == wr){
000583 89a8      	LDD  R26,Y+16
000584 89b9      	LDD  R27,Y+16+1
000585 17ea      	CP   R30,R26
000586 07fb      	CPC  R31,R27
000587 f431      	BRNE _0x20052
                 ; 0001 01C7 		wl = 11;
000588 e0eb      	LDI  R30,LOW(11)
000589 e0f0      	LDI  R31,HIGH(11)
00058a 8be8      	STD  Y+16,R30
00058b 8bf9      	STD  Y+16+1,R31
                 ; 0001 01C8 		wr = 11;
00058c 87ee      	STD  Y+14,R30
00058d 87ff      	STD  Y+14+1,R31
                 ; 0001 01C9 	}
                 ; 0001 01CA 
                 ; 0001 01CB 	leftSpeed = wl;
                 _0x20052:
00058e 89e8      	LDD  R30,Y+16
00058f 89f9      	LDD  R31,Y+16+1
000590 93e0 04d9 	STS  _leftSpeed,R30
000592 93f0 04da 	STS  _leftSpeed+1,R31
                 ; 0001 01CC 	rightSpeed = wr;
000594 85ee      	LDD  R30,Y+14
000595 85ff      	LDD  R31,Y+14+1
000596 93e0 04db 	STS  _rightSpeed,R30
000598 93f0 04dc 	STS  _rightSpeed+1,R31
                 ; 0001 01CD 
                 ; 0001 01CE #ifdef DEBUG_EN
                 ; 0001 01CF     {
                 ; 0001 01D0 	    /*char dbgLen;
                 ; 0001 01D1 
                 ; 0001 01D2         dbgLen = sprintf(debugMsgBuff, "ID: %d \n\r", robotctrl.id);
                 ; 0001 01D3 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01D4 
                 ; 0001 01D5         dbgLen = sprintf(debugMsgBuff, "x: %d \n\r", robotctrl.x);
                 ; 0001 01D6 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01D7 
                 ; 0001 01D8         dbgLen = sprintf(debugMsgBuff, "y: %d \n\r", robotctrl.y);
                 ; 0001 01D9 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01DA 
                 ; 0001 01DB         dbgLen = sprintf(debugMsgBuff, "Angles: %d \n\r", rb_angle*180/PI);
                 ; 0001 01DC 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01DD 
                 ; 0001 01DE 		dbgLen = sprintf(debugMsgBuff, "Left Speed: %d \n\r", leftSpeed);
                 ; 0001 01DF 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01E0 
                 ; 0001 01E1 		dbgLen = sprintf(debugMsgBuff, "Right Speed: %d \n\n\r", rightSpeed);
                 ; 0001 01E2 		debug_out(debugMsgBuff, dbgLen);*/
                 ; 0001 01E3 	}
                 ; 0001 01E4 #endif
                 ; 0001 01E5 }
00059a 940e 23c5 	CALL __LOADLOCR6
00059c 96ef      	ADIW R28,63
00059d 9508      	RET
                 ;
                 ;int squareDistance(int aX, int aY, int bX, int bY) {
                 ; 0001 01E7 int squareDistance(int aX, int aY, int bX, int bY) {
                 ; 0001 01E8 	return (bX - aX) * (bX - aX) + (bY - bX) * (bY - bX);
                 ;	aX -> Y+6
                 ;	aY -> Y+4
                 ;	bX -> Y+2
                 ;	bY -> Y+0
                 ; 0001 01E9 }
                 ;
                 ;// some function to set speed = 0
                 ;void stop() {
                 ; 0001 01EC void stop() {
                 ; 0001 01ED 
                 ; 0001 01EE }
                 ;
                 ;void rotate(int angle){
                 ; 0001 01F0 void rotate(int angle){
                 ; 0001 01F1 	angle = angle * LDIVR * 0.5;
                 ;	angle -> Y+0
                 ; 0001 01F2 	setSpeed(angle, -angle);
                 ; 0001 01F3 }
                 ;
                 ;// [ PHAT ]
                 ;
                 ;float getOrientation(){
                 ; 0001 01F7 float getOrientation(){
                 ; 0001 01F8 
                 ; 0001 01F9 }
                 ;
                 ;
                 ;//------POSITION CONTROL-----
                 ;unsigned int sd = 0;// dat khoang cach  di chuyen (xung)
                 ;unsigned int oldd = 0;// bien luu gia tri vi tri cu
                 ;unsigned char flagwaitctrRobot = 0;
                 ;//-----ANGLES CONTROL----
                 ;unsigned int sa = 0;// dat goc quay (xung) ( 54 xung/vong quay)
                 ;unsigned int olda = 0;// bien luu gia tri goc cu
                 ;unsigned char  flagwaitctrAngle = 0;
                 ;//-----ROBOT BEHAVIOR CONTROL-----
                 ;unsigned int flagtask = 0;
                 ;unsigned int flagtaskold = 0;
                 ;unsigned int flaghuongtrue = 0;
                 ;int verranglekisum = 0;
                 ;//=====ENCODER======
                 ;unsigned int QEL = 0;
                 ;unsigned int QER = 0;
                 ;//=====LCD=========
                 ;unsigned char menu = 0, test = 0, ok = 0, runing_test = 0, run_robot = 0, ft = 1, timer = 0;
                 
                 	.DSEG
                 ;flash unsigned char ASCII[][5] = {
                 ;	{ 0x00, 0x00, 0x00, 0x00, 0x00 } // 20
                 ;	, { 0x00, 0x00, 0x5f, 0x00, 0x00 } // 21 !
                 ;	, { 0x00, 0x07, 0x00, 0x07, 0x00 } // 22 "
                 ;	, { 0x14, 0x7f, 0x14, 0x7f, 0x14 } // 23 #
                 ;	, { 0x24, 0x2a, 0x7f, 0x2a, 0x12 } // 24 $
                 ;	, { 0x23, 0x13, 0x08, 0x64, 0x62 } // 25 %
                 ;	, { 0x36, 0x49, 0x55, 0x22, 0x50 } // 26 &
                 ;	, { 0x00, 0x05, 0x03, 0x00, 0x00 } // 27 '
                 ;	, { 0x00, 0x1c, 0x22, 0x41, 0x00 } // 28 (
                 ;	, { 0x00, 0x41, 0x22, 0x1c, 0x00 } // 29 )
                 ;	, { 0x14, 0x08, 0x3e, 0x08, 0x14 } // 2a *
                 ;	, { 0x08, 0x08, 0x3e, 0x08, 0x08 } // 2b +
                 ;	, { 0x00, 0x50, 0x30, 0x00, 0x00 } // 2c ,
                 ;	, { 0x08, 0x08, 0x08, 0x08, 0x08 } // 2d -
                 ;	, { 0x00, 0x60, 0x60, 0x00, 0x00 } // 2e .
                 ;	, { 0x20, 0x10, 0x08, 0x04, 0x02 } // 2f /
                 ;	, { 0x3e, 0x51, 0x49, 0x45, 0x3e } // 30 0
                 ;	, { 0x00, 0x42, 0x7f, 0x40, 0x00 } // 31 1
                 ;	, { 0x42, 0x61, 0x51, 0x49, 0x46 } // 32 2
                 ;	, { 0x21, 0x41, 0x45, 0x4b, 0x31 } // 33 3
                 ;	, { 0x18, 0x14, 0x12, 0x7f, 0x10 } // 34 4
                 ;	, { 0x27, 0x45, 0x45, 0x45, 0x39 } // 35 5
                 ;	, { 0x3c, 0x4a, 0x49, 0x49, 0x30 } // 36 6
                 ;	, { 0x01, 0x71, 0x09, 0x05, 0x03 } // 37 7
                 ;	, { 0x36, 0x49, 0x49, 0x49, 0x36 } // 38 8
                 ;	, { 0x06, 0x49, 0x49, 0x29, 0x1e } // 39 9
                 ;	, { 0x00, 0x36, 0x36, 0x00, 0x00 } // 3a :
                 ;	, { 0x00, 0x56, 0x36, 0x00, 0x00 } // 3b ;
                 ;	, { 0x08, 0x14, 0x22, 0x41, 0x00 } // 3c <
                 ;	, { 0x14, 0x14, 0x14, 0x14, 0x14 } // 3d =
                 ;	, { 0x00, 0x41, 0x22, 0x14, 0x08 } // 3e >
                 ;	, { 0x02, 0x01, 0x51, 0x09, 0x06 } // 3f ?
                 ;	, { 0x32, 0x49, 0x79, 0x41, 0x3e } // 40 @
                 ;	, { 0x7e, 0x11, 0x11, 0x11, 0x7e } // 41 A
                 ;	, { 0x7f, 0x49, 0x49, 0x49, 0x36 } // 42 B
                 ;	, { 0x3e, 0x41, 0x41, 0x41, 0x22 } // 43 C
                 ;	, { 0x7f, 0x41, 0x41, 0x22, 0x1c } // 44 D
                 ;	, { 0x7f, 0x49, 0x49, 0x49, 0x41 } // 45 E
                 ;	, { 0x7f, 0x09, 0x09, 0x09, 0x01 } // 46 F
                 ;	, { 0x3e, 0x41, 0x49, 0x49, 0x7a } // 47 G
                 ;	, { 0x7f, 0x08, 0x08, 0x08, 0x7f } // 48 H
                 ;	, { 0x00, 0x41, 0x7f, 0x41, 0x00 } // 49 I
                 ;	, { 0x20, 0x40, 0x41, 0x3f, 0x01 } // 4a J
                 ;	, { 0x7f, 0x08, 0x14, 0x22, 0x41 } // 4b K
                 ;	, { 0x7f, 0x40, 0x40, 0x40, 0x40 } // 4c L
                 ;	, { 0x7f, 0x02, 0x0c, 0x02, 0x7f } // 4d M
                 ;	, { 0x7f, 0x04, 0x08, 0x10, 0x7f } // 4e N
                 ;	, { 0x3e, 0x41, 0x41, 0x41, 0x3e } // 4f O
                 ;	, { 0x7f, 0x09, 0x09, 0x09, 0x06 } // 50 P
                 ;	, { 0x3e, 0x41, 0x51, 0x21, 0x5e } // 51 Q
                 ;	, { 0x7f, 0x09, 0x19, 0x29, 0x46 } // 52 R
                 ;	, { 0x46, 0x49, 0x49, 0x49, 0x31 } // 53 S
                 ;	, { 0x01, 0x01, 0x7f, 0x01, 0x01 } // 54 T
                 ;	, { 0x3f, 0x40, 0x40, 0x40, 0x3f } // 55 U
                 ;	, { 0x1f, 0x20, 0x40, 0x20, 0x1f } // 56 V
                 ;	, { 0x3f, 0x40, 0x38, 0x40, 0x3f } // 57 W
                 ;	, { 0x63, 0x14, 0x08, 0x14, 0x63 } // 58 X
                 ;	, { 0x07, 0x08, 0x70, 0x08, 0x07 } // 59 Y
                 ;	, { 0x61, 0x51, 0x49, 0x45, 0x43 } // 5a Z
                 ;	, { 0x00, 0x7f, 0x41, 0x41, 0x00 } // 5b [
                 ;	, { 0x02, 0x04, 0x08, 0x10, 0x20 } // 5c �
                 ;	, { 0x00, 0x41, 0x41, 0x7f, 0x00 } // 5d ]
                 ;	, { 0x04, 0x02, 0x01, 0x02, 0x04 } // 5e ^
                 ;	, { 0x40, 0x40, 0x40, 0x40, 0x40 } // 5f _
                 ;	, { 0x00, 0x01, 0x02, 0x04, 0x00 } // 60 `
                 ;	, { 0x20, 0x54, 0x54, 0x54, 0x78 } // 61 a
                 ;	, { 0x7f, 0x48, 0x44, 0x44, 0x38 } // 62 b
                 ;	, { 0x38, 0x44, 0x44, 0x44, 0x20 } // 63 c
                 ;	, { 0x38, 0x44, 0x44, 0x48, 0x7f } // 64 d
                 ;	, { 0x38, 0x54, 0x54, 0x54, 0x18 } // 65 e
                 ;	, { 0x08, 0x7e, 0x09, 0x01, 0x02 } // 66 f
                 ;	, { 0x0c, 0x52, 0x52, 0x52, 0x3e } // 67 g
                 ;	, { 0x7f, 0x08, 0x04, 0x04, 0x78 } // 68 h
                 ;	, { 0x00, 0x44, 0x7d, 0x40, 0x00 } // 69 i
                 ;	, { 0x20, 0x40, 0x44, 0x3d, 0x00 } // 6a j
                 ;	, { 0x7f, 0x10, 0x28, 0x44, 0x00 } // 6b k
                 ;	, { 0x00, 0x41, 0x7f, 0x40, 0x00 } // 6c l
                 ;	, { 0x7c, 0x04, 0x18, 0x04, 0x78 } // 6d m
                 ;	, { 0x7c, 0x08, 0x04, 0x04, 0x78 } // 6e n
                 ;	, { 0x38, 0x44, 0x44, 0x44, 0x38 } // 6f o
                 ;	, { 0x7c, 0x14, 0x14, 0x14, 0x08 } // 70 p
                 ;	, { 0x08, 0x14, 0x14, 0x18, 0x7c } // 71 q
                 ;	, { 0x7c, 0x08, 0x04, 0x04, 0x08 } // 72 r
                 ;	, { 0x48, 0x54, 0x54, 0x54, 0x20 } // 73 s
                 ;	, { 0x04, 0x3f, 0x44, 0x40, 0x20 } // 74 t
                 ;	, { 0x3c, 0x40, 0x40, 0x20, 0x7c } // 75 u
                 ;	, { 0x1c, 0x20, 0x40, 0x20, 0x1c } // 76 v
                 ;	, { 0x3c, 0x40, 0x30, 0x40, 0x3c } // 77 w
                 ;	, { 0x44, 0x28, 0x10, 0x28, 0x44 } // 78 x
                 ;	, { 0x0c, 0x50, 0x50, 0x50, 0x3c } // 79 y
                 ;	, { 0x44, 0x64, 0x54, 0x4c, 0x44 } // 7a z
                 ;	, { 0x00, 0x08, 0x36, 0x41, 0x00 } // 7b {
                 ;	, { 0x00, 0x00, 0x7f, 0x00, 0x00 } // 7c |
                 ;	, { 0x00, 0x41, 0x36, 0x08, 0x00 } // 7d }
                 ;	, { 0x10, 0x08, 0x08, 0x10, 0x08 } // 7e ?
                 ;	, { 0x78, 0x46, 0x41, 0x46, 0x78 } // 7f ?
                 ;};
                 ;
                 ;/* LED FUNCTIONS */
                 ;void LEDLtoggle()
                 ; 0001 0273 {
                 
                 	.CSEG
                 _LEDLtoggle:
                 ; 0001 0274 	if (LEDL == 0){ LEDL = 1; }
00059e 99ac      	SBIC 0x15,4
00059f c002      	RJMP _0x20054
0005a0 9aac      	SBI  0x15,4
                 ; 0001 0275 	else{ LEDL = 0; }
0005a1 c001      	RJMP _0x20057
                 _0x20054:
0005a2 98ac      	CBI  0x15,4
                 _0x20057:
                 ; 0001 0276 }
0005a3 9508      	RET
                 ;
                 ;void LEDRtoggle()
                 ; 0001 0279 {
                 _LEDRtoggle:
                 ; 0001 027A 	if (LEDR == 0){ LEDR = 1; }
0005a4 99ad      	SBIC 0x15,5
0005a5 c002      	RJMP _0x2005A
0005a6 9aad      	SBI  0x15,5
                 ; 0001 027B 	else{ LEDR = 0; }
0005a7 c001      	RJMP _0x2005D
                 _0x2005A:
0005a8 98ad      	CBI  0x15,5
                 _0x2005D:
                 ; 0001 027C }
0005a9 9508      	RET
                 ;
                 ;/* SPI */
                 ;void sPItx(unsigned char temtx)
                 ; 0001 0280 {
                 _sPItx:
                 ; 0001 0281 	// unsigned char transPI;
                 ; 0001 0282 	SPDR = temtx;
                 ;	temtx -> Y+0
0005aa 81e8      	LD   R30,Y
0005ab b9ef      	OUT  0xF,R30
                 ; 0001 0283 	while (!(SPSR & 0x80));
                 _0x20060:
0005ac 9b77      	SBIS 0xE,7
0005ad cffe      	RJMP _0x20060
                 ; 0001 0284 }
0005ae c1b8      	RJMP _0x20C0010
                 ;
                 ;/* LCD FUNCTIONS */
                 ;void LcdWrite(unsigned char dc, unsigned char data)
                 ; 0001 0288 {
                 _LcdWrite:
                 ; 0001 0289 	DC = dc;
                 ;	dc -> Y+1
                 ;	data -> Y+0
0005af 81e9      	LDD  R30,Y+1
0005b0 30e0      	CPI  R30,0
0005b1 f411      	BRNE _0x20063
0005b2 98c2      	CBI  0x18,2
0005b3 c001      	RJMP _0x20064
                 _0x20063:
0005b4 9ac2      	SBI  0x18,2
                 _0x20064:
                 ; 0001 028A 	SCE = 1;
0005b5 9ac1      	SBI  0x18,1
                 ; 0001 028B 	SCE = 0;
0005b6 98c1      	CBI  0x18,1
                 ; 0001 028C 	sPItx(data);
0005b7 81e8      	LD   R30,Y
0005b8 93ea      	ST   -Y,R30
0005b9 dff0      	RCALL _sPItx
                 ; 0001 028D 	SCE = 1;
0005ba 9ac1      	SBI  0x18,1
                 ; 0001 028E }
0005bb c0b2      	RJMP _0x20C0011
                 ;//This takes a large array of bits and sends them to the LCD
                 ;void LcdBitmap(char my_array[]){
                 ; 0001 0290 void LcdBitmap(char my_array[]){
                 ; 0001 0291 	int index = 0;
                 ; 0001 0292 	for (index = 0; index < (LCD_X * LCD_Y / 8); index++)
                 ;	my_array -> Y+2
                 ;	index -> R16,R17
                 ; 0001 0293 		LcdWrite(LCD_D, my_array[index]);
                 ; 0001 0294 }
                 ;
                 ;void hc(int x, int y) {
                 ; 0001 0296 void hc(int x, int y) {
                 _hc:
                 ; 0001 0297 	LcdWrite(0, 0x40 | x);  // Row.  ?
                 ;	x -> Y+2
                 ;	y -> Y+0
0005bc e0e0      	LDI  R30,LOW(0)
0005bd 93ea      	ST   -Y,R30
0005be 81eb      	LDD  R30,Y+3
0005bf 64e0      	ORI  R30,0x40
0005c0 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 0298 	LcdWrite(0, 0x80 | y);  // Column.
0005c2 81e9      	LDD  R30,Y+1
0005c3 68e0      	ORI  R30,0x80
0005c4 93ea      	ST   -Y,R30
0005c5 dfe9      	RCALL _LcdWrite
                 ; 0001 0299 }
                 _0x20C0016:
0005c6 9624      	ADIW R28,4
0005c7 9508      	RET
                 ;
                 ;void LcdCharacter(unsigned char character)
                 ; 0001 029C {
                 _LcdCharacter:
                 ; 0001 029D 	int index = 0;
                 ; 0001 029E 	LcdWrite(LCD_D, 0x00);
0005c8 940e 1bcd 	CALL SUBOPT_0x1D
                 ;	character -> Y+2
                 ;	index -> R16,R17
                 ; 0001 029F 	for (index = 0; index < 5; index++)
                 _0x2006F:
                +
0005ca 3005     +CPI R16 , LOW ( 5 )
0005cb e0e0     +LDI R30 , HIGH ( 5 )
0005cc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0005cd f42c      	BRGE _0x20070
                 ; 0001 02A0 	{
                 ; 0001 02A1 		LcdWrite(LCD_D, ASCII[character - 0x20][index]);
0005ce 940e 1bda 	CALL SUBOPT_0x1E
                 ; 0001 02A2 	}
                +
0005d0 5f0f     +SUBI R16 , LOW ( - 1 )
0005d1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005d2 cff7      	RJMP _0x2006F
                 _0x20070:
                 ; 0001 02A3 	LcdWrite(LCD_D, 0x00);
0005d3 c00b      	RJMP _0x20C0014
                 ; 0001 02A4 }
                 ;
                 ;void wc(unsigned char character)
                 ; 0001 02A7 {
                 _wc:
                 ; 0001 02A8 	int index = 0;
                 ; 0001 02A9 	LcdWrite(LCD_D, 0x00);
0005d4 940e 1bcd 	CALL SUBOPT_0x1D
                 ;	character -> Y+2
                 ;	index -> R16,R17
                 ; 0001 02AA 	for (index = 0; index < 5; index++)
                 _0x20072:
                +
0005d6 3005     +CPI R16 , LOW ( 5 )
0005d7 e0e0     +LDI R30 , HIGH ( 5 )
0005d8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0005d9 f42c      	BRGE _0x20073
                 ; 0001 02AB 	{
                 ; 0001 02AC 		LcdWrite(LCD_D, ASCII[character - 0x20][index]);
0005da 940e 1bda 	CALL SUBOPT_0x1E
                 ; 0001 02AD 	}
                +
0005dc 5f0f     +SUBI R16 , LOW ( - 1 )
0005dd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005de cff7      	RJMP _0x20072
                 _0x20073:
                 ; 0001 02AE 	LcdWrite(LCD_D, 0x00);
                 _0x20C0014:
0005df e0e1      	LDI  R30,LOW(1)
0005e0 940e 1beb 	CALL SUBOPT_0x1F
                 ; 0001 02AF }
0005e2 8119      	LDD  R17,Y+1
0005e3 8108      	LDD  R16,Y+0
                 _0x20C0015:
0005e4 9623      	ADIW R28,3
0005e5 9508      	RET
                 ;
                 ;void ws(unsigned char *characters)
                 ; 0001 02B2 {
                 _ws:
                 ; 0001 02B3 	while (*characters)
                 ;	*characters -> Y+0
                 _0x20074:
0005e6 81a8      	LD   R26,Y
0005e7 81b9      	LDD  R27,Y+1
0005e8 91ec      	LD   R30,X
0005e9 30e0      	CPI  R30,0
0005ea f031      	BREQ _0x20076
                 ; 0001 02B4 	{
                 ; 0001 02B5 		LcdCharacter(*characters++);
0005eb 91ed      	LD   R30,X+
0005ec 83a8      	ST   Y,R26
0005ed 83b9      	STD  Y+1,R27
0005ee 93ea      	ST   -Y,R30
0005ef dfd8      	RCALL _LcdCharacter
                 ; 0001 02B6 	}
0005f0 cff5      	RJMP _0x20074
                 _0x20076:
                 ; 0001 02B7 }
0005f1 c07c      	RJMP _0x20C0011
                 ;
                 ;void LcdClear(void)
                 ; 0001 02BA {
                 _LcdClear:
                 ; 0001 02BB 	int index = 0;
                 ; 0001 02BC 	for (index = 0; index < LCD_X * LCD_Y / 8; index++)
0005f2 940e 1bf0 	CALL SUBOPT_0x20
                 ;	index -> R16,R17
                 _0x20078:
                +
0005f4 3f08     +CPI R16 , LOW ( 504 )
0005f5 e0e1     +LDI R30 , HIGH ( 504 )
0005f6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,504
0005f7 f434      	BRGE _0x20079
                 ; 0001 02BD 	{
                 ; 0001 02BE 		LcdWrite(LCD_D, 0);
0005f8 e0e1      	LDI  R30,LOW(1)
0005f9 940e 1beb 	CALL SUBOPT_0x1F
                 ; 0001 02BF 	}
                +
0005fb 5f0f     +SUBI R16 , LOW ( - 1 )
0005fc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005fd cff6      	RJMP _0x20078
                 _0x20079:
                 ; 0001 02C0 	hc(0, 0); //After we clear the display, return to the home position
0005fe c00c      	RJMP _0x20C0013
                 ; 0001 02C1 }
                 ;
                 ;void clear(void)
                 ; 0001 02C4 {
                 _clear:
                 ; 0001 02C5 	int index = 0;
                 ; 0001 02C6 	for (index = 0; index < LCD_X * LCD_Y / 8; index++)
0005ff 940e 1bf0 	CALL SUBOPT_0x20
                 ;	index -> R16,R17
                 _0x2007B:
                +
000601 3f08     +CPI R16 , LOW ( 504 )
000602 e0e1     +LDI R30 , HIGH ( 504 )
000603 071e     +CPC R17 , R30
                 	__CPWRN 16,17,504
000604 f434      	BRGE _0x2007C
                 ; 0001 02C7 	{
                 ; 0001 02C8 		LcdWrite(LCD_D, 0);
000605 e0e1      	LDI  R30,LOW(1)
000606 940e 1beb 	CALL SUBOPT_0x1F
                 ; 0001 02C9 	}
                +
000608 5f0f     +SUBI R16 , LOW ( - 1 )
000609 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00060a cff6      	RJMP _0x2007B
                 _0x2007C:
                 ; 0001 02CA 	hc(0, 0); //After we clear the display, return to the home position
                 _0x20C0013:
00060b e0e0      	LDI  R30,LOW(0)
00060c e0f0      	LDI  R31,HIGH(0)
00060d 940e 1bf7 	CALL SUBOPT_0x21
                 ; 0001 02CB }
00060f 9109      	LD   R16,Y+
000610 9119      	LD   R17,Y+
000611 9508      	RET
                 ;
                 ;void wn164(unsigned int so)
                 ; 0001 02CE {
                 _wn164:
                 ; 0001 02CF 	unsigned char a[5], i;
                 ; 0001 02D0 	for (i = 0; i < 5; i++)
000612 9725      	SBIW R28,5
000613 931a      	ST   -Y,R17
                 ;	so -> Y+6
                 ;	a -> Y+1
                 ;	i -> R17
000614 e010      	LDI  R17,LOW(0)
                 _0x2007E:
000615 3015      	CPI  R17,5
000616 f430      	BRSH _0x2007F
                 ; 0001 02D1 	{
                 ; 0001 02D2 		a[i] = so % 10;        //a[0]= byte thap nhat
000617 940e 1bff 	CALL SUBOPT_0x22
000619 940e 1c02 	CALL SUBOPT_0x23
                 ; 0001 02D3 		so = so / 10;
                 ; 0001 02D4 	}
00061b 5f1f      	SUBI R17,-1
00061c cff8      	RJMP _0x2007E
                 _0x2007F:
                 ; 0001 02D5 	for (i = 1; i < 5; i++)
00061d e011      	LDI  R17,LOW(1)
                 _0x20081:
00061e 3015      	CPI  R17,5
00061f f438      	BRSH _0x20082
                 ; 0001 02D6 	{
                 ; 0001 02D7 		wc(a[4 - i] + 0x30);
000620 940e 1bff 	CALL SUBOPT_0x22
000622 940e 1c18 	CALL SUBOPT_0x24
000624 dfaf      	RCALL _wc
                 ; 0001 02D8 	}
000625 5f1f      	SUBI R17,-1
000626 cff7      	RJMP _0x20081
                 _0x20082:
                 ; 0001 02D9 }
000627 c031      	RJMP _0x20C0012
                 ;
                 ;void LcdInitialise()
                 ; 0001 02DC {
                 _LcdInitialise:
                 ; 0001 02DD 	//reset
                 ; 0001 02DE 	RST = 0;
000628 98c0      	CBI  0x18,0
                 ; 0001 02DF 	delay_us(10);
                +
000629 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00062a 958a     +DEC R24
00062b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 02E0 	RST = 1;
00062c 9ac0      	SBI  0x18,0
                 ; 0001 02E1 
                 ; 0001 02E2 	delay_ms(1000);
00062d 940e 1c26 	CALL SUBOPT_0x25
                 ; 0001 02E3 	//khoi dong
                 ; 0001 02E4 	LcdWrite(LCD_C, 0x21);  //Tell LCD that extended commands follow
00062f e0e0      	LDI  R30,LOW(0)
000630 93ea      	ST   -Y,R30
000631 e2e1      	LDI  R30,LOW(33)
000632 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 02E5 	LcdWrite(LCD_C, 0xBF);  //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF = Dam nhat
000634 ebef      	LDI  R30,LOW(191)
000635 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 02E6 	LcdWrite(LCD_C, 0x06);  // Set Temp coefficent. //0x04
000637 e0e6      	LDI  R30,LOW(6)
000638 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 02E7 	LcdWrite(LCD_C, 0x13);  //LCD bias mode 1:48: Try 0x13 or 0x14
00063a e1e3      	LDI  R30,LOW(19)
00063b 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 02E8 	LcdWrite(LCD_C, 0x20);  //We must send 0x20 before modifying the display control mode
00063d e2e0      	LDI  R30,LOW(32)
00063e 940e 1bc7 	CALL SUBOPT_0x1C
                 ; 0001 02E9 	LcdWrite(LCD_C, 0x0C);  //Set display control, normal mode. 0x0D for inverse, 0x0C normal
000640 e0ec      	LDI  R30,LOW(12)
000641 93ea      	ST   -Y,R30
000642 df6c      	RCALL _LcdWrite
                 ; 0001 02EA }
000643 9508      	RET
                 ;// Hien thi so 16 bits
                 ;void wn16(unsigned int so)
                 ; 0001 02ED {
                 _wn16:
                 ; 0001 02EE 	unsigned char a[5], i;
                 ; 0001 02EF 	for (i = 0; i < 5; i++)
000644 9725      	SBIW R28,5
000645 931a      	ST   -Y,R17
                 ;	so -> Y+6
                 ;	a -> Y+1
                 ;	i -> R17
000646 e010      	LDI  R17,LOW(0)
                 _0x20088:
000647 3015      	CPI  R17,5
000648 f430      	BRSH _0x20089
                 ; 0001 02F0 	{
                 ; 0001 02F1 		a[i] = so % 10;        //a[0]= byte thap nhat
000649 940e 1bff 	CALL SUBOPT_0x22
00064b 940e 1c02 	CALL SUBOPT_0x23
                 ; 0001 02F2 		so = so / 10;
                 ; 0001 02F3 	}
00064d 5f1f      	SUBI R17,-1
00064e cff8      	RJMP _0x20088
                 _0x20089:
                 ; 0001 02F4 	for (i = 0; i < 5; i++)
00064f e010      	LDI  R17,LOW(0)
                 _0x2008B:
000650 3015      	CPI  R17,5
000651 f438      	BRSH _0x2008C
                 ; 0001 02F5 	{
                 ; 0001 02F6 		LcdCharacter(a[4 - i] + 0x30);
000652 940e 1bff 	CALL SUBOPT_0x22
000654 940e 1c18 	CALL SUBOPT_0x24
000656 df71      	RCALL _LcdCharacter
                 ; 0001 02F7 	}
000657 5f1f      	SUBI R17,-1
000658 cff7      	RJMP _0x2008B
                 _0x2008C:
                 ; 0001 02F8 }
                 _0x20C0012:
000659 8118      	LDD  R17,Y+0
00065a 9628      	ADIW R28,8
00065b 9508      	RET
                 ;// Hien thi so 16 bits co dau
                 ;void wn16s(int so)
                 ; 0001 02FB {
                 _wn16s:
                 ; 0001 02FC 	if (so < 0){ so = 0 - so; LcdCharacter('-'); }
                 ;	so -> Y+0
00065c 81a9      	LDD  R26,Y+1
00065d 23aa      	TST  R26
00065e f442      	BRPL _0x2008D
00065f 81a8      	LD   R26,Y
000660 81b9      	LDD  R27,Y+1
000661 e0e0      	LDI  R30,LOW(0)
000662 e0f0      	LDI  R31,HIGH(0)
000663 940e 1c2c 	CALL SUBOPT_0x26
000665 e2ed      	LDI  R30,LOW(45)
000666 c001      	RJMP _0x2031D
                 ; 0001 02FD 	else{ LcdCharacter(' '); }
                 _0x2008D:
000667 e2e0      	LDI  R30,LOW(32)
                 _0x2031D:
000668 93ea      	ST   -Y,R30
000669 df5e      	RCALL _LcdCharacter
                 ; 0001 02FE 	wn16(so);
00066a 81e8      	LD   R30,Y
00066b 81f9      	LDD  R31,Y+1
00066c 940e 1c31 	CALL SUBOPT_0x27
                 ; 0001 02FF }
                 _0x20C0011:
00066e 9622      	ADIW R28,2
00066f 9508      	RET
                 ;// hien thi so 32bit co dau
                 ;void wn32s(int so)
                 ; 0001 0302 {
                 ; 0001 0303 	char tmp[20];
                 ; 0001 0304 	sprintf(tmp, "%d", so);
                 ;	so -> Y+20
                 ;	tmp -> Y+0
                 ; 0001 0305 	ws(tmp);
                 ; 0001 0306 }
                 ;// Hien thi so 32bit co dau
                 ;void wnf(float so)
                 ; 0001 0309 {
                 ; 0001 030A 	char tmp[30];
                 ; 0001 030B 	sprintf(tmp, "%0.2f", so);
                 ;	so -> Y+30
                 ;	tmp -> Y+0
                 ; 0001 030C 	ws(tmp);
                 ; 0001 030D }
                 ;// Hien thi so 32bit co dau
                 ;void wfmt(float so)
                 ; 0001 0310 {
                 ; 0001 0311 	char tmp[30];
                 ; 0001 0312 	sprintf(tmp, "%0.2f", so);
                 ;	so -> Y+30
                 ;	tmp -> Y+0
                 ; 0001 0313 	ws(tmp);
                 ; 0001 0314 }
                 ;/* SPI & LCD INIT */
                 ;void SPIinit()
                 ; 0001 0317 {
                 _SPIinit:
                 ; 0001 0318 	SPCR |= 1 << SPE | 1 << MSTR;                                         //if sPI is used, uncomment this section out
000670 b1ed      	IN   R30,0xD
000671 65e0      	ORI  R30,LOW(0x50)
000672 b9ed      	OUT  0xD,R30
                 ; 0001 0319 	SPSR |= 1 << SPI2X;
000673 9a70      	SBI  0xE,0
                 ; 0001 031A }
000674 9508      	RET
                 ;void LCDinit()
                 ; 0001 031C {
                 _LCDinit:
                 ; 0001 031D 	LcdInitialise();
000675 dfb2      	RCALL _LcdInitialise
                 ; 0001 031E 	LcdClear();
000676 df7b      	RCALL _LcdClear
                 ; 0001 031F 	ws(" <AKBOTKIT>");
                +
000677 e6e0     +LDI R30 , LOW ( _0x2008F + ( 0 ) )
000678 e0f2     +LDI R31 , HIGH ( _0x2008F + ( 0 ) )
                 	__POINTW1MN _0x2008F,0
000679 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0320 }
00067b 9508      	RET
                 
                 	.DSEG
                 _0x2008F:
000260           	.BYTE 0xC
                 ;
                 ;
                 ;/* ADC */
                 ;#define ADC_VREF_TYPE 0x40
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 0327 {
                 
                 	.CSEG
                 _read_adc:
                 ; 0001 0328 	ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
00067c 81e8      	LD   R30,Y
00067d 64e0      	ORI  R30,0x40
00067e b9e7      	OUT  0x7,R30
                 ; 0001 0329 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0001 032A 	delay_us(10);
                +
00067f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000680 958a     +DEC R24
000681 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 032B 	// Start the AD conversion
                 ; 0001 032C 	ADCSRA |= 0x40;
000682 9a36      	SBI  0x6,6
                 ; 0001 032D 	// Wait for the AD conversion to complete
                 ; 0001 032E 	while ((ADCSRA & 0x10) == 0);
                 _0x20090:
000683 9b34      	SBIS 0x6,4
000684 cffe      	RJMP _0x20090
                 ; 0001 032F 	ADCSRA |= 0x10;
000685 9a34      	SBI  0x6,4
                 ; 0001 0330 	return ADCW;
000686 b1e4      	IN   R30,0x4
000687 b1f5      	IN   R31,0x4+1
000688 c0de      	RJMP _0x20C0010
                 ; 0001 0331 }
                 ;
                 ;/* UART BLUETOOTH */
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt[USART_RXC] void usart_rx_isr(void)
                 ; 0001 0365 {
                 _usart_rx_isr:
000689 93aa      	ST   -Y,R26
00068a 93ea      	ST   -Y,R30
00068b 93fa      	ST   -Y,R31
00068c b7ef      	IN   R30,SREG
00068d 93ea      	ST   -Y,R30
                 ; 0001 0366 	char status, data;
                 ; 0001 0367 	status = UCSRA;
00068e 931a      	ST   -Y,R17
00068f 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000690 b11b      	IN   R17,11
                 ; 0001 0368 	data = UDR;
000691 b10c      	IN   R16,12
                 ; 0001 0369 	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0)
000692 2fe1      	MOV  R30,R17
000693 71ec      	ANDI R30,LOW(0x1C)
000694 f4d9      	BRNE _0x20093
                 ; 0001 036A 	{
                 ; 0001 036B 		rx_buffer[rx_wr_index++] = data;
000695 91e0 0536 	LDS  R30,_rx_wr_index
000697 5fef      	SUBI R30,-LOW(1)
000698 93e0 0536 	STS  _rx_wr_index,R30
00069a 940e 1c39 	CALL SUBOPT_0x29
00069c 8300      	ST   Z,R16
                 ; 0001 036C #if RX_BUFFER_SIZE == 256
                 ; 0001 036D 		// special case for receiver buffer size=256
                 ; 0001 036E 		if (++rx_counter == 0) {
                 ; 0001 036F #else
                 ; 0001 0370 		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index = 0;
00069d 91a0 0536 	LDS  R26,_rx_wr_index
00069f 30a8      	CPI  R26,LOW(0x8)
0006a0 f419      	BRNE _0x20094
0006a1 e0e0      	LDI  R30,LOW(0)
0006a2 93e0 0536 	STS  _rx_wr_index,R30
                 ; 0001 0371 		if (++rx_counter == RX_BUFFER_SIZE) {
                 _0x20094:
0006a4 91a0 0538 	LDS  R26,_rx_counter
0006a6 5faf      	SUBI R26,-LOW(1)
0006a7 93a0 0538 	STS  _rx_counter,R26
0006a9 30a8      	CPI  R26,LOW(0x8)
0006aa f429      	BRNE _0x20095
                 ; 0001 0372 			rx_counter = 0;
0006ab e0e0      	LDI  R30,LOW(0)
0006ac 93e0 0538 	STS  _rx_counter,R30
                 ; 0001 0373 #endif
                 ; 0001 0374 			rx_buffer_overflow = 1;
0006ae 9468      	SET
0006af f820      	BLD  R2,0
                 ; 0001 0375 		}
                 ; 0001 0376 		}
                 _0x20095:
                 ; 0001 0377 	}
                 _0x20093:
0006b0 9109      	LD   R16,Y+
0006b1 9119      	LD   R17,Y+
0006b2 c03a      	RJMP _0x20334
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0001 037E {
                 _getchar:
                 ; 0001 037F 	char data;
                 ; 0001 0380 	while (rx_counter == 0);
0006b3 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x20096:
0006b4 91e0 0538 	LDS  R30,_rx_counter
0006b6 30e0      	CPI  R30,0
0006b7 f3e1      	BREQ _0x20096
                 ; 0001 0381 	data = rx_buffer[rx_rd_index++];
0006b8 91e0 0537 	LDS  R30,_rx_rd_index
0006ba 5fef      	SUBI R30,-LOW(1)
0006bb 93e0 0537 	STS  _rx_rd_index,R30
0006bd 940e 1c39 	CALL SUBOPT_0x29
0006bf 8110      	LD   R17,Z
                 ; 0001 0382 #if RX_BUFFER_SIZE != 256
                 ; 0001 0383 	if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
0006c0 91a0 0537 	LDS  R26,_rx_rd_index
0006c2 30a8      	CPI  R26,LOW(0x8)
0006c3 f419      	BRNE _0x20099
0006c4 e0e0      	LDI  R30,LOW(0)
0006c5 93e0 0537 	STS  _rx_rd_index,R30
                 ; 0001 0384 #endif
                 ; 0001 0385 	#asm("cli")
                 _0x20099:
0006c7 94f8      	cli
                 ; 0001 0386 	--rx_counter;
0006c8 91e0 0538 	LDS  R30,_rx_counter
0006ca 50e1      	SUBI R30,LOW(1)
0006cb 93e0 0538 	STS  _rx_counter,R30
                 ; 0001 0387 	#asm("sei")
0006cd 9478      	sei
                 ; 0001 0388 	return data;
0006ce 2fe1      	MOV  R30,R17
0006cf 9119      	LD   R17,Y+
0006d0 9508      	RET
                 ; 0001 0389 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index, tx_rd_index, tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index, tx_rd_index, tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt[USART_TXC] void usart_tx_isr(void)
                 ; 0001 0399 {
                 _usart_tx_isr:
0006d1 93aa      	ST   -Y,R26
0006d2 93ea      	ST   -Y,R30
0006d3 93fa      	ST   -Y,R31
0006d4 b7ef      	IN   R30,SREG
0006d5 93ea      	ST   -Y,R30
                 ; 0001 039A 	if (tx_counter)
0006d6 91e0 0543 	LDS  R30,_tx_counter
0006d8 30e0      	CPI  R30,0
0006d9 f099      	BREQ _0x2009A
                 ; 0001 039B 	{
                 ; 0001 039C 		--tx_counter;
0006da 50e1      	SUBI R30,LOW(1)
0006db 93e0 0543 	STS  _tx_counter,R30
                 ; 0001 039D 		UDR = tx_buffer[tx_rd_index++];
0006dd 91e0 0542 	LDS  R30,_tx_rd_index
0006df 5fef      	SUBI R30,-LOW(1)
0006e0 93e0 0542 	STS  _tx_rd_index,R30
0006e2 940e 1c3e 	CALL SUBOPT_0x2A
0006e4 81e0      	LD   R30,Z
0006e5 b9ec      	OUT  0xC,R30
                 ; 0001 039E #if TX_BUFFER_SIZE != 256
                 ; 0001 039F 		if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
0006e6 91a0 0542 	LDS  R26,_tx_rd_index
0006e8 30a8      	CPI  R26,LOW(0x8)
0006e9 f419      	BRNE _0x2009B
0006ea e0e0      	LDI  R30,LOW(0)
0006eb 93e0 0542 	STS  _tx_rd_index,R30
                 ; 0001 03A0 #endif
                 ; 0001 03A1 	}
                 _0x2009B:
                 ; 0001 03A2 }
                 _0x2009A:
                 _0x20334:
0006ed 91e9      	LD   R30,Y+
0006ee bfef      	OUT  SREG,R30
0006ef 91f9      	LD   R31,Y+
0006f0 91e9      	LD   R30,Y+
0006f1 91a9      	LD   R26,Y+
0006f2 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0001 03A9 {
                 _putchar:
                 ; 0001 03AA 	while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 _0x2009C:
0006f3 91a0 0543 	LDS  R26,_tx_counter
0006f5 30a8      	CPI  R26,LOW(0x8)
0006f6 f3e1      	BREQ _0x2009C
                 ; 0001 03AB 	#asm("cli")
0006f7 94f8      	cli
                 ; 0001 03AC 	if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY) == 0))
0006f8 91e0 0543 	LDS  R30,_tx_counter
0006fa 30e0      	CPI  R30,0
0006fb f411      	BRNE _0x200A0
0006fc 995d      	SBIC 0xB,5
0006fd c016      	RJMP _0x2009F
                 _0x200A0:
                 ; 0001 03AD 	{
                 ; 0001 03AE 		tx_buffer[tx_wr_index++] = c;
0006fe 91e0 0541 	LDS  R30,_tx_wr_index
000700 5fef      	SUBI R30,-LOW(1)
000701 93e0 0541 	STS  _tx_wr_index,R30
000703 940e 1c3e 	CALL SUBOPT_0x2A
000705 81a8      	LD   R26,Y
000706 83a0      	STD  Z+0,R26
                 ; 0001 03AF #if TX_BUFFER_SIZE != 256
                 ; 0001 03B0 		if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index = 0;
000707 91a0 0541 	LDS  R26,_tx_wr_index
000709 30a8      	CPI  R26,LOW(0x8)
00070a f419      	BRNE _0x200A2
00070b e0e0      	LDI  R30,LOW(0)
00070c 93e0 0541 	STS  _tx_wr_index,R30
                 ; 0001 03B1 #endif
                 ; 0001 03B2 		++tx_counter;
                 _0x200A2:
00070e 91e0 0543 	LDS  R30,_tx_counter
000710 5fef      	SUBI R30,-LOW(1)
000711 93e0 0543 	STS  _tx_counter,R30
                 ; 0001 03B3 	}
                 ; 0001 03B4 	else
000713 c002      	RJMP _0x200A3
                 _0x2009F:
                 ; 0001 03B5 		UDR = c;
000714 81e8      	LD   R30,Y
000715 b9ec      	OUT  0xC,R30
                 ; 0001 03B6 	#asm("sei")
                 _0x200A3:
000716 9478      	sei
                 ; 0001 03B7 }
000717 c04f      	RJMP _0x20C0010
                 ;#pragma used-
                 ;#endif
                 ;void inituart()
                 ; 0001 03BB {
                 _inituart:
                 ; 0001 03BC 	// USART initialization
                 ; 0001 03BD 	// Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 03BE 	// USART Receiver: On
                 ; 0001 03BF 	// USART Transmitter: On
                 ; 0001 03C0 	// USART Mode: Asynchronous
                 ; 0001 03C1 	// USART Baud Rate: 38400
                 ; 0001 03C2 	UCSRA = 0x00;
000718 e0e0      	LDI  R30,LOW(0)
000719 b9eb      	OUT  0xB,R30
                 ; 0001 03C3 	UCSRB = 0xD8;
00071a ede8      	LDI  R30,LOW(216)
00071b b9ea      	OUT  0xA,R30
                 ; 0001 03C4 	UCSRC = 0x06;
00071c e0e6      	LDI  R30,LOW(6)
00071d bde0      	OUT  0x20,R30
                 ; 0001 03C5 	UBRRH = 0x00;
00071e e0e0      	LDI  R30,LOW(0)
00071f bde0      	OUT  0x20,R30
                 ; 0001 03C6 	UBRRL = 0x0C;
000720 e0ec      	LDI  R30,LOW(12)
000721 b9e9      	OUT  0x9,R30
                 ; 0001 03C7 }
000722 9508      	RET
                 ;
                 ;//========================================================
                 ;// External Interrupt 0 service routine
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0001 03CC {
                 _ext_int0_isr:
000723 940e 1c43 	CALL SUBOPT_0x2B
                 ; 0001 03CD 	QEL++;
000725 e2aa      	LDI  R26,LOW(_QEL)
000726 e0b5      	LDI  R27,HIGH(_QEL)
000727 c004      	RJMP _0x20333
                 ; 0001 03CE }
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0001 03D2 {
                 _ext_int1_isr:
000728 940e 1c43 	CALL SUBOPT_0x2B
                 ; 0001 03D3 	QER++;
00072a e2ac      	LDI  R26,LOW(_QER)
00072b e0b5      	LDI  R27,HIGH(_QER)
                 _0x20333:
00072c 91ed      	LD   R30,X+
00072d 91fd      	LD   R31,X+
00072e 9631      	ADIW R30,1
00072f 93fe      	ST   -X,R31
000730 93ee      	ST   -X,R30
                 ; 0001 03D4 }
000731 91e9      	LD   R30,Y+
000732 bfef      	OUT  SREG,R30
000733 91f9      	LD   R31,Y+
000734 91e9      	LD   R30,Y+
000735 91b9      	LD   R27,Y+
000736 91a9      	LD   R26,Y+
000737 9518      	RETI
                 ;//========================================================
                 ;//khoi tao encoder
                 ;void initencoder()
                 ; 0001 03D8 {
                 _initencoder:
                 ; 0001 03D9 	// Dem 24 xung / 1 vong banh xe
                 ; 0001 03DA 	// External Interrupt(s) initialization
                 ; 0001 03DB 	// INT0: On
                 ; 0001 03DC 	// INT0 Mode: Any change
                 ; 0001 03DD 	// INT1: On
                 ; 0001 03DE 	// INT1 Mode: Any change
                 ; 0001 03DF 	// INT2: Off
                 ; 0001 03E0 	GICR |= 0xC0;
000738 b7eb      	IN   R30,0x3B
000739 6ce0      	ORI  R30,LOW(0xC0)
00073a bfeb      	OUT  0x3B,R30
                 ; 0001 03E1 	MCUCR = 0x05;
00073b e0e5      	LDI  R30,LOW(5)
00073c bfe5      	OUT  0x35,R30
                 ; 0001 03E2 	MCUCSR = 0x00;
00073d e0e0      	LDI  R30,LOW(0)
00073e bfe4      	OUT  0x34,R30
                 ; 0001 03E3 	GIFR = 0xC0;
00073f ece0      	LDI  R30,LOW(192)
000740 bfea      	OUT  0x3A,R30
                 ; 0001 03E4 	// Global enable interrupts
                 ; 0001 03E5 
                 ; 0001 03E6 	//OCR1A=0-255; MOTOR LEFT
                 ; 0001 03E7 	//OCR1B=0-255; MOTOR RIGHT
                 ; 0001 03E8 }
000741 9508      	RET
                 ;
                 ;//========================================================
                 ;//control velocity motor
                 ;void vMLtoi(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 03ED {
                 _vMLtoi:
                 ; 0001 03EE 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
000742 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 03EF 	seLki = 0;//reset thanh phan I
                 ; 0001 03F0 	//uRold=0;
                 ; 0001 03F1 	MLdir = 1;
000744 9aae      	SBI  0x15,6
                 ; 0001 03F2 	svQEL = v;
000745 940e 1c4a 	CALL SUBOPT_0x2C
                 ; 0001 03F3 }
000747 c01f      	RJMP _0x20C0010
                 ;//========================================================
                 ;void vMLlui(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 03F6 {
                 _vMLlui:
                 ; 0001 03F7 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
000748 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 03F8 	seLki = 0;//reset thanh phan I
                 ; 0001 03F9 
                 ; 0001 03FA 	//uRold=0;
                 ; 0001 03FB 	MLdir = 0;
00074a 98ae      	CBI  0x15,6
                 ; 0001 03FC 	svQEL = v;
00074b 940e 1c4a 	CALL SUBOPT_0x2C
                 ; 0001 03FD }
00074d c019      	RJMP _0x20C0010
                 ;//========================================================
                 ;void vMLstop()
                 ; 0001 0400 {
                 _vMLstop:
                 ; 0001 0401 	seRki = 0;//reset thanh phan I
00074e 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 0402 	seLki = 0;//reset thanh phan I
                 ; 0001 0403 	MLdir = 1;
000750 9aae      	SBI  0x15,6
                 ; 0001 0404 	OCR1A = 0;
000751 e0e0      	LDI  R30,LOW(0)
000752 e0f0      	LDI  R31,HIGH(0)
000753 bdfb      	OUT  0x2A+1,R31
000754 bdea      	OUT  0x2A,R30
                 ; 0001 0405 	svQEL = 0;
000755 93e0 04fc 	STS  _svQEL,R30
000757 93e0 04fd 	STS  _svQEL+1,R30
                 ; 0001 0406 }
000759 9508      	RET
                 ;//========================================================
                 ;//========================================================
                 ;void vMRtoi(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 040A {
                 _vMRtoi:
                 ; 0001 040B 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
00075a 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 040C 	seLki = 0;//reset thanh phan I
                 ; 0001 040D 	MRdir = 1;
00075c 9aaf      	SBI  0x15,7
                 ; 0001 040E 	svQER = v;
00075d c003      	RJMP _0x20C000F
                 ; 0001 040F }
                 ;//========================================================
                 ;void vMRlui(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 0412 {
                 _vMRlui:
                 ; 0001 0413 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
00075e 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 0414 	seLki = 0;//reset thanh phan I
                 ; 0001 0415 	MRdir = 0;
000760 98af      	CBI  0x15,7
                 ; 0001 0416 	svQER = v;
                 _0x20C000F:
000761 81e8      	LD   R30,Y
000762 e0f0      	LDI  R31,0
000763 93e0 04fe 	STS  _svQER,R30
000765 93f0 04ff 	STS  _svQER+1,R31
                 ; 0001 0417 }
                 _0x20C0010:
000767 9621      	ADIW R28,1
000768 9508      	RET
                 ;//========================================================
                 ;void vMRstop()
                 ; 0001 041A {
                 _vMRstop:
                 ; 0001 041B 	seRki = 0;//reset thanh phan I
000769 940e 1b35 	CALL SUBOPT_0x7
                 ; 0001 041C 	seLki = 0;//reset thanh phan I
                 ; 0001 041D 	MRdir = 1;
00076b 9aaf      	SBI  0x15,7
                 ; 0001 041E 	OCR1B = 0;
00076c e0e0      	LDI  R30,LOW(0)
00076d e0f0      	LDI  R31,HIGH(0)
00076e bdf9      	OUT  0x28+1,R31
00076f bde8      	OUT  0x28,R30
                 ; 0001 041F 	svQER = 0;
000770 93e0 04fe 	STS  _svQER,R30
000772 93e0 04ff 	STS  _svQER+1,R30
                 ; 0001 0420 }
000774 9508      	RET
                 ;//========================================================
                 ;// ham dieu khien vi tri
                 ;void ctrRobottoi(unsigned int d, unsigned int v)  //v:0-22
                 ; 0001 0424 {
                 ; 0001 0425 	flagwaitctrAngle = 0;
                 ;	d -> Y+2
                 ;	v -> Y+0
                 ; 0001 0426 	flagwaitctrRobot = 1;
                 ; 0001 0427 	sd = d;// set gia tri khoang cach di chuyen
                 ; 0001 0428 	oldd = (QEL + QER) / 2; // luu gia tri vi tri hien tai
                 ; 0001 0429 	vMRtoi(v);
                 ; 0001 042A 	vMLtoi(v);
                 ; 0001 042B }
                 ;// ham dieu khien vi tri
                 ;void ctrRobotlui(unsigned int d, unsigned int v)  //v:0-22
                 ; 0001 042E {
                 ; 0001 042F 	flagwaitctrAngle = 0;
                 ;	d -> Y+2
                 ;	v -> Y+0
                 ; 0001 0430 	flagwaitctrRobot = 1;
                 ; 0001 0431 	sd = d;// set gia tri khoang cach di chuyen
                 ; 0001 0432 	oldd = (QEL + QER) / 2; // luu gia tri vi tri hien tai
                 ; 0001 0433 	vMRlui(v);
                 ; 0001 0434 	vMLlui(v);
                 ; 0001 0435 }
                 ;// ham dieu khien goc quay
                 ;void ctrRobotXoay(int angle, unsigned int v)  //v:0-22
                 ; 0001 0438 {
                 ; 0001 0439 	float fangle = 0;
                 ; 0001 043A 	flagwaitctrRobot = 0;
                 ;	angle -> Y+6
                 ;	v -> Y+4
                 ;	fangle -> Y+0
                 ; 0001 043B 	if (angle > 0)  { //xoay trai
                 ; 0001 043C 		if (angle > 1) vMRtoi(v);
                 ; 0001 043D 		else vMRtoi(0);
                 ; 0001 043E 		if (angle > 1) vMLlui(v);
                 ; 0001 043F 		else vMLlui(0);
                 ; 0001 0440 	}
                 ; 0001 0441 	else  //xoay phai
                 ; 0001 0442 	{
                 ; 0001 0443 		angle = -angle;
                 ; 0001 0444 		if (angle > 1) vMRlui(v);
                 ; 0001 0445 		else vMRlui(0);
                 ; 0001 0446 		if (angle > 1) vMLtoi(v);
                 ; 0001 0447 		else vMLtoi(0);
                 ; 0001 0448 	}
                 ; 0001 0449 	flagwaitctrAngle = 1;
                 ; 0001 044A 	fangle = angle*0.35;// nhan chia so float
                 ; 0001 044B 	sa = fangle;
                 ; 0001 044C 	olda = QEL; // luu gia tri vi tri hien tai
                 ; 0001 044D }
                 ;
                 ;
                 ;//============Phat==============
                 ;IntRobot convertRobot2IntRobot(Robot robot)
                 ; 0001 0452 {
                 _convertRobot2IntRobot:
                 ; 0001 0453 	IntRobot intRb;
                 ; 0001 0454 	intRb.id = (int)robot.id;
000775 976c      	SBIW R28,28
                 ;	robot -> Y+28
                 ;	intRb -> Y+0
                +
000776 8dec     +LDD R30 , Y + 28
000777 8dfd     +LDD R31 , Y + 28 + 1
000778 8d6e     +LDD R22 , Y + 28 + 2
000779 8d7f     +LDD R23 , Y + 28 + 3
                 	__GETD1S 28
00077a 940e 20c2 	CALL __CFD1
00077c 83e8      	ST   Y,R30
00077d 83f9      	STD  Y+1,R31
                 ; 0001 0455 	intRb.x = (int)robot.x;
00077e 940e 1ba8 	CALL SUBOPT_0x18
000780 940e 20c2 	CALL __CFD1
000782 83ea      	STD  Y+2,R30
000783 83fb      	STD  Y+2+1,R31
                 ; 0001 0456 	intRb.y = (int)robot.y;
000784 940e 1b9a 	CALL SUBOPT_0x15
000786 940e 20c2 	CALL __CFD1
000788 83ec      	STD  Y+4,R30
000789 83fd      	STD  Y+4+1,R31
                 ; 0001 0457 	intRb.ox = (int)robot.ox;
00078a 940e 1c4d 	CALL SUBOPT_0x2D
00078c 940e 20c2 	CALL __CFD1
00078e 83ee      	STD  Y+6,R30
00078f 83ff      	STD  Y+6+1,R31
                 ; 0001 0458 	intRb.oy = (int)robot.oy;
                +
000790 a5ec     +LDD R30 , Y + 44
000791 a5fd     +LDD R31 , Y + 44 + 1
000792 a56e     +LDD R22 , Y + 44 + 2
000793 a57f     +LDD R23 , Y + 44 + 3
                 	__GETD1S 44
000794 940e 20c2 	CALL __CFD1
000796 87e8      	STD  Y+8,R30
000797 87f9      	STD  Y+8+1,R31
                 ; 0001 0459 	intRb.ball.x = (int)robot.ball.x;
000798 940e 1c52 	CALL SUBOPT_0x2E
00079a 940e 20c2 	CALL __CFD1
00079c 87ea      	STD  Y+10,R30
00079d 87fb      	STD  Y+10+1,R31
                 ; 0001 045A 	intRb.ball.y = (int)robot.ball.y;
                +
00079e a9ec     +LDD R30 , Y + 52
00079f a9fd     +LDD R31 , Y + 52 + 1
0007a0 a96e     +LDD R22 , Y + 52 + 2
0007a1 a97f     +LDD R23 , Y + 52 + 3
                 	__GETD1S 52
0007a2 940e 20c2 	CALL __CFD1
0007a4 87ec      	STD  Y+12,R30
0007a5 87fd      	STD  Y+12+1,R31
                 ; 0001 045B 	return intRb;
0007a6 01fe      	MOVW R30,R28
0007a7 01de      	MOVW R26,R28
0007a8 961e      	ADIW R26,14
0007a9 e08e      	LDI  R24,14
0007aa 940e 239b 	CALL __COPYMML
0007ac 01fe      	MOVW R30,R28
0007ad 963e      	ADIW R30,14
0007ae e08e      	LDI  R24,14
0007af b61f      	IN   R1,SREG
0007b0 94f8      	CLI
0007b1 c173      	RJMP _0x20C000E
                 ; 0001 045C }
                 ;
                 ;//========================================================
                 ;// read  vi tri robot   PHUC
                 ;//========================================================
                 ;/* Comment to return
                 ;unsigned char readposition()
                 ;{
                 ;unsigned char  i=0;
                 ;unsigned flagstatus=0;
                 ;
                 ;if(nRF24L01_RxPacket(RxBuf)==1)         // Neu nhan duoc du lieu
                 ;{
                 ;for( i=0;i<28;i++)
                 ;{
                 ;*(uint8_t *) ((uint8_t *)&rb + i)=RxBuf[i];
                 ;}
                 ;
                 ;idRobot = fmod(rb.id,10); // doc id
                 ;cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
                 ;
                 ;switch (idRobot)
                 ;{
                 ;case 1:
                 ;robot11=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 2:
                 ;robot12=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 3:
                 ;robot13=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 4:
                 ;robot21=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 5:
                 ;robot22=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 6:
                 ;robot23=convertRobot2IntRobot(rb);
                 ;break;
                 ;}
                 ;
                 ;if(idRobot==ROBOT_ID)
                 ;{
                 ;LEDL=!LEDL;
                 ;cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
                 ;flagstatus=1;
                 ;robotctrl=convertRobot2IntRobot(rb);
                 ;}
                 ;}
                 ;return flagstatus;
                 ;}     */
                 ;//========================================================
                 ;// calc  vi tri robot   so voi mot diem (x,y)        PHUC
                 ;// return goclenh va khoang cach, HUONG TAN CONG
                 ;//========================================================
                 ;
                 ;
                 ;#define LP_O_C 0.5
                 ;float oldOrientation = 0;
                 ;
                 ;void calcvitri(float x, float y)
                 ; 0001 049B {
                 _calcvitri:
                 ; 0001 049C 	float ahx, ahy, aox, aoy, dah, dao, ahay, cosgoc, anpla0, anpla1, detaanpla, newOrientation;
                 ; 0001 049D 	ahx = robotctrl.ox - robotctrl.x;
0007b2 97e0      	SBIW R28,48
                 ;	x -> Y+52
                 ;	y -> Y+48
                 ;	ahx -> Y+44
                 ;	ahy -> Y+40
                 ;	aox -> Y+36
                 ;	aoy -> Y+32
                 ;	dah -> Y+28
                 ;	dao -> Y+24
                 ;	ahay -> Y+20
                 ;	cosgoc -> Y+16
                 ;	anpla0 -> Y+12
                 ;	anpla1 -> Y+8
                 ;	detaanpla -> Y+4
                 ;	newOrientation -> Y+0
                +
0007b3 91e0 0465+LDS R30 , _robotctrl + ( 6 )
0007b5 91f0 0466+LDS R31 , _robotctrl + ( 6 ) + 1
                 	__GETW1MN _robotctrl,6
                +
0007b7 91a0 0461+LDS R26 , _robotctrl + ( 2 )
0007b9 91b0 0462+LDS R27 , _robotctrl + ( 2 ) + 1
                 	__GETW2MN _robotctrl,2
0007bb 1bea      	SUB  R30,R26
0007bc 0bfb      	SBC  R31,R27
0007bd 940e 1b9f 	CALL SUBOPT_0x16
                +
0007bf a7ec     +STD Y + 44 , R30
0007c0 a7fd     +STD Y + 44 + 1 , R31
0007c1 a76e     +STD Y + 44 + 2 , R22
0007c2 a77f     +STD Y + 44 + 3 , R23
                 	__PUTD1S 44
                 ; 0001 049E 	ahy = robotctrl.oy - robotctrl.y;
                +
0007c3 91e0 0467+LDS R30 , _robotctrl + ( 8 )
0007c5 91f0 0468+LDS R31 , _robotctrl + ( 8 ) + 1
                 	__GETW1MN _robotctrl,8
                +
0007c7 91a0 0463+LDS R26 , _robotctrl + ( 4 )
0007c9 91b0 0464+LDS R27 , _robotctrl + ( 4 ) + 1
                 	__GETW2MN _robotctrl,4
0007cb 1bea      	SUB  R30,R26
0007cc 0bfb      	SBC  R31,R27
0007cd 940e 1b9f 	CALL SUBOPT_0x16
                +
0007cf a7e8     +STD Y + 40 , R30
0007d0 a7f9     +STD Y + 40 + 1 , R31
0007d1 a76a     +STD Y + 40 + 2 , R22
0007d2 a77b     +STD Y + 40 + 3 , R23
                 	__PUTD1S 40
                 ; 0001 049F 	aox = x - robotctrl.x;
0007d3 940e 1c57 	CALL SUBOPT_0x2F
                +
0007d5 a9ac     +LDD R26 , Y + 52
0007d6 a9bd     +LDD R27 , Y + 52 + 1
0007d7 a98e     +LDD R24 , Y + 52 + 2
0007d8 a99f     +LDD R25 , Y + 52 + 3
                 	__GETD2S 52
0007d9 940e 1c5c 	CALL SUBOPT_0x30
                +
0007db a3ec     +STD Y + 36 , R30
0007dc a3fd     +STD Y + 36 + 1 , R31
0007dd a36e     +STD Y + 36 + 2 , R22
0007de a37f     +STD Y + 36 + 3 , R23
                 	__PUTD1S 36
                 ; 0001 04A0 	aoy = y - robotctrl.y;
0007df 940e 1c62 	CALL SUBOPT_0x31
                +
0007e1 a9a8     +LDD R26 , Y + 48
0007e2 a9b9     +LDD R27 , Y + 48 + 1
0007e3 a98a     +LDD R24 , Y + 48 + 2
0007e4 a99b     +LDD R25 , Y + 48 + 3
                 	__GETD2S 48
0007e5 940e 1c5c 	CALL SUBOPT_0x30
                +
0007e7 a3e8     +STD Y + 32 , R30
0007e8 a3f9     +STD Y + 32 + 1 , R31
0007e9 a36a     +STD Y + 32 + 2 , R22
0007ea a37b     +STD Y + 32 + 3 , R23
                 	__PUTD1S 32
                 ; 0001 04A1 	dah = sqrt(ahx*ahx + ahy*ahy);
                +
0007eb a5ec     +LDD R30 , Y + 44
0007ec a5fd     +LDD R31 , Y + 44 + 1
0007ed a56e     +LDD R22 , Y + 44 + 2
0007ee a57f     +LDD R23 , Y + 44 + 3
                 	__GETD1S 44
0007ef 940e 1c67 	CALL SUBOPT_0x32
0007f1 937f      	PUSH R23
0007f2 936f      	PUSH R22
0007f3 93ff      	PUSH R31
0007f4 93ef      	PUSH R30
0007f5 940e 1c4d 	CALL SUBOPT_0x2D
0007f7 940e 1c6e 	CALL SUBOPT_0x33
0007f9 91af      	POP  R26
0007fa 91bf      	POP  R27
0007fb 918f      	POP  R24
0007fc 919f      	POP  R25
0007fd 940e 1c75 	CALL SUBOPT_0x34
                +
0007ff 8fec     +STD Y + 28 , R30
000800 8ffd     +STD Y + 28 + 1 , R31
000801 8f6e     +STD Y + 28 + 2 , R22
000802 8f7f     +STD Y + 28 + 3 , R23
                 	__PUTD1S 28
                 ; 0001 04A2 	dao = sqrt(aox*aox + aoy*aoy);
000803 940e 1b9a 	CALL SUBOPT_0x15
000805 940e 1c7b 	CALL SUBOPT_0x35
000807 940e 2183 	CALL __MULF12
000809 937f      	PUSH R23
00080a 936f      	PUSH R22
00080b 93ff      	PUSH R31
00080c 93ef      	PUSH R30
00080d 940e 1ba8 	CALL SUBOPT_0x18
00080f 940e 1b59 	CALL SUBOPT_0xC
000811 940e 2183 	CALL __MULF12
000813 91af      	POP  R26
000814 91bf      	POP  R27
000815 918f      	POP  R24
000816 919f      	POP  R25
000817 940e 1c75 	CALL SUBOPT_0x34
                +
000819 8fe8     +STD Y + 24 , R30
00081a 8ff9     +STD Y + 24 + 1 , R31
00081b 8f6a     +STD Y + 24 + 2 , R22
00081c 8f7b     +STD Y + 24 + 3 , R23
                 	__PUTD1S 24
                 ; 0001 04A3 	ahay = ahx*aox + ahy*aoy;
00081d 940e 1b9a 	CALL SUBOPT_0x15
00081f 940e 1c67 	CALL SUBOPT_0x32
000821 937f      	PUSH R23
000822 936f      	PUSH R22
000823 93ff      	PUSH R31
000824 93ef      	PUSH R30
000825 940e 1ba8 	CALL SUBOPT_0x18
000827 940e 1c6e 	CALL SUBOPT_0x33
000829 91af      	POP  R26
00082a 91bf      	POP  R27
00082b 918f      	POP  R24
00082c 919f      	POP  R25
00082d 940e 1c80 	CALL SUBOPT_0x36
                 ; 0001 04A4 	cosgoc = ahay / (dah*dao);
                +
00082f 8de8     +LDD R30 , Y + 24
000830 8df9     +LDD R31 , Y + 24 + 1
000831 8d6a     +LDD R22 , Y + 24 + 2
000832 8d7b     +LDD R23 , Y + 24 + 3
                 	__GETD1S 24
                +
000833 8dac     +LDD R26 , Y + 28
000834 8dbd     +LDD R27 , Y + 28 + 1
000835 8d8e     +LDD R24 , Y + 28 + 2
000836 8d9f     +LDD R25 , Y + 28 + 3
                 	__GETD2S 28
000837 940e 2183 	CALL __MULF12
000839 940e 1c87 	CALL SUBOPT_0x37
00083b 940e 21d1 	CALL __DIVF21
00083d 940e 1c8c 	CALL SUBOPT_0x38
                 ; 0001 04A5 
                 ; 0001 04A6 	anpla0 = atan2(ahy, ahx);
00083f 940e 1c91 	CALL SUBOPT_0x39
000841 940e 1c95 	CALL SUBOPT_0x3A
000843 940e 1c9a 	CALL SUBOPT_0x3B
                 ; 0001 04A7 	anpla1 = atan2(aoy, aox);
000845 940e 1b93 	CALL SUBOPT_0x14
000847 940e 1c91 	CALL SUBOPT_0x39
000849 940e 1a20 	CALL _atan2
                +
00084b 87e8     +STD Y + 8 , R30
00084c 87f9     +STD Y + 8 + 1 , R31
00084d 876a     +STD Y + 8 + 2 , R22
00084e 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0001 04A8 	detaanpla = anpla0 - anpla1;
00084f 940e 1c9f 	CALL SUBOPT_0x3C
000851 940e 1caa 	CALL SUBOPT_0x3D
                 ; 0001 04A9 
                 ; 0001 04AA 	errangle = acos(cosgoc) * 180 / 3.14;
000853 940e 1caf 	CALL SUBOPT_0x3E
000855 940e 237c 	CALL __PUTPARD1
000857 940e 1a02 	CALL _acos
000859 940e 1cb4 	CALL SUBOPT_0x3F
                +
00085b ece3     +LDI R30 , LOW ( 0x4048F5C3 )
00085c eff5     +LDI R31 , HIGH ( 0x4048F5C3 )
00085d e468     +LDI R22 , BYTE3 ( 0x4048F5C3 )
00085e e470     +LDI R23 , BYTE4 ( 0x4048F5C3 )
                 	__GETD1N 0x4048F5C3
00085f 940e 21d1 	CALL __DIVF21
000861 93e0 046d 	STS  _errangle,R30
000863 93f0 046e 	STS  _errangle+1,R31
000865 9360 046f 	STS  _errangle+2,R22
000867 9370 0470 	STS  _errangle+3,R23
                 ; 0001 04AB 	if (((detaanpla > 0) && (detaanpla < M_PI)) || (detaanpla < -M_PI))  // xet truong hop goc ben phai
000869 940e 1cbd 	CALL SUBOPT_0x40
00086b 940e 23b3 	CALL __CPD02
00086d f44c      	BRGE _0x200BB
00086e 940e 1cbd 	CALL SUBOPT_0x40
                +
000870 edeb     +LDI R30 , LOW ( 0x40490FDB )
000871 e0ff     +LDI R31 , HIGH ( 0x40490FDB )
000872 e469     +LDI R22 , BYTE3 ( 0x40490FDB )
000873 e470     +LDI R23 , BYTE4 ( 0x40490FDB )
                 	__GETD1N 0x40490FDB
000874 940e 2216 	CALL __CMPF12
000876 f028      	BRLO _0x200BD
                 _0x200BB:
000877 940e 1cbd 	CALL SUBOPT_0x40
000879 940e 1b6a 	CALL SUBOPT_0xF
00087b f428      	BRSH _0x200BA
                 _0x200BD:
                 ; 0001 04AC 	{
                 ; 0001 04AD 		errangle = -errangle; // ben phai
00087c 940e 1cc2 	CALL SUBOPT_0x41
00087e 940e 208d 	CALL __ANEGF1
000880 c002      	RJMP _0x20322
                 ; 0001 04AE 	}
                 ; 0001 04AF 	else
                 _0x200BA:
                 ; 0001 04B0 	{
                 ; 0001 04B1 		errangle = errangle;   // ben trai
000881 940e 1cc2 	CALL SUBOPT_0x41
                 _0x20322:
000883 93e0 046d 	STS  _errangle,R30
000885 93f0 046e 	STS  _errangle+1,R31
000887 9360 046f 	STS  _errangle+2,R22
000889 9370 0470 	STS  _errangle+3,R23
                 ; 0001 04B2 
                 ; 0001 04B3 	}
                 ; 0001 04B4 	distance = sqrt(aox*3.48*aox*3.48 + aoy*2.89*aoy*2.89); //tinh khoang cach
00088b 940e 1c7b 	CALL SUBOPT_0x35
                +
00088d e5e2     +LDI R30 , LOW ( 0x405EB852 )
00088e ebf8     +LDI R31 , HIGH ( 0x405EB852 )
00088f e56e     +LDI R22 , BYTE3 ( 0x405EB852 )
000890 e470     +LDI R23 , BYTE4 ( 0x405EB852 )
                 	__GETD1N 0x405EB852
000891 940e 2183 	CALL __MULF12
000893 940e 1c7b 	CALL SUBOPT_0x35
000895 940e 2183 	CALL __MULF12
                +
000897 e5a2     +LDI R26 , LOW ( 0x405EB852 )
000898 ebb8     +LDI R27 , HIGH ( 0x405EB852 )
000899 e58e     +LDI R24 , BYTE3 ( 0x405EB852 )
00089a e490     +LDI R25 , BYTE4 ( 0x405EB852 )
                 	__GETD2N 0x405EB852
00089b 940e 2183 	CALL __MULF12
00089d 937f      	PUSH R23
00089e 936f      	PUSH R22
00089f 93ff      	PUSH R31
0008a0 93ef      	PUSH R30
0008a1 940e 1b59 	CALL SUBOPT_0xC
                +
0008a3 ece3     +LDI R30 , LOW ( 0x4038F5C3 )
0008a4 eff5     +LDI R31 , HIGH ( 0x4038F5C3 )
0008a5 e368     +LDI R22 , BYTE3 ( 0x4038F5C3 )
0008a6 e470     +LDI R23 , BYTE4 ( 0x4038F5C3 )
                 	__GETD1N 0x4038F5C3
0008a7 940e 2183 	CALL __MULF12
0008a9 940e 1b59 	CALL SUBOPT_0xC
0008ab 940e 2183 	CALL __MULF12
                +
0008ad eca3     +LDI R26 , LOW ( 0x4038F5C3 )
0008ae efb5     +LDI R27 , HIGH ( 0x4038F5C3 )
0008af e388     +LDI R24 , BYTE3 ( 0x4038F5C3 )
0008b0 e490     +LDI R25 , BYTE4 ( 0x4038F5C3 )
                 	__GETD2N 0x4038F5C3
0008b1 940e 2183 	CALL __MULF12
0008b3 91af      	POP  R26
0008b4 91bf      	POP  R27
0008b5 918f      	POP  R24
0008b6 919f      	POP  R25
0008b7 940e 1c75 	CALL SUBOPT_0x34
0008b9 93e0 0471 	STS  _distance,R30
0008bb 93f0 0472 	STS  _distance+1,R31
0008bd 9360 0473 	STS  _distance+2,R22
0008bf 9370 0474 	STS  _distance+3,R23
                 ; 0001 04B5 	newOrientation = atan2(ahy, ahx) * 180 / M_PI + offestsanco;//tinh huong ra goc
0008c1 940e 1c91 	CALL SUBOPT_0x39
0008c3 940e 1c95 	CALL SUBOPT_0x3A
0008c5 940e 1cb4 	CALL SUBOPT_0x3F
                +
0008c7 edeb     +LDI R30 , LOW ( 0x40490FDB )
0008c8 e0ff     +LDI R31 , HIGH ( 0x40490FDB )
0008c9 e469     +LDI R22 , BYTE3 ( 0x40490FDB )
0008ca e470     +LDI R23 , BYTE4 ( 0x40490FDB )
                 	__GETD1N 0x40490FDB
0008cb 940e 21d1 	CALL __DIVF21
0008cd 91a0 04b1 	LDS  R26,_offestsanco
0008cf 91b0 04b2 	LDS  R27,_offestsanco+1
0008d1 9180 04b3 	LDS  R24,_offestsanco+2
0008d3 9190 04b4 	LDS  R25,_offestsanco+3
0008d5 940e 2133 	CALL __ADDF12
0008d7 940e 1ccb 	CALL SUBOPT_0x42
                 ; 0001 04B6 	orientation = newOrientation * LP_O_C + oldOrientation * (1 - LP_O_C);
0008d9 940e 1cce 	CALL SUBOPT_0x43
0008db 940e 1cd1 	CALL SUBOPT_0x44
0008dd 937f      	PUSH R23
0008de 936f      	PUSH R22
0008df 93ff      	PUSH R31
0008e0 93ef      	PUSH R30
0008e1 91a0 0544 	LDS  R26,_oldOrientation
0008e3 91b0 0545 	LDS  R27,_oldOrientation+1
0008e5 9180 0546 	LDS  R24,_oldOrientation+2
0008e7 9190 0547 	LDS  R25,_oldOrientation+3
0008e9 940e 1cd1 	CALL SUBOPT_0x44
0008eb 91af      	POP  R26
0008ec 91bf      	POP  R27
0008ed 918f      	POP  R24
0008ee 919f      	POP  R25
0008ef 940e 2133 	CALL __ADDF12
0008f1 93e0 0475 	STS  _orientation,R30
0008f3 93f0 0476 	STS  _orientation+1,R31
0008f5 9360 0477 	STS  _orientation+2,R22
0008f7 9370 0478 	STS  _orientation+3,R23
                 ; 0001 04B7 	if ((0 < orientation && orientation < 74) || (0 > orientation && orientation > -80))
0008f9 940e 1b50 	CALL SUBOPT_0xB
0008fb 940e 23a5 	CALL __CPD01
0008fd f44c      	BRGE _0x200C1
0008fe 940e 1cd8 	CALL SUBOPT_0x45
                +
000900 e0e0     +LDI R30 , LOW ( 0x42940000 )
000901 e0f0     +LDI R31 , HIGH ( 0x42940000 )
000902 e964     +LDI R22 , BYTE3 ( 0x42940000 )
000903 e472     +LDI R23 , BYTE4 ( 0x42940000 )
                 	__GETD1N 0x42940000
000904 940e 2216 	CALL __CMPF12
000906 f090      	BRLO _0x200C3
                 _0x200C1:
000907 91e0 0478 	LDS  R30,_orientation+3
000909 23ee      	TST  R30
00090a f46a      	BRPL _0x200C4
00090b 940e 1cd8 	CALL SUBOPT_0x45
                +
00090d e0e0     +LDI R30 , LOW ( 0xC2A00000 )
00090e e0f0     +LDI R31 , HIGH ( 0xC2A00000 )
00090f ea60     +LDI R22 , BYTE3 ( 0xC2A00000 )
000910 ec72     +LDI R23 , BYTE4 ( 0xC2A00000 )
                 	__GETD1N 0xC2A00000
000911 940e 2216 	CALL __CMPF12
000913 f009      	BREQ PC+2
000914 f410      	BRCC PC+3
000915 940c 0918 	JMP  _0x200C4
000917 c001      	RJMP _0x200C3
                 _0x200C4:
000918 c009      	RJMP _0x200C0
                 _0x200C3:
                 ; 0001 04B8 	{
                 ; 0001 04B9 		if (SAN_ID == 1)// phan san duong
                 ; 0001 04BA 		{
                 ; 0001 04BB 			flagtancong = 0;
000919 2444      	CLR  R4
00091a 2455      	CLR  R5
                 ; 0001 04BC 			offsetphongthu = 70;
00091b e4e6      	LDI  R30,LOW(70)
00091c e0f0      	LDI  R31,HIGH(70)
00091d 013f      	MOVW R6,R30
                 ; 0001 04BD 			goctancong = 180;
00091e ebe4      	LDI  R30,LOW(180)
00091f e0f0      	LDI  R31,HIGH(180)
000920 014f      	MOVW R8,R30
                 ; 0001 04BE 		}
                 ; 0001 04BF 		else // phan san am
                 ; 0001 04C0 		{
                 ; 0001 04C1 			flagtancong = 1;
                 ; 0001 04C2 
                 ; 0001 04C3 		}
                 ; 0001 04C4 	}
                 ; 0001 04C5 	else
000921 c003      	RJMP _0x200C9
                 _0x200C0:
                 ; 0001 04C6 	{
                 ; 0001 04C7 		if (SAN_ID == 1)
                 ; 0001 04C8 		{
                 ; 0001 04C9 			flagtancong = 1;
000922 e0e1      	LDI  R30,LOW(1)
000923 e0f0      	LDI  R31,HIGH(1)
000924 012f      	MOVW R4,R30
                 ; 0001 04CA 		}
                 ; 0001 04CB 		else
                 ; 0001 04CC 		{
                 ; 0001 04CD 			flagtancong = 0;
                 ; 0001 04CE 			offsetphongthu = -70;
                 ; 0001 04CF 			goctancong = 0;
                 ; 0001 04D0 		}
                 ; 0001 04D1 	}
                 _0x200C9:
                 ; 0001 04D2 }
                 _0x20C000E:
000925 96e8      	ADIW R28,56
000926 9508      	RET
                 ;void runEscStuck()
                 ; 0001 04D4 {
                 ; 0001 04D5 	while (cmdCtrlRobot == 4)
                 ; 0001 04D6 	{
                 ; 0001 04D7 
                 ; 0001 04D8 		DDRA = 0x00;
                 ; 0001 04D9 		PORTA = 0x00;
                 ; 0001 04DA 		IRFL = read_adc(4);
                 ; 0001 04DB 		IRFR = read_adc(5);
                 ; 0001 04DC 
                 ; 0001 04DD 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 04DE 		{
                 ; 0001 04DF 			vMLtoi(22); vMRlui(22);
                 ; 0001 04E0 			delay_ms(100);
                 ; 0001 04E1 		}
                 ; 0001 04E2 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 04E3 		{
                 ; 0001 04E4 			vMLlui(0); vMRlui(25); delay_ms(100);
                 ; 0001 04E5 		}
                 ; 0001 04E6 		if (IRFR>300 && IRFL < 300)
                 ; 0001 04E7 		{
                 ; 0001 04E8 			vMLlui(25); vMRlui(0); delay_ms(100);
                 ; 0001 04E9 		}
                 ; 0001 04EA 		LEDBR = !LEDBR;
                 ; 0001 04EB 		readposition();//doc RF cap nhat ai robot
                 ; 0001 04EC 	}
                 ; 0001 04ED }
                 ;void runEscStucksethome()
                 ; 0001 04EF {
                 ; 0001 04F0 	while (cmdCtrlRobot == 7)
                 ; 0001 04F1 	{
                 ; 0001 04F2 		DDRA = 0x00;
                 ; 0001 04F3 		PORTA = 0x00;
                 ; 0001 04F4 		readposition();//doc RF cap nhat ai robot
                 ; 0001 04F5 		IRFL = read_adc(4);
                 ; 0001 04F6 		IRFR = read_adc(5);
                 ; 0001 04F7 
                 ; 0001 04F8 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 04F9 		{
                 ; 0001 04FA 			vMLtoi(22); vMRlui(22);
                 ; 0001 04FB 			delay_ms(100);
                 ; 0001 04FC 		}
                 ; 0001 04FD 
                 ; 0001 04FE 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 04FF 		{
                 ; 0001 0500 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0501 		}
                 ; 0001 0502 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0503 		{
                 ; 0001 0504 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 0505 		}
                 ; 0001 0506 
                 ; 0001 0507 		LEDBR = !LEDBR;
                 ; 0001 0508 	}
                 ; 0001 0509 }
                 ;void runEscBlindSpot()
                 ; 0001 050B {
                 ; 0001 050C 	while (cmdCtrlRobot == 3)
                 ; 0001 050D 	{
                 ; 0001 050E 		DDRA = 0x00;
                 ; 0001 050F 		PORTA = 0x00;
                 ; 0001 0510 		readposition();//doc RF cap nhat ai robot
                 ; 0001 0511 		IRFL = read_adc(4);
                 ; 0001 0512 		IRFR = read_adc(5);
                 ; 0001 0513 		if (IRFL>300 && IRFR < 300)
                 ; 0001 0514 		{
                 ; 0001 0515 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0516 		}
                 ; 0001 0517 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0518 		{
                 ; 0001 0519 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 051A 		}
                 ; 0001 051B 
                 ; 0001 051C 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 051D 		{
                 ; 0001 051E 			vMLtoi(20); vMRtoi(20);
                 ; 0001 051F 			delay_ms(20);
                 ; 0001 0520 		}
                 ; 0001 0521 
                 ; 0001 0522 		LEDR = !LEDR;
                 ; 0001 0523 	}
                 ; 0001 0524 }
                 ;
                 ;void runEscBlindSpotsethome()
                 ; 0001 0527 {
                 ; 0001 0528 	while (cmdCtrlRobot == 6)
                 ; 0001 0529 	{
                 ; 0001 052A 		DDRA = 0x00;
                 ; 0001 052B 		PORTA = 0x00;
                 ; 0001 052C 		readposition();
                 ; 0001 052D 		IRFL = read_adc(4);
                 ; 0001 052E 		IRFR = read_adc(5);
                 ; 0001 052F 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 0530 		{
                 ; 0001 0531 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0532 		}
                 ; 0001 0533 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0534 		{
                 ; 0001 0535 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 0536 		}
                 ; 0001 0537 
                 ; 0001 0538 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 0539 		{
                 ; 0001 053A 			vMLtoi(20); vMRtoi(20);
                 ; 0001 053B 			delay_ms(10);
                 ; 0001 053C 		}
                 ; 0001 053D 
                 ; 0001 053E 		LEDR = !LEDR;
                 ; 0001 053F 	}
                 ; 0001 0540 }
                 ;
                 ;//========================================================
                 ;// SET HOME  vi tri robot, de chuan bi cho tran dau       PHUC//
                 ;//========================================================
                 ;int sethomeRB()
                 ; 0001 0546 {
                 ; 0001 0547 	while (flagsethome == 0)
                 ; 0001 0548 	{
                 ; 0001 0549 		LEDL = !LEDL;
                 ; 0001 054A 		//PHUC SH
                 ; 0001 054B 		if (readposition() == 1)//co du lieu moi
                 ; 0001 054C 		{
                 ; 0001 054D 			//hc(3,40);wn16s(cmdCtrlRobot);
                 ; 0001 054E 			if (cmdCtrlRobot == 1)      // dung ma lenh stop chuong trinh
                 ; 0001 054F 			{
                 ; 0001 0550 				flagsethome = 0;
                 ; 0001 0551 				return 0;
                 ; 0001 0552 			}
                 ; 0001 0553 
                 ; 0001 0554 			if (cmdCtrlRobot == 2 || cmdCtrlRobot == 3 || cmdCtrlRobot == 4)      // dung ma lenh stop chuong trinh
                 ; 0001 0555 			{
                 ; 0001 0556 				flagsethome = 0;
                 ; 0001 0557 				return 0;
                 ; 0001 0558 			}
                 ; 0001 0559 
                 ; 0001 055A 			if (cmdCtrlRobot == 5)  //sethome robot
                 ; 0001 055B 			{
                 ; 0001 055C 
                 ; 0001 055D 				calcvitri(rbctrlHomeX, rbctrlHomeY);
                 ; 0001 055E 				if (distance > 100) //chay den vi tri
                 ; 0001 055F 				{
                 ; 0001 0560 					if (errangle > 18 || errangle < -18)
                 ; 0001 0561 					{
                 ; 0001 0562 						int nv = errangle * 27 / 180;
                 ; 0001 0563 						int verrangle = calcVangle(errangle);
                 ; 0001 0564 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0565 						delay_ms(1);
                 ; 0001 0566 					}
                 ; 0001 0567 					else
                 ; 0001 0568 					{
                 ; 0001 0569 						//1xung = 3.14 * 40/24 =5.22
                 ; 0001 056A 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 056B 						// verranglekisum=0;//RESET I.
                 ; 0001 056C 					}
                 ; 0001 056D 				}
                 ; 0001 056E 				else //XOAY DUNG HUONG
                 ; 0001 056F 				{
                 ; 0001 0570 					setRobotAngleX = 10 * cos(rbctrlHomeAngle*M_PI / 180);
                 ; 0001 0571 					setRobotAngleY = 10 * sin(rbctrlHomeAngle*M_PI / 180);;
                 ; 0001 0572 					calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 0573 					if (errangle>90 || errangle < -90)
                 ; 0001 0574 					{
                 ; 0001 0575 
                 ; 0001 0576 						int nv = errangle * 27 / 180;
                 ; 0001 0577 						int verrangle = calcVangle(errangle);
                 ; 0001 0578 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0579 						delay_ms(1);
                 ; 0001 057A 					}
                 ; 0001 057B 					else
                 ; 0001 057C 					{
                 ; 0001 057D 
                 ; 0001 057E 						verranglekisum = 0;//RESET I.
                 ; 0001 057F 						flaghuongtrue = 0;
                 ; 0001 0580 						flagsethome = 1;  // bao da set home khong can set nua
                 ; 0001 0581 						vMRstop();
                 ; 0001 0582 						vMLstop();
                 ; 0001 0583 						return 0;
                 ; 0001 0584 
                 ; 0001 0585 					}
                 ; 0001 0586 				}
                 ; 0001 0587 
                 ; 0001 0588 			}
                 ; 0001 0589 
                 ; 0001 058A 			if (cmdCtrlRobot == 7)  //sethome IS STUCKED
                 ; 0001 058B 			{
                 ; 0001 058C 
                 ; 0001 058D 				cntstuckRB++;
                 ; 0001 058E 				if (cntstuckRB > 2)
                 ; 0001 058F 				{
                 ; 0001 0590 					runEscStucksethome();
                 ; 0001 0591 					cntstuckRB = 0;
                 ; 0001 0592 				}
                 ; 0001 0593 			}
                 ; 0001 0594 
                 ; 0001 0595 			if (cmdCtrlRobot == 6) //sethome IS //roi vao diem mu (blind spot) , mat vi tri hay huong
                 ; 0001 0596 			{
                 ; 0001 0597 				LEDBL = 1;
                 ; 0001 0598 				cntunlookRB++;
                 ; 0001 0599 				if (cntunlookRB > 2)
                 ; 0001 059A 				{
                 ; 0001 059B 					runEscBlindSpotsethome();
                 ; 0001 059C 					cntunlookRB = 0;
                 ; 0001 059D 
                 ; 0001 059E 				}
                 ; 0001 059F 
                 ; 0001 05A0 			}
                 ; 0001 05A1 
                 ; 0001 05A2 
                 ; 0001 05A3 		}
                 ; 0001 05A4 
                 ; 0001 05A5 		LEDR = !LEDR;
                 ; 0001 05A6 
                 ; 0001 05A7 	}
                 ; 0001 05A8 	return 0;
                 ; 0001 05A9 
                 ; 0001 05AA }
                 ;
                 ;int codePenalty()
                 ; 0001 05AD {
                 ; 0001 05AE 	// chay den vi tri duoc dat truoc, sau do da banh 1 lan
                 ; 0001 05AF 	//PHUC SH
                 ; 0001 05B0 	if (readposition() == 1)//co du lieu moi
                 ; 0001 05B1 	{
                 ; 0001 05B2 		if (cmdCtrlRobot == 8)  //set vi tri penalty robot
                 ; 0001 05B3 		{
                 ; 0001 05B4 			calcvitri(rbctrlPenaltyX, rbctrlPenaltyY);
                 ; 0001 05B5 			if (distance > 50) //chay den vi tri
                 ; 0001 05B6 			{
                 ; 0001 05B7 				if (errangle > 18 || errangle < -18)
                 ; 0001 05B8 				{
                 ; 0001 05B9 					int nv = errangle * 27 / 180;
                 ; 0001 05BA 					int verrangle = calcVangle(errangle);
                 ; 0001 05BB 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 05BC 					delay_ms(1);
                 ; 0001 05BD 				}
                 ; 0001 05BE 				else
                 ; 0001 05BF 				{
                 ; 0001 05C0 					//1xung = 3.14 * 40/24 =5.22
                 ; 0001 05C1 					ctrRobottoi(distance / 5.22, 15);
                 ; 0001 05C2 					// verranglekisum=0;//RESET I.
                 ; 0001 05C3 				}
                 ; 0001 05C4 			}
                 ; 0001 05C5 			else //XOAY DUNG HUONG
                 ; 0001 05C6 			{
                 ; 0001 05C7 				setRobotAngleX = 10 * cos(rbctrlPenaltyAngle*M_PI / 180);
                 ; 0001 05C8 				setRobotAngleY = 10 * sin(rbctrlPenaltyAngle*M_PI / 180);;
                 ; 0001 05C9 				calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 05CA 				if (errangle>10 || errangle < -10)
                 ; 0001 05CB 				{
                 ; 0001 05CC 
                 ; 0001 05CD 					int nv = errangle * 27 / 180;
                 ; 0001 05CE 					int verrangle = calcVangle(errangle);
                 ; 0001 05CF 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 05D0 					delay_ms(1);
                 ; 0001 05D1 				}
                 ; 0001 05D2 				else
                 ; 0001 05D3 				{
                 ; 0001 05D4 
                 ; 0001 05D5 					verranglekisum = 0;//RESET I.
                 ; 0001 05D6 					flaghuongtrue = 0;
                 ; 0001 05D7 					flagsethome = 1;  // bao da set vitri penalty
                 ; 0001 05D8 					while (cmdCtrlRobot != 2) //cho nhan nut start
                 ; 0001 05D9 					{
                 ; 0001 05DA 						readposition();
                 ; 0001 05DB 					}
                 ; 0001 05DC 					// da banh
                 ; 0001 05DD 					vMRtoi(22);
                 ; 0001 05DE 					vMLtoi(22);
                 ; 0001 05DF 					delay_ms(1000);
                 ; 0001 05E0 					vMRlui(10);
                 ; 0001 05E1 					vMLlui(10);
                 ; 0001 05E2 					delay_ms(1000);
                 ; 0001 05E3 					vMRstop();
                 ; 0001 05E4 					vMLstop();
                 ; 0001 05E5 					return 0;
                 ; 0001 05E6 
                 ; 0001 05E7 				}
                 ; 0001 05E8 			}
                 ; 0001 05E9 
                 ; 0001 05EA 		}
                 ; 0001 05EB 	}
                 ; 0001 05EC 
                 ; 0001 05ED }
                 ;void settoadoHomRB()
                 ; 0001 05EF {
                 _settoadoHomRB:
                 ; 0001 05F0 	switch (ROBOT_ID)
000927 e0e4      	LDI  R30,LOW(4)
                 ; 0001 05F1 	{
                 ; 0001 05F2 		//PHUC
                 ; 0001 05F3 	case 1:
000928 30e1      	CPI  R30,LOW(0x1)
000929 f469      	BRNE _0x20133
                 ; 0001 05F4 
                 ; 0001 05F5 
                 ; 0001 05F6 		rbctrlPenaltyX = 0;
00092a 940e 1ce1 	CALL SUBOPT_0x46
                 ; 0001 05F7 		rbctrlPenaltyY = 0;
                 ; 0001 05F8 
                 ; 0001 05F9 		if (SAN_ID == 1)
                 ; 0001 05FA 		{
                 ; 0001 05FB 			rbctrlPenaltyAngle = 179;
                 ; 0001 05FC 			rbctrlHomeAngle = 179;
                 ; 0001 05FD 			rbctrlHomeX = 269.7;
00092c 940e 1d07 	CALL SUBOPT_0x47
                 ; 0001 05FE 			rbctrlHomeY = 1.7;
                 ; 0001 05FF 			setRobotXmin = 80;
                 ; 0001 0600 			setRobotXmax = 260;
                 ; 0001 0601 		}
                 ; 0001 0602 		else
                 ; 0001 0603 		{
                 ; 0001 0604 			rbctrlPenaltyAngle = -15;
                 ; 0001 0605 			rbctrlHomeAngle = -15;
                 ; 0001 0606 			rbctrlHomeX = -226.1;
                 ; 0001 0607 			rbctrlHomeY = 1.6;
                 ; 0001 0608 			setRobotXmin = -260;
                 ; 0001 0609 			setRobotXmax = -80;
                 _0x20323:
00092e 93e0 04a5 	STS  _setRobotXmax,R30
000930 93f0 04a6 	STS  _setRobotXmax+1,R31
000932 9360 04a7 	STS  _setRobotXmax+2,R22
000934 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 060A 		}
                 ; 0001 060B 		break;
000936 c079      	RJMP _0x20132
                 ; 0001 060C 	case 2:
                 _0x20133:
000937 30e2      	CPI  R30,LOW(0x2)
000938 f489      	BRNE _0x20136
                 ; 0001 060D 
                 ; 0001 060E 
                 ; 0001 060F 		rbctrlPenaltyX = 0;
000939 940e 1ce1 	CALL SUBOPT_0x46
                 ; 0001 0610 		rbctrlPenaltyY = 0;
                 ; 0001 0611 
                 ; 0001 0612 		if (SAN_ID == 1)
                 ; 0001 0613 		{
                 ; 0001 0614 			rbctrlPenaltyAngle = 179;
                 ; 0001 0615 			rbctrlHomeAngle = 179;
                 ; 0001 0616 			rbctrlHomeX = 66.0;
00093b 940e 1d30 	CALL SUBOPT_0x48
                 ; 0001 0617 			rbctrlHomeY = 79.4;
                 ; 0001 0618 			setRobotXmin = -270;
                 ; 0001 0619 			setRobotXmax = 270;
                 ; 0001 061A 		}
                 ; 0001 061B 		else
                 ; 0001 061C 		{
                 ; 0001 061D 			rbctrlPenaltyAngle = -15;
                 ; 0001 061E 			rbctrlHomeAngle = -15;
                 ; 0001 061F 			rbctrlHomeX = -44.3;
                 ; 0001 0620 			rbctrlHomeY = 82.7;
                 _0x20324:
00093d 93e0 04b9 	STS  _rbctrlHomeY,R30
00093f 93f0 04ba 	STS  _rbctrlHomeY+1,R31
000941 9360 04bb 	STS  _rbctrlHomeY+2,R22
000943 9370 04bc 	STS  _rbctrlHomeY+3,R23
                 ; 0001 0621 			setRobotXmin = -270;
000945 940e 1d41 	CALL SUBOPT_0x49
                 ; 0001 0622 			setRobotXmax = 270;
000947 940e 1d4e 	CALL SUBOPT_0x4A
                 ; 0001 0623 		}
                 ; 0001 0624 		break;
000949 c066      	RJMP _0x20132
                 ; 0001 0625 	case 3:
                 _0x20136:
00094a 30e3      	CPI  R30,LOW(0x3)
00094b f581      	BRNE _0x20139
                 ; 0001 0626 
                 ; 0001 0627 
                 ; 0001 0628 		rbctrlPenaltyX = 0;
00094c e0e0      	LDI  R30,LOW(0)
00094d 93e0 04bd 	STS  _rbctrlPenaltyX,R30
00094f 93e0 04be 	STS  _rbctrlPenaltyX+1,R30
000951 93e0 04bf 	STS  _rbctrlPenaltyX+2,R30
000953 93e0 04c0 	STS  _rbctrlPenaltyX+3,R30
                 ; 0001 0629 		rbctrlPenaltyY = 0;
000955 93e0 04c1 	STS  _rbctrlPenaltyY,R30
000957 93e0 04c2 	STS  _rbctrlPenaltyY+1,R30
000959 93e0 04c3 	STS  _rbctrlPenaltyY+2,R30
00095b 93e0 04c4 	STS  _rbctrlPenaltyY+3,R30
                 ; 0001 062A 		rbctrlPenaltyAngle = -15;
                +
00095d e0e0     +LDI R30 , LOW ( 0xC1700000 )
00095e e0f0     +LDI R31 , HIGH ( 0xC1700000 )
00095f e760     +LDI R22 , BYTE3 ( 0xC1700000 )
000960 ec71     +LDI R23 , BYTE4 ( 0xC1700000 )
                 	__GETD1N 0xC1700000
000961 940e 1d5b 	CALL SUBOPT_0x4B
                 ; 0001 062B 		if (SAN_ID == 1)
                 ; 0001 062C 		{
                 ; 0001 062D 			rbctrlPenaltyAngle = 179;
000963 940e 1d5b 	CALL SUBOPT_0x4B
                 ; 0001 062E 			rbctrlHomeAngle = 179;
000965 93e0 04c9 	STS  _rbctrlHomeAngle,R30
000967 93f0 04ca 	STS  _rbctrlHomeAngle+1,R31
000969 9360 04cb 	STS  _rbctrlHomeAngle+2,R22
00096b 9370 04cc 	STS  _rbctrlHomeAngle+3,R23
                 ; 0001 062F 			rbctrlHomeX = 54.1;
00096d 940e 1d68 	CALL SUBOPT_0x4C
                 ; 0001 0630 			rbctrlHomeY = -99.9;
                 ; 0001 0631 			setRobotXmin = -270;
                 ; 0001 0632 			setRobotXmax = 20;
                +
00096f e0e0     +LDI R30 , LOW ( 0x41A00000 )
000970 e0f0     +LDI R31 , HIGH ( 0x41A00000 )
000971 ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
000972 e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
                 ; 0001 0633 		}
                 ; 0001 0634 		else
                 ; 0001 0635 		{
                 ; 0001 0636 			rbctrlPenaltyAngle = -15;
                 ; 0001 0637 			rbctrlHomeAngle = -15;
                 ; 0001 0638 			rbctrlHomeX = -53.5;
                 ; 0001 0639 			rbctrlHomeY = -93.8;
                 ; 0001 063A 			setRobotXmin = -20;
                 ; 0001 063B 			setRobotXmax = 270;
                 _0x20325:
000973 93e0 04a5 	STS  _setRobotXmax,R30
000975 93f0 04a6 	STS  _setRobotXmax+1,R31
000977 9360 04a7 	STS  _setRobotXmax+2,R22
000979 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 063C 		}
                 ; 0001 063D 		break;
00097b c034      	RJMP _0x20132
                 ; 0001 063E 	case 4:
                 _0x20139:
00097c 30e4      	CPI  R30,LOW(0x4)
00097d f469      	BRNE _0x2013C
                 ; 0001 063F 
                 ; 0001 0640 		rbctrlPenaltyX = 0;
00097e 940e 1ce1 	CALL SUBOPT_0x46
                 ; 0001 0641 		rbctrlPenaltyY = 0;
                 ; 0001 0642 
                 ; 0001 0643 		if (SAN_ID == 1)
                 ; 0001 0644 		{
                 ; 0001 0645 			rbctrlPenaltyAngle = 179;
                 ; 0001 0646 			rbctrlHomeAngle = 179;
                 ; 0001 0647 			rbctrlHomeX = 269.7;
000980 940e 1d07 	CALL SUBOPT_0x47
                 ; 0001 0648 			rbctrlHomeY = 1.7;
                 ; 0001 0649 			setRobotXmin = 80;
                 ; 0001 064A 			setRobotXmax = 260;
                 ; 0001 064B 		}
                 ; 0001 064C 		else
                 ; 0001 064D 		{
                 ; 0001 064E 			rbctrlPenaltyAngle = -15;
                 ; 0001 064F 			rbctrlHomeAngle = -15;
                 ; 0001 0650 			rbctrlHomeX = -226.1;
                 ; 0001 0651 			rbctrlHomeY = 1.6;
                 ; 0001 0652 			setRobotXmin = -260;
                 ; 0001 0653 			setRobotXmax = -80;
                 _0x20326:
000982 93e0 04a5 	STS  _setRobotXmax,R30
000984 93f0 04a6 	STS  _setRobotXmax+1,R31
000986 9360 04a7 	STS  _setRobotXmax+2,R22
000988 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 0654 		}
                 ; 0001 0655 		break;
00098a c025      	RJMP _0x20132
                 ; 0001 0656 	case 5:
                 _0x2013C:
00098b 30e5      	CPI  R30,LOW(0x5)
00098c f489      	BRNE _0x2013F
                 ; 0001 0657 
                 ; 0001 0658 		rbctrlPenaltyX = 0;
00098d 940e 1ce1 	CALL SUBOPT_0x46
                 ; 0001 0659 		rbctrlPenaltyY = 0;
                 ; 0001 065A 		if (SAN_ID == 1)
                 ; 0001 065B 		{
                 ; 0001 065C 			rbctrlPenaltyAngle = 179;
                 ; 0001 065D 			rbctrlHomeAngle = 179;
                 ; 0001 065E 			rbctrlHomeX = 66.0;
00098f 940e 1d30 	CALL SUBOPT_0x48
                 ; 0001 065F 			rbctrlHomeY = 79.4;
                 ; 0001 0660 			setRobotXmin = -270;
                 ; 0001 0661 			setRobotXmax = 270;
                 ; 0001 0662 		}
                 ; 0001 0663 		else
                 ; 0001 0664 		{
                 ; 0001 0665 			rbctrlPenaltyAngle = -15;
                 ; 0001 0666 			rbctrlHomeAngle = -15;
                 ; 0001 0667 			rbctrlHomeX = -44.3;
                 ; 0001 0668 			rbctrlHomeY = 82.7;
                 _0x20327:
000991 93e0 04b9 	STS  _rbctrlHomeY,R30
000993 93f0 04ba 	STS  _rbctrlHomeY+1,R31
000995 9360 04bb 	STS  _rbctrlHomeY+2,R22
000997 9370 04bc 	STS  _rbctrlHomeY+3,R23
                 ; 0001 0669 			setRobotXmin = -270;
000999 940e 1d41 	CALL SUBOPT_0x49
                 ; 0001 066A 			setRobotXmax = 270;
00099b 940e 1d4e 	CALL SUBOPT_0x4A
                 ; 0001 066B 		}
                 ; 0001 066C 		break;
00099d c012      	RJMP _0x20132
                 ; 0001 066D 	case 6:
                 _0x2013F:
00099e 30e6      	CPI  R30,LOW(0x6)
00099f f481      	BRNE _0x20132
                 ; 0001 066E 
                 ; 0001 066F 
                 ; 0001 0670 		rbctrlPenaltyX = 0;
0009a0 940e 1ce1 	CALL SUBOPT_0x46
                 ; 0001 0671 		rbctrlPenaltyY = 0;
                 ; 0001 0672 		if (SAN_ID == 1)
                 ; 0001 0673 		{
                 ; 0001 0674 			rbctrlPenaltyAngle = 179;
                 ; 0001 0675 			rbctrlHomeAngle = 179;
                 ; 0001 0676 			rbctrlHomeX = 54.1;
0009a2 940e 1d68 	CALL SUBOPT_0x4C
                 ; 0001 0677 			rbctrlHomeY = -99.9;
                 ; 0001 0678 			setRobotXmin = -270;
                 ; 0001 0679 			setRobotXmax = 20;
                +
0009a4 e0e0     +LDI R30 , LOW ( 0x41A00000 )
0009a5 e0f0     +LDI R31 , HIGH ( 0x41A00000 )
0009a6 ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
0009a7 e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
                 ; 0001 067A 		}
                 ; 0001 067B 		else
                 ; 0001 067C 		{
                 ; 0001 067D 			rbctrlPenaltyAngle = -15;
                 ; 0001 067E 			rbctrlHomeAngle = -15;
                 ; 0001 067F 			rbctrlHomeX = -53.5;
                 ; 0001 0680 			rbctrlHomeY = -93.8;
                 ; 0001 0681 			setRobotXmin = -20;
                 ; 0001 0682 			setRobotXmax = 270;
                 _0x20328:
0009a8 93e0 04a5 	STS  _setRobotXmax,R30
0009aa 93f0 04a6 	STS  _setRobotXmax+1,R31
0009ac 9360 04a7 	STS  _setRobotXmax+2,R22
0009ae 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 0683 		}
                 ; 0001 0684 		break;
                 ; 0001 0685 
                 ; 0001 0686 
                 ; 0001 0687 	}
                 _0x20132:
                 ; 0001 0688 }
0009b0 9508      	RET
                 ;//=======================================================
                 ;// Tinh luc theo goc quay de dieu khien robot
                 ;int calcVangle(int angle)
                 ; 0001 068C {
                 ; 0001 068D 	int verrangle = 0;
                 ; 0001 068E 	//tinh thanh phan I
                 ; 0001 068F 	verranglekisum = verranglekisum + angle / 20;
                 ;	angle -> Y+2
                 ;	verrangle -> R16,R17
                 ; 0001 0690 	if (verranglekisum > 15)verranglekisum = 15;
                 ; 0001 0691 	if (verranglekisum < -15)verranglekisum = -15;
                 ; 0001 0692 	//tinh thanh phan dieu khien
                 ; 0001 0693 	verrangle = 10 + angle / 12 + verranglekisum;
                 ; 0001 0694 	//gioi han bao hoa
                 ; 0001 0695 	if (verrangle < 0) verrangle = -verrangle;//lay tri tuyet doi cua van toc v dieu khien
                 ; 0001 0696 	if (verrangle > 20) verrangle = 20;
                 ; 0001 0697 	if (verrangle < 8) verrangle = 8;
                 ; 0001 0698 	return  verrangle;
                 ; 0001 0699 }
                 ;//ctrl robot
                 ;void ctrrobot()
                 ; 0001 069C {
                 ; 0001 069D 	if (readposition() == 1)//co du lieu moi
                 ; 0001 069E 	{
                 ; 0001 069F 		//          hc(3,40);wn16s(cmdCtrlRobot);
                 ; 0001 06A0 		//        hc(4,40);wn16s(idRobot);
                 ; 0001 06A1 		//-------------------------------------------------
                 ; 0001 06A2 		if (cmdCtrlRobot == 8)      // dung ma lenh stop chuong trinh
                 ; 0001 06A3 		{
                 ; 0001 06A4 			flagsethome = 0; //cho phep sethome
                 ; 0001 06A5 			while (cmdCtrlRobot == 8)
                 ; 0001 06A6 			{
                 ; 0001 06A7 				codePenalty();
                 ; 0001 06A8 			}
                 ; 0001 06A9 		}
                 ; 0001 06AA 
                 ; 0001 06AB 		if (cmdCtrlRobot == 1)      // dung ma lenh stop chuong trinh
                 ; 0001 06AC 		{
                 ; 0001 06AD 			flagsethome = 0; //cho phep sethome
                 ; 0001 06AE 			while (cmdCtrlRobot == 1)
                 ; 0001 06AF 			{
                 ; 0001 06B0 				readposition();
                 ; 0001 06B1 			}
                 ; 0001 06B2 		}
                 ; 0001 06B3 
                 ; 0001 06B4 		if (cmdCtrlRobot == 5)  //sethome robot
                 ; 0001 06B5 		{
                 ; 0001 06B6 
                 ; 0001 06B7 			cntsethomeRB++;
                 ; 0001 06B8 			if (cntsethomeRB > 2)
                 ; 0001 06B9 			{
                 ; 0001 06BA 				LEDBR = 1;
                 ; 0001 06BB 				if (flagsethome == 0)sethomeRB();
                 ; 0001 06BC 				cntsethomeRB = 0;
                 ; 0001 06BD 			}
                 ; 0001 06BE 
                 ; 0001 06BF 		}
                 ; 0001 06C0 
                 ; 0001 06C1 		if (cmdCtrlRobot == 4)  //sethome robot
                 ; 0001 06C2 		{
                 ; 0001 06C3 			flagsethome = 0; //cho phep sethome
                 ; 0001 06C4 			cntstuckRB++;
                 ; 0001 06C5 			if (cntstuckRB > 2)
                 ; 0001 06C6 			{
                 ; 0001 06C7 				runEscStuck();
                 ; 0001 06C8 				cntstuckRB = 0;
                 ; 0001 06C9 			}
                 ; 0001 06CA 		}
                 ; 0001 06CB 
                 ; 0001 06CC 		if (cmdCtrlRobot == 3)  //roi vao diem mu (blind spot) , mat vi tri hay huong
                 ; 0001 06CD 		{
                 ; 0001 06CE 			flagsethome = 0; //cho phep sethome
                 ; 0001 06CF 			cntunlookRB++;
                 ; 0001 06D0 			if (cntunlookRB > 2)
                 ; 0001 06D1 			{
                 ; 0001 06D2 				runEscBlindSpot();
                 ; 0001 06D3 				cntunlookRB = 0;
                 ; 0001 06D4 			}
                 ; 0001 06D5 
                 ; 0001 06D6 		}
                 ; 0001 06D7 
                 ; 0001 06D8 
                 ; 0001 06D9 		//------------------------------------------------
                 ; 0001 06DA 		if (cmdCtrlRobot == 2) {// run chuong trinh
                 ; 0001 06DB 			flagsethome = 0; //cho phep sethome
                 ; 0001 06DC 			switch (flagtask)
                 ; 0001 06DD 			{
                 ; 0001 06DE 				// chay den vi tri duoc set boi nguoi dieu khien
                 ; 0001 06DF 			case 0:
                 ; 0001 06E0 				if (setRobotX < setRobotXmin)   setRobotX = setRobotXmin;
                 ; 0001 06E1 				if (setRobotX > setRobotXmax)    setRobotX = setRobotXmax;
                 ; 0001 06E2 				calcvitri(setRobotX, setRobotY);
                 ; 0001 06E3 				if (distance > 80) //chay den vi tri
                 ; 0001 06E4 				{
                 ; 0001 06E5 					if (errangle > 18 || errangle < -18)
                 ; 0001 06E6 					{
                 ; 0001 06E7 						int nv = errangle * 27 / 180;
                 ; 0001 06E8 						int verrangle = calcVangle(errangle);
                 ; 0001 06E9 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 06EA 						delay_ms(1);
                 ; 0001 06EB 					}
                 ; 0001 06EC 					else
                 ; 0001 06ED 					{
                 ; 0001 06EE 						//1xung = 3.14 * 40/24 =5.22
                 ; 0001 06EF 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 06F0 						// verranglekisum=0;//RESET I.
                 ; 0001 06F1 					}
                 ; 0001 06F2 				}
                 ; 0001 06F3 				else
                 ; 0001 06F4 				{
                 ; 0001 06F5 					flagtask = 10;
                 ; 0001 06F6 				}
                 ; 0001 06F7 				break;
                 ; 0001 06F8 				// quay dung huong duoc set boi nguoi dieu khien
                 ; 0001 06F9 			case 1:
                 ; 0001 06FA 
                 ; 0001 06FB 				calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 06FC 				if (errangle > 18 || errangle < -18)
                 ; 0001 06FD 				{
                 ; 0001 06FE 
                 ; 0001 06FF 					int nv = errangle * 27 / 180;
                 ; 0001 0700 					int verrangle = calcVangle(errangle);
                 ; 0001 0701 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0702 					// ctrRobotXoay(nv,10);
                 ; 0001 0703 					delay_ms(1);
                 ; 0001 0704 				}
                 ; 0001 0705 				else
                 ; 0001 0706 				{
                 ; 0001 0707 					flaghuongtrue++;
                 ; 0001 0708 					if (flaghuongtrue > 3)
                 ; 0001 0709 					{
                 ; 0001 070A 						//verranglekisum=0;//RESET I.
                 ; 0001 070B 						flaghuongtrue = 0;
                 ; 0001 070C 						flagtask = 10;
                 ; 0001 070D 					}
                 ; 0001 070E 
                 ; 0001 070F 				}
                 ; 0001 0710 				break;
                 ; 0001 0711 				// chay den vi tri bong
                 ; 0001 0712 			case 2:
                 ; 0001 0713 
                 ; 0001 0714 				//PHUC test    rb1 ,s1
                 ; 0001 0715 				if (robotctrl.ball.x < setRobotXmin)   robotctrl.ball.x = setRobotXmin;
                 ; 0001 0716 				if (robotctrl.ball.x > setRobotXmax)    robotctrl.ball.x = setRobotXmax;
                 ; 0001 0717 				calcvitri(robotctrl.ball.x, robotctrl.ball.y);
                 ; 0001 0718 
                 ; 0001 0719 				if (errangle > 18 || errangle < -18)
                 ; 0001 071A 				{
                 ; 0001 071B 					int nv = errangle * 27 / 180;
                 ; 0001 071C 					int verrangle = calcVangle(errangle);
                 ; 0001 071D 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 071E 					delay_ms(1);
                 ; 0001 071F 				}
                 ; 0001 0720 				else
                 ; 0001 0721 				{
                 ; 0001 0722 					//1xung = 3.14 * 40/24 =5.22
                 ; 0001 0723 					if (distance > 10) //chay den vi tri
                 ; 0001 0724 					{
                 ; 0001 0725 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 0726 						delay_ms(5);
                 ; 0001 0727 					}
                 ; 0001 0728 					else
                 ; 0001 0729 					{
                 ; 0001 072A 						flagtask = 10;
                 ; 0001 072B 					}
                 ; 0001 072C 					// verranglekisum=0;//RESET I.
                 ; 0001 072D 				}
                 ; 0001 072E 
                 ; 0001 072F 				break;
                 ; 0001 0730 				// da bong
                 ; 0001 0731 			case 3:
                 ; 0001 0732 				ctrRobottoi(40, 22);
                 ; 0001 0733 				delay_ms(400);
                 ; 0001 0734 				ctrRobotlui(40, 15);
                 ; 0001 0735 				delay_ms(400);
                 ; 0001 0736 				flagtask = 10;
                 ; 0001 0737 				break;
                 ; 0001 0738 			case 10:
                 ; 0001 0739 				vMRtoi(0);
                 ; 0001 073A 				vMLtoi(0);
                 ; 0001 073B 				break;
                 ; 0001 073C 				//chay theo bong co dinh huong
                 ; 0001 073D 			case 4:
                 ; 0001 073E 				calcvitri(robotctrl.ball.x, robotctrl.ball.y);
                 ; 0001 073F 				if (errangle > 18 || errangle < -18)
                 ; 0001 0740 				{
                 ; 0001 0741 
                 ; 0001 0742 					int nv = errangle * 27 / 180;
                 ; 0001 0743 					int verrangle = calcVangle(errangle);
                 ; 0001 0744 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0745 					// ctrRobotXoay(nv,10);
                 ; 0001 0746 					delay_ms(1);
                 ; 0001 0747 				}
                 ; 0001 0748 				else
                 ; 0001 0749 				{
                 ; 0001 074A 					flaghuongtrue++;
                 ; 0001 074B 					if (flaghuongtrue > 3)
                 ; 0001 074C 					{
                 ; 0001 074D 						//verranglekisum=0;//RESET I.
                 ; 0001 074E 						flaghuongtrue = 0;
                 ; 0001 074F 						flagtask = 10;
                 ; 0001 0750 					}
                 ; 0001 0751 
                 ; 0001 0752 				}
                 ; 0001 0753 				break;
                 ; 0001 0754 			}
                 ; 0001 0755 		}//end if(cmdCtrlRobot==2)
                 ; 0001 0756 	}
                 ; 0001 0757 	else   //khong co tin hieu RF hay khong thay robot
                 ; 0001 0758 	{
                 ; 0001 0759 		//if(flagunlookRB==1) runEscBlindSpot();
                 ; 0001 075A 
                 ; 0001 075B 	}
                 ; 0001 075C 
                 ; 0001 075D 
                 ; 0001 075E }
                 ;
                 ;void rb_move(float x, float y)
                 ; 0001 0761 {
                 ; 0001 0762 	flagtask = 0;
                 ;	x -> Y+4
                 ;	y -> Y+0
                 ; 0001 0763 	flagtaskold = flagtask;
                 ; 0001 0764 	setRobotX = x;
                 ; 0001 0765 	setRobotY = y;
                 ; 0001 0766 }
                 ;void rb_rotate(int angle)     // goc xoay so voi truc x cua toa do
                 ; 0001 0768 {
                 ; 0001 0769 	flagtask = 1;
                 ;	angle -> Y+0
                 ; 0001 076A 	flagtaskold = flagtask;
                 ; 0001 076B 	setRobotAngleX = 10 * cos(angle*M_PI / 180);
                 ; 0001 076C 	setRobotAngleY = 10 * sin(angle*M_PI / 180);;
                 ; 0001 076D }
                 ;
                 ;void rb_goball()
                 ; 0001 0770 {
                 ; 0001 0771 	flagtask = 2;
                 ; 0001 0772 	flagtaskold = flagtask;
                 ; 0001 0773 }
                 ;void rb_kick()
                 ; 0001 0775 {
                 ; 0001 0776 	flagtask = 3;
                 ; 0001 0777 	flagtaskold = flagtask;
                 ; 0001 0778 }
                 ;int rb_wait(unsigned long int time)
                 ; 0001 077A {
                 ; 0001 077B 	time = time * 10;
                 ;	time -> Y+0
                 ; 0001 077C 	while (time--)
                 ; 0001 077D 	{
                 ; 0001 077E 		ctrrobot();
                 ; 0001 077F 		if (flagtask == 10) return 1;// thuc hien xong nhiem vu
                 ; 0001 0780 	}
                 ; 0001 0781 	return 0;
                 ; 0001 0782 }
                 ;//========================================================
                 ;// Timer1 overflow interrupt service routine
                 ;// period =1/2khz= 0.5ms
                 ;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0001 0787 {
                 _timer1_ovf_isr:
0009b1 940e 1d81 	CALL SUBOPT_0x4D
                 ; 0001 0788 	// Place your code here
                 ; 0001 0789 	timerstick++;
0009b3 eeac      	LDI  R26,LOW(_timerstick)
0009b4 e0b4      	LDI  R27,HIGH(_timerstick)
0009b5 940e 1d8f 	CALL SUBOPT_0x4E
                 ; 0001 078A 	timerstickdis++;
0009b7 eeae      	LDI  R26,LOW(_timerstickdis)
0009b8 e0b4      	LDI  R27,HIGH(_timerstickdis)
0009b9 940e 1d8f 	CALL SUBOPT_0x4E
                 ; 0001 078B 	timerstickang++;
0009bb efa0      	LDI  R26,LOW(_timerstickang)
0009bc e0b4      	LDI  R27,HIGH(_timerstickang)
0009bd 940e 1d8f 	CALL SUBOPT_0x4E
                 ; 0001 078C 	timerstickctr++;
0009bf efa2      	LDI  R26,LOW(_timerstickctr)
0009c0 e0b4      	LDI  R27,HIGH(_timerstickctr)
0009c1 940e 1d8f 	CALL SUBOPT_0x4E
                 ; 0001 078D #ifdef CtrVelocity
                 ; 0001 078E 	// dieu khien van toc
                 ; 0001 078F 	if (timerstick > 250)    // 125ms/0.5ms=250 : dung chu ki lay mau = 125 ms
0009c3 91a0 04ec 	LDS  R26,_timerstick
0009c5 91b0 04ed 	LDS  R27,_timerstick+1
0009c7 3fab      	CPI  R26,LOW(0xFB)
0009c8 e0e0      	LDI  R30,HIGH(0xFB)
0009c9 07be      	CPC  R27,R30
0009ca f410      	BRSH PC+3
0009cb 940c 0ac4 	JMP _0x20185
                 ; 0001 0790 	{
                 ; 0001 0791 		int eR = 0, eL = 0;
                 ; 0001 0792 
                 ; 0001 0793 		//-------------------------------------------
                 ; 0001 0794 		//cap nhat van toc
                 ; 0001 0795 		vQER = (QER - oldQER);     //(xung / 10ms)
0009cd 940e 1d95 	CALL SUBOPT_0x4F
0009cf e0e0      	LDI  R30,LOW(0)
0009d0 83ea      	STD  Y+2,R30
0009d1 83eb      	STD  Y+3,R30
                 ;	eR -> Y+2
                 ;	eL -> Y+0
0009d2 91a0 04fa 	LDS  R26,_oldQER
0009d4 91b0 04fb 	LDS  R27,_oldQER+1
0009d6 940e 1d9a 	CALL SUBOPT_0x50
0009d8 1bea      	SUB  R30,R26
0009d9 0bfb      	SBC  R31,R27
0009da 93e0 04f6 	STS  _vQER,R30
0009dc 93f0 04f7 	STS  _vQER+1,R31
                 ; 0001 0796 		vQEL = (QEL - oldQEL);     //(xung /10ms)
0009de 91a0 04f8 	LDS  R26,_oldQEL
0009e0 91b0 04f9 	LDS  R27,_oldQEL+1
0009e2 940e 1d9f 	CALL SUBOPT_0x51
0009e4 1bea      	SUB  R30,R26
0009e5 0bfb      	SBC  R31,R27
0009e6 93e0 04f4 	STS  _vQEL,R30
0009e8 93f0 04f5 	STS  _vQEL+1,R31
                 ; 0001 0797 		oldQEL = QEL;
0009ea 940e 1d9f 	CALL SUBOPT_0x51
0009ec 93e0 04f8 	STS  _oldQEL,R30
0009ee 93f0 04f9 	STS  _oldQEL+1,R31
                 ; 0001 0798 		oldQER = QER;
0009f0 940e 1d9a 	CALL SUBOPT_0x50
0009f2 93e0 04fa 	STS  _oldQER,R30
0009f4 93f0 04fb 	STS  _oldQER+1,R31
                 ; 0001 0799 		timerstick = 0;
0009f6 e0e0      	LDI  R30,LOW(0)
0009f7 93e0 04ec 	STS  _timerstick,R30
0009f9 93e0 04ed 	STS  _timerstick+1,R30
                 ; 0001 079A 
                 ; 0001 079B 		//--------------------------------------------
                 ; 0001 079C 		//tinh PID van toc
                 ; 0001 079D 		//--------------------------------------------
                 ; 0001 079E 		eR = svQER - vQER;
0009fb 91a0 04f6 	LDS  R26,_vQER
0009fd 91b0 04f7 	LDS  R27,_vQER+1
0009ff 91e0 04fe 	LDS  R30,_svQER
000a01 91f0 04ff 	LDS  R31,_svQER+1
000a03 1bea      	SUB  R30,R26
000a04 0bfb      	SBC  R31,R27
000a05 83ea      	STD  Y+2,R30
000a06 83fb      	STD  Y+2+1,R31
                 ; 0001 079F 		//tinh thanh phan I
                 ; 0001 07A0 		seRki = seRki + KiR*eR;
000a07 91a0 050a 	LDS  R26,_KiR
000a09 91b0 050b 	LDS  R27,_KiR+1
000a0b 940e 22c4 	CALL __MULW12
000a0d 940e 1da4 	CALL SUBOPT_0x52
000a0f 0fea      	ADD  R30,R26
000a10 1ffb      	ADC  R31,R27
000a11 940e 1da9 	CALL SUBOPT_0x53
                 ; 0001 07A1 		if (seRki > 100) seRki = 100;
000a13 940e 1da4 	CALL SUBOPT_0x52
000a15 36a5      	CPI  R26,LOW(0x65)
000a16 e0e0      	LDI  R30,HIGH(0x65)
000a17 07be      	CPC  R27,R30
000a18 f024      	BRLT _0x20186
000a19 e6e4      	LDI  R30,LOW(100)
000a1a e0f0      	LDI  R31,HIGH(100)
000a1b 940e 1da9 	CALL SUBOPT_0x53
                 ; 0001 07A2 		if (seRki < -100) seRki = -100;
                 _0x20186:
000a1d 940e 1da4 	CALL SUBOPT_0x52
000a1f 39ac      	CPI  R26,LOW(0xFF9C)
000a20 efef      	LDI  R30,HIGH(0xFF9C)
000a21 07be      	CPC  R27,R30
000a22 f424      	BRGE _0x20187
000a23 e9ec      	LDI  R30,LOW(65436)
000a24 efff      	LDI  R31,HIGH(65436)
000a25 940e 1da9 	CALL SUBOPT_0x53
                 ; 0001 07A3 		//tinh them thanh phan P
                 ; 0001 07A4 		uR = 100 + KpR*eR + seRki;
                 _0x20187:
000a27 81ea      	LDD  R30,Y+2
000a28 81fb      	LDD  R31,Y+2+1
000a29 91a0 0508 	LDS  R26,_KpR
000a2b 91b0 0509 	LDS  R27,_KpR+1
000a2d 940e 22c4 	CALL __MULW12
000a2f 59ec      	SUBI R30,LOW(-100)
000a30 4fff      	SBCI R31,HIGH(-100)
000a31 940e 1da4 	CALL SUBOPT_0x52
000a33 0fea      	ADD  R30,R26
000a34 1ffb      	ADC  R31,R27
000a35 93e0 0506 	STS  _uR,R30
000a37 93f0 0507 	STS  _uR+1,R31
                 ; 0001 07A5 		if (uR > 255) uR = 255;
000a39 91a0 0506 	LDS  R26,_uR
000a3b 91b0 0507 	LDS  R27,_uR+1
000a3d 30a0      	CPI  R26,LOW(0x100)
000a3e e0e1      	LDI  R30,HIGH(0x100)
000a3f 07be      	CPC  R27,R30
000a40 f034      	BRLT _0x20188
000a41 efef      	LDI  R30,LOW(255)
000a42 e0f0      	LDI  R31,HIGH(255)
000a43 93e0 0506 	STS  _uR,R30
000a45 93f0 0507 	STS  _uR+1,R31
                 ; 0001 07A6 		if (uR < 0) uR = 0;
                 _0x20188:
000a47 91a0 0507 	LDS  R26,_uR+1
000a49 23aa      	TST  R26
000a4a f42a      	BRPL _0x20189
000a4b e0e0      	LDI  R30,LOW(0)
000a4c 93e0 0506 	STS  _uR,R30
000a4e 93e0 0507 	STS  _uR+1,R30
                 ; 0001 07A7 
                 ; 0001 07A8 		eL = svQEL - vQEL;
                 _0x20189:
000a50 91a0 04f4 	LDS  R26,_vQEL
000a52 91b0 04f5 	LDS  R27,_vQEL+1
000a54 91e0 04fc 	LDS  R30,_svQEL
000a56 91f0 04fd 	LDS  R31,_svQEL+1
000a58 940e 1c2c 	CALL SUBOPT_0x26
                 ; 0001 07A9 		//tinh thanh phan I
                 ; 0001 07AA 		seLki = seLki + KiL*eL;
000a5a 81e8      	LD   R30,Y
000a5b 81f9      	LDD  R31,Y+1
000a5c 91a0 050e 	LDS  R26,_KiL
000a5e 91b0 050f 	LDS  R27,_KiL+1
000a60 940e 22c4 	CALL __MULW12
000a62 940e 1dae 	CALL SUBOPT_0x54
000a64 0fea      	ADD  R30,R26
000a65 1ffb      	ADC  R31,R27
000a66 940e 1db3 	CALL SUBOPT_0x55
                 ; 0001 07AB 		if (seLki > 100) seLki = 100;
000a68 940e 1dae 	CALL SUBOPT_0x54
000a6a 36a5      	CPI  R26,LOW(0x65)
000a6b e0e0      	LDI  R30,HIGH(0x65)
000a6c 07be      	CPC  R27,R30
000a6d f024      	BRLT _0x2018A
000a6e e6e4      	LDI  R30,LOW(100)
000a6f e0f0      	LDI  R31,HIGH(100)
000a70 940e 1db3 	CALL SUBOPT_0x55
                 ; 0001 07AC 		if (seLki < -100) seLki = -100;
                 _0x2018A:
000a72 940e 1dae 	CALL SUBOPT_0x54
000a74 39ac      	CPI  R26,LOW(0xFF9C)
000a75 efef      	LDI  R30,HIGH(0xFF9C)
000a76 07be      	CPC  R27,R30
000a77 f424      	BRGE _0x2018B
000a78 e9ec      	LDI  R30,LOW(65436)
000a79 efff      	LDI  R31,HIGH(65436)
000a7a 940e 1db3 	CALL SUBOPT_0x55
                 ; 0001 07AD 		//tinh them thanh phan P
                 ; 0001 07AE 		uL = 100 + KpL*eL + seLki;
                 _0x2018B:
000a7c 81e8      	LD   R30,Y
000a7d 81f9      	LDD  R31,Y+1
000a7e 91a0 050c 	LDS  R26,_KpL
000a80 91b0 050d 	LDS  R27,_KpL+1
000a82 940e 22c4 	CALL __MULW12
000a84 59ec      	SUBI R30,LOW(-100)
000a85 4fff      	SBCI R31,HIGH(-100)
000a86 940e 1dae 	CALL SUBOPT_0x54
000a88 0fea      	ADD  R30,R26
000a89 1ffb      	ADC  R31,R27
000a8a 93e0 0504 	STS  _uL,R30
000a8c 93f0 0505 	STS  _uL+1,R31
                 ; 0001 07AF 		if (uL > 255) uL = 255;
000a8e 91a0 0504 	LDS  R26,_uL
000a90 91b0 0505 	LDS  R27,_uL+1
000a92 30a0      	CPI  R26,LOW(0x100)
000a93 e0e1      	LDI  R30,HIGH(0x100)
000a94 07be      	CPC  R27,R30
000a95 f034      	BRLT _0x2018C
000a96 efef      	LDI  R30,LOW(255)
000a97 e0f0      	LDI  R31,HIGH(255)
000a98 93e0 0504 	STS  _uL,R30
000a9a 93f0 0505 	STS  _uL+1,R31
                 ; 0001 07B0 		if (uL < 0) uL = 0;
                 _0x2018C:
000a9c 91a0 0505 	LDS  R26,_uL+1
000a9e 23aa      	TST  R26
000a9f f42a      	BRPL _0x2018D
000aa0 e0e0      	LDI  R30,LOW(0)
000aa1 93e0 0504 	STS  _uL,R30
000aa3 93e0 0505 	STS  _uL+1,R30
                 ; 0001 07B1 
                 ; 0001 07B2 		if (svQER != 0)OCR1B = uR;
                 _0x2018D:
000aa5 91e0 04fe 	LDS  R30,_svQER
000aa7 91f0 04ff 	LDS  R31,_svQER+1
000aa9 9730      	SBIW R30,0
000aaa f029      	BREQ _0x2018E
000aab 91e0 0506 	LDS  R30,_uR
000aad 91f0 0507 	LDS  R31,_uR+1
000aaf c002      	RJMP _0x2032A
                 ; 0001 07B3 		else  OCR1B = 0;
                 _0x2018E:
000ab0 e0e0      	LDI  R30,LOW(0)
000ab1 e0f0      	LDI  R31,HIGH(0)
                 _0x2032A:
000ab2 bdf9      	OUT  0x28+1,R31
000ab3 bde8      	OUT  0x28,R30
                 ; 0001 07B4 
                 ; 0001 07B5 		if (svQEL != 0) OCR1A = uL;
000ab4 91e0 04fc 	LDS  R30,_svQEL
000ab6 91f0 04fd 	LDS  R31,_svQEL+1
000ab8 9730      	SBIW R30,0
000ab9 f029      	BREQ _0x20190
000aba 91e0 0504 	LDS  R30,_uL
000abc 91f0 0505 	LDS  R31,_uL+1
000abe c002      	RJMP _0x2032B
                 ; 0001 07B6 		else  OCR1A = 0;
                 _0x20190:
000abf e0e0      	LDI  R30,LOW(0)
000ac0 e0f0      	LDI  R31,HIGH(0)
                 _0x2032B:
000ac1 bdfb      	OUT  0x2A+1,R31
000ac2 bdea      	OUT  0x2A,R30
                 ; 0001 07B7 
                 ; 0001 07B8 	}
000ac3 9624      	ADIW R28,4
                 ; 0001 07B9 	// dieu khien khoang cach
                 ; 0001 07BA 	if (timerstickdis > 10 && (flagwaitctrRobot == 1))
                 _0x20185:
000ac4 91a0 04ee 	LDS  R26,_timerstickdis
000ac6 91b0 04ef 	LDS  R27,_timerstickdis+1
000ac8 971b      	SBIW R26,11
000ac9 f020      	BRLO _0x20193
000aca 91a0 051c 	LDS  R26,_flagwaitctrRobot
000acc 30a1      	CPI  R26,LOW(0x1)
000acd f009      	BREQ _0x20194
                 _0x20193:
000ace c025      	RJMP _0x20192
                 _0x20194:
                 ; 0001 07BB 	{
                 ; 0001 07BC 		unsigned int deltad1 = 0;
                 ; 0001 07BD 		deltad1 = (QER + QEL) / 2 - oldd;
000acf 9722      	SBIW R28,2
000ad0 940e 1db8 	CALL SUBOPT_0x56
                 ;	deltad1 -> Y+0
000ad2 940e 1dbc 	CALL SUBOPT_0x57
000ad4 91a0 051a 	LDS  R26,_oldd
000ad6 91b0 051b 	LDS  R27,_oldd+1
000ad8 940e 1c2c 	CALL SUBOPT_0x26
                 ; 0001 07BE 		//if(deltad1<0) deltad1=0;// co the am do kieu so
                 ; 0001 07BF 		//hc(3,0);ws("            ");
                 ; 0001 07C0 		//hc(3,0);wn16s(deltad1);
                 ; 0001 07C1 		if (deltad1 > sd)
000ada 91e0 0518 	LDS  R30,_sd
000adc 91f0 0519 	LDS  R31,_sd+1
000ade 81a8      	LD   R26,Y
000adf 81b9      	LDD  R27,Y+1
000ae0 17ea      	CP   R30,R26
000ae1 07fb      	CPC  R31,R27
000ae2 f458      	BRSH _0x20195
                 ; 0001 07C2 		{
                 ; 0001 07C3 
                 ; 0001 07C4 			vMLstop();
000ae3 dc6a      	RCALL _vMLstop
                 ; 0001 07C5 			vMRstop();
000ae4 dc84      	RCALL _vMRstop
                 ; 0001 07C6 			flagwaitctrRobot = 0;
000ae5 e0e0      	LDI  R30,LOW(0)
000ae6 93e0 051c 	STS  _flagwaitctrRobot,R30
                 ; 0001 07C7 			oldd = (QER + QEL) / 2;
000ae8 940e 1dbc 	CALL SUBOPT_0x57
000aea 93e0 051a 	STS  _oldd,R30
000aec 93f0 051b 	STS  _oldd+1,R31
                 ; 0001 07C8 
                 ; 0001 07C9 		}
                 ; 0001 07CA 		timerstickdis = 0;
                 _0x20195:
000aee e0e0      	LDI  R30,LOW(0)
000aef 93e0 04ee 	STS  _timerstickdis,R30
000af1 93e0 04ef 	STS  _timerstickdis+1,R30
                 ; 0001 07CB 
                 ; 0001 07CC 	}
000af3 9622      	ADIW R28,2
                 ; 0001 07CD 	// dieu khien  vi tri goc quay
                 ; 0001 07CE 	if (timerstickang > 10 && (flagwaitctrAngle == 1))
                 _0x20192:
000af4 91a0 04f0 	LDS  R26,_timerstickang
000af6 91b0 04f1 	LDS  R27,_timerstickang+1
000af8 971b      	SBIW R26,11
000af9 f020      	BRLO _0x20197
000afa 91a0 0521 	LDS  R26,_flagwaitctrAngle
000afc 30a1      	CPI  R26,LOW(0x1)
000afd f009      	BREQ _0x20198
                 _0x20197:
000afe c025      	RJMP _0x20196
                 _0x20198:
                 ; 0001 07CF 	{
                 ; 0001 07D0 		unsigned int deltaa = 0;
                 ; 0001 07D1 		deltaa = (QEL)-olda;
000aff 9722      	SBIW R28,2
000b00 940e 1db8 	CALL SUBOPT_0x56
                 ;	deltaa -> Y+0
000b02 91a0 051f 	LDS  R26,_olda
000b04 91b0 0520 	LDS  R27,_olda+1
000b06 940e 1d9f 	CALL SUBOPT_0x51
000b08 940e 1c2c 	CALL SUBOPT_0x26
                 ; 0001 07D2 		//    hc(4,0);ws("            ");
                 ; 0001 07D3 		//    hc(4,0);wn16s(deltaa);
                 ; 0001 07D4 		if (deltaa > sa)
000b0a 91e0 051d 	LDS  R30,_sa
000b0c 91f0 051e 	LDS  R31,_sa+1
000b0e 81a8      	LD   R26,Y
000b0f 81b9      	LDD  R27,Y+1
000b10 17ea      	CP   R30,R26
000b11 07fb      	CPC  R31,R27
000b12 f458      	BRSH _0x20199
                 ; 0001 07D5 		{
                 ; 0001 07D6 			vMLstop();
000b13 dc3a      	RCALL _vMLstop
                 ; 0001 07D7 			vMRstop();
000b14 dc54      	RCALL _vMRstop
                 ; 0001 07D8 			flagwaitctrAngle = 0;
000b15 e0e0      	LDI  R30,LOW(0)
000b16 93e0 0521 	STS  _flagwaitctrAngle,R30
                 ; 0001 07D9 			olda = QEL;
000b18 940e 1d9f 	CALL SUBOPT_0x51
000b1a 93e0 051f 	STS  _olda,R30
000b1c 93f0 0520 	STS  _olda+1,R31
                 ; 0001 07DA 		}
                 ; 0001 07DB 		timerstickang = 0;
                 _0x20199:
000b1e e0e0      	LDI  R30,LOW(0)
000b1f 93e0 04f0 	STS  _timerstickang,R30
000b21 93e0 04f1 	STS  _timerstickang+1,R30
                 ; 0001 07DC 	}
000b23 9622      	ADIW R28,2
                 ; 0001 07DD 	// dieu khien robot robot
                 ; 0001 07DE 	if (timerstickctr > 1)
                 _0x20196:
000b24 91a0 04f2 	LDS  R26,_timerstickctr
000b26 91b0 04f3 	LDS  R27,_timerstickctr+1
000b28 9712      	SBIW R26,2
000b29 f028      	BRLO _0x2019A
                 ; 0001 07DF 	{
                 ; 0001 07E0 		timerstickctr = 0;
000b2a e0e0      	LDI  R30,LOW(0)
000b2b 93e0 04f2 	STS  _timerstickctr,R30
000b2d 93e0 04f3 	STS  _timerstickctr+1,R30
                 ; 0001 07E1 	}
                 ; 0001 07E2 #endif
                 ; 0001 07E3 }
                 _0x2019A:
000b2f 940e 1dc7 	CALL SUBOPT_0x58
000b31 9518      	RETI
                 ;
                 ;//========================================================
                 ;// read  vi tri robot   PHUC
                 ;//========================================================
                 ;unsigned char testposition()
                 ; 0001 07E9 {
                 _testposition:
                 ; 0001 07EA 	unsigned char  i = 0;
                 ; 0001 07EB 	unsigned flagstatus = 0;
                 ; 0001 07EC 
                 ; 0001 07ED 	while (keyKT != 0)
000b32 940e 23c0 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	flagstatus -> R18,R19
000b34 e010      	LDI  R17,0
                +
000b35 e020     +LDI R18 , LOW ( 0 )
000b36 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2019B:
000b37 9b98      	SBIS 0x13,0
000b38 c044      	RJMP _0x2019D
                 ; 0001 07EE 	{
                 ; 0001 07EF 		readposition();
000b39 940e 13d3 	CALL _readposition
                 ; 0001 07F0 
                 ; 0001 07F1 		if (idRobot == ROBOT_ID)
000b3b e0e4      	LDI  R30,LOW(4)
000b3c e0f0      	LDI  R31,HIGH(4)
000b3d 15ec      	CP   R30,R12
000b3e 05fd      	CPC  R31,R13
000b3f f5e1      	BRNE _0x2019E
                 ; 0001 07F2 		{
                 ; 0001 07F3 			hc(5, 40); wn16s(robotctrl.ball.y);
000b40 e0e5      	LDI  R30,LOW(5)
000b41 e0f0      	LDI  R31,HIGH(5)
000b42 940e 1dd5 	CALL SUBOPT_0x59
                +
000b44 91e0 046b+LDS R30 , _robotctrl + ( 12 )
000b46 91f0 046c+LDS R31 , _robotctrl + ( 12 ) + 1
                 	__GETW1MN _robotctrl,12
000b48 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F4 			hc(4, 40); wn16s(robotctrl.ball.x);
000b4a e0e4      	LDI  R30,LOW(4)
000b4b e0f0      	LDI  R31,HIGH(4)
000b4c 940e 1dd5 	CALL SUBOPT_0x59
                +
000b4e 91e0 0469+LDS R30 , _robotctrl + ( 10 )
000b50 91f0 046a+LDS R31 , _robotctrl + ( 10 ) + 1
                 	__GETW1MN _robotctrl,10
000b52 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F5 			hc(3, 20); wn16s(robotctrl.x);
000b54 940e 1de1 	CALL SUBOPT_0x5B
000b56 940e 1de6 	CALL SUBOPT_0x5C
000b58 940e 1c57 	CALL SUBOPT_0x2F
000b5a 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F6 			hc(2, 20); wn16s(robotctrl.y);
000b5c 940e 1dec 	CALL SUBOPT_0x5D
000b5e 940e 1de6 	CALL SUBOPT_0x5C
000b60 940e 1c62 	CALL SUBOPT_0x31
000b62 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F7 			hc(1, 1); wn16s(robotctrl.ox);
000b64 940e 1df1 	CALL SUBOPT_0x5E
000b66 940e 1df1 	CALL SUBOPT_0x5E
000b68 da53      	RCALL _hc
                +
000b69 91e0 0465+LDS R30 , _robotctrl + ( 6 )
000b6b 91f0 0466+LDS R31 , _robotctrl + ( 6 ) + 1
                 	__GETW1MN _robotctrl,6
000b6d 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F8 			hc(0, 1); wn16s(robotctrl.oy);
000b6f 940e 1df6 	CALL SUBOPT_0x5F
000b71 940e 1df1 	CALL SUBOPT_0x5E
000b73 da48      	RCALL _hc
                +
000b74 91e0 0467+LDS R30 , _robotctrl + ( 8 )
000b76 91f0 0468+LDS R31 , _robotctrl + ( 8 ) + 1
                 	__GETW1MN _robotctrl,8
000b78 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 07F9 			delay_ms(200);
000b7a 940e 1dfb 	CALL SUBOPT_0x60
                 ; 0001 07FA 		}
                 ; 0001 07FB 
                 ; 0001 07FC 	}
                 _0x2019E:
000b7c cfba      	RJMP _0x2019B
                 _0x2019D:
                 ; 0001 07FD 	return flagstatus;
000b7d 2fe2      	MOV  R30,R18
000b7e c4e5      	RJMP _0x20C000D
                 ; 0001 07FE }
                 ;//========================================================
                 ;void robotwall()
                 ; 0001 0801 {
                 _robotwall:
                 ; 0001 0802 	unsigned int demled;
                 ; 0001 0803 	DDRA = 0x00;
000b7f 931a      	ST   -Y,R17
000b80 930a      	ST   -Y,R16
                 ;	demled -> R16,R17
000b81 940e 1e01 	CALL SUBOPT_0x61
                 ; 0001 0804 	PORTA = 0x00;
                 ; 0001 0805 
                 ; 0001 0806 	LcdClear();
                 ; 0001 0807 	hc(0, 10);
000b83 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 0808 	ws("ROBOT WALL");
                +
000b85 e6ec     +LDI R30 , LOW ( _0x2019F + ( 0 ) )
000b86 e0f2     +LDI R31 , HIGH ( _0x2019F + ( 0 ) )
                 	__POINTW1MN _0x2019F,0
000b87 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0809 	LEDL = 1; LEDR = 1;
000b89 9aac      	SBI  0x15,4
000b8a 9aad      	SBI  0x15,5
                 ; 0001 080A 
                 ; 0001 080B 	while (keyKT != 0)
                 _0x201A4:
000b8b 9b98      	SBIS 0x13,0
000b8c c060      	RJMP _0x201A6
                 ; 0001 080C 	{
                 ; 0001 080D 		IRFL = read_adc(4);
000b8d e0e4      	LDI  R30,LOW(4)
000b8e 93ea      	ST   -Y,R30
000b8f daec      	RCALL _read_adc
000b90 93e0 04de 	STS  _IRFL,R30
000b92 93f0 04df 	STS  _IRFL+1,R31
                 ; 0001 080E 		IRFR = read_adc(5);
000b94 e0e5      	LDI  R30,LOW(5)
000b95 93ea      	ST   -Y,R30
000b96 dae5      	RCALL _read_adc
000b97 93e0 04e0 	STS  _IRFR,R30
000b99 93f0 04e1 	STS  _IRFR+1,R31
                 ; 0001 080F 		hc(1, 0); wn16(IRFL);
000b9b 940e 1e0d 	CALL SUBOPT_0x63
000b9d 91e0 04de 	LDS  R30,_IRFL
000b9f 91f0 04df 	LDS  R31,_IRFL+1
000ba1 940e 1c31 	CALL SUBOPT_0x27
                 ; 0001 0810 		hc(1, 42); wn16(IRFR);
000ba3 940e 1df1 	CALL SUBOPT_0x5E
000ba5 940e 1e10 	CALL SUBOPT_0x64
000ba7 91e0 04e0 	LDS  R30,_IRFR
000ba9 91f0 04e1 	LDS  R31,_IRFR+1
000bab 940e 1c31 	CALL SUBOPT_0x27
                 ; 0001 0811 
                 ; 0001 0812 		if (IRFL > 250)
000bad 91a0 04de 	LDS  R26,_IRFL
000baf 91b0 04df 	LDS  R27,_IRFL+1
000bb1 3fab      	CPI  R26,LOW(0xFB)
000bb2 e0e0      	LDI  R30,HIGH(0xFB)
000bb3 07be      	CPC  R27,R30
000bb4 f030      	BRLO _0x201A7
                 ; 0001 0813 		{
                 ; 0001 0814 			vMLlui(22); vMRlui(10); delay_ms(600);
000bb5 e1e6      	LDI  R30,LOW(22)
000bb6 93ea      	ST   -Y,R30
000bb7 db90      	RCALL _vMLlui
000bb8 e0ea      	LDI  R30,LOW(10)
000bb9 940e 1e16 	CALL SUBOPT_0x65
                 ; 0001 0815 		}
                 ; 0001 0816 		if (IRFR > 250)
                 _0x201A7:
000bbb 91a0 04e0 	LDS  R26,_IRFR
000bbd 91b0 04e1 	LDS  R27,_IRFR+1
000bbf 3fab      	CPI  R26,LOW(0xFB)
000bc0 e0e0      	LDI  R30,HIGH(0xFB)
000bc1 07be      	CPC  R27,R30
000bc2 f030      	BRLO _0x201A8
                 ; 0001 0817 		{
                 ; 0001 0818 			vMLlui(10); vMRlui(22); delay_ms(600);
000bc3 e0ea      	LDI  R30,LOW(10)
000bc4 93ea      	ST   -Y,R30
000bc5 db82      	RCALL _vMLlui
000bc6 e1e6      	LDI  R30,LOW(22)
000bc7 940e 1e16 	CALL SUBOPT_0x65
                 ; 0001 0819 		}
                 ; 0001 081A 		if ((IRFL < 300)&(IRFR < 300))
                 _0x201A8:
000bc9 91a0 04de 	LDS  R26,_IRFL
000bcb 91b0 04df 	LDS  R27,_IRFL+1
000bcd e2ec      	LDI  R30,LOW(300)
000bce e0f1      	LDI  R31,HIGH(300)
000bcf 940e 2296 	CALL __LTW12U
000bd1 2e0e      	MOV  R0,R30
000bd2 91a0 04e0 	LDS  R26,_IRFR
000bd4 91b0 04e1 	LDS  R27,_IRFR+1
000bd6 e2ec      	LDI  R30,LOW(300)
000bd7 e0f1      	LDI  R31,HIGH(300)
000bd8 940e 2296 	CALL __LTW12U
000bda 21e0      	AND  R30,R0
000bdb f031      	BREQ _0x201A9
                 ; 0001 081B 		{
                 ; 0001 081C 			vMLtoi(22); vMRtoi(22);
000bdc e1e6      	LDI  R30,LOW(22)
000bdd 93ea      	ST   -Y,R30
000bde db63      	RCALL _vMLtoi
000bdf e1e6      	LDI  R30,LOW(22)
000be0 93ea      	ST   -Y,R30
000be1 db78      	RCALL _vMRtoi
                 ; 0001 081D 		}
                 ; 0001 081E 
                 ; 0001 081F 		demled++;
                 _0x201A9:
                +
000be2 5f0f     +SUBI R16 , LOW ( - 1 )
000be3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0001 0820 		if (demled > 50){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
                +
000be4 3303     +CPI R16 , LOW ( 51 )
000be5 e0e0     +LDI R30 , HIGH ( 51 )
000be6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,51
000be7 f020      	BRLO _0x201AA
                +
000be8 e000     +LDI R16 , LOW ( 0 )
000be9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000bea 940e 1e1f 	CALL SUBOPT_0x66
                 ; 0001 0821 	}
                 _0x201AA:
000bec cf9e      	RJMP _0x201A4
                 _0x201A6:
                 ; 0001 0822 
                 ; 0001 0823 }
000bed 9109      	LD   R16,Y+
000bee 9119      	LD   R17,Y+
000bef 9508      	RET
                 
                 	.DSEG
                 _0x2019F:
00026c           	.BYTE 0xB
                 ;////========================================================
                 ;//void robotline() //DIGITAL I/O
                 ;//{
                 ;//    unsigned char status=2;
                 ;//    unsigned char prestatus=2;
                 ;//
                 ;//    DDRA =0x00;
                 ;//    PORTA=0xFF;
                 ;////#define S0  PINA.0 status 0
                 ;////#define S1  PINA.1 status 1
                 ;////#define S2  PINA.2 status 2
                 ;////#define S3  PINA.3 status 3
                 ;////#define S4  PINA.7 status 4
                 ;//        LcdClear();
                 ;//        hc(0,1);
                 ;//        ws ("LINE FOLOWER");
                 ;//        hc(1,20);
                 ;//        ws (" ROBOT");
                 ;//        LEDL=1;LEDR=1;
                 ;//
                 ;//   while(keyKT!=0)
                 ;//   {
                 ;//      if (S2==0)
                 ;//      {
                 ;//          status=2;
                 ;//          vMLtoi(80);vMRtoi(80);
                 ;//      }
                 ;//      //===========================
                 ;//      if ((prestatus==2)&(S1==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(80);vMRtoi(50);
                 ;//      }
                 ;//      if ((prestatus==2)&(S0==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(80);vMRtoi(30);
                 ;//      }
                 ;//       //===========================
                 ;//      if ((prestatus==2)&(S3==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(50);vMRtoi(80);
                 ;//      }
                 ;//      if ((prestatus==2)&(S4==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(30);vMRtoi(80);
                 ;//      }
                 ;//       //===========================
                 ;//      if ((prestatus==1)&(S0==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(80);vMRtoi(40);
                 ;//      }
                 ;//      if ((prestatus==3)&(S4==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(40);vMRtoi(80);
                 ;//      }
                 ;//
                 ;//      prestatus=status;
                 ;//      delay_ms(200);LEDLtoggle();LEDRtoggle();
                 ;//
                 ;//  }
                 ;// }
                 ;
                 ;
                 ;//========================================================
                 ;void readline()
                 ; 0001 086A {
                 
                 	.CSEG
                 _readline:
                 ; 0001 086B 	int i = 0, j = 0;
                 ; 0001 086C 	// reset the values
                 ; 0001 086D 	for (i = 0; i < 5; i++)
000bf0 940e 23c0 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000bf2 e000     +LDI R16 , LOW ( 0 )
000bf3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000bf4 e020     +LDI R18 , LOW ( 0 )
000bf5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000bf6 e000     +LDI R16 , LOW ( 0 )
000bf7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x201AC:
                +
000bf8 3005     +CPI R16 , LOW ( 5 )
000bf9 e0e0     +LDI R30 , HIGH ( 5 )
000bfa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000bfb f45c      	BRGE _0x201AD
                 ; 0001 086E 		IRLINE[i] = 0;
000bfc 940e 1e23 	CALL SUBOPT_0x67
000bfe 0fae      	ADD  R26,R30
000bff 1fbf      	ADC  R27,R31
000c00 e0e0      	LDI  R30,LOW(0)
000c01 e0f0      	LDI  R31,HIGH(0)
000c02 93ed      	ST   X+,R30
000c03 93fc      	ST   X,R31
                +
000c04 5f0f     +SUBI R16 , LOW ( - 1 )
000c05 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c06 cff1      	RJMP _0x201AC
                 _0x201AD:
                 ; 0001 0870 for (j = 0; j < 50; j++)
                +
000c07 e020     +LDI R18 , LOW ( 0 )
000c08 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x201AF:
                +
000c09 3322     +CPI R18 , LOW ( 50 )
000c0a e0e0     +LDI R30 , HIGH ( 50 )
000c0b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,50
000c0c f014      	BRLT PC+3
000c0d 940c 0c51 	JMP _0x201B0
                 ; 0001 0871 	{
                 ; 0001 0872 		IRLINE[0] = IRLINE[0] + read_adc(0);
000c0f e0e0      	LDI  R30,LOW(0)
000c10 93ea      	ST   -Y,R30
000c11 da6a      	RCALL _read_adc
000c12 91a0 04e2 	LDS  R26,_IRLINE
000c14 91b0 04e3 	LDS  R27,_IRLINE+1
000c16 0fea      	ADD  R30,R26
000c17 1ffb      	ADC  R31,R27
000c18 93e0 04e2 	STS  _IRLINE,R30
000c1a 93f0 04e3 	STS  _IRLINE+1,R31
                 ; 0001 0873 		IRLINE[1] = IRLINE[1] + read_adc(1);
000c1c e0e1      	LDI  R30,LOW(1)
000c1d 93ea      	ST   -Y,R30
000c1e da5d      	RCALL _read_adc
                +
000c1f 91a0 04e4+LDS R26 , _IRLINE + ( 2 )
000c21 91b0 04e5+LDS R27 , _IRLINE + ( 2 ) + 1
                 	__GETW2MN _IRLINE,2
000c23 0fea      	ADD  R30,R26
000c24 1ffb      	ADC  R31,R27
                +
000c25 93e0 04e4+STS _IRLINE + ( 2 ) , R30
000c27 93f0 04e5+STS _IRLINE + ( 2 ) + 1 , R31
                 	__PUTW1MN _IRLINE,2
                 ; 0001 0874 		IRLINE[2] = IRLINE[2] + read_adc(2);
000c29 e0e2      	LDI  R30,LOW(2)
000c2a 93ea      	ST   -Y,R30
000c2b da50      	RCALL _read_adc
000c2c 940e 1e29 	CALL SUBOPT_0x68
000c2e 0fea      	ADD  R30,R26
000c2f 1ffb      	ADC  R31,R27
                +
000c30 93e0 04e6+STS _IRLINE + ( 4 ) , R30
000c32 93f0 04e7+STS _IRLINE + ( 4 ) + 1 , R31
                 	__PUTW1MN _IRLINE,4
                 ; 0001 0875 		IRLINE[3] = IRLINE[3] + read_adc(3);
000c34 e0e3      	LDI  R30,LOW(3)
000c35 93ea      	ST   -Y,R30
000c36 da45      	RCALL _read_adc
                +
000c37 91a0 04e8+LDS R26 , _IRLINE + ( 6 )
000c39 91b0 04e9+LDS R27 , _IRLINE + ( 6 ) + 1
                 	__GETW2MN _IRLINE,6
000c3b 0fea      	ADD  R30,R26
000c3c 1ffb      	ADC  R31,R27
                +
000c3d 93e0 04e8+STS _IRLINE + ( 6 ) , R30
000c3f 93f0 04e9+STS _IRLINE + ( 6 ) + 1 , R31
                 	__PUTW1MN _IRLINE,6
                 ; 0001 0876 		IRLINE[4] = IRLINE[4] + read_adc(7);
000c41 e0e7      	LDI  R30,LOW(7)
000c42 93ea      	ST   -Y,R30
000c43 da38      	RCALL _read_adc
                +
000c44 91a0 04ea+LDS R26 , _IRLINE + ( 8 )
000c46 91b0 04eb+LDS R27 , _IRLINE + ( 8 ) + 1
                 	__GETW2MN _IRLINE,8
000c48 0fea      	ADD  R30,R26
000c49 1ffb      	ADC  R31,R27
                +
000c4a 93e0 04ea+STS _IRLINE + ( 8 ) , R30
000c4c 93f0 04eb+STS _IRLINE + ( 8 ) + 1 , R31
                 	__PUTW1MN _IRLINE,8
                 ; 0001 0877 	}
                +
000c4e 5f2f     +SUBI R18 , LOW ( - 1 )
000c4f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000c50 cfb8      	RJMP _0x201AF
                 _0x201B0:
                 ; 0001 0878 	// get the rounded average of the readings for each sensor
                 ; 0001 0879 	for (i = 0; i < 5; i++)
                +
000c51 e000     +LDI R16 , LOW ( 0 )
000c52 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x201B2:
                +
000c53 3005     +CPI R16 , LOW ( 5 )
000c54 e0e0     +LDI R30 , HIGH ( 5 )
000c55 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000c56 f4ac      	BRGE _0x201B3
                 ; 0001 087A 		IRLINE[i] = (IRLINE[i] + (50 >> 1)) / 50;
000c57 940e 1e23 	CALL SUBOPT_0x67
000c59 0fea      	ADD  R30,R26
000c5a 1ffb      	ADC  R31,R27
000c5b 01bf      	MOVW R22,R30
000c5c 940e 1e23 	CALL SUBOPT_0x67
000c5e 940e 1e2e 	CALL SUBOPT_0x69
000c60 9679      	ADIW R30,25
000c61 01df      	MOVW R26,R30
000c62 e3e2      	LDI  R30,LOW(50)
000c63 e0f0      	LDI  R31,HIGH(50)
000c64 940e 22e1 	CALL __DIVW21U
000c66 01db      	MOVW R26,R22
000c67 93ed      	ST   X+,R30
000c68 93fc      	ST   X,R31
                +
000c69 5f0f     +SUBI R16 , LOW ( - 1 )
000c6a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c6b cfe7      	RJMP _0x201B2
                 _0x201B3:
                 ; 0001 087B }
000c6c c3f7      	RJMP _0x20C000D
                 ;//========================================================
                 ;void robotwhiteline() //ANALOG OK
                 ; 0001 087E {
                 _robotwhiteline:
                 ; 0001 087F 	unsigned char i = 0, imax;
                 ; 0001 0880 	int imaxlast = 0;
                 ; 0001 0881 	unsigned int  admax;
                 ; 0001 0882 	unsigned int  demled = 0;
                 ; 0001 0883 	unsigned int flagblindT = 0;
                 ; 0001 0884 	unsigned int flagblindP = 0;
                 ; 0001 0885 	DDRA = 0x00;
000c6d 9726      	SBIW R28,6
000c6e 940e 1db8 	CALL SUBOPT_0x56
000c70 e0e0      	LDI  R30,LOW(0)
000c71 83ea      	STD  Y+2,R30
000c72 83eb      	STD  Y+3,R30
000c73 83ec      	STD  Y+4,R30
000c74 83ed      	STD  Y+5,R30
000c75 940e 23be 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	imax -> R16
                 ;	imaxlast -> R18,R19
                 ;	admax -> R20,R21
                 ;	demled -> Y+10
                 ;	flagblindT -> Y+8
                 ;	flagblindP -> Y+6
000c77 e010      	LDI  R17,0
                +
000c78 e020     +LDI R18 , LOW ( 0 )
000c79 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000c7a 940e 1e01 	CALL SUBOPT_0x61
                 ; 0001 0886 	PORTA = 0x00;
                 ; 0001 0887 
                 ; 0001 0888 	LcdClear();
                 ; 0001 0889 	hc(0, 1);
000c7c 940e 1df1 	CALL SUBOPT_0x5E
000c7e 940e 05bc 	CALL _hc
                 ; 0001 088A 	ws("WHITE LINE");
                +
000c80 e7e7     +LDI R30 , LOW ( _0x201B4 + ( 0 ) )
000c81 e0f2     +LDI R31 , HIGH ( _0x201B4 + ( 0 ) )
                 	__POINTW1MN _0x201B4,0
000c82 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 088B 	hc(1, 10);
000c84 940e 1df1 	CALL SUBOPT_0x5E
000c86 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 088C 	ws("FOLOWER");
                +
000c88 e8e2     +LDI R30 , LOW ( _0x201B4 + ( 11 ) )
000c89 e0f2     +LDI R31 , HIGH ( _0x201B4 + ( 11 ) )
                 	__POINTW1MN _0x201B4,11
000c8a 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 088D 	LEDL = 1; LEDR = 1;
000c8c 9aac      	SBI  0x15,4
000c8d 9aad      	SBI  0x15,5
                 ; 0001 088E 	//doc va khoi dong gia tri cho imaxlast
                 ; 0001 088F 	readline();
000c8e 940e 1e33 	CALL SUBOPT_0x6A
                 ; 0001 0890 	admax = IRLINE[0]; imax = 0;
                 ; 0001 0891 	for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201BA:
000c90 3015      	CPI  R17,5
000c91 f468      	BRSH _0x201BB
000c92 940e 1e3c 	CALL SUBOPT_0x6B
000c94 940e 1e2e 	CALL SUBOPT_0x69
000c96 174e      	CP   R20,R30
000c97 075f      	CPC  R21,R31
000c98 f420      	BRSH _0x201BC
000c99 940e 1e3c 	CALL SUBOPT_0x6B
000c9b 940e 1e43 	CALL SUBOPT_0x6C
                 _0x201BC:
000c9d 5f1f      	SUBI R17,-1
000c9e cff1      	RJMP _0x201BA
                 _0x201BB:
                 ; 0001 0892 	imaxlast = imax;
000c9f 2f20      	MOV  R18,R16
000ca0 2733      	CLR  R19
                 ; 0001 0893 	while (keyKT != 0)
                 _0x201BD:
000ca1 9b98      	SBIS 0x13,0
000ca2 c0bf      	RJMP _0x201BF
                 ; 0001 0894 	{
                 ; 0001 0895 		//doc gia tri cam bien
                 ; 0001 0896 		readline();
000ca3 940e 1e33 	CALL SUBOPT_0x6A
                 ; 0001 0897 		admax = IRLINE[0]; imax = 0;
                 ; 0001 0898 		for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201C1:
000ca5 3015      	CPI  R17,5
000ca6 f468      	BRSH _0x201C2
000ca7 940e 1e3c 	CALL SUBOPT_0x6B
000ca9 940e 1e2e 	CALL SUBOPT_0x69
000cab 174e      	CP   R20,R30
000cac 075f      	CPC  R21,R31
000cad f420      	BRSH _0x201C3
000cae 940e 1e3c 	CALL SUBOPT_0x6B
000cb0 940e 1e43 	CALL SUBOPT_0x6C
                 _0x201C3:
000cb2 5f1f      	SUBI R17,-1
000cb3 cff1      	RJMP _0x201C1
                 _0x201C2:
                 ; 0001 0899 		//imax=2;
                 ; 0001 089A 		if ((imax - imaxlast > 1) || (imax - imaxlast < -1))  //tranh truong hop nhay bo trang thai
000cb4 940e 1e49 	CALL SUBOPT_0x6D
000cb6 1be2      	SUB  R30,R18
000cb7 0bf3      	SBC  R31,R19
000cb8 01df      	MOVW R26,R30
000cb9 9732      	SBIW R30,2
000cba f42c      	BRGE _0x201C5
000cbb 01fd      	MOVW R30,R26
000cbc 3fef      	CPI  R30,LOW(0xFFFF)
000cbd efaf      	LDI  R26,HIGH(0xFFFF)
000cbe 07fa      	CPC  R31,R26
000cbf f40c      	BRGE _0x201C4
                 _0x201C5:
                 ; 0001 089B 		{
                 ; 0001 089C 		}
                 ; 0001 089D 		else
000cc0 c034      	RJMP _0x201C7
                 _0x201C4:
                 ; 0001 089E 		{
                 ; 0001 089F 			switch (imax)
000cc1 940e 1e49 	CALL SUBOPT_0x6D
                 ; 0001 08A0 			{
                 ; 0001 08A1 			case 0:
000cc3 9730      	SBIW R30,0
000cc4 f449      	BRNE _0x201CB
                 ; 0001 08A2 				vMLtoi(1); vMRtoi(20);
000cc5 940e 1e4c 	CALL SUBOPT_0x6E
000cc7 940e 1e50 	CALL SUBOPT_0x6F
                 ; 0001 08A3 				//flagblindT = 0;
                 ; 0001 08A4 				flagblindP = 1;
000cc9 e0e1      	LDI  R30,LOW(1)
000cca e0f0      	LDI  R31,HIGH(1)
000ccb 83ee      	STD  Y+6,R30
000ccc 83ff      	STD  Y+6+1,R31
                 ; 0001 08A5 				break;
000ccd c025      	RJMP _0x201CA
                 ; 0001 08A6 			case 1:
                 _0x201CB:
000cce 30e1      	CPI  R30,LOW(0x1)
000ccf e0a0      	LDI  R26,HIGH(0x1)
000cd0 07fa      	CPC  R31,R26
000cd1 f429      	BRNE _0x201CC
                 ; 0001 08A7 				vMLtoi(1); vMRtoi(15);
000cd2 940e 1e4c 	CALL SUBOPT_0x6E
000cd4 940e 1e54 	CALL SUBOPT_0x70
                 ; 0001 08A8 				break;
000cd6 c01c      	RJMP _0x201CA
                 ; 0001 08A9 			case 2:
                 _0x201CC:
000cd7 30e2      	CPI  R30,LOW(0x2)
000cd8 e0a0      	LDI  R26,HIGH(0x2)
000cd9 07fa      	CPC  R31,R26
000cda f429      	BRNE _0x201CD
                 ; 0001 08AA 				vMLtoi(15); vMRtoi(15);
000cdb 940e 1e58 	CALL SUBOPT_0x71
000cdd 940e 1e54 	CALL SUBOPT_0x70
                 ; 0001 08AB 				break;
000cdf c013      	RJMP _0x201CA
                 ; 0001 08AC 			case 3:
                 _0x201CD:
000ce0 30e3      	CPI  R30,LOW(0x3)
000ce1 e0a0      	LDI  R26,HIGH(0x3)
000ce2 07fa      	CPC  R31,R26
000ce3 f429      	BRNE _0x201CE
                 ; 0001 08AD 				vMLtoi(15); vMRtoi(1);
000ce4 940e 1e58 	CALL SUBOPT_0x71
000ce6 940e 1e5c 	CALL SUBOPT_0x72
                 ; 0001 08AE 				break;
000ce8 c00a      	RJMP _0x201CA
                 ; 0001 08AF 			case 4:
                 _0x201CE:
000ce9 30e4      	CPI  R30,LOW(0x4)
000cea e0a0      	LDI  R26,HIGH(0x4)
000ceb 07fa      	CPC  R31,R26
000cec f431      	BRNE _0x201D0
                 ; 0001 08B0 				vMLtoi(20); vMRtoi(1);
000ced 940e 1e60 	CALL SUBOPT_0x73
                 ; 0001 08B1 				flagblindT = 1;
000cef e0e1      	LDI  R30,LOW(1)
000cf0 e0f0      	LDI  R31,HIGH(1)
000cf1 87e8      	STD  Y+8,R30
000cf2 87f9      	STD  Y+8+1,R31
                 ; 0001 08B2 				//flagblindP = 0;
                 ; 0001 08B3 				break;
                 ; 0001 08B4 			default:
                 _0x201D0:
                 ; 0001 08B5 				// vMLtoi(5); vMRtoi(5) ;
                 ; 0001 08B6 				break;
                 ; 0001 08B7 			}
                 _0x201CA:
                 ; 0001 08B8 			imaxlast = imax;
000cf3 2f20      	MOV  R18,R16
000cf4 2733      	CLR  R19
                 ; 0001 08B9 		}
                 _0x201C7:
                 ; 0001 08BA 
                 ; 0001 08BB 		while (flagblindT == 1 && keyKT != 0) //lac duong ben trai
                 _0x201D1:
000cf5 85a8      	LDD  R26,Y+8
000cf6 85b9      	LDD  R27,Y+8+1
000cf7 9711      	SBIW R26,1
000cf8 f419      	BRNE _0x201D4
000cf9 940e 1e65 	CALL SUBOPT_0x74
000cfb f409      	BRNE _0x201D5
                 _0x201D4:
000cfc c01f      	RJMP _0x201D3
                 _0x201D5:
                 ; 0001 08BC 		{
                 ; 0001 08BD 			vMLtoi(20); vMRtoi(1);
000cfd 940e 1e60 	CALL SUBOPT_0x73
                 ; 0001 08BE 			readline();
000cff 940e 1e33 	CALL SUBOPT_0x6A
                 ; 0001 08BF 			admax = IRLINE[0]; imax = 0;
                 ; 0001 08C0 			for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201D7:
000d01 3015      	CPI  R17,5
000d02 f468      	BRSH _0x201D8
000d03 940e 1e3c 	CALL SUBOPT_0x6B
000d05 940e 1e2e 	CALL SUBOPT_0x69
000d07 174e      	CP   R20,R30
000d08 075f      	CPC  R21,R31
000d09 f420      	BRSH _0x201D9
000d0a 940e 1e3c 	CALL SUBOPT_0x6B
000d0c 940e 1e43 	CALL SUBOPT_0x6C
                 _0x201D9:
000d0e 5f1f      	SUBI R17,-1
000d0f cff1      	RJMP _0x201D7
                 _0x201D8:
                 ; 0001 08C1 			imaxlast = imax;
000d10 2f20      	MOV  R18,R16
000d11 2733      	CLR  R19
                 ; 0001 08C2 			if (IRLINE[2] > 500)  flagblindT = 0;
000d12 940e 1e29 	CALL SUBOPT_0x68
000d14 3fa5      	CPI  R26,LOW(0x1F5)
000d15 e0e1      	LDI  R30,HIGH(0x1F5)
000d16 07be      	CPC  R27,R30
000d17 f018      	BRLO _0x201DA
000d18 e0e0      	LDI  R30,LOW(0)
000d19 87e8      	STD  Y+8,R30
000d1a 87e9      	STD  Y+8+1,R30
                 ; 0001 08C3 
                 ; 0001 08C4 
                 ; 0001 08C5 		}
                 _0x201DA:
000d1b cfd9      	RJMP _0x201D1
                 _0x201D3:
                 ; 0001 08C6 		while (flagblindP == 1 && keyKT != 0) //lac duong ben phai
                 _0x201DB:
000d1c 81ae      	LDD  R26,Y+6
000d1d 81bf      	LDD  R27,Y+6+1
000d1e 9711      	SBIW R26,1
000d1f f419      	BRNE _0x201DE
000d20 940e 1e65 	CALL SUBOPT_0x74
000d22 f409      	BRNE _0x201DF
                 _0x201DE:
000d23 c021      	RJMP _0x201DD
                 _0x201DF:
                 ; 0001 08C7 		{
                 ; 0001 08C8 			vMLtoi(1); vMRtoi(20);
000d24 940e 1e4c 	CALL SUBOPT_0x6E
000d26 940e 1e50 	CALL SUBOPT_0x6F
                 ; 0001 08C9 			readline();
000d28 940e 1e33 	CALL SUBOPT_0x6A
                 ; 0001 08CA 			admax = IRLINE[0]; imax = 0;
                 ; 0001 08CB 			for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201E1:
000d2a 3015      	CPI  R17,5
000d2b f468      	BRSH _0x201E2
000d2c 940e 1e3c 	CALL SUBOPT_0x6B
000d2e 940e 1e2e 	CALL SUBOPT_0x69
000d30 174e      	CP   R20,R30
000d31 075f      	CPC  R21,R31
000d32 f420      	BRSH _0x201E3
000d33 940e 1e3c 	CALL SUBOPT_0x6B
000d35 940e 1e43 	CALL SUBOPT_0x6C
                 _0x201E3:
000d37 5f1f      	SUBI R17,-1
000d38 cff1      	RJMP _0x201E1
                 _0x201E2:
                 ; 0001 08CC 			imaxlast = imax;
000d39 2f20      	MOV  R18,R16
000d3a 2733      	CLR  R19
                 ; 0001 08CD 			if (IRLINE[2] > 500)  flagblindP = 0;
000d3b 940e 1e29 	CALL SUBOPT_0x68
000d3d 3fa5      	CPI  R26,LOW(0x1F5)
000d3e e0e1      	LDI  R30,HIGH(0x1F5)
000d3f 07be      	CPC  R27,R30
000d40 f018      	BRLO _0x201E4
000d41 e0e0      	LDI  R30,LOW(0)
000d42 83ee      	STD  Y+6,R30
000d43 83ef      	STD  Y+6+1,R30
                 ; 0001 08CE 
                 ; 0001 08CF 		}
                 _0x201E4:
000d44 cfd7      	RJMP _0x201DB
                 _0x201DD:
                 ; 0001 08D0 		hc(3, 10); wn16s(imax);
000d45 940e 1de1 	CALL SUBOPT_0x5B
000d47 940e 1e07 	CALL SUBOPT_0x62
000d49 940e 1e49 	CALL SUBOPT_0x6D
000d4b 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 08D1 		hc(4, 10); wn16s(admax);
000d4d 940e 1e6a 	CALL SUBOPT_0x75
000d4f 935a      	ST   -Y,R21
000d50 934a      	ST   -Y,R20
000d51 940e 065c 	CALL _wn16s
                 ; 0001 08D2 
                 ; 0001 08D3 		demled++;
000d53 85ea      	LDD  R30,Y+10
000d54 85fb      	LDD  R31,Y+10+1
000d55 9631      	ADIW R30,1
000d56 87ea      	STD  Y+10,R30
000d57 87fb      	STD  Y+10+1,R31
                 ; 0001 08D4 		if (demled > 30){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
000d58 85aa      	LDD  R26,Y+10
000d59 85bb      	LDD  R27,Y+10+1
000d5a 975f      	SBIW R26,31
000d5b f028      	BRLO _0x201E5
000d5c e0e0      	LDI  R30,LOW(0)
000d5d 87ea      	STD  Y+10,R30
000d5e 87eb      	STD  Y+10+1,R30
000d5f 940e 1e1f 	CALL SUBOPT_0x66
                 ; 0001 08D5 	}
                 _0x201E5:
000d61 cf3f      	RJMP _0x201BD
                 _0x201BF:
                 ; 0001 08D6 }
000d62 940e 23c5 	CALL __LOADLOCR6
000d64 962c      	ADIW R28,12
000d65 9508      	RET
                 
                 	.DSEG
                 _0x201B4:
000277           	.BYTE 0x13
                 ;
                 ;//========================================================
                 ;void robotblackline() //ANALOG OK
                 ; 0001 08DA {
                 
                 	.CSEG
                 _robotblackline:
                 ; 0001 08DB 	long int lastvalueline = 0, valueline = 0, value = 0, online = 0;
                 ; 0001 08DC 	int i = 0, j = 0
                 ; 0001 08DD 		, imin = 0;
                 ; 0001 08DE 	long int avrg = 0, sum = 0;
                 ; 0001 08DF 	unsigned int admin;
                 ; 0001 08E0 	unsigned char imax;
                 ; 0001 08E1 	int imaxlast = 0;
                 ; 0001 08E2 	unsigned int  admax;
                 ; 0001 08E3 	unsigned int demled = 0;
                 ; 0001 08E4 	unsigned int flagblindT = 0;
                 ; 0001 08E5 	unsigned int flagblindP = 0;
                 ; 0001 08E6 	float udk, sumi = 0, err, lasterr;
                 ; 0001 08E7 
                 ; 0001 08E8 	int iminlast = 0;
                 ; 0001 08E9 	DDRA = 0x00;
000d66 97e7      	SBIW R28,55
000d67 e387      	LDI  R24,55
000d68 e0a0      	LDI  R26,LOW(0)
000d69 e0b0      	LDI  R27,HIGH(0)
000d6a e4ee      	LDI  R30,LOW(_0x201E6*2)
000d6b e0f2      	LDI  R31,HIGH(_0x201E6*2)
000d6c 940e 23cc 	CALL __INITLOCB
000d6e 940e 23be 	CALL __SAVELOCR6
                 ;	lastvalueline -> Y+57
                 ;	valueline -> Y+53
                 ;	value -> Y+49
                 ;	online -> Y+45
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	imin -> R20,R21
                 ;	avrg -> Y+41
                 ;	sum -> Y+37
                 ;	admin -> Y+35
                 ;	imax -> Y+34
                 ;	imaxlast -> Y+32
                 ;	admax -> Y+30
                 ;	demled -> Y+28
                 ;	flagblindT -> Y+26
                 ;	flagblindP -> Y+24
                 ;	udk -> Y+20
                 ;	sumi -> Y+16
                 ;	err -> Y+12
                 ;	lasterr -> Y+8
                 ;	iminlast -> Y+6
                +
000d70 e000     +LDI R16 , LOW ( 0 )
000d71 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000d72 e020     +LDI R18 , LOW ( 0 )
000d73 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000d74 e040     +LDI R20 , LOW ( 0 )
000d75 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000d76 940e 1e01 	CALL SUBOPT_0x61
                 ; 0001 08EA 	PORTA = 0x00;
                 ; 0001 08EB 
                 ; 0001 08EC 	LcdClear();
                 ; 0001 08ED 	hc(0, 1);
000d78 940e 1df1 	CALL SUBOPT_0x5E
000d7a 940e 05bc 	CALL _hc
                 ; 0001 08EE 	ws("BLACK LINE");
                +
000d7c e8ea     +LDI R30 , LOW ( _0x201E7 + ( 0 ) )
000d7d e0f2     +LDI R31 , HIGH ( _0x201E7 + ( 0 ) )
                 	__POINTW1MN _0x201E7,0
000d7e 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 08EF 	hc(1, 10);
000d80 940e 1df1 	CALL SUBOPT_0x5E
000d82 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 08F0 	ws("FOLOWER");
                +
000d84 e9e5     +LDI R30 , LOW ( _0x201E7 + ( 11 ) )
000d85 e0f2     +LDI R31 , HIGH ( _0x201E7 + ( 11 ) )
                 	__POINTW1MN _0x201E7,11
000d86 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 08F1 	LEDL = 1; LEDR = 1;
000d88 9aac      	SBI  0x15,4
000d89 9aad      	SBI  0x15,5
                 ; 0001 08F2 
                 ; 0001 08F3 	//doc lan dau tien  de khoi dong gia tri iminlast;
                 ; 0001 08F4 	readline();
000d8a 940e 1e6f 	CALL SUBOPT_0x76
                 ; 0001 08F5 	admin = IRLINE[0]; imin = 0;
                 ; 0001 08F6 	for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x201ED:
                +
000d8c 3005     +CPI R16 , LOW ( 5 )
000d8d e0e0     +LDI R30 , HIGH ( 5 )
000d8e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000d8f f48c      	BRGE _0x201EE
000d90 940e 1e23 	CALL SUBOPT_0x67
000d92 940e 1e2e 	CALL SUBOPT_0x69
000d94 940e 1e7c 	CALL SUBOPT_0x77
000d96 f438      	BRSH _0x201EF
000d97 940e 1e23 	CALL SUBOPT_0x67
000d99 940e 1e2e 	CALL SUBOPT_0x69
000d9b a3eb      	STD  Y+35,R30
000d9c a3fc      	STD  Y+35+1,R31
000d9d 01a8      	MOVW R20,R16
                 _0x201EF:
                +
000d9e 5f0f     +SUBI R16 , LOW ( - 1 )
000d9f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000da0 cfeb      	RJMP _0x201ED
                 _0x201EE:
                 ; 0001 08F7 	iminlast = imin;
                +
000da1 834e     +STD Y + 6 , R20
000da2 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 08F8 	admin = 1024;
000da3 e0e0      	LDI  R30,LOW(1024)
000da4 e0f4      	LDI  R31,HIGH(1024)
000da5 a3eb      	STD  Y+35,R30
000da6 a3fc      	STD  Y+35+1,R31
                 ; 0001 08F9 	admax = 0;
000da7 8fee      	STD  Y+30,R30
000da8 8fef      	STD  Y+30+1,R30
                 ; 0001 08FA 	//calib
                 ; 0001 08FB 	while (keyKT != 0)
                 _0x201F0:
000da9 9b98      	SBIS 0x13,0
000daa c040      	RJMP _0x201F2
                 ; 0001 08FC 	{
                 ; 0001 08FD 		//doc gia tri cam bien
                 ; 0001 08FE 		readline();
000dab de44      	RCALL _readline
                 ; 0001 08FF 
                 ; 0001 0900 		for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                +
000dac e001     +LDI R16 , LOW ( 1 )
000dad e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x201F4:
                +
000dae 3005     +CPI R16 , LOW ( 5 )
000daf e0e0     +LDI R30 , HIGH ( 5 )
000db0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000db1 f48c      	BRGE _0x201F5
000db2 940e 1e23 	CALL SUBOPT_0x67
000db4 940e 1e2e 	CALL SUBOPT_0x69
000db6 940e 1e7c 	CALL SUBOPT_0x77
000db8 f438      	BRSH _0x201F6
000db9 940e 1e23 	CALL SUBOPT_0x67
000dbb 940e 1e2e 	CALL SUBOPT_0x69
000dbd a3eb      	STD  Y+35,R30
000dbe a3fc      	STD  Y+35+1,R31
000dbf 01a8      	MOVW R20,R16
                 _0x201F6:
                +
000dc0 5f0f     +SUBI R16 , LOW ( - 1 )
000dc1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000dc2 cfeb      	RJMP _0x201F4
                 _0x201F5:
                 ; 0001 0901 		//hc(3,10);wn16s(admin);
                 ; 0001 0902 		hc(3, 10); wn16s(admin);
000dc3 940e 1de1 	CALL SUBOPT_0x5B
000dc5 940e 1e07 	CALL SUBOPT_0x62
000dc7 a1eb      	LDD  R30,Y+35
000dc8 a1fc      	LDD  R31,Y+35+1
000dc9 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 0903 
                 ; 0001 0904 		for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                +
000dcb e001     +LDI R16 , LOW ( 1 )
000dcc e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x201F8:
                +
000dcd 3005     +CPI R16 , LOW ( 5 )
000dce e0e0     +LDI R30 , HIGH ( 5 )
000dcf 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000dd0 f49c      	BRGE _0x201F9
000dd1 940e 1e23 	CALL SUBOPT_0x67
000dd3 940e 1e2e 	CALL SUBOPT_0x69
000dd5 8dae      	LDD  R26,Y+30
000dd6 8dbf      	LDD  R27,Y+30+1
000dd7 17ae      	CP   R26,R30
000dd8 07bf      	CPC  R27,R31
000dd9 f438      	BRSH _0x201FA
000dda 940e 1e23 	CALL SUBOPT_0x67
000ddc 940e 1e2e 	CALL SUBOPT_0x69
000dde 8fee      	STD  Y+30,R30
000ddf 8fff      	STD  Y+30+1,R31
                +
000de0 a30a     +STD Y + 34 , R16
                 	__PUTBSR 16,34
                 _0x201FA:
                +
000de1 5f0f     +SUBI R16 , LOW ( - 1 )
000de2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000de3 cfe9      	RJMP _0x201F8
                 _0x201F9:
                 ; 0001 0905 		hc(4, 10); wn16s(admax);
000de4 940e 1e6a 	CALL SUBOPT_0x75
000de6 8dee      	LDD  R30,Y+30
000de7 8dff      	LDD  R31,Y+30+1
000de8 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 0906 	}
000dea cfbe      	RJMP _0x201F0
                 _0x201F2:
                 ; 0001 0907 	//test gia tri doc line
                 ; 0001 0908 	online = 0;
000deb e0e0      	LDI  R30,LOW(0)
                +
000dec a7ed     +STD Y + 45 , R30
000ded a7ee     +STD Y + 45 + 1 , R30
000dee a7ef     +STD Y + 45 + 2 , R30
000def abe8     +STD Y + 45 + 3 , R30
                 	__CLRD1S 45
                 ; 0001 0909 	while (1)
                 _0x201FB:
                 ; 0001 090A 	{
                 ; 0001 090B 		//doc gia tri cam bien
                 ; 0001 090C 		readline();
000df0 ddff      	RCALL _readline
                 ; 0001 090D 		for (i = 0; i < 5; i++)
                +
000df1 e000     +LDI R16 , LOW ( 0 )
000df2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x201FF:
                +
000df3 3005     +CPI R16 , LOW ( 5 )
000df4 e0e0     +LDI R30 , HIGH ( 5 )
000df5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000df6 f014      	BRLT PC+3
000df7 940c 0e40 	JMP _0x20200
                 ; 0001 090E 		{
                 ; 0001 090F 			value = IRLINE[i];
000df9 940e 1e23 	CALL SUBOPT_0x67
000dfb 940e 1e2e 	CALL SUBOPT_0x69
000dfd 2766      	CLR  R22
000dfe 2777      	CLR  R23
                +
000dff abe9     +STD Y + 49 , R30
000e00 abfa     +STD Y + 49 + 1 , R31
000e01 ab6b     +STD Y + 49 + 2 , R22
000e02 ab7c     +STD Y + 49 + 3 , R23
                 	__PUTD1S 49
                 ; 0001 0910 			if (value < 280) online = 1;
                +
000e03 a9a9     +LDD R26 , Y + 49
000e04 a9ba     +LDD R27 , Y + 49 + 1
000e05 a98b     +LDD R24 , Y + 49 + 2
000e06 a99c     +LDD R25 , Y + 49 + 3
                 	__GETD2S 49
                +
000e07 31a8     +CPI R26 , LOW ( 0x118 )
000e08 e0e1     +LDI R30 , HIGH ( 0x118 )
000e09 07be     +CPC R27 , R30
000e0a e0e0     +LDI R30 , BYTE3 ( 0x118 )
000e0b 078e     +CPC R24 , R30
000e0c e0e0     +LDI R30 , BYTE4 ( 0x118 )
000e0d 079e     +CPC R25 , R30
                 	__CPD2N 0x118
000e0e f444      	BRGE _0x20201
                +
000e0f e0e1     +LDI R30 , LOW ( 0x1 )
000e10 e0f0     +LDI R31 , HIGH ( 0x1 )
000e11 e060     +LDI R22 , BYTE3 ( 0x1 )
000e12 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
                +
000e13 a7ed     +STD Y + 45 , R30
000e14 a7fe     +STD Y + 45 + 1 , R31
000e15 a76f     +STD Y + 45 + 2 , R22
000e16 ab78     +STD Y + 45 + 3 , R23
                 	__PUTD1S 45
                 ; 0001 0911 			avrg = avrg + i * 1000 * value;
                 _0x20201:
000e17 01f8      	MOVW R30,R16
000e18 eea8      	LDI  R26,LOW(1000)
000e19 e0b3      	LDI  R27,HIGH(1000)
000e1a 940e 22c4 	CALL __MULW12
000e1c 01df      	MOVW R26,R30
                +
000e1d a9e9     +LDD R30 , Y + 49
000e1e a9fa     +LDD R31 , Y + 49 + 1
000e1f a96b     +LDD R22 , Y + 49 + 2
000e20 a97c     +LDD R23 , Y + 49 + 3
                 	__GETD1S 49
000e21 940e 2291 	CALL __CWD2
000e23 940e 22c9 	CALL __MULD12
                +
000e25 a5a9     +LDD R26 , Y + 41
000e26 a5ba     +LDD R27 , Y + 41 + 1
000e27 a58b     +LDD R24 , Y + 41 + 2
000e28 a59c     +LDD R25 , Y + 41 + 3
                 	__GETD2S 41
000e29 940e 2270 	CALL __ADDD12
                +
000e2b a7e9     +STD Y + 41 , R30
000e2c a7fa     +STD Y + 41 + 1 , R31
000e2d a76b     +STD Y + 41 + 2 , R22
000e2e a77c     +STD Y + 41 + 3 , R23
                 	__PUTD1S 41
                 ; 0001 0912 			sum = sum + value;
                +
000e2f a9e9     +LDD R30 , Y + 49
000e30 a9fa     +LDD R31 , Y + 49 + 1
000e31 a96b     +LDD R22 , Y + 49 + 2
000e32 a97c     +LDD R23 , Y + 49 + 3
                 	__GETD1S 49
                +
000e33 a1ad     +LDD R26 , Y + 37
000e34 a1be     +LDD R27 , Y + 37 + 1
000e35 a18f     +LDD R24 , Y + 37 + 2
000e36 a598     +LDD R25 , Y + 37 + 3
                 	__GETD2S 37
000e37 940e 2270 	CALL __ADDD12
                +
000e39 a3ed     +STD Y + 37 , R30
000e3a a3fe     +STD Y + 37 + 1 , R31
000e3b a36f     +STD Y + 37 + 2 , R22
000e3c a778     +STD Y + 37 + 3 , R23
                 	__PUTD1S 37
                 ; 0001 0913 		}
                +
000e3d 5f0f     +SUBI R16 , LOW ( - 1 )
000e3e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000e3f cfb3      	RJMP _0x201FF
                 _0x20200:
                 ; 0001 0914 		//hc(1,10);wn16s(online);
                 ; 0001 0915 		if (online == 1)
                +
000e40 a5ad     +LDD R26 , Y + 45
000e41 a5be     +LDD R27 , Y + 45 + 1
000e42 a58f     +LDD R24 , Y + 45 + 2
000e43 a998     +LDD R25 , Y + 45 + 3
                 	__GETD2S 45
000e44 940e 1e81 	CALL SUBOPT_0x78
000e46 f501      	BRNE _0x20202
                 ; 0001 0916 		{
                 ; 0001 0917 			valueline = (int)(avrg / sum);
                +
000e47 a1ed     +LDD R30 , Y + 37
000e48 a1fe     +LDD R31 , Y + 37 + 1
000e49 a16f     +LDD R22 , Y + 37 + 2
000e4a a578     +LDD R23 , Y + 37 + 3
                 	__GETD1S 37
                +
000e4b a5a9     +LDD R26 , Y + 41
000e4c a5ba     +LDD R27 , Y + 41 + 1
000e4d a58b     +LDD R24 , Y + 41 + 2
000e4e a59c     +LDD R25 , Y + 41 + 3
                 	__GETD2S 41
000e4f 940e 231e 	CALL __DIVD21
000e51 2766      	CLR  R22
000e52 2777      	CLR  R23
000e53 940e 228c 	CALL __CWD1
                +
000e55 abed     +STD Y + 53 , R30
000e56 abfe     +STD Y + 53 + 1 , R31
000e57 ab6f     +STD Y + 53 + 2 , R22
000e58 af78     +STD Y + 53 + 3 , R23
                 	__PUTD1S 53
                 ; 0001 0918 			// hc(2,10);wn16s(valueline);
                 ; 0001 0919 			online = 0;
000e59 e0e0      	LDI  R30,LOW(0)
                +
000e5a a7ed     +STD Y + 45 , R30
000e5b a7ee     +STD Y + 45 + 1 , R30
000e5c a7ef     +STD Y + 45 + 2 , R30
000e5d abe8     +STD Y + 45 + 3 , R30
                 	__CLRD1S 45
                 ; 0001 091A 			avrg = 0;
                +
000e5e a7e9     +STD Y + 41 , R30
000e5f a7ea     +STD Y + 41 + 1 , R30
000e60 a7eb     +STD Y + 41 + 2 , R30
000e61 a7ec     +STD Y + 41 + 3 , R30
                 	__CLRD1S 41
                 ; 0001 091B 			sum = 0;
                +
000e62 a3ed     +STD Y + 37 , R30
000e63 a3ee     +STD Y + 37 + 1 , R30
000e64 a3ef     +STD Y + 37 + 2 , R30
000e65 a7e8     +STD Y + 37 + 3 , R30
                 	__CLRD1S 37
                 ; 0001 091C 		}
                 ; 0001 091D 		else
000e66 c019      	RJMP _0x20203
                 _0x20202:
                 ; 0001 091E 		{
                 ; 0001 091F 			if (lastvalueline > 1935)
                +
000e67 ada9     +LDD R26 , Y + 57
000e68 adba     +LDD R27 , Y + 57 + 1
000e69 ad8b     +LDD R24 , Y + 57 + 2
000e6a ad9c     +LDD R25 , Y + 57 + 3
                 	__GETD2S 57
                +
000e6b 39a0     +CPI R26 , LOW ( 0x790 )
000e6c e0e7     +LDI R30 , HIGH ( 0x790 )
000e6d 07be     +CPC R27 , R30
000e6e e0e0     +LDI R30 , BYTE3 ( 0x790 )
000e6f 078e     +CPC R24 , R30
000e70 e0e0     +LDI R30 , BYTE4 ( 0x790 )
000e71 079e     +CPC R25 , R30
                 	__CPD2N 0x790
000e72 f02c      	BRLT _0x20204
                 ; 0001 0920 				valueline = 2000;
                +
000e73 ede0     +LDI R30 , LOW ( 0x7D0 )
000e74 e0f7     +LDI R31 , HIGH ( 0x7D0 )
000e75 e060     +LDI R22 , BYTE3 ( 0x7D0 )
000e76 e070     +LDI R23 , BYTE4 ( 0x7D0 )
                 	__GETD1N 0x7D0
000e77 c004      	RJMP _0x2032C
                 ; 0001 0921 			else
                 _0x20204:
                 ; 0001 0922 				valueline = 1800;
                +
000e78 e0e8     +LDI R30 , LOW ( 0x708 )
000e79 e0f7     +LDI R31 , HIGH ( 0x708 )
000e7a e060     +LDI R22 , BYTE3 ( 0x708 )
000e7b e070     +LDI R23 , BYTE4 ( 0x708 )
                 	__GETD1N 0x708
                 _0x2032C:
                +
000e7c abed     +STD Y + 53 , R30
000e7d abfe     +STD Y + 53 + 1 , R31
000e7e ab6f     +STD Y + 53 + 2 , R22
000e7f af78     +STD Y + 53 + 3 , R23
                 	__PUTD1S 53
                 ; 0001 0923 		}
                 _0x20203:
                 ; 0001 0924 		err = 1935 - valueline;
                +
000e80 a9ad     +LDD R26 , Y + 53
000e81 a9be     +LDD R27 , Y + 53 + 1
000e82 a98f     +LDD R24 , Y + 53 + 2
000e83 ad98     +LDD R25 , Y + 53 + 3
                 	__GETD2S 53
                +
000e84 e8ef     +LDI R30 , LOW ( 0x78F )
000e85 e0f7     +LDI R31 , HIGH ( 0x78F )
000e86 e060     +LDI R22 , BYTE3 ( 0x78F )
000e87 e070     +LDI R23 , BYTE4 ( 0x78F )
                 	__GETD1N 0x78F
000e88 940e 2275 	CALL __SUBD12
000e8a 940e 20f9 	CALL __CDF1
000e8c 940e 1c9a 	CALL SUBOPT_0x3B
                 ; 0001 0925 		if (err > 100) err = 100;
000e8e 940e 1e89 	CALL SUBOPT_0x79
                +
000e90 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000e91 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000e92 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000e93 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000e94 940e 2216 	CALL __CMPF12
000e96 f009      	BREQ PC+2
000e97 f410      	BRCC PC+3
000e98 940c 0e9c 	JMP  _0x20206
000e9a 940e 1c9a 	CALL SUBOPT_0x3B
                 ; 0001 0926 		if (err < -100) err = -100;
                 _0x20206:
000e9c 940e 1e89 	CALL SUBOPT_0x79
                +
000e9e e0e0     +LDI R30 , LOW ( 0xC2C80000 )
000e9f e0f0     +LDI R31 , HIGH ( 0xC2C80000 )
000ea0 ec68     +LDI R22 , BYTE3 ( 0xC2C80000 )
000ea1 ec72     +LDI R23 , BYTE4 ( 0xC2C80000 )
                 	__GETD1N 0xC2C80000
000ea2 940e 2216 	CALL __CMPF12
000ea4 f410      	BRSH _0x20207
000ea5 940e 1c9a 	CALL SUBOPT_0x3B
                 ; 0001 0927 		sumi = sumi + err / 35;
                 _0x20207:
000ea7 940e 1e89 	CALL SUBOPT_0x79
                +
000ea9 e0e0     +LDI R30 , LOW ( 0x420C0000 )
000eaa e0f0     +LDI R31 , HIGH ( 0x420C0000 )
000eab e06c     +LDI R22 , BYTE3 ( 0x420C0000 )
000eac e472     +LDI R23 , BYTE4 ( 0x420C0000 )
                 	__GETD1N 0x420C0000
000ead 940e 1e8e 	CALL SUBOPT_0x7A
000eaf 940e 1c8c 	CALL SUBOPT_0x38
                 ; 0001 0928 		if (sumi > 6) sumi = 6;
000eb1 940e 1e97 	CALL SUBOPT_0x7B
                +
000eb3 e0e0     +LDI R30 , LOW ( 0x40C00000 )
000eb4 e0f0     +LDI R31 , HIGH ( 0x40C00000 )
000eb5 ec60     +LDI R22 , BYTE3 ( 0x40C00000 )
000eb6 e470     +LDI R23 , BYTE4 ( 0x40C00000 )
                 	__GETD1N 0x40C00000
000eb7 940e 2216 	CALL __CMPF12
000eb9 f009      	BREQ PC+2
000eba f410      	BRCC PC+3
000ebb 940c 0ebf 	JMP  _0x20208
000ebd 940e 1c8c 	CALL SUBOPT_0x38
                 ; 0001 0929 		if (sumi < -6) sumi = -6;
                 _0x20208:
000ebf 940e 1e97 	CALL SUBOPT_0x7B
                +
000ec1 e0e0     +LDI R30 , LOW ( 0xC0C00000 )
000ec2 e0f0     +LDI R31 , HIGH ( 0xC0C00000 )
000ec3 ec60     +LDI R22 , BYTE3 ( 0xC0C00000 )
000ec4 ec70     +LDI R23 , BYTE4 ( 0xC0C00000 )
                 	__GETD1N 0xC0C00000
000ec5 940e 2216 	CALL __CMPF12
000ec7 f410      	BRSH _0x20209
000ec8 940e 1c8c 	CALL SUBOPT_0x38
                 ; 0001 092A 		udk = err / 7 + sumi + (err - lasterr) / 30;
                 _0x20209:
000eca 940e 1e89 	CALL SUBOPT_0x79
                +
000ecc e0e0     +LDI R30 , LOW ( 0x40E00000 )
000ecd e0f0     +LDI R31 , HIGH ( 0x40E00000 )
000ece ee60     +LDI R22 , BYTE3 ( 0x40E00000 )
000ecf e470     +LDI R23 , BYTE4 ( 0x40E00000 )
                 	__GETD1N 0x40E00000
000ed0 940e 1e8e 	CALL SUBOPT_0x7A
000ed2 937f      	PUSH R23
000ed3 936f      	PUSH R22
000ed4 93ff      	PUSH R31
000ed5 93ef      	PUSH R30
000ed6 940e 1c9f 	CALL SUBOPT_0x3C
000ed8 01df      	MOVW R26,R30
000ed9 01cb      	MOVW R24,R22
                +
000eda e0e0     +LDI R30 , LOW ( 0x41F00000 )
000edb e0f0     +LDI R31 , HIGH ( 0x41F00000 )
000edc ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
000edd e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
000ede 940e 21d1 	CALL __DIVF21
000ee0 91af      	POP  R26
000ee1 91bf      	POP  R27
000ee2 918f      	POP  R24
000ee3 919f      	POP  R25
000ee4 940e 1c80 	CALL SUBOPT_0x36
                 ; 0001 092B 		if (udk > 10) { udk = 9; sumi = 0; }
000ee6 940e 1e9c 	CALL SUBOPT_0x7C
000ee8 940e 2216 	CALL __CMPF12
000eea f009      	BREQ PC+2
000eeb f410      	BRCC PC+3
000eec 940c 0ef4 	JMP  _0x2020A
                +
000eee e0e0     +LDI R30 , LOW ( 0x41100000 )
000eef e0f0     +LDI R31 , HIGH ( 0x41100000 )
000ef0 e160     +LDI R22 , BYTE3 ( 0x41100000 )
000ef1 e471     +LDI R23 , BYTE4 ( 0x41100000 )
                 	__GETD1N 0x41100000
000ef2 940e 1ea2 	CALL SUBOPT_0x7D
                 ; 0001 092C 		if (udk < -10){ udk = -9; sumi = 0; }
                 _0x2020A:
000ef4 940e 1c87 	CALL SUBOPT_0x37
                +
000ef6 e0e0     +LDI R30 , LOW ( 0xC1200000 )
000ef7 e0f0     +LDI R31 , HIGH ( 0xC1200000 )
000ef8 e260     +LDI R22 , BYTE3 ( 0xC1200000 )
000ef9 ec71     +LDI R23 , BYTE4 ( 0xC1200000 )
                 	__GETD1N 0xC1200000
000efa 940e 2216 	CALL __CMPF12
000efc f430      	BRSH _0x2020B
                +
000efd e0e0     +LDI R30 , LOW ( 0xC1100000 )
000efe e0f0     +LDI R31 , HIGH ( 0xC1100000 )
000eff e160     +LDI R22 , BYTE3 ( 0xC1100000 )
000f00 ec71     +LDI R23 , BYTE4 ( 0xC1100000 )
                 	__GETD1N 0xC1100000
000f01 940e 1ea2 	CALL SUBOPT_0x7D
                 ; 0001 092D 		//hc(5,10);wn16s(udk);
                 ; 0001 092E 		vMLtoi(10 + udk); vMRtoi(10 - udk);
                 _0x2020B:
                +
000f03 89ec     +LDD R30 , Y + 20
000f04 89fd     +LDD R31 , Y + 20 + 1
000f05 896e     +LDD R22 , Y + 20 + 2
000f06 897f     +LDD R23 , Y + 20 + 3
                 	__GETD1S 20
                +
000f07 e0a0     +LDI R26 , LOW ( 0x41200000 )
000f08 e0b0     +LDI R27 , HIGH ( 0x41200000 )
000f09 e280     +LDI R24 , BYTE3 ( 0x41200000 )
000f0a e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
000f0b 940e 2133 	CALL __ADDF12
000f0d 940e 20c0 	CALL __CFD1U
000f0f 93ea      	ST   -Y,R30
000f10 d831      	RCALL _vMLtoi
000f11 940e 1e9c 	CALL SUBOPT_0x7C
000f13 940e 212c 	CALL __SUBF12
000f15 940e 20c0 	CALL __CFD1U
000f17 93ea      	ST   -Y,R30
000f18 d841      	RCALL _vMRtoi
                 ; 0001 092F 
                 ; 0001 0930 		lastvalueline = valueline;
                +
000f19 a9ed     +LDD R30 , Y + 53
000f1a a9fe     +LDD R31 , Y + 53 + 1
000f1b a96f     +LDD R22 , Y + 53 + 2
000f1c ad78     +LDD R23 , Y + 53 + 3
                 	__GETD1S 53
                +
000f1d afe9     +STD Y + 57 , R30
000f1e affa     +STD Y + 57 + 1 , R31
000f1f af6b     +STD Y + 57 + 2 , R22
000f20 af7c     +STD Y + 57 + 3 , R23
                 	__PUTD1S 57
                 ; 0001 0931 		lasterr = err;
000f21 940e 1eac 	CALL SUBOPT_0x7E
                +
000f23 87e8     +STD Y + 8 , R30
000f24 87f9     +STD Y + 8 + 1 , R31
000f25 876a     +STD Y + 8 + 2 , R22
000f26 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0001 0932 	}
000f27 cec8      	RJMP _0x201FB
                 ; 0001 0933 
                 ; 0001 0934 	while (keyKT != 0)
                 _0x2020C:
000f28 9b98      	SBIS 0x13,0
000f29 c0e5      	RJMP _0x2020E
                 ; 0001 0935 	{
                 ; 0001 0936 		//doc gia tri cam bien
                 ; 0001 0937 		readline();
000f2a 940e 1e6f 	CALL SUBOPT_0x76
                 ; 0001 0938 		admin = IRLINE[0]; imin = 0;
                 ; 0001 0939 		for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20210:
                +
000f2c 3005     +CPI R16 , LOW ( 5 )
000f2d e0e0     +LDI R30 , HIGH ( 5 )
000f2e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000f2f f48c      	BRGE _0x20211
000f30 940e 1e23 	CALL SUBOPT_0x67
000f32 940e 1e2e 	CALL SUBOPT_0x69
000f34 940e 1e7c 	CALL SUBOPT_0x77
000f36 f438      	BRSH _0x20212
000f37 940e 1e23 	CALL SUBOPT_0x67
000f39 940e 1e2e 	CALL SUBOPT_0x69
000f3b a3eb      	STD  Y+35,R30
000f3c a3fc      	STD  Y+35+1,R31
000f3d 01a8      	MOVW R20,R16
                 _0x20212:
                +
000f3e 5f0f     +SUBI R16 , LOW ( - 1 )
000f3f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000f40 cfeb      	RJMP _0x20210
                 _0x20211:
                 ; 0001 093A 		hc(2, 10); wn16s(iminlast);
000f41 940e 1dec 	CALL SUBOPT_0x5D
000f43 940e 1e07 	CALL SUBOPT_0x62
000f45 81ee      	LDD  R30,Y+6
000f46 81ff      	LDD  R31,Y+6+1
000f47 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 093B 		hc(3, 10); wn16s(imin);
000f49 940e 1de1 	CALL SUBOPT_0x5B
000f4b 940e 1e07 	CALL SUBOPT_0x62
000f4d 935a      	ST   -Y,R21
000f4e 934a      	ST   -Y,R20
000f4f 940e 065c 	CALL _wn16s
                 ; 0001 093C 		hc(4, 10); wn16s(admin);
000f51 940e 1e6a 	CALL SUBOPT_0x75
000f53 a1eb      	LDD  R30,Y+35
000f54 a1fc      	LDD  R31,Y+35+1
000f55 940e 1ddd 	CALL SUBOPT_0x5A
                 ; 0001 093D 
                 ; 0001 093E 		if ((imin - iminlast > 1) || (imin - iminlast < -1))  //tranh truong hop nhay bo trang thai
000f57 81ae      	LDD  R26,Y+6
000f58 81bf      	LDD  R27,Y+6+1
000f59 01fa      	MOVW R30,R20
000f5a 1bea      	SUB  R30,R26
000f5b 0bfb      	SBC  R31,R27
000f5c 01df      	MOVW R26,R30
000f5d 9732      	SBIW R30,2
000f5e f42c      	BRGE _0x20214
000f5f 01fd      	MOVW R30,R26
000f60 3fef      	CPI  R30,LOW(0xFFFF)
000f61 efaf      	LDI  R26,HIGH(0xFFFF)
000f62 07fa      	CPC  R31,R26
000f63 f40c      	BRGE _0x20213
                 _0x20214:
                 ; 0001 093F 		{
                 ; 0001 0940 		}
                 ; 0001 0941 		else
000f64 c03c      	RJMP _0x20216
                 _0x20213:
                 ; 0001 0942 		{
                 ; 0001 0943 			switch (imin)
000f65 01fa      	MOVW R30,R20
                 ; 0001 0944 			{
                 ; 0001 0945 			case 0:
000f66 9730      	SBIW R30,0
000f67 f449      	BRNE _0x2021A
                 ; 0001 0946 				vMLtoi(1); vMRtoi(15);
000f68 940e 1e4c 	CALL SUBOPT_0x6E
000f6a 940e 1e54 	CALL SUBOPT_0x70
                 ; 0001 0947 				//flagblindT = 0;
                 ; 0001 0948 				flagblindP = 1;
000f6c e0e1      	LDI  R30,LOW(1)
000f6d e0f0      	LDI  R31,HIGH(1)
000f6e 8fe8      	STD  Y+24,R30
000f6f 8ff9      	STD  Y+24+1,R31
                 ; 0001 0949 				break;
000f70 c02e      	RJMP _0x20219
                 ; 0001 094A 			case 1:
                 _0x2021A:
000f71 30e1      	CPI  R30,LOW(0x1)
000f72 e0a0      	LDI  R26,HIGH(0x1)
000f73 07fa      	CPC  R31,R26
000f74 f449      	BRNE _0x2021B
                 ; 0001 094B 				vMLtoi(2); vMRtoi(8);
000f75 e0e2      	LDI  R30,LOW(2)
000f76 93ea      	ST   -Y,R30
000f77 940e 0742 	CALL _vMLtoi
000f79 e0e8      	LDI  R30,LOW(8)
000f7a 93ea      	ST   -Y,R30
000f7b 940e 075a 	CALL _vMRtoi
                 ; 0001 094C 				break;
000f7d c021      	RJMP _0x20219
                 ; 0001 094D 			case 2:
                 _0x2021B:
000f7e 30e2      	CPI  R30,LOW(0x2)
000f7f e0a0      	LDI  R26,HIGH(0x2)
000f80 07fa      	CPC  R31,R26
000f81 f449      	BRNE _0x2021C
                 ; 0001 094E 				vMLtoi(10); vMRtoi(10);
000f82 e0ea      	LDI  R30,LOW(10)
000f83 93ea      	ST   -Y,R30
000f84 940e 0742 	CALL _vMLtoi
000f86 e0ea      	LDI  R30,LOW(10)
000f87 93ea      	ST   -Y,R30
000f88 940e 075a 	CALL _vMRtoi
                 ; 0001 094F 				break;
000f8a c014      	RJMP _0x20219
                 ; 0001 0950 			case 3:
                 _0x2021C:
000f8b 30e3      	CPI  R30,LOW(0x3)
000f8c e0a0      	LDI  R26,HIGH(0x3)
000f8d 07fa      	CPC  R31,R26
000f8e f421      	BRNE _0x2021D
                 ; 0001 0951 				vMLtoi(8); vMRtoi(2);
000f8f e0e8      	LDI  R30,LOW(8)
000f90 940e 1eb1 	CALL SUBOPT_0x7F
                 ; 0001 0952 				break;
000f92 c00c      	RJMP _0x20219
                 ; 0001 0953 			case 4:
                 _0x2021D:
000f93 30e4      	CPI  R30,LOW(0x4)
000f94 e0a0      	LDI  R26,HIGH(0x4)
000f95 07fa      	CPC  R31,R26
000f96 f441      	BRNE _0x2021F
                 ; 0001 0954 				vMLtoi(15); vMRtoi(1);
000f97 940e 1e58 	CALL SUBOPT_0x71
000f99 940e 1e5c 	CALL SUBOPT_0x72
                 ; 0001 0955 				flagblindT = 1;
000f9b e0e1      	LDI  R30,LOW(1)
000f9c e0f0      	LDI  R31,HIGH(1)
000f9d 8fea      	STD  Y+26,R30
000f9e 8ffb      	STD  Y+26+1,R31
                 ; 0001 0956 				//flagblindP = 0;
                 ; 0001 0957 				break;
                 ; 0001 0958 			default:
                 _0x2021F:
                 ; 0001 0959 				// vMLtoi(5); vMRtoi(5) ;
                 ; 0001 095A 				break;
                 ; 0001 095B 			}
                 _0x20219:
                 ; 0001 095C 
                 ; 0001 095D 			iminlast = imin;
                +
000f9f 834e     +STD Y + 6 , R20
000fa0 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 095E 		}
                 _0x20216:
                 ; 0001 095F 
                 ; 0001 0960 
                 ; 0001 0961 		while (flagblindT == 1 && keyKT != 0) //lac duong ben trai
                 _0x20220:
000fa1 8daa      	LDD  R26,Y+26
000fa2 8dbb      	LDD  R27,Y+26+1
000fa3 9711      	SBIW R26,1
000fa4 f419      	BRNE _0x20223
000fa5 940e 1e65 	CALL SUBOPT_0x74
000fa7 f409      	BRNE _0x20224
                 _0x20223:
000fa8 c026      	RJMP _0x20222
                 _0x20224:
                 ; 0001 0962 		{
                 ; 0001 0963 			vMLtoi(20); vMRtoi(2);
000fa9 e1e4      	LDI  R30,LOW(20)
000faa 940e 1eb1 	CALL SUBOPT_0x7F
                 ; 0001 0964 			readline();
000fac 940e 1e6f 	CALL SUBOPT_0x76
                 ; 0001 0965 			admin = IRLINE[0]; imin = 0;
                 ; 0001 0966 			for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20226:
                +
000fae 3005     +CPI R16 , LOW ( 5 )
000faf e0e0     +LDI R30 , HIGH ( 5 )
000fb0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000fb1 f48c      	BRGE _0x20227
000fb2 940e 1e23 	CALL SUBOPT_0x67
000fb4 940e 1e2e 	CALL SUBOPT_0x69
000fb6 940e 1e7c 	CALL SUBOPT_0x77
000fb8 f438      	BRSH _0x20228
000fb9 940e 1e23 	CALL SUBOPT_0x67
000fbb 940e 1e2e 	CALL SUBOPT_0x69
000fbd a3eb      	STD  Y+35,R30
000fbe a3fc      	STD  Y+35+1,R31
000fbf 01a8      	MOVW R20,R16
                 _0x20228:
                +
000fc0 5f0f     +SUBI R16 , LOW ( - 1 )
000fc1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000fc2 cfeb      	RJMP _0x20226
                 _0x20227:
                 ; 0001 0967 			iminlast = imin;
                +
000fc3 834e     +STD Y + 6 , R20
000fc4 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 0968 			if (IRLINE[2] < 310)  flagblindT = 0;
000fc5 940e 1e29 	CALL SUBOPT_0x68
000fc7 33a6      	CPI  R26,LOW(0x136)
000fc8 e0e1      	LDI  R30,HIGH(0x136)
000fc9 07be      	CPC  R27,R30
000fca f418      	BRSH _0x20229
000fcb e0e0      	LDI  R30,LOW(0)
000fcc 8fea      	STD  Y+26,R30
000fcd 8feb      	STD  Y+26+1,R30
                 ; 0001 0969 
                 ; 0001 096A 		}
                 _0x20229:
000fce cfd2      	RJMP _0x20220
                 _0x20222:
                 ; 0001 096B 		while (flagblindP == 1 && keyKT != 0) //lac duong ben phai
                 _0x2022A:
000fcf 8da8      	LDD  R26,Y+24
000fd0 8db9      	LDD  R27,Y+24+1
000fd1 9711      	SBIW R26,1
000fd2 f419      	BRNE _0x2022D
000fd3 940e 1e65 	CALL SUBOPT_0x74
000fd5 f409      	BRNE _0x2022E
                 _0x2022D:
000fd6 c029      	RJMP _0x2022C
                 _0x2022E:
                 ; 0001 096C 		{
                 ; 0001 096D 			vMLtoi(2); vMRtoi(20);
000fd7 e0e2      	LDI  R30,LOW(2)
000fd8 93ea      	ST   -Y,R30
000fd9 940e 0742 	CALL _vMLtoi
000fdb 940e 1e50 	CALL SUBOPT_0x6F
                 ; 0001 096E 			readline();
000fdd 940e 1e6f 	CALL SUBOPT_0x76
                 ; 0001 096F 			admin = IRLINE[0]; imin = 0;
                 ; 0001 0970 			for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20230:
                +
000fdf 3005     +CPI R16 , LOW ( 5 )
000fe0 e0e0     +LDI R30 , HIGH ( 5 )
000fe1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000fe2 f48c      	BRGE _0x20231
000fe3 940e 1e23 	CALL SUBOPT_0x67
000fe5 940e 1e2e 	CALL SUBOPT_0x69
000fe7 940e 1e7c 	CALL SUBOPT_0x77
000fe9 f438      	BRSH _0x20232
000fea 940e 1e23 	CALL SUBOPT_0x67
000fec 940e 1e2e 	CALL SUBOPT_0x69
000fee a3eb      	STD  Y+35,R30
000fef a3fc      	STD  Y+35+1,R31
000ff0 01a8      	MOVW R20,R16
                 _0x20232:
                +
000ff1 5f0f     +SUBI R16 , LOW ( - 1 )
000ff2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ff3 cfeb      	RJMP _0x20230
                 _0x20231:
                 ; 0001 0971 			iminlast = imin;
                +
000ff4 834e     +STD Y + 6 , R20
000ff5 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 0972 			if (IRLINE[2] < 310)  flagblindP = 0;
000ff6 940e 1e29 	CALL SUBOPT_0x68
000ff8 33a6      	CPI  R26,LOW(0x136)
000ff9 e0e1      	LDI  R30,HIGH(0x136)
000ffa 07be      	CPC  R27,R30
000ffb f418      	BRSH _0x20233
000ffc e0e0      	LDI  R30,LOW(0)
000ffd 8fe8      	STD  Y+24,R30
000ffe 8fe9      	STD  Y+24+1,R30
                 ; 0001 0973 
                 ; 0001 0974 		}
                 _0x20233:
000fff cfcf      	RJMP _0x2022A
                 _0x2022C:
                 ; 0001 0975 
                 ; 0001 0976 
                 ; 0001 0977 		demled++;
001000 8dec      	LDD  R30,Y+28
001001 8dfd      	LDD  R31,Y+28+1
001002 9631      	ADIW R30,1
001003 8fec      	STD  Y+28,R30
001004 8ffd      	STD  Y+28+1,R31
                 ; 0001 0978 		if (demled > 30){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
001005 8dac      	LDD  R26,Y+28
001006 8dbd      	LDD  R27,Y+28+1
001007 975f      	SBIW R26,31
001008 f028      	BRLO _0x20234
001009 e0e0      	LDI  R30,LOW(0)
00100a 8fec      	STD  Y+28,R30
00100b 8fed      	STD  Y+28+1,R30
00100c 940e 1e1f 	CALL SUBOPT_0x66
                 ; 0001 0979 	}
                 _0x20234:
00100e cf19      	RJMP _0x2020C
                 _0x2020E:
                 ; 0001 097A }
00100f 940e 23c5 	CALL __LOADLOCR6
001011 96ed      	ADIW R28,61
001012 9508      	RET
                 
                 	.DSEG
                 _0x201E7:
00028a           	.BYTE 0x13
                 ;//========================================================
                 ;void bluetooth()
                 ; 0001 097D {
                 
                 	.CSEG
                 _bluetooth:
                 ; 0001 097E 	unsigned char kytu;
                 ; 0001 097F 	unsigned int demled;
                 ; 0001 0980 
                 ; 0001 0981 	LcdClear();
001013 940e 23c0 	CALL __SAVELOCR4
                 ;	kytu -> R17
                 ;	demled -> R18,R19
001015 940e 1eb8 	CALL SUBOPT_0x80
                 ; 0001 0982 	hc(0, 10);
001017 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 0983 	ws("BLUETOOTH");
                +
001019 e9ed     +LDI R30 , LOW ( _0x20235 + ( 0 ) )
00101a e0f2     +LDI R31 , HIGH ( _0x20235 + ( 0 ) )
                 	__POINTW1MN _0x20235,0
00101b 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0984 	hc(1, 25);
00101d 940e 1df1 	CALL SUBOPT_0x5E
00101f e1e9      	LDI  R30,LOW(25)
001020 e0f0      	LDI  R31,HIGH(25)
001021 940e 1ebb 	CALL SUBOPT_0x81
                 ; 0001 0985 	ws("DRIVE");
                +
001023 eae7     +LDI R30 , LOW ( _0x20235 + ( 10 ) )
001024 e0f2     +LDI R31 , HIGH ( _0x20235 + ( 10 ) )
                 	__POINTW1MN _0x20235,10
001025 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0986 
                 ; 0001 0987 	LEDL = 1; LEDR = 1;
001027 9aac      	SBI  0x15,4
001028 9aad      	SBI  0x15,5
                 ; 0001 0988 
                 ; 0001 0989 	while (keyKT != 0)
                 _0x2023A:
001029 9b98      	SBIS 0x13,0
00102a c039      	RJMP _0x2023C
                 ; 0001 098A 	{
                 ; 0001 098B 		LEDL = 1; LEDR = 1;
00102b 940e 1ebf 	CALL SUBOPT_0x82
                 ; 0001 098C 		delay_ms(100);
                 ; 0001 098D 		LEDL = 0; LEDR = 0;
                 ; 0001 098E 		delay_ms(100);
                 ; 0001 098F 
                 ; 0001 0990 		if (rx_counter)
00102d 91e0 0538 	LDS  R30,_rx_counter
00102f 30e0      	CPI  R30,0
001030 f191      	BREQ _0x20245
                 ; 0001 0991 		{
                 ; 0001 0992 			//LcdClear();
                 ; 0001 0993 			hc(2, 42);
001031 940e 1dec 	CALL SUBOPT_0x5D
001033 940e 1e10 	CALL SUBOPT_0x64
                 ; 0001 0994 			kytu = getchar();
001035 940e 06b3 	CALL _getchar
001037 2f1e      	MOV  R17,R30
                 ; 0001 0995 			LcdCharacter(kytu);
001038 931a      	ST   -Y,R17
001039 940e 05c8 	CALL _LcdCharacter
                 ; 0001 0996 			//putchar(getchar());
                 ; 0001 0997 			if (kytu == 'S'){ vMLtoi(0); vMRtoi(0); }
00103b 3513      	CPI  R17,83
00103c f419      	BRNE _0x20246
00103d e0e0      	LDI  R30,LOW(0)
00103e 940e 1ecf 	CALL SUBOPT_0x83
                 ; 0001 0998 			if (kytu == 'F'){ vMLtoi(100); vMRtoi(100); }
                 _0x20246:
001040 3416      	CPI  R17,70
001041 f419      	BRNE _0x20247
001042 e6e4      	LDI  R30,LOW(100)
001043 940e 1ed6 	CALL SUBOPT_0x84
                 ; 0001 0999 			if (kytu == 'B'){ vMLlui(100); vMRlui(100); }
                 _0x20247:
001045 3412      	CPI  R17,66
001046 f441      	BRNE _0x20248
001047 e6e4      	LDI  R30,LOW(100)
001048 93ea      	ST   -Y,R30
001049 940e 0748 	CALL _vMLlui
00104b e6e4      	LDI  R30,LOW(100)
00104c 93ea      	ST   -Y,R30
00104d 940e 075e 	CALL _vMRlui
                 ; 0001 099A 			if (kytu == 'R'){ vMLtoi(100); vMRtoi(0); }
                 _0x20248:
00104f 3512      	CPI  R17,82
001050 f419      	BRNE _0x20249
001051 e6e4      	LDI  R30,LOW(100)
001052 940e 1ecf 	CALL SUBOPT_0x83
                 ; 0001 099B 			if (kytu == 'L'){ vMLtoi(0); vMRtoi(100); }
                 _0x20249:
001054 341c      	CPI  R17,76
001055 f419      	BRNE _0x2024A
001056 e0e0      	LDI  R30,LOW(0)
001057 940e 1ed6 	CALL SUBOPT_0x84
                 ; 0001 099C 
                 ; 0001 099D 			demled++;
                 _0x2024A:
                +
001059 5f2f     +SUBI R18 , LOW ( - 1 )
00105a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0001 099E 			if (demled > 1000){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
                +
00105b 3e29     +CPI R18 , LOW ( 1001 )
00105c e0e3     +LDI R30 , HIGH ( 1001 )
00105d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1001
00105e f020      	BRLO _0x2024B
                +
00105f e020     +LDI R18 , LOW ( 0 )
001060 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
001061 940e 1e1f 	CALL SUBOPT_0x66
                 ; 0001 099F 		}
                 _0x2024B:
                 ; 0001 09A0 	}
                 _0x20245:
001063 cfc5      	RJMP _0x2023A
                 _0x2023C:
                 ; 0001 09A1 }
                 _0x20C000D:
001064 940e 23c7 	CALL __LOADLOCR4
001066 9624      	ADIW R28,4
001067 9508      	RET
                 
                 	.DSEG
                 _0x20235:
00029d           	.BYTE 0x10
                 ;//========================================================
                 ;
                 ;//Chuong trinh test robot
                 ;void testmotor()
                 ; 0001 09A6 {
                 
                 	.CSEG
                 _testmotor:
                 ; 0001 09A7 	LcdClear();
001068 940e 1eb8 	CALL SUBOPT_0x80
                 ; 0001 09A8 	hc(0, 10);
00106a 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 09A9 	ws("TEST MOTOR");
                +
00106c eaed     +LDI R30 , LOW ( _0x2024C + ( 0 ) )
00106d e0f2     +LDI R31 , HIGH ( _0x2024C + ( 0 ) )
                 	__POINTW1MN _0x2024C,0
00106e 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09AA 
                 ; 0001 09AB 	vMRtoi(20);
001070 940e 1e50 	CALL SUBOPT_0x6F
                 ; 0001 09AC 	vMLtoi(20);
001072 e1e4      	LDI  R30,LOW(20)
001073 93ea      	ST   -Y,R30
001074 940e 0742 	CALL _vMLtoi
                 ; 0001 09AD 	while (keyKT != 0)
                 _0x2024D:
001076 9b98      	SBIS 0x13,0
001077 c025      	RJMP _0x2024F
                 ; 0001 09AE 	{
                 ; 0001 09AF 		hc(2, 0);
001078 940e 1edd 	CALL SUBOPT_0x85
                 ; 0001 09B0 		ws("MotorL");
                +
00107a ebe8     +LDI R30 , LOW ( _0x2024C + ( 11 ) )
00107b e0f2     +LDI R31 , HIGH ( _0x2024C + ( 11 ) )
                 	__POINTW1MN _0x2024C,11
00107c 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09B1 		hc(2, 45);
00107e 940e 1dec 	CALL SUBOPT_0x5D
001080 e2ed      	LDI  R30,LOW(45)
001081 e0f0      	LDI  R31,HIGH(45)
001082 940e 1ebb 	CALL SUBOPT_0x81
                 ; 0001 09B2 		wn16(QEL);
001084 940e 1d9f 	CALL SUBOPT_0x51
001086 940e 1c31 	CALL SUBOPT_0x27
                 ; 0001 09B3 		hc(3, 0);
001088 e0e3      	LDI  R30,LOW(3)
001089 e0f0      	LDI  R31,HIGH(3)
00108a 940e 1bf7 	CALL SUBOPT_0x21
                 ; 0001 09B4 		ws("MotorR");
                +
00108c ebef     +LDI R30 , LOW ( _0x2024C + ( 18 ) )
00108d e0f2     +LDI R31 , HIGH ( _0x2024C + ( 18 ) )
                 	__POINTW1MN _0x2024C,18
00108e 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09B5 		hc(3, 45);
001090 940e 1de1 	CALL SUBOPT_0x5B
001092 e2ed      	LDI  R30,LOW(45)
001093 e0f0      	LDI  R31,HIGH(45)
001094 940e 1ebb 	CALL SUBOPT_0x81
                 ; 0001 09B6 		wn16(QER);
001096 940e 1d9a 	CALL SUBOPT_0x50
001098 940e 1c31 	CALL SUBOPT_0x27
                 ; 0001 09B7 		delay_ms(10);
00109a 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 09B8 	}
00109c cfd9      	RJMP _0x2024D
                 _0x2024F:
                 ; 0001 09B9 
                 ; 0001 09BA 	vMRstop();
00109d 940e 0769 	CALL _vMRstop
                 ; 0001 09BB 	vMLstop();
00109f 940e 074e 	CALL _vMLstop
                 ; 0001 09BC }
0010a1 9508      	RET
                 
                 	.DSEG
                 _0x2024C:
0002ad           	.BYTE 0x19
                 ;//========================================================
                 ;// UART TEST
                 ;void testuart()
                 ; 0001 09C0 {
                 
                 	.CSEG
                 _testuart:
                 ; 0001 09C1 	if (rx_counter)
0010a2 91e0 0538 	LDS  R30,_rx_counter
0010a4 30e0      	CPI  R30,0
0010a5 f069      	BREQ _0x20250
                 ; 0001 09C2 	{
                 ; 0001 09C3 		LcdClear();
0010a6 940e 1eb8 	CALL SUBOPT_0x80
                 ; 0001 09C4 		hc(0, 10);
0010a8 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 09C5 		ws("TEST UART");
                +
0010aa ece6     +LDI R30 , LOW ( _0x20251 + ( 0 ) )
0010ab e0f2     +LDI R31 , HIGH ( _0x20251 + ( 0 ) )
                 	__POINTW1MN _0x20251,0
0010ac 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09C6 		putchar(getchar());
0010ae 940e 06b3 	CALL _getchar
0010b0 93ea      	ST   -Y,R30
0010b1 940e 06f3 	CALL _putchar
                 ; 0001 09C7 	}
                 ; 0001 09C8 
                 ; 0001 09C9 }
                 _0x20250:
0010b3 9508      	RET
                 
                 	.DSEG
                 _0x20251:
0002c6           	.BYTE 0xA
                 ;//========================================================
                 ;// UART TEST
                 ;void testrf()
                 ; 0001 09CD {
                 
                 	.CSEG
                 _testrf:
                 ; 0001 09CE 
                 ; 0001 09CF 
                 ; 0001 09D0 }
0010b4 9508      	RET
                 ;
                 ;//========================================================
                 ;void testir()
                 ; 0001 09D4 {
                 _testir:
                 ; 0001 09D5 	unsigned int AD[8];
                 ; 0001 09D6 
                 ; 0001 09D7 	DDRA = 0x00;
0010b5 9760      	SBIW R28,16
                 ;	AD -> Y+0
0010b6 e0e0      	LDI  R30,LOW(0)
0010b7 bbea      	OUT  0x1A,R30
                 ; 0001 09D8 	PORTA = 0x00;
0010b8 bbeb      	OUT  0x1B,R30
                 ; 0001 09D9 
                 ; 0001 09DA 	clear();
0010b9 940e 05ff 	CALL _clear
                 ; 0001 09DB 	hc(0, 10);
0010bb 940e 1df6 	CALL SUBOPT_0x5F
0010bd 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 09DC 	ws("TEST IR");
                +
0010bf ede0     +LDI R30 , LOW ( _0x20252 + ( 0 ) )
0010c0 e0f2     +LDI R31 , HIGH ( _0x20252 + ( 0 ) )
                 	__POINTW1MN _0x20252,0
0010c1 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09DD 
                 ; 0001 09DE 	while (keyKT != 0)
                 _0x20253:
0010c3 9b98      	SBIS 0x13,0
0010c4 c091      	RJMP _0x20255
                 ; 0001 09DF 	{
                 ; 0001 09E0 
                 ; 0001 09E1 		AD[0] = read_adc(0);
0010c5 e0e0      	LDI  R30,LOW(0)
0010c6 93ea      	ST   -Y,R30
0010c7 940e 067c 	CALL _read_adc
0010c9 83e8      	ST   Y,R30
0010ca 83f9      	STD  Y+1,R31
                 ; 0001 09E2 		AD[1] = read_adc(1);
0010cb e0e1      	LDI  R30,LOW(1)
0010cc 93ea      	ST   -Y,R30
0010cd 940e 067c 	CALL _read_adc
0010cf 83ea      	STD  Y+2,R30
0010d0 83fb      	STD  Y+2+1,R31
                 ; 0001 09E3 		AD[2] = read_adc(2);
0010d1 e0e2      	LDI  R30,LOW(2)
0010d2 93ea      	ST   -Y,R30
0010d3 940e 067c 	CALL _read_adc
0010d5 83ec      	STD  Y+4,R30
0010d6 83fd      	STD  Y+4+1,R31
                 ; 0001 09E4 		AD[3] = read_adc(3);
0010d7 e0e3      	LDI  R30,LOW(3)
0010d8 93ea      	ST   -Y,R30
0010d9 940e 067c 	CALL _read_adc
0010db 83ee      	STD  Y+6,R30
0010dc 83ff      	STD  Y+6+1,R31
                 ; 0001 09E5 		AD[4] = read_adc(4);
0010dd e0e4      	LDI  R30,LOW(4)
0010de 93ea      	ST   -Y,R30
0010df 940e 067c 	CALL _read_adc
0010e1 87e8      	STD  Y+8,R30
0010e2 87f9      	STD  Y+8+1,R31
                 ; 0001 09E6 		AD[5] = read_adc(5);
0010e3 e0e5      	LDI  R30,LOW(5)
0010e4 93ea      	ST   -Y,R30
0010e5 940e 067c 	CALL _read_adc
0010e7 87ea      	STD  Y+10,R30
0010e8 87fb      	STD  Y+10+1,R31
                 ; 0001 09E7 		AD[6] = read_adc(6);
0010e9 e0e6      	LDI  R30,LOW(6)
0010ea 93ea      	ST   -Y,R30
0010eb 940e 067c 	CALL _read_adc
0010ed 87ec      	STD  Y+12,R30
0010ee 87fd      	STD  Y+12+1,R31
                 ; 0001 09E8 		AD[7] = read_adc(7);
0010ef e0e7      	LDI  R30,LOW(7)
0010f0 93ea      	ST   -Y,R30
0010f1 940e 067c 	CALL _read_adc
0010f3 87ee      	STD  Y+14,R30
0010f4 87ff      	STD  Y+14+1,R31
                 ; 0001 09E9 
                 ; 0001 09EA 		hc(1, 0); ws("0."); wn164(AD[0]);
0010f5 940e 1e0d 	CALL SUBOPT_0x63
                +
0010f7 ede8     +LDI R30 , LOW ( _0x20252 + ( 8 ) )
0010f8 e0f2     +LDI R31 , HIGH ( _0x20252 + ( 8 ) )
                 	__POINTW1MN _0x20252,8
0010f9 940e 1c35 	CALL SUBOPT_0x28
0010fb 81e8      	LD   R30,Y
0010fc 81f9      	LDD  R31,Y+1
0010fd 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09EB 		hc(1, 43); ws("1."); wn164(AD[1]);
0010ff 940e 1df1 	CALL SUBOPT_0x5E
001101 940e 1eea 	CALL SUBOPT_0x88
                +
001103 edeb     +LDI R30 , LOW ( _0x20252 + ( 11 ) )
001104 e0f2     +LDI R31 , HIGH ( _0x20252 + ( 11 ) )
                 	__POINTW1MN _0x20252,11
001105 940e 1c35 	CALL SUBOPT_0x28
001107 81ea      	LDD  R30,Y+2
001108 81fb      	LDD  R31,Y+2+1
001109 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09EC 		hc(2, 0); ws("2."); wn164(AD[2]);
00110b 940e 1edd 	CALL SUBOPT_0x85
                +
00110d edee     +LDI R30 , LOW ( _0x20252 + ( 14 ) )
00110e e0f2     +LDI R31 , HIGH ( _0x20252 + ( 14 ) )
                 	__POINTW1MN _0x20252,14
00110f 940e 1c35 	CALL SUBOPT_0x28
001111 81ec      	LDD  R30,Y+4
001112 81fd      	LDD  R31,Y+4+1
001113 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09ED 		hc(2, 43); ws("3."); wn164(AD[3]);
001115 940e 1dec 	CALL SUBOPT_0x5D
001117 940e 1eea 	CALL SUBOPT_0x88
                +
001119 eee1     +LDI R30 , LOW ( _0x20252 + ( 17 ) )
00111a e0f2     +LDI R31 , HIGH ( _0x20252 + ( 17 ) )
                 	__POINTW1MN _0x20252,17
00111b 940e 1c35 	CALL SUBOPT_0x28
00111d 81ee      	LDD  R30,Y+6
00111e 81ff      	LDD  R31,Y+6+1
00111f 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09EE 		hc(3, 0); ws("4."); wn164(AD[4]);
001121 e0e3      	LDI  R30,LOW(3)
001122 e0f0      	LDI  R31,HIGH(3)
001123 940e 1bf7 	CALL SUBOPT_0x21
                +
001125 eee4     +LDI R30 , LOW ( _0x20252 + ( 20 ) )
001126 e0f2     +LDI R31 , HIGH ( _0x20252 + ( 20 ) )
                 	__POINTW1MN _0x20252,20
001127 940e 1c35 	CALL SUBOPT_0x28
001129 85e8      	LDD  R30,Y+8
00112a 85f9      	LDD  R31,Y+8+1
00112b 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09EF 		hc(3, 43); ws("5."); wn164(AD[5]);
00112d 940e 1de1 	CALL SUBOPT_0x5B
00112f 940e 1eea 	CALL SUBOPT_0x88
                +
001131 eee7     +LDI R30 , LOW ( _0x20252 + ( 23 ) )
001132 e0f2     +LDI R31 , HIGH ( _0x20252 + ( 23 ) )
                 	__POINTW1MN _0x20252,23
001133 940e 1c35 	CALL SUBOPT_0x28
001135 85ea      	LDD  R30,Y+10
001136 85fb      	LDD  R31,Y+10+1
001137 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09F0 		hc(4, 0); ws("6."); wn164(AD[6]);
001139 e0e4      	LDI  R30,LOW(4)
00113a e0f0      	LDI  R31,HIGH(4)
00113b 940e 1bf7 	CALL SUBOPT_0x21
                +
00113d eeea     +LDI R30 , LOW ( _0x20252 + ( 26 ) )
00113e e0f2     +LDI R31 , HIGH ( _0x20252 + ( 26 ) )
                 	__POINTW1MN _0x20252,26
00113f 940e 1c35 	CALL SUBOPT_0x28
001141 85ec      	LDD  R30,Y+12
001142 85fd      	LDD  R31,Y+12+1
001143 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09F1 		hc(4, 43); ws("7."); wn164(AD[7]);
001145 e0e4      	LDI  R30,LOW(4)
001146 e0f0      	LDI  R31,HIGH(4)
001147 93fa      	ST   -Y,R31
001148 93ea      	ST   -Y,R30
001149 940e 1eea 	CALL SUBOPT_0x88
                +
00114b eeed     +LDI R30 , LOW ( _0x20252 + ( 29 ) )
00114c e0f2     +LDI R31 , HIGH ( _0x20252 + ( 29 ) )
                 	__POINTW1MN _0x20252,29
00114d 940e 1c35 	CALL SUBOPT_0x28
00114f 85ee      	LDD  R30,Y+14
001150 85ff      	LDD  R31,Y+14+1
001151 940e 1ee6 	CALL SUBOPT_0x87
                 ; 0001 09F2 
                 ; 0001 09F3 		delay_ms(1000);
001153 940e 1c26 	CALL SUBOPT_0x25
                 ; 0001 09F4 	}
001155 cf6d      	RJMP _0x20253
                 _0x20255:
                 ; 0001 09F5 
                 ; 0001 09F6 }
001156 940c 15dd 	JMP  _0x20C000C
                 
                 	.DSEG
                 _0x20252:
0002d0           	.BYTE 0x20
                 ;
                 ;//========================================================
                 ;void outlcd1()
                 ; 0001 09FA {
                 
                 	.CSEG
                 _outlcd1:
                 ; 0001 09FB 	LcdClear();
001158 940e 1eb8 	CALL SUBOPT_0x80
                 ; 0001 09FC 	hc(0, 5);
00115a e0e5      	LDI  R30,LOW(5)
00115b e0f0      	LDI  R31,HIGH(5)
00115c 940e 1ebb 	CALL SUBOPT_0x81
                 ; 0001 09FD 	ws("<SELF TEST>");
                +
00115e efe0     +LDI R30 , LOW ( _0x20256 + ( 0 ) )
00115f e0f2     +LDI R31 , HIGH ( _0x20256 + ( 0 ) )
                 	__POINTW1MN _0x20256,0
001160 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 09FE 	hc(1, 0);
001162 940e 1e0d 	CALL SUBOPT_0x63
                 ; 0001 09FF 	ws("************");
                +
001164 efec     +LDI R30 , LOW ( _0x20256 + ( 12 ) )
001165 e0f2     +LDI R31 , HIGH ( _0x20256 + ( 12 ) )
                 	__POINTW1MN _0x20256,12
001166 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0A00 }
001168 9508      	RET
                 
                 	.DSEG
                 _0x20256:
0002f0           	.BYTE 0x19
                 ;//========================================================
                 ;void chopledtheoid()
                 ; 0001 0A03 {
                 
                 	.CSEG
                 _chopledtheoid:
                 ; 0001 0A04 	unsigned char i;
                 ; 0001 0A05 	DDRA = 0xFF;
001169 931a      	ST   -Y,R17
                 ;	i -> R17
00116a efef      	LDI  R30,LOW(255)
00116b bbea      	OUT  0x1A,R30
                 ; 0001 0A06 
                 ; 0001 0A07 	switch (id)
00116c 940e 1eed 	CALL SUBOPT_0x89
                 ; 0001 0A08 	{
                 ; 0001 0A09 	case 1:
00116e f439      	BRNE _0x2025A
                 ; 0001 0A0A 		LEDR = 1;
00116f 9aad      	SBI  0x15,5
                 ; 0001 0A0B 		LEDL = 1; PORTA.4 = 1; delay_ms(10);
001170 9aac      	SBI  0x15,4
001171 9adc      	SBI  0x1B,4
001172 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A0C 		LEDL = 0; PORTA.4 = 0; delay_ms(30);
001174 98ac      	CBI  0x15,4
001175 c05d      	RJMP _0x2032D
                 ; 0001 0A0D 		break;
                 ; 0001 0A0E 	case 2:
                 _0x2025A:
001176 30e2      	CPI  R30,LOW(0x2)
001177 e0a0      	LDI  R26,HIGH(0x2)
001178 07fa      	CPC  R31,R26
001179 f441      	BRNE _0x20265
                 ; 0001 0A0F 		LEDR = 1;
00117a 9aad      	SBI  0x15,5
                 ; 0001 0A10 		LEDL = 1; PORTA.6 = 1; delay_ms(10);
00117b 9aac      	SBI  0x15,4
00117c 9ade      	SBI  0x1B,6
00117d 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A11 		LEDL = 0; PORTA.6 = 0; delay_ms(30);
00117f 98ac      	CBI  0x15,4
001180 98de      	CBI  0x1B,6
001181 c052      	RJMP _0x2032E
                 ; 0001 0A12 		break;
                 ; 0001 0A13 	case 3:
                 _0x20265:
001182 30e3      	CPI  R30,LOW(0x3)
001183 e0a0      	LDI  R26,HIGH(0x3)
001184 07fa      	CPC  R31,R26
001185 f441      	BRNE _0x20270
                 ; 0001 0A14 		LEDR = 1;
001186 9aad      	SBI  0x15,5
                 ; 0001 0A15 		LEDL = 1; PORTA.7 = 1; delay_ms(10);
001187 9aac      	SBI  0x15,4
001188 9adf      	SBI  0x1B,7
001189 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A16 		LEDL = 0; PORTA.7 = 0; delay_ms(30);
00118b 98ac      	CBI  0x15,4
00118c 98df      	CBI  0x1B,7
00118d c046      	RJMP _0x2032E
                 ; 0001 0A17 		break;
                 ; 0001 0A18 	case 4:
                 _0x20270:
00118e 30e4      	CPI  R30,LOW(0x4)
00118f e0a0      	LDI  R26,HIGH(0x4)
001190 07fa      	CPC  R31,R26
001191 f441      	BRNE _0x2027B
                 ; 0001 0A19 		LEDR = 1;
001192 9aad      	SBI  0x15,5
                 ; 0001 0A1A 		LEDL = 1; PORTA.5 = 1; delay_ms(10);
001193 9aac      	SBI  0x15,4
001194 9add      	SBI  0x1B,5
001195 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A1B 		LEDL = 0; PORTA.5 = 0; delay_ms(30);
001197 98ac      	CBI  0x15,4
001198 98dd      	CBI  0x1B,5
001199 c03a      	RJMP _0x2032E
                 ; 0001 0A1C 		break;
                 ; 0001 0A1D 	case 5:
                 _0x2027B:
00119a 30e5      	CPI  R30,LOW(0x5)
00119b e0a0      	LDI  R26,HIGH(0x5)
00119c 07fa      	CPC  R31,R26
00119d f431      	BRNE _0x20286
                 ; 0001 0A1E 		LEDL = 1;
00119e 9aac      	SBI  0x15,4
                 ; 0001 0A1F 		LEDR = 1; PORTA.4 = 1; delay_ms(10);
00119f 9aad      	SBI  0x15,5
0011a0 9adc      	SBI  0x1B,4
0011a1 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A20 		LEDR = 0; PORTA.4 = 0; delay_ms(30);
0011a3 c02e      	RJMP _0x2032F
                 ; 0001 0A21 		break;
                 ; 0001 0A22 	case 6:
                 _0x20286:
0011a4 30e6      	CPI  R30,LOW(0x6)
0011a5 e0a0      	LDI  R26,HIGH(0x6)
0011a6 07fa      	CPC  R31,R26
0011a7 f441      	BRNE _0x20291
                 ; 0001 0A23 		LEDL = 1;
0011a8 9aac      	SBI  0x15,4
                 ; 0001 0A24 		LEDR = 1; PORTA.6 = 1; delay_ms(10);
0011a9 9aad      	SBI  0x15,5
0011aa 9ade      	SBI  0x1B,6
0011ab 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A25 		LEDR = 0; PORTA.6 = 0; delay_ms(30);
0011ad 98ad      	CBI  0x15,5
0011ae 98de      	CBI  0x1B,6
0011af c024      	RJMP _0x2032E
                 ; 0001 0A26 		break;
                 ; 0001 0A27 	case 7:
                 _0x20291:
0011b0 30e7      	CPI  R30,LOW(0x7)
0011b1 e0a0      	LDI  R26,HIGH(0x7)
0011b2 07fa      	CPC  R31,R26
0011b3 f441      	BRNE _0x2029C
                 ; 0001 0A28 		LEDL = 1;
0011b4 9aac      	SBI  0x15,4
                 ; 0001 0A29 		LEDR = 1; PORTA.7 = 1; delay_ms(10);
0011b5 9aad      	SBI  0x15,5
0011b6 9adf      	SBI  0x1B,7
0011b7 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A2A 		LEDR = 0; PORTA.7 = 0; delay_ms(30);
0011b9 98ad      	CBI  0x15,5
0011ba 98df      	CBI  0x1B,7
0011bb c018      	RJMP _0x2032E
                 ; 0001 0A2B 		break;
                 ; 0001 0A2C 	case 8:
                 _0x2029C:
0011bc 30e8      	CPI  R30,LOW(0x8)
0011bd e0a0      	LDI  R26,HIGH(0x8)
0011be 07fa      	CPC  R31,R26
0011bf f441      	BRNE _0x202A7
                 ; 0001 0A2D 		LEDL = 1;
0011c0 9aac      	SBI  0x15,4
                 ; 0001 0A2E 		LEDR = 1; PORTA.5 = 1; delay_ms(10);
0011c1 9aad      	SBI  0x15,5
0011c2 9add      	SBI  0x1B,5
0011c3 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A2F 		LEDR = 0; PORTA.5 = 0; delay_ms(30);
0011c5 98ad      	CBI  0x15,5
0011c6 98dd      	CBI  0x1B,5
0011c7 c00c      	RJMP _0x2032E
                 ; 0001 0A30 		break;
                 ; 0001 0A31 	case 9:
                 _0x202A7:
0011c8 30e9      	CPI  R30,LOW(0x9)
0011c9 e0a0      	LDI  R26,HIGH(0x9)
0011ca 07fa      	CPC  R31,R26
0011cb f461      	BRNE _0x20259
                 ; 0001 0A32 		LEDL = 1; LEDR = 1; PORTA.4 = 1; delay_ms(10);
0011cc 9aac      	SBI  0x15,4
0011cd 9aad      	SBI  0x15,5
0011ce 9adc      	SBI  0x1B,4
0011cf 940e 1ee0 	CALL SUBOPT_0x86
                 ; 0001 0A33 		LEDL = 0; LEDR = 0; PORTA.4 = 0; delay_ms(30);
0011d1 98ac      	CBI  0x15,4
                 _0x2032F:
0011d2 98ad      	CBI  0x15,5
                 _0x2032D:
0011d3 98dc      	CBI  0x1B,4
                 _0x2032E:
0011d4 e1ee      	LDI  R30,LOW(30)
0011d5 e0f0      	LDI  R31,HIGH(30)
0011d6 940e 1ef4 	CALL SUBOPT_0x8A
                 ; 0001 0A34 		break;
                 ; 0001 0A35 	};
                 _0x20259:
                 ; 0001 0A36 	//LEDL=1;delay_ms(100);
                 ; 0001 0A37 	//LEDL=0;delay_ms(100);
                 ; 0001 0A38 	//for(i=0;i<id;i++)
                 ; 0001 0A39 	//{
                 ; 0001 0A3A 	//    LEDR=1;delay_ms(150);
                 ; 0001 0A3B 	//    LEDR=0;delay_ms(150);
                 ; 0001 0A3C 	//}
                 ; 0001 0A3D }
0011d8 9119      	LD   R17,Y+
0011d9 9508      	RET
                 ;//========================================================
                 ;//========================================================
                 ;void testRCservo()
                 ; 0001 0A41 {
                 _testRCservo:
                 ; 0001 0A42 	clear();
0011da 940e 05ff 	CALL _clear
                 ; 0001 0A43 	hc(0, 10);
0011dc 940e 1df6 	CALL SUBOPT_0x5F
0011de 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 0A44 	ws("RC SERVO");
                +
0011e0 e0e9     +LDI R30 , LOW ( _0x202BF + ( 0 ) )
0011e1 e0f3     +LDI R31 , HIGH ( _0x202BF + ( 0 ) )
                 	__POINTW1MN _0x202BF,0
0011e2 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0A45 	// Timer/Counter 0 initialization
                 ; 0001 0A46 	// Clock source: System Clock
                 ; 0001 0A47 	// Clock value: 7.813 kHz
                 ; 0001 0A48 	// Mode: Phase correct PWM top=0xFF
                 ; 0001 0A49 	// OC0 output: Non-Inverted PWM
                 ; 0001 0A4A 	TCCR0 = 0x65;     //15.32Hz
0011e4 e6e5      	LDI  R30,LOW(101)
0011e5 940e 1ef8 	CALL SUBOPT_0x8B
                 ; 0001 0A4B 	TCNT0 = 0x00;
                 ; 0001 0A4C 	OCR0 = 0x00;
                 ; 0001 0A4D 
                 ; 0001 0A4E 	// Timer/Counter 2 initialization
                 ; 0001 0A4F 	// Clock source: System Clock
                 ; 0001 0A50 	// Clock value: 7.813 kHz
                 ; 0001 0A51 	// Mode: Phase correct PWM top=0xFF
                 ; 0001 0A52 	// OC2 output: Non-Inverted PWM
                 ; 0001 0A53 	ASSR = 0x00;      //15.32Hz
                 ; 0001 0A54 	TCCR2 = 0x67;
0011e7 e6e7      	LDI  R30,LOW(103)
0011e8 bde5      	OUT  0x25,R30
                 ; 0001 0A55 	TCNT2 = 0x00;
0011e9 e0e0      	LDI  R30,LOW(0)
0011ea bde4      	OUT  0x24,R30
                 ; 0001 0A56 	OCR2 = 0x00;
0011eb bde3      	OUT  0x23,R30
                 ; 0001 0A57 
                 ; 0001 0A58 	while (keyKT != 0)
                 _0x202C0:
0011ec 9b98      	SBIS 0x13,0
0011ed c013      	RJMP _0x202C2
                 ; 0001 0A59 	{
                 ; 0001 0A5A 		LEDL = 1; LEDR = 1;//PORTB.3=1;
0011ee 9aac      	SBI  0x15,4
0011ef 9aad      	SBI  0x15,5
                 ; 0001 0A5B 		OCR0 = 2; OCR2 = 2;
0011f0 e0e2      	LDI  R30,LOW(2)
0011f1 bfec      	OUT  0x3C,R30
0011f2 bde3      	OUT  0x23,R30
                 ; 0001 0A5C 		delay_ms(2000);
0011f3 ede0      	LDI  R30,LOW(2000)
0011f4 e0f7      	LDI  R31,HIGH(2000)
0011f5 940e 1ef4 	CALL SUBOPT_0x8A
                 ; 0001 0A5D 
                 ; 0001 0A5E 		LEDL = 0; LEDR = 0;//PORTB.3=1;
0011f7 98ac      	CBI  0x15,4
0011f8 98ad      	CBI  0x15,5
                 ; 0001 0A5F 		OCR0 = 10; OCR2 = 10;
0011f9 e0ea      	LDI  R30,LOW(10)
0011fa bfec      	OUT  0x3C,R30
0011fb bde3      	OUT  0x23,R30
                 ; 0001 0A60 		delay_ms(2000);
0011fc ede0      	LDI  R30,LOW(2000)
0011fd e0f7      	LDI  R31,HIGH(2000)
0011fe 940e 1ef4 	CALL SUBOPT_0x8A
                 ; 0001 0A61 	}
001200 cfeb      	RJMP _0x202C0
                 _0x202C2:
                 ; 0001 0A62 	// Timer/Counter 0 initialization
                 ; 0001 0A63 	// Clock source: System Clock
                 ; 0001 0A64 	// Clock value: Timer 0 Stopped
                 ; 0001 0A65 	// Mode: Normal top=0xFF
                 ; 0001 0A66 	// OC0 output: Disconnected
                 ; 0001 0A67 	TCCR0 = 0x00;
001201 e0e0      	LDI  R30,LOW(0)
001202 940e 1ef8 	CALL SUBOPT_0x8B
                 ; 0001 0A68 	TCNT0 = 0x00;
                 ; 0001 0A69 	OCR0 = 0x00;
                 ; 0001 0A6A 
                 ; 0001 0A6B 	// Timer/Counter 2 initialization
                 ; 0001 0A6C 	// Clock source: System Clock
                 ; 0001 0A6D 	// Clock value: Timer2 Stopped
                 ; 0001 0A6E 	// Mode: Normal top=0xFF
                 ; 0001 0A6F 	// OC2 output: Disconnected
                 ; 0001 0A70 	ASSR = 0x00;
                 ; 0001 0A71 	TCCR2 = 0x00;
001204 e0e0      	LDI  R30,LOW(0)
001205 bde5      	OUT  0x25,R30
                 ; 0001 0A72 	TCNT2 = 0x00;
001206 bde4      	OUT  0x24,R30
                 ; 0001 0A73 	OCR2 = 0x00;
001207 bde3      	OUT  0x23,R30
                 ; 0001 0A74 
                 ; 0001 0A75 }
001208 9508      	RET
                 
                 	.DSEG
                 _0x202BF:
000309           	.BYTE 0x9
                 ;
                 ;void selftest()
                 ; 0001 0A78 {
                 
                 	.CSEG
                 _selftest:
                 ; 0001 0A79 	outlcd1();
001209 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A7A 	hc(2, 0);
                 ; 0001 0A7B 	ws("1.ROBOT WALL"); delay_ms(200);
                +
00120b e1e2     +LDI R30 , LOW ( _0x202CB + ( 0 ) )
00120c e0f3     +LDI R31 , HIGH ( _0x202CB + ( 0 ) )
                 	__POINTW1MN _0x202CB,0
00120d 940e 1c35 	CALL SUBOPT_0x28
00120f 940e 1dfb 	CALL SUBOPT_0x60
                 ; 0001 0A7C 	while (flagselftest == 1)
                 _0x202CC:
001211 91a0 04d5 	LDS  R26,_flagselftest
001213 91b0 04d6 	LDS  R27,_flagselftest+1
001215 9711      	SBIW R26,1
001216 f011      	BREQ PC+3
001217 940c 12c3 	JMP _0x202CE
                 ; 0001 0A7D 	{
                 ; 0001 0A7E 		//------------------------------------------------------------------------
                 ; 0001 0A7F 		//test menu kiem tra  robot
                 ; 0001 0A80 		chopledtheoid();
001219 df4f      	RCALL _chopledtheoid
                 ; 0001 0A81 		if (keyKT == 0)
00121a 9998      	SBIC 0x13,0
00121b c06a      	RJMP _0x202CF
                 ; 0001 0A82 		{
                 ; 0001 0A83 			id++;
00121c 91e0 04dd 	LDS  R30,_id
00121e 5fef      	SUBI R30,-LOW(1)
00121f 93e0 04dd 	STS  _id,R30
                 ; 0001 0A84 			if (id > 11){ id = 1; }
001221 91a0 04dd 	LDS  R26,_id
001223 30ac      	CPI  R26,LOW(0xC)
001224 f018      	BRLO _0x202D0
001225 e0e1      	LDI  R30,LOW(1)
001226 93e0 04dd 	STS  _id,R30
                 ; 0001 0A85 			switch (id)
                 _0x202D0:
001228 940e 1eed 	CALL SUBOPT_0x89
                 ; 0001 0A86 			{
                 ; 0001 0A87 
                 ; 0001 0A88 			case 1:
00122a f429      	BRNE _0x202D4
                 ; 0001 0A89 				outlcd1();
00122b 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A8A 				hc(2, 0);
                 ; 0001 0A8B 				ws("1.ROBOT WALL"); delay_ms(200);
                +
00122d e1ef     +LDI R30 , LOW ( _0x202CB + ( 13 ) )
00122e e0f3     +LDI R31 , HIGH ( _0x202CB + ( 13 ) )
                 	__POINTW1MN _0x202CB,13
00122f c050      	RJMP _0x20330
                 ; 0001 0A8C 				break;
                 ; 0001 0A8D 			case 2:
                 _0x202D4:
001230 30e2      	CPI  R30,LOW(0x2)
001231 e0a0      	LDI  R26,HIGH(0x2)
001232 07fa      	CPC  R31,R26
001233 f429      	BRNE _0x202D5
                 ; 0001 0A8E 				outlcd1();
001234 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A8F 				hc(2, 0);
                 ; 0001 0A90 				ws("2.BLUETOOTH "); delay_ms(200);
                +
001236 e2ec     +LDI R30 , LOW ( _0x202CB + ( 26 ) )
001237 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 26 ) )
                 	__POINTW1MN _0x202CB,26
001238 c047      	RJMP _0x20330
                 ; 0001 0A91 				break;
                 ; 0001 0A92 			case 3:
                 _0x202D5:
001239 30e3      	CPI  R30,LOW(0x3)
00123a e0a0      	LDI  R26,HIGH(0x3)
00123b 07fa      	CPC  R31,R26
00123c f429      	BRNE _0x202D6
                 ; 0001 0A93 				outlcd1();
00123d 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A94 				hc(2, 0);
                 ; 0001 0A95 				ws("3.WHITE LINE"); delay_ms(200);
                +
00123f e3e9     +LDI R30 , LOW ( _0x202CB + ( 39 ) )
001240 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 39 ) )
                 	__POINTW1MN _0x202CB,39
001241 c03e      	RJMP _0x20330
                 ; 0001 0A96 				break;
                 ; 0001 0A97 			case 4:
                 _0x202D6:
001242 30e4      	CPI  R30,LOW(0x4)
001243 e0a0      	LDI  R26,HIGH(0x4)
001244 07fa      	CPC  R31,R26
001245 f429      	BRNE _0x202D7
                 ; 0001 0A98 				outlcd1();
001246 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A99 				hc(2, 0);
                 ; 0001 0A9A 				ws("4.BLACK LINE"); delay_ms(200);
                +
001248 e4e6     +LDI R30 , LOW ( _0x202CB + ( 52 ) )
001249 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 52 ) )
                 	__POINTW1MN _0x202CB,52
00124a c035      	RJMP _0x20330
                 ; 0001 0A9B 				break;
                 ; 0001 0A9C 			case 5:
                 _0x202D7:
00124b 30e5      	CPI  R30,LOW(0x5)
00124c e0a0      	LDI  R26,HIGH(0x5)
00124d 07fa      	CPC  R31,R26
00124e f429      	BRNE _0x202D8
                 ; 0001 0A9D 				outlcd1();
00124f 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0A9E 				hc(2, 0);
                 ; 0001 0A9F 				ws("5.TEST MOTOR"); delay_ms(200);
                +
001251 e5e3     +LDI R30 , LOW ( _0x202CB + ( 65 ) )
001252 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 65 ) )
                 	__POINTW1MN _0x202CB,65
001253 c02c      	RJMP _0x20330
                 ; 0001 0AA0 				break;
                 ; 0001 0AA1 			case 6:
                 _0x202D8:
001254 30e6      	CPI  R30,LOW(0x6)
001255 e0a0      	LDI  R26,HIGH(0x6)
001256 07fa      	CPC  R31,R26
001257 f429      	BRNE _0x202D9
                 ; 0001 0AA2 				outlcd1();
001258 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0AA3 				hc(2, 0);
                 ; 0001 0AA4 				ws("6.TEST IR   "); delay_ms(200);
                +
00125a e6e0     +LDI R30 , LOW ( _0x202CB + ( 78 ) )
00125b e0f3     +LDI R31 , HIGH ( _0x202CB + ( 78 ) )
                 	__POINTW1MN _0x202CB,78
00125c c023      	RJMP _0x20330
                 ; 0001 0AA5 				break;
                 ; 0001 0AA6 			case 7:
                 _0x202D9:
00125d 30e7      	CPI  R30,LOW(0x7)
00125e e0a0      	LDI  R26,HIGH(0x7)
00125f 07fa      	CPC  R31,R26
001260 f429      	BRNE _0x202DA
                 ; 0001 0AA7 				outlcd1();
001261 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0AA8 				hc(2, 0);
                 ; 0001 0AA9 				ws("7.TEST RF   "); delay_ms(200);
                +
001263 e6ed     +LDI R30 , LOW ( _0x202CB + ( 91 ) )
001264 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 91 ) )
                 	__POINTW1MN _0x202CB,91
001265 c01a      	RJMP _0x20330
                 ; 0001 0AAA 				break;
                 ; 0001 0AAB 			case 8:
                 _0x202DA:
001266 30e8      	CPI  R30,LOW(0x8)
001267 e0a0      	LDI  R26,HIGH(0x8)
001268 07fa      	CPC  R31,R26
001269 f429      	BRNE _0x202DB
                 ; 0001 0AAC 				outlcd1();
00126a 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0AAD 				hc(2, 0);
                 ; 0001 0AAE 				ws("8.TEST UART "); delay_ms(200);
                +
00126c e7ea     +LDI R30 , LOW ( _0x202CB + ( 104 ) )
00126d e0f3     +LDI R31 , HIGH ( _0x202CB + ( 104 ) )
                 	__POINTW1MN _0x202CB,104
00126e c011      	RJMP _0x20330
                 ; 0001 0AAF 				break;
                 ; 0001 0AB0 			case 9:
                 _0x202DB:
00126f 30e9      	CPI  R30,LOW(0x9)
001270 e0a0      	LDI  R26,HIGH(0x9)
001271 07fa      	CPC  R31,R26
001272 f429      	BRNE _0x202DC
                 ; 0001 0AB1 				outlcd1();
001273 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0AB2 				hc(2, 0);
                 ; 0001 0AB3 				ws("9.RC SERVO "); delay_ms(200);
                +
001275 e8e7     +LDI R30 , LOW ( _0x202CB + ( 117 ) )
001276 e0f3     +LDI R31 , HIGH ( _0x202CB + ( 117 ) )
                 	__POINTW1MN _0x202CB,117
001277 c008      	RJMP _0x20330
                 ; 0001 0AB4 				break;
                 ; 0001 0AB5 			case 10:
                 _0x202DC:
001278 30ea      	CPI  R30,LOW(0xA)
001279 e0a0      	LDI  R26,HIGH(0xA)
00127a 07fa      	CPC  R31,R26
00127b f451      	BRNE _0x202D3
                 ; 0001 0AB6 				outlcd1();
00127c 940e 1efe 	CALL SUBOPT_0x8C
                 ; 0001 0AB7 				hc(2, 0);
                 ; 0001 0AB8 				ws("10.UPDATE RB"); delay_ms(200);
                +
00127e e9e3     +LDI R30 , LOW ( _0x202CB + ( 129 ) )
00127f e0f3     +LDI R31 , HIGH ( _0x202CB + ( 129 ) )
                 	__POINTW1MN _0x202CB,129
                 _0x20330:
001280 93fa      	ST   -Y,R31
001281 93ea      	ST   -Y,R30
001282 940e 05e6 	CALL _ws
001284 940e 1dfb 	CALL SUBOPT_0x60
                 ; 0001 0AB9 				break;
                 ; 0001 0ABA 			};
                 _0x202D3:
                 ; 0001 0ABB 		}
                 ; 0001 0ABC 		if (keyKP == 0)
                 _0x202CF:
001286 9999      	SBIC 0x13,1
001287 c03a      	RJMP _0x202DE
                 ; 0001 0ABD 		{
                 ; 0001 0ABE 			switch (id)
001288 940e 1eed 	CALL SUBOPT_0x89
                 ; 0001 0ABF 			{
                 ; 0001 0AC0 			case 1:
00128a f411      	BRNE _0x202E2
                 ; 0001 0AC1 				robotwall();
00128b d8f3      	RCALL _robotwall
                 ; 0001 0AC2 				break;
00128c c035      	RJMP _0x202E1
                 ; 0001 0AC3 			case 2:
                 _0x202E2:
00128d 30e2      	CPI  R30,LOW(0x2)
00128e e0a0      	LDI  R26,HIGH(0x2)
00128f 07fa      	CPC  R31,R26
001290 f411      	BRNE _0x202E3
                 ; 0001 0AC4 				bluetooth();
001291 dd81      	RCALL _bluetooth
                 ; 0001 0AC5 				break;
001292 c02f      	RJMP _0x202E1
                 ; 0001 0AC6 			case 3:
                 _0x202E3:
001293 30e3      	CPI  R30,LOW(0x3)
001294 e0a0      	LDI  R26,HIGH(0x3)
001295 07fa      	CPC  R31,R26
001296 f411      	BRNE _0x202E4
                 ; 0001 0AC7 				robotwhiteline();
001297 d9d5      	RCALL _robotwhiteline
                 ; 0001 0AC8 				break;
001298 c029      	RJMP _0x202E1
                 ; 0001 0AC9 			case 4:
                 _0x202E4:
001299 30e4      	CPI  R30,LOW(0x4)
00129a e0a0      	LDI  R26,HIGH(0x4)
00129b 07fa      	CPC  R31,R26
00129c f411      	BRNE _0x202E5
                 ; 0001 0ACA 				robotblackline();
00129d dac8      	RCALL _robotblackline
                 ; 0001 0ACB 				break;
00129e c023      	RJMP _0x202E1
                 ; 0001 0ACC 			case 5:
                 _0x202E5:
00129f 30e5      	CPI  R30,LOW(0x5)
0012a0 e0a0      	LDI  R26,HIGH(0x5)
0012a1 07fa      	CPC  R31,R26
0012a2 f411      	BRNE _0x202E6
                 ; 0001 0ACD 				testmotor();
0012a3 ddc4      	RCALL _testmotor
                 ; 0001 0ACE 				break;
0012a4 c01d      	RJMP _0x202E1
                 ; 0001 0ACF 			case 6:
                 _0x202E6:
0012a5 30e6      	CPI  R30,LOW(0x6)
0012a6 e0a0      	LDI  R26,HIGH(0x6)
0012a7 07fa      	CPC  R31,R26
0012a8 f411      	BRNE _0x202E7
                 ; 0001 0AD0 				testir();
0012a9 de0b      	RCALL _testir
                 ; 0001 0AD1 				break;
0012aa c017      	RJMP _0x202E1
                 ; 0001 0AD2 			case 7:
                 _0x202E7:
0012ab 30e7      	CPI  R30,LOW(0x7)
0012ac e0a0      	LDI  R26,HIGH(0x7)
0012ad 07fa      	CPC  R31,R26
0012ae f411      	BRNE _0x202E8
                 ; 0001 0AD3 				testrf();
0012af de04      	RCALL _testrf
                 ; 0001 0AD4 				break;
0012b0 c011      	RJMP _0x202E1
                 ; 0001 0AD5 			case 8:
                 _0x202E8:
0012b1 30e8      	CPI  R30,LOW(0x8)
0012b2 e0a0      	LDI  R26,HIGH(0x8)
0012b3 07fa      	CPC  R31,R26
0012b4 f411      	BRNE _0x202E9
                 ; 0001 0AD6 				testuart();
0012b5 ddec      	RCALL _testuart
                 ; 0001 0AD7 				break;
0012b6 c00b      	RJMP _0x202E1
                 ; 0001 0AD8 			case 9:
                 _0x202E9:
0012b7 30e9      	CPI  R30,LOW(0x9)
0012b8 e0a0      	LDI  R26,HIGH(0x9)
0012b9 07fa      	CPC  R31,R26
0012ba f411      	BRNE _0x202EA
                 ; 0001 0AD9 				testRCservo();
0012bb df1e      	RCALL _testRCservo
                 ; 0001 0ADA 				break;
0012bc c005      	RJMP _0x202E1
                 ; 0001 0ADB 			case 10:
                 _0x202EA:
0012bd 30ea      	CPI  R30,LOW(0xA)
0012be e0a0      	LDI  R26,HIGH(0xA)
0012bf 07fa      	CPC  R31,R26
0012c0 f409      	BRNE _0x202E1
                 ; 0001 0ADC 				testposition();
0012c1 d870      	RCALL _testposition
                 ; 0001 0ADD 				break;
                 ; 0001 0ADE 
                 ; 0001 0ADF 			};
                 _0x202E1:
                 ; 0001 0AE0 
                 ; 0001 0AE1 		}
                 ; 0001 0AE2 
                 ; 0001 0AE3 
                 ; 0001 0AE4 	}//end while(1)
                 _0x202DE:
0012c2 cf4e      	RJMP _0x202CC
                 _0x202CE:
                 ; 0001 0AE5 }
0012c3 9508      	RET
                 
                 	.DSEG
                 _0x202CB:
000312           	.BYTE 0x8E
                 ;//[NGUYEN]Set bit and clear bit
                 ;#define setBit(p,n) ((p) |= (1 << (n)))
                 ;#define clrBit(p,n) ((p) &= (~(1) << (n)))
                 ;
                 ;//[NGUYEN] Update position. 64ms/frame
                 ;//call setUpdateRate() in MAIN to init.
                 ;char timer2Count = 0;
                 ;char posUpdateFlag = 0;
                 ;#define distThresh 100
                 ;
                 ;IntBall oldPos;
                 ;void initPos()
                 ; 0001 0AF2 {
                 
                 	.CSEG
                 _initPos:
                 ; 0001 0AF3 	oldPos.x = rbctrlHomeX;
0012c4 91e0 04b5 	LDS  R30,_rbctrlHomeX
0012c6 91f0 04b6 	LDS  R31,_rbctrlHomeX+1
0012c8 9160 04b7 	LDS  R22,_rbctrlHomeX+2
0012ca 9170 04b8 	LDS  R23,_rbctrlHomeX+3
0012cc e4aa      	LDI  R26,LOW(_oldPos)
0012cd e0b5      	LDI  R27,HIGH(_oldPos)
0012ce 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 0AF4 	oldPos.y = rbctrlHomeY;
                +
0012d0 e4ac     +LDI R26 , LOW ( _oldPos + ( 2 ) )
0012d1 e0b5     +LDI R27 , HIGH ( _oldPos + ( 2 ) )
                 	__POINTW2MN _oldPos,2
0012d2 91e0 04b9 	LDS  R30,_rbctrlHomeY
0012d4 91f0 04ba 	LDS  R31,_rbctrlHomeY+1
0012d6 9160 04bb 	LDS  R22,_rbctrlHomeY+2
0012d8 9170 04bc 	LDS  R23,_rbctrlHomeY+3
0012da 940e 1b4b 	CALL SUBOPT_0xA
                 ; 0001 0AF5 }
0012dc 9508      	RET
                 ;
                 ;IntBall estimatePos(IntBall curPos)
                 ; 0001 0AF8 {
                 _estimatePos:
                 ; 0001 0AF9 	return curPos;
0012dd 9724      	SBIW R28,4
                 ;	curPos -> Y+4
0012de 01fe      	MOVW R30,R28
0012df 9634      	ADIW R30,4
0012e0 01de      	MOVW R26,R28
0012e1 e084      	LDI  R24,4
0012e2 940e 239b 	CALL __COPYMML
0012e4 01fe      	MOVW R30,R28
0012e5 e084      	LDI  R24,4
0012e6 b61f      	IN   R1,SREG
0012e7 94f8      	CLI
0012e8 9628      	ADIW R28,8
0012e9 9508      	RET
                 ; 0001 0AFA }
                 ;
                 ;void updatePosInit()
                 ; 0001 0AFD {
                 _updatePosInit:
                 ; 0001 0AFE 	// Timer/Counter 2 initialization
                 ; 0001 0AFF 	// Clock source: System Clock
                 ; 0001 0B00 	// Clock value: 7.813 kHz
                 ; 0001 0B01 	// Mode: CTC top=OCR2
                 ; 0001 0B02 	// OC2 output: Disconnected
                 ; 0001 0B03 	ASSR = 0x00;
0012ea e0e0      	LDI  R30,LOW(0)
0012eb bde2      	OUT  0x22,R30
                 ; 0001 0B04 	TCCR2 = 0x0F;
0012ec e0ef      	LDI  R30,LOW(15)
0012ed bde5      	OUT  0x25,R30
                 ; 0001 0B05 	TCNT2 = 0x12;
0012ee e1e2      	LDI  R30,LOW(18)
0012ef bde4      	OUT  0x24,R30
                 ; 0001 0B06 	OCR2 = 254;
0012f0 efee      	LDI  R30,LOW(254)
0012f1 bde3      	OUT  0x23,R30
                 ; 0001 0B07 	// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0B08 	setBit(TIMSK, OCIE2);
0012f2 b7e9      	IN   R30,0x39
0012f3 68e0      	ORI  R30,0x80
0012f4 bfe9      	OUT  0x39,R30
                 ; 0001 0B09 }
0012f5 9508      	RET
                 ;//[NGUYEN]
                 ;
                 ;interrupt[TIM2_COMP] void timer2_comp_isr(void)
                 ; 0001 0B0D {
                 _timer2_comp_isr:
0012f6 940e 1d81 	CALL SUBOPT_0x4D
                 ; 0001 0B0E 	unsigned char i = 0;
                 ; 0001 0B0F 	LEDRtoggle();
0012f8 931a      	ST   -Y,R17
                 ;	i -> R17
0012f9 e010      	LDI  R17,0
0012fa 940e 05a4 	CALL _LEDRtoggle
                 ; 0001 0B10 	if (timer2Count++ < 2)
0012fc 91a0 0548 	LDS  R26,_timer2Count
0012fe 5faf      	SUBI R26,-LOW(1)
0012ff 93a0 0548 	STS  _timer2Count,R26
001301 50a1      	SUBI R26,LOW(1)
001302 30a2      	CPI  R26,LOW(0x2)
001303 f408      	BRSH _0x202EC
                 ; 0001 0B11 		return;
001304 c0ca      	RJMP _0x20332
                 ; 0001 0B12 	else
                 _0x202EC:
                 ; 0001 0B13 	{
                 ; 0001 0B14 		timer2Count = 0;
001305 e0e0      	LDI  R30,LOW(0)
001306 93e0 0548 	STS  _timer2Count,R30
                 ; 0001 0B15 	}
                 ; 0001 0B16 
                 ; 0001 0B17 
                 ; 0001 0B18 	if (nRF24L01_RxPacket(RxBuf) == 1)         // Neu nhan duoc du lieu
001308 e7e9      	LDI  R30,LOW(_RxBuf)
001309 e0f4      	LDI  R31,HIGH(_RxBuf)
00130a 93fa      	ST   -Y,R31
00130b 93ea      	ST   -Y,R30
00130c 940e 0380 	CALL _nRF24L01_RxPacket
00130e 30e1      	CPI  R30,LOW(0x1)
00130f f011      	BREQ PC+3
001310 940c 13cf 	JMP _0x202EE
                 ; 0001 0B19 	{
                 ; 0001 0B1A 		IntRobot intRb;
                 ; 0001 0B1B 		for (i = 0; i < 28; i++)
001312 972e      	SBIW R28,14
                 ;	intRb -> Y+0
001313 e010      	LDI  R17,LOW(0)
                 _0x202F0:
001314 311c      	CPI  R17,28
001315 f460      	BRSH _0x202F1
                 ; 0001 0B1C 		{
                 ; 0001 0B1D 			*(uint8_t *)((uint8_t *)&rb + i) = RxBuf[i];
001316 2fa1      	MOV  R26,R17
001317 e0b0      	LDI  R27,0
001318 51a1      	SUBI R26,LOW(-_rb)
001319 4fbc      	SBCI R27,HIGH(-_rb)
00131a 940e 1bff 	CALL SUBOPT_0x22
00131c 58e7      	SUBI R30,LOW(-_RxBuf)
00131d 4ffb      	SBCI R31,HIGH(-_RxBuf)
00131e 81e0      	LD   R30,Z
00131f 93ec      	ST   X,R30
                 ; 0001 0B1E 		}
001320 5f1f      	SUBI R17,-1
001321 cff2      	RJMP _0x202F0
                 _0x202F1:
                 ; 0001 0B1F 
                 ; 0001 0B20 
                 ; 0001 0B21 		idRobot = fmod(rb.id, 10); // doc id
001322 940e 1f01 	CALL SUBOPT_0x8D
001324 940e 237c 	CALL __PUTPARD1
001326 940e 1f0a 	CALL SUBOPT_0x8E
001328 940e 237c 	CALL __PUTPARD1
00132a 940e 1871 	CALL _fmod
00132c 940e 20c0 	CALL __CFD1U
00132e 016f      	MOVW R12,R30
                 ; 0001 0B22 		cmdCtrlRobot = (int)rb.id / 10; // doc ma lenh
00132f 940e 1f0f 	CALL SUBOPT_0x8F
                 ; 0001 0B23 
                 ; 0001 0B24 		intRb = convertRobot2IntRobot(rb);
001331 eeef      	LDI  R30,LOW(_rb)
001332 e0f3      	LDI  R31,HIGH(_rb)
001333 e1ac      	LDI  R26,28
001334 940e 2381 	CALL __PUTPARL
001336 940e 0775 	CALL _convertRobot2IntRobot
001338 01de      	MOVW R26,R28
001339 940e 239b 	CALL __COPYMML
00133b be1f      	OUT  SREG,R1
                 ; 0001 0B25 
                 ; 0001 0B26 		switch (idRobot)
00133c 01f6      	MOVW R30,R12
                 ; 0001 0B27 		{
                 ; 0001 0B28 		case 1:
00133d 30e1      	CPI  R30,LOW(0x1)
00133e e0a0      	LDI  R26,HIGH(0x1)
00133f 07fa      	CPC  R31,R26
001340 f421      	BRNE _0x202F5
                 ; 0001 0B29 			robot11 = intRb;
001341 01fe      	MOVW R30,R28
001342 e0ab      	LDI  R26,LOW(_robot11)
001343 e0b4      	LDI  R27,HIGH(_robot11)
001344 c027      	RJMP _0x20331
                 ; 0001 0B2A 			break;
                 ; 0001 0B2B 		case 2:
                 _0x202F5:
001345 30e2      	CPI  R30,LOW(0x2)
001346 e0a0      	LDI  R26,HIGH(0x2)
001347 07fa      	CPC  R31,R26
001348 f421      	BRNE _0x202F6
                 ; 0001 0B2C 			robot12 = intRb;
001349 01fe      	MOVW R30,R28
00134a e1a9      	LDI  R26,LOW(_robot12)
00134b e0b4      	LDI  R27,HIGH(_robot12)
00134c c01f      	RJMP _0x20331
                 ; 0001 0B2D 			break;
                 ; 0001 0B2E 		case 3:
                 _0x202F6:
00134d 30e3      	CPI  R30,LOW(0x3)
00134e e0a0      	LDI  R26,HIGH(0x3)
00134f 07fa      	CPC  R31,R26
001350 f421      	BRNE _0x202F7
                 ; 0001 0B2F 			robot13 = intRb;
001351 01fe      	MOVW R30,R28
001352 e2a7      	LDI  R26,LOW(_robot13)
001353 e0b4      	LDI  R27,HIGH(_robot13)
001354 c017      	RJMP _0x20331
                 ; 0001 0B30 			break;
                 ; 0001 0B31 		case 4:
                 _0x202F7:
001355 30e4      	CPI  R30,LOW(0x4)
001356 e0a0      	LDI  R26,HIGH(0x4)
001357 07fa      	CPC  R31,R26
001358 f421      	BRNE _0x202F8
                 ; 0001 0B32 			robot21 = intRb;
001359 01fe      	MOVW R30,R28
00135a e3a5      	LDI  R26,LOW(_robot21)
00135b e0b4      	LDI  R27,HIGH(_robot21)
00135c c00f      	RJMP _0x20331
                 ; 0001 0B33 			break;
                 ; 0001 0B34 		case 5:
                 _0x202F8:
00135d 30e5      	CPI  R30,LOW(0x5)
00135e e0a0      	LDI  R26,HIGH(0x5)
00135f 07fa      	CPC  R31,R26
001360 f421      	BRNE _0x202F9
                 ; 0001 0B35 			robot22 = intRb;
001361 01fe      	MOVW R30,R28
001362 e4a3      	LDI  R26,LOW(_robot22)
001363 e0b4      	LDI  R27,HIGH(_robot22)
001364 c007      	RJMP _0x20331
                 ; 0001 0B36 			break;
                 ; 0001 0B37 		case 6:
                 _0x202F9:
001365 30e6      	CPI  R30,LOW(0x6)
001366 e0a0      	LDI  R26,HIGH(0x6)
001367 07fa      	CPC  R31,R26
001368 f431      	BRNE _0x202F4
                 ; 0001 0B38 			robot23 = intRb;
001369 01fe      	MOVW R30,R28
00136a e5a1      	LDI  R26,LOW(_robot23)
00136b e0b4      	LDI  R27,HIGH(_robot23)
                 _0x20331:
00136c e08e      	LDI  R24,14
00136d 940e 239b 	CALL __COPYMML
                 ; 0001 0B39 			break;
                 ; 0001 0B3A 
                 ; 0001 0B3B 		}
                 _0x202F4:
                 ; 0001 0B3C 		if (idRobot == ROBOT_ID)
00136f e0e4      	LDI  R30,LOW(4)
001370 e0f0      	LDI  R31,HIGH(4)
001371 15ec      	CP   R30,R12
001372 05fd      	CPC  R31,R13
001373 f011      	BREQ PC+3
001374 940c 13ce 	JMP _0x202FB
                 ; 0001 0B3D 		{
                 ; 0001 0B3E 			LEDL = !LEDL;
001376 9bac      	SBIS 0x15,4
001377 c002      	RJMP _0x202FC
001378 98ac      	CBI  0x15,4
001379 c001      	RJMP _0x202FD
                 _0x202FC:
00137a 9aac      	SBI  0x15,4
                 _0x202FD:
                 ; 0001 0B3F 			cmdCtrlRobot = (int)rb.id / 10; // doc ma lenh
00137b 940e 1f0f 	CALL SUBOPT_0x8F
                 ; 0001 0B40 			posUpdateFlag = 1;
00137d e0e1      	LDI  R30,LOW(1)
00137e 93e0 0549 	STS  _posUpdateFlag,R30
                 ; 0001 0B41 			robotctrl = intRb;
001380 01fe      	MOVW R30,R28
001381 e5af      	LDI  R26,LOW(_robotctrl)
001382 e0b4      	LDI  R27,HIGH(_robotctrl)
001383 e08e      	LDI  R24,14
001384 940e 239b 	CALL __COPYMML
                 ; 0001 0B42 			if ((robotctrl.x - oldPos.x >= distThresh) || (robotctrl.y - oldPos.y >= distThresh))
                +
001386 91a0 0461+LDS R26 , _robotctrl + ( 2 )
001388 91b0 0462+LDS R27 , _robotctrl + ( 2 ) + 1
                 	__GETW2MN _robotctrl,2
00138a 91e0 054a 	LDS  R30,_oldPos
00138c 91f0 054b 	LDS  R31,_oldPos+1
00138e 1bae      	SUB  R26,R30
00138f 0bbf      	SBC  R27,R31
001390 36a4      	CPI  R26,LOW(0x64)
001391 e0e0      	LDI  R30,HIGH(0x64)
001392 07be      	CPC  R27,R30
001393 f474      	BRGE _0x202FF
                +
001394 91a0 0463+LDS R26 , _robotctrl + ( 4 )
001396 91b0 0464+LDS R27 , _robotctrl + ( 4 ) + 1
                 	__GETW2MN _robotctrl,4
                +
001398 91e0 054c+LDS R30 , _oldPos + ( 2 )
00139a 91f0 054d+LDS R31 , _oldPos + ( 2 ) + 1
                 	__GETW1MN _oldPos,2
00139c 1bae      	SUB  R26,R30
00139d 0bbf      	SBC  R27,R31
00139e 36a4      	CPI  R26,LOW(0x64)
00139f e0e0      	LDI  R30,HIGH(0x64)
0013a0 07be      	CPC  R27,R30
0013a1 f104      	BRLT _0x202FE
                 _0x202FF:
                 ; 0001 0B43 			{
                 ; 0001 0B44 				IntBall estPos;
                 ; 0001 0B45 				IntBall curPos;
                 ; 0001 0B46 				curPos.x = robotctrl.x;
0013a2 9728      	SBIW R28,8
                 ;	intRb -> Y+8
                 ;	estPos -> Y+4
                 ;	curPos -> Y+0
0013a3 940e 1c57 	CALL SUBOPT_0x2F
0013a5 83e8      	ST   Y,R30
0013a6 83f9      	STD  Y+1,R31
                 ; 0001 0B47 				curPos.y = robotctrl.y;
0013a7 940e 1c62 	CALL SUBOPT_0x31
0013a9 83ea      	STD  Y+2,R30
0013aa 83fb      	STD  Y+2+1,R31
                 ; 0001 0B48 				estPos = estimatePos(curPos);
0013ab 01fe      	MOVW R30,R28
0013ac e0a4      	LDI  R26,4
0013ad 940e 2381 	CALL __PUTPARL
0013af df2d      	RCALL _estimatePos
0013b0 01de      	MOVW R26,R28
0013b1 9614      	ADIW R26,4
0013b2 940e 239b 	CALL __COPYMML
0013b4 be1f      	OUT  SREG,R1
                 ; 0001 0B49 				robotctrl.x = estPos.x;
0013b5 81ec      	LDD  R30,Y+4
0013b6 81fd      	LDD  R31,Y+4+1
                +
0013b7 93e0 0461+STS _robotctrl + ( 2 ) , R30
0013b9 93f0 0462+STS _robotctrl + ( 2 ) + 1 , R31
                 	__PUTW1MN _robotctrl,2
                 ; 0001 0B4A 				robotctrl.y = estPos.y;
0013bb 81ee      	LDD  R30,Y+6
0013bc 81ff      	LDD  R31,Y+6+1
                +
0013bd 93e0 0463+STS _robotctrl + ( 4 ) , R30
0013bf 93f0 0464+STS _robotctrl + ( 4 ) + 1 , R31
                 	__PUTW1MN _robotctrl,4
                 ; 0001 0B4B 
                 ; 0001 0B4C 			}
0013c1 9628      	ADIW R28,8
                 ; 0001 0B4D 			oldPos.x = robotctrl.x;
                 _0x202FE:
0013c2 940e 1c57 	CALL SUBOPT_0x2F
0013c4 93e0 054a 	STS  _oldPos,R30
0013c6 93f0 054b 	STS  _oldPos+1,R31
                 ; 0001 0B4E 			oldPos.y = robotctrl.y;
0013c8 940e 1c62 	CALL SUBOPT_0x31
                +
0013ca 93e0 054c+STS _oldPos + ( 2 ) , R30
0013cc 93f0 054d+STS _oldPos + ( 2 ) + 1 , R31
                 	__PUTW1MN _oldPos,2
                 ; 0001 0B4F 		}
                 ; 0001 0B50 
                 ; 0001 0B51 	}
                 _0x202FB:
0013ce 962e      	ADIW R28,14
                 ; 0001 0B52 }
                 _0x202EE:
                 _0x20332:
0013cf 9119      	LD   R17,Y+
0013d0 940e 1dc7 	CALL SUBOPT_0x58
0013d2 9518      	RETI
                 ;unsigned char readposition()
                 ; 0001 0B54 {
                 _readposition:
                 ; 0001 0B55 	return;
0013d3 e0e0      	LDI  R30,LOW(0)
0013d4 9508      	RET
                 ; 0001 0B56 }
                 ;
                 ;//========================================================
                 ;//          HAM MAIN
                 ;//========================================================
                 ;void main(void)
                 ; 0001 0B5C {
                 _main:
                 ; 0001 0B5D 	// For Testing purpose only, creating a fake robot
                 ; 0001 0B5E 	IntRobot rbFake;
                 ; 0001 0B5F 	unsigned char flagreadrb;
                 ; 0001 0B60 	unsigned int adctest;
                 ; 0001 0B61 	unsigned char i;
                 ; 0001 0B62 	float PIdl, PIdr, pl, il, pr, ir, ur, ul;
                 ; 0001 0B63 
                 ; 0001 0B64 	// Testing robot declaration
                 ; 0001 0B65 	rbFake.id = 4;
0013d5 97ae      	SBIW R28,46
                 ;	rbFake -> Y+32
                 ;	flagreadrb -> R17
                 ;	adctest -> R18,R19
                 ;	i -> R16
                 ;	PIdl -> Y+28
                 ;	PIdr -> Y+24
                 ;	pl -> Y+20
                 ;	il -> Y+16
                 ;	pr -> Y+12
                 ;	ir -> Y+8
                 ;	ur -> Y+4
                 ;	ul -> Y+0
0013d6 e0e4      	LDI  R30,LOW(4)
0013d7 e0f0      	LDI  R31,HIGH(4)
0013d8 a3e8      	STD  Y+32,R30
0013d9 a3f9      	STD  Y+32+1,R31
                 ; 0001 0B66 	rbFake.x = -42;
0013da ede6      	LDI  R30,LOW(65494)
0013db efff      	LDI  R31,HIGH(65494)
0013dc a3ea      	STD  Y+34,R30
0013dd a3fb      	STD  Y+34+1,R31
                 ; 0001 0B67 	rbFake.y = 48;
0013de e3e0      	LDI  R30,LOW(48)
0013df e0f0      	LDI  R31,HIGH(48)
0013e0 a3ec      	STD  Y+36,R30
0013e1 a3fd      	STD  Y+36+1,R31
                 ; 0001 0B68 	rbFake.ox = -35;
0013e2 eded      	LDI  R30,LOW(65501)
0013e3 efff      	LDI  R31,HIGH(65501)
0013e4 a3ee      	STD  Y+38,R30
0013e5 a3ff      	STD  Y+38+1,R31
                 ; 0001 0B69 	rbFake.oy = -50;
0013e6 ecee      	LDI  R30,LOW(65486)
0013e7 efff      	LDI  R31,HIGH(65486)
0013e8 a7e8      	STD  Y+40,R30
0013e9 a7f9      	STD  Y+40+1,R31
                 ; 0001 0B6A 	rbFake.ball.x = 0;
0013ea e0e0      	LDI  R30,LOW(0)
0013eb a7ea      	STD  Y+42,R30
0013ec a7eb      	STD  Y+42+1,R30
                 ; 0001 0B6B 	rbFake.ball.y = 0;
0013ed a7ec      	STD  Y+44,R30
0013ee a7ed      	STD  Y+44+1,R30
                 ; 0001 0B6C 
                 ; 0001 0B6D 	//------------- khai  bao chuc nang in out cua cac port
                 ; 0001 0B6E 	DDRA = 0xFF;
0013ef efef      	LDI  R30,LOW(255)
0013f0 bbea      	OUT  0x1A,R30
                 ; 0001 0B6F 	DDRB = 0b10111111;
0013f1 ebef      	LDI  R30,LOW(191)
0013f2 bbe7      	OUT  0x17,R30
                 ; 0001 0B70 	DDRC = 0b11111100;
0013f3 efec      	LDI  R30,LOW(252)
0013f4 bbe4      	OUT  0x14,R30
                 ; 0001 0B71 	DDRD = 0b11110010;
0013f5 efe2      	LDI  R30,LOW(242)
0013f6 bbe1      	OUT  0x11,R30
                 ; 0001 0B72 
                 ; 0001 0B73 	//------------- khai  bao chuc nang cua adc
                 ; 0001 0B74 	// ADC initialization
                 ; 0001 0B75 	// ADC Clock frequency: 1000.000 kHz
                 ; 0001 0B76 	// ADC Voltage Reference: AVCC pin
                 ; 0001 0B77 	ADMUX = ADC_VREF_TYPE & 0xff;
0013f7 e4e0      	LDI  R30,LOW(64)
0013f8 b9e7      	OUT  0x7,R30
                 ; 0001 0B78 	ADCSRA = 0x83;
0013f9 e8e3      	LDI  R30,LOW(131)
0013fa b9e6      	OUT  0x6,R30
                 ; 0001 0B79 	//---------------------------------------------------------------------
                 ; 0001 0B7A 	//------------- khai  bao chuc nang cua bo timer dung lam PWM cho 2 dong co
                 ; 0001 0B7B 	// Timer/Counter 1 initialization
                 ; 0001 0B7C 	// Clock source: System Clock
                 ; 0001 0B7D 	// Clock value: 1000.000 kHz   //PWM 2KHz
                 ; 0001 0B7E 	// Mode: Ph. correct PWM top=0x00FF
                 ; 0001 0B7F 	// OC1A output: Non-Inv.
                 ; 0001 0B80 	// OC1B output: Non-Inv.
                 ; 0001 0B81 	// Noise Canceler: Off
                 ; 0001 0B82 	// Input Capture on Falling Edge
                 ; 0001 0B83 	// Timer1 Overflow Interrupt: On  // voi period =1/2khz= 0.5ms
                 ; 0001 0B84 	// Input Capture Interrupt: Off
                 ; 0001 0B85 	// Compare A Match Interrupt: Off
                 ; 0001 0B86 	// Compare B Match Interrupt: Off
                 ; 0001 0B87 	TCCR1A = 0xA1;
0013fb eae1      	LDI  R30,LOW(161)
0013fc bdef      	OUT  0x2F,R30
                 ; 0001 0B88 	TCCR1B = 0x02;
0013fd e0e2      	LDI  R30,LOW(2)
0013fe bdee      	OUT  0x2E,R30
                 ; 0001 0B89 	TCNT1H = 0x00;
0013ff e0e0      	LDI  R30,LOW(0)
001400 bded      	OUT  0x2D,R30
                 ; 0001 0B8A 	TCNT1L = 0x00;
001401 bdec      	OUT  0x2C,R30
                 ; 0001 0B8B 	ICR1H = 0x00;
001402 bde7      	OUT  0x27,R30
                 ; 0001 0B8C 	ICR1L = 0x00;
001403 bde6      	OUT  0x26,R30
                 ; 0001 0B8D 	OCR1AH = 0x00;
001404 bdeb      	OUT  0x2B,R30
                 ; 0001 0B8E 	OCR1AL = 0x00;
001405 bdea      	OUT  0x2A,R30
                 ; 0001 0B8F 	OCR1BH = 0x00;
001406 bde9      	OUT  0x29,R30
                 ; 0001 0B90 	OCR1BL = 0x00;
001407 bde8      	OUT  0x28,R30
                 ; 0001 0B91 	// Timer(s)/Counter(s) Interrupt(s) initialization  timer0
                 ; 0001 0B92 	TIMSK = 0x04;
001408 e0e4      	LDI  R30,LOW(4)
001409 bfe9      	OUT  0x39,R30
                 ; 0001 0B93 
                 ; 0001 0B94 	//OCR1A=0-255; MOTOR LEFT
                 ; 0001 0B95 	//OCR1B=0-255; MOTOR RIGHT
                 ; 0001 0B96 	for (i = 0; i < 1; i++)
00140a e000      	LDI  R16,LOW(0)
                 _0x20302:
00140b 3001      	CPI  R16,1
00140c f420      	BRSH _0x20303
                 ; 0001 0B97 	{
                 ; 0001 0B98 		LEDL = 1; LEDR = 1;
00140d 940e 1ebf 	CALL SUBOPT_0x82
                 ; 0001 0B99 		delay_ms(100);
                 ; 0001 0B9A 		LEDL = 0; LEDR = 0;
                 ; 0001 0B9B 		delay_ms(100);
                 ; 0001 0B9C 	}
00140f 5f0f      	SUBI R16,-1
001410 cffa      	RJMP _0x20302
                 _0x20303:
                 ; 0001 0B9D 
                 ; 0001 0B9E 	//khai  bao su dung cua glcd
                 ; 0001 0B9F 	SPIinit();
001411 940e 0670 	CALL _SPIinit
                 ; 0001 0BA0 	LCDinit();
001413 940e 0675 	CALL _LCDinit
                 ; 0001 0BA1 
                 ; 0001 0BA2 	// khai  bao su dung rf dung de cap nhat gia tri vi tri cua robot
                 ; 0001 0BA3 	init_NRF24L01();
001415 940e 02e3 	CALL _init_NRF24L01
                 ; 0001 0BA4 	SetRX_Mode();  // chon kenh tan so phat, va dia chi phat trong file nRF14l01.c
001417 940e 0374 	CALL _SetRX_Mode
                 ; 0001 0BA5 	// khai bao su dung encoder
                 ; 0001 0BA6 	initencoder(); //lay 2 canh len  xuong
001419 940e 0738 	CALL _initencoder
                 ; 0001 0BA7 	// khai bao su dung uart
                 ; 0001 0BA8 	inituart();
00141b 940e 0718 	CALL _inituart
                 ; 0001 0BA9 
                 ; 0001 0BAA 	// Set interrupt timer 2
                 ; 0001 0BAB 	updatePosInit();
00141d decc      	RCALL _updatePosInit
                 ; 0001 0BAC 	// Set for oldPos variable
                 ; 0001 0BAD 	initPos();
00141e dea5      	RCALL _initPos
                 ; 0001 0BAE 
                 ; 0001 0BAF 	#asm("sei")
00141f 9478      	sei
                 ; 0001 0BB0 
                 ; 0001 0BB1 	//man hinh khoi dong robokit
                 ; 0001 0BB2 	hc(0, 10);
001420 940e 1df6 	CALL SUBOPT_0x5F
001422 940e 1e07 	CALL SUBOPT_0x62
                 ; 0001 0BB3 	ws("<AKBOTKIT>");
                +
001424 eae0     +LDI R30 , LOW ( _0x2030C + ( 0 ) )
001425 e0f3     +LDI R31 , HIGH ( _0x2030C + ( 0 ) )
                 	__POINTW1MN _0x2030C,0
001426 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0BB4 	hc(1, 0);
001428 940e 1e0d 	CALL SUBOPT_0x63
                 ; 0001 0BB5 	ws("************");
                +
00142a eaeb     +LDI R30 , LOW ( _0x2030C + ( 11 ) )
00142b e0f3     +LDI R31 , HIGH ( _0x2030C + ( 11 ) )
                 	__POINTW1MN _0x2030C,11
00142c 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0BB6 
                 ; 0001 0BB7 	//robotwhiteline();
                 ; 0001 0BB8 	//robotblackline();
                 ; 0001 0BB9 	//kiem tra neu nhan va giu nut trai se vao chuong trinh selftest (kiem tra hoat dong cua robot)
                 ; 0001 0BBA 	while (keyKT == 0)
                 _0x2030D:
00142e 9998      	SBIC 0x13,0
00142f c01d      	RJMP _0x2030F
                 ; 0001 0BBB 	{
                 ; 0001 0BBC 		cntselftest++;
001430 eda7      	LDI  R26,LOW(_cntselftest)
001431 e0b4      	LDI  R27,HIGH(_cntselftest)
001432 940e 1d8f 	CALL SUBOPT_0x4E
                 ; 0001 0BBD 		if (cntselftest > 10)
001434 91a0 04d7 	LDS  R26,_cntselftest
001436 91b0 04d8 	LDS  R27,_cntselftest+1
001438 971b      	SBIW R26,11
001439 f070      	BRLO _0x20310
                 ; 0001 0BBE 		{
                 ; 0001 0BBF 			while (keyKT == 0);//CHO NHA NUT AN
                 _0x20311:
00143a 9b98      	SBIS 0x13,0
00143b cffe      	RJMP _0x20311
                 ; 0001 0BC0 			cntselftest = 0;
00143c e0e0      	LDI  R30,LOW(0)
00143d 93e0 04d7 	STS  _cntselftest,R30
00143f 93e0 04d8 	STS  _cntselftest+1,R30
                 ; 0001 0BC1 			flagselftest = 1;
001441 e0e1      	LDI  R30,LOW(1)
001442 e0f0      	LDI  R31,HIGH(1)
001443 93e0 04d5 	STS  _flagselftest,R30
001445 93f0 04d6 	STS  _flagselftest+1,R31
                 ; 0001 0BC2 			selftest();
001447 ddc1      	RCALL _selftest
                 ; 0001 0BC3 		}
                 ; 0001 0BC4 		delay_ms(100);
                 _0x20310:
001448 e6e4      	LDI  R30,LOW(100)
001449 e0f0      	LDI  R31,HIGH(100)
00144a 940e 1ef4 	CALL SUBOPT_0x8A
                 ; 0001 0BC5 	}
00144c cfe1      	RJMP _0x2030D
                 _0x2030F:
                 ; 0001 0BC6 
                 ; 0001 0BC7 	// vao chuong trinh chinh sau khi bo qua phan selftest
                 ; 0001 0BC8 	hc(2, 0);
00144d 940e 1edd 	CALL SUBOPT_0x85
                 ; 0001 0BC9 	ws("MAIN PROGRAM");
                +
00144f ebe8     +LDI R30 , LOW ( _0x2030C + ( 24 ) )
001450 e0f3     +LDI R31 , HIGH ( _0x2030C + ( 24 ) )
                 	__POINTW1MN _0x2030C,24
001451 940e 1c35 	CALL SUBOPT_0x28
                 ; 0001 0BCA 	settoadoHomRB();
001453 940e 0927 	CALL _settoadoHomRB
                 ; 0001 0BCB 
                 ; 0001 0BCC 	// code you here
                 ; 0001 0BCD 
                 ; 0001 0BCE 	while (1)
                 _0x20314:
                 ; 0001 0BCF 	{
                 ; 0001 0BD0 #ifdef !DEBUG_MODE
                 ; 0001 0BD1 		{
                 ; 0001 0BD2 			//LEDR=!LEDR;
                 ; 0001 0BD3 			//PHUC
                 ; 0001 0BD4 			////     //=========================================================   PHUC ID
                 ; 0001 0BD5 			//         chay theo banh co dinh huong tan cong
                 ; 0001 0BD6 			readposition();
                 ; 0001 0BD7 			calcvitri(0, 0);    // de xac dinh huong tan cong
                 ; 0001 0BD8 
                 ; 0001 0BD9 			//flagtancong=1;
                 ; 0001 0BDA 			if (flagtancong == 1)
                 ; 0001 0BDB 			{
                 ; 0001 0BDC 				flagtask = 2;
                 ; 0001 0BDD 				rb_wait(50);
                 ; 0001 0BDE 
                 ; 0001 0BDF 			}
                 ; 0001 0BE0 			else
                 ; 0001 0BE1 			{
                 ; 0001 0BE2 				if (offsetphongthu < 0)    offsetphongthu = -offsetphongthu;//lay do lon
                 ; 0001 0BE3 				if (robotctrl.ball.y <= 0)
                 ; 0001 0BE4 				{
                 ; 0001 0BE5 					setRobotX = robotctrl.ball.x;
                 ; 0001 0BE6 					setRobotY = robotctrl.ball.y + offsetphongthu;
                 ; 0001 0BE7 
                 ; 0001 0BE8 					flagtask = 0;
                 ; 0001 0BE9 					rb_wait(200);
                 ; 0001 0BEA 
                 ; 0001 0BEB 				}
                 ; 0001 0BEC 				else
                 ; 0001 0BED 				{
                 ; 0001 0BEE 					setRobotX = robotctrl.ball.x;
                 ; 0001 0BEF 					setRobotY = robotctrl.ball.y - offsetphongthu;
                 ; 0001 0BF0 
                 ; 0001 0BF1 					flagtask = 0;
                 ; 0001 0BF2 					rb_wait(200);
                 ; 0001 0BF3 
                 ; 0001 0BF4 				}
                 ; 0001 0BF5 
                 ; 0001 0BF6 				setRobotX = robotctrl.ball.x + offsetphongthu;
                 ; 0001 0BF7 				setRobotY = robotctrl.ball.y;
                 ; 0001 0BF8 				rb_wait(200);
                 ; 0001 0BF9 				rb_goball();
                 ; 0001 0BFA 				rb_wait(200);
                 ; 0001 0BFB 			}
                 ; 0001 0BFC 			ctrrobot();// can phai luon luon chay de dieu khien robot
                 ; 0001 0BFD 		}
                 ; 0001 0BFE #else
                 ; 0001 0BFF 		{
                 ; 0001 0C00 			calcvitri(0, 0);
001455 940e 1f19 	CALL SUBOPT_0x90
001457 940e 1f19 	CALL SUBOPT_0x90
001459 940e 07b2 	CALL _calcvitri
                 ; 0001 0C01 #ifdef DEBUG_EN
                 ; 0001 0C02 			{
                 ; 0001 0C03 				char dbgLen;
                 ; 0001 0C04 
                 ; 0001 0C05 				dbgLen = sprintf(debugMsgBuff, "Distance: %f \n\r", distance);
00145b 9721      	SBIW R28,1
                 ;	rbFake -> Y+33
                 ;	PIdl -> Y+29
                 ;	PIdr -> Y+25
                 ;	pl -> Y+21
                 ;	il -> Y+17
                 ;	pr -> Y+13
                 ;	ir -> Y+9
                 ;	ur -> Y+5
                 ;	ul -> Y+1
                 ;	dbgLen -> Y+0
00145c 940e 1f20 	CALL SUBOPT_0x91
                +
00145e eced     +LDI R30 , LOW ( 2 * _0x20000 + ( 321 ) )
00145f e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 321 ) )
                 	__POINTW1FN _0x20000,321
001460 93fa      	ST   -Y,R31
001461 93ea      	ST   -Y,R30
001462 91e0 0471 	LDS  R30,_distance
001464 91f0 0472 	LDS  R31,_distance+1
001466 9160 0473 	LDS  R22,_distance+2
001468 9170 0474 	LDS  R23,_distance+3
00146a 940e 1f25 	CALL SUBOPT_0x92
                 ; 0001 0C06 				debug_out(debugMsgBuff, dbgLen);
00146c 940e 1f2d 	CALL SUBOPT_0x93
                 ; 0001 0C07 
                 ; 0001 0C08 				dbgLen = sprintf(debugMsgBuff, "Orientation: %f \n\r", orientation);
                +
00146e eded     +LDI R30 , LOW ( 2 * _0x20000 + ( 337 ) )
00146f e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 337 ) )
                 	__POINTW1FN _0x20000,337
001470 93fa      	ST   -Y,R31
001471 93ea      	ST   -Y,R30
001472 940e 1b50 	CALL SUBOPT_0xB
001474 940e 1f25 	CALL SUBOPT_0x92
                 ; 0001 0C09 				debug_out(debugMsgBuff, dbgLen);
001476 940e 1f2d 	CALL SUBOPT_0x93
                 ; 0001 0C0A 
                 ; 0001 0C0B 				dbgLen = sprintf(debugMsgBuff, "Left Speed: %d \n\r", leftSpeed);
                +
001478 efe0     +LDI R30 , LOW ( 2 * _0x20000 + ( 356 ) )
001479 e0f3     +LDI R31 , HIGH ( 2 * _0x20000 + ( 356 ) )
                 	__POINTW1FN _0x20000,356
00147a 93fa      	ST   -Y,R31
00147b 93ea      	ST   -Y,R30
00147c 91e0 04d9 	LDS  R30,_leftSpeed
00147e 91f0 04da 	LDS  R31,_leftSpeed+1
001480 940e 228c 	CALL __CWD1
001482 940e 1f25 	CALL SUBOPT_0x92
                 ; 0001 0C0C 				debug_out(debugMsgBuff, dbgLen);
001484 940e 1f2d 	CALL SUBOPT_0x93
                 ; 0001 0C0D 
                 ; 0001 0C0E 				dbgLen = sprintf(debugMsgBuff, "Right Speed: %d \n\r", rightSpeed);
                +
001486 e0e2     +LDI R30 , LOW ( 2 * _0x20000 + ( 374 ) )
001487 e0f4     +LDI R31 , HIGH ( 2 * _0x20000 + ( 374 ) )
                 	__POINTW1FN _0x20000,374
001488 940e 1f32 	CALL SUBOPT_0x94
00148a 940e 228c 	CALL __CWD1
00148c 940e 1f25 	CALL SUBOPT_0x92
                 ; 0001 0C0F 				debug_out(debugMsgBuff, dbgLen);
00148e 940e 1f2d 	CALL SUBOPT_0x93
                 ; 0001 0C10 
                 ; 0001 0C11 				dbgLen = sprintf(debugMsgBuff, "-------------------------- \n\r");
                +
001490 e1e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 393 ) )
001491 e0f4     +LDI R31 , HIGH ( 2 * _0x20000 + ( 393 ) )
                 	__POINTW1FN _0x20000,393
001492 93fa      	ST   -Y,R31
001493 93ea      	ST   -Y,R30
001494 e080      	LDI  R24,0
001495 940e 17f2 	CALL _sprintf
001497 9624      	ADIW R28,4
001498 83e8      	ST   Y,R30
                 ; 0001 0C12 				debug_out(debugMsgBuff, dbgLen);
001499 940e 1f20 	CALL SUBOPT_0x91
00149b 81ea      	LDD  R30,Y+2
00149c 93ea      	ST   -Y,R30
00149d 940e 039d 	CALL _debug_out
                 ; 0001 0C13 			}
00149f 9621      	ADIW R28,1
                 ; 0001 0C14 #endif
                 ; 0001 0C15 
                 ; 0001 0C16 			movePoint(robotctrl, 0, 0, 0, 'f');
0014a0 e5ef      	LDI  R30,LOW(_robotctrl)
0014a1 e0f4      	LDI  R31,HIGH(_robotctrl)
0014a2 e0ae      	LDI  R26,14
0014a3 940e 2381 	CALL __PUTPARL
0014a5 940e 1df6 	CALL SUBOPT_0x5F
0014a7 940e 1df6 	CALL SUBOPT_0x5F
0014a9 940e 1df6 	CALL SUBOPT_0x5F
0014ab e6e6      	LDI  R30,LOW(102)
0014ac 93ea      	ST   -Y,R30
0014ad 940e 042b 	CALL _movePoint
                 ; 0001 0C17 			setSpeed(leftSpeed, rightSpeed);
0014af 91e0 04d9 	LDS  R30,_leftSpeed
0014b1 91f0 04da 	LDS  R31,_leftSpeed+1
0014b3 940e 1f32 	CALL SUBOPT_0x94
0014b5 93fa      	ST   -Y,R31
0014b6 93ea      	ST   -Y,R30
0014b7 940e 03e2 	CALL _setSpeed
                 ; 0001 0C18 
                 ; 0001 0C19 		}
                 ; 0001 0C1A #endif
                 ; 0001 0C1B 	} //end while(1)
0014b9 cf9b      	RJMP _0x20314
                 ; 0001 0C1C }
                 _0x20317:
0014ba cfff      	RJMP _0x20317
                 
                 	.DSEG
                 _0x2030C:
0003a0           	.BYTE 0x25
                 ;
                 
                 	.CSEG
                 _strcpyf:
0014bb 91e9          ld   r30,y+
0014bc 91f9          ld   r31,y+
0014bd 91a9          ld   r26,y+
0014be 91b9          ld   r27,y+
0014bf 01cd          movw r24,r26
                 strcpyf0:
0014c0 9005      	lpm  r0,z+
0014c1 920d          st   x+,r0
0014c2 2000          tst  r0
0014c3 f7e1          brne strcpyf0
0014c4 01fc          movw r30,r24
0014c5 9508          ret
                 _strlen:
0014c6 91a9          ld   r26,y+
0014c7 91b9          ld   r27,y+
0014c8 27ee          clr  r30
0014c9 27ff          clr  r31
                 strlen0:
0014ca 916d          ld   r22,x+
0014cb 2366          tst  r22
0014cc f011          breq strlen1
0014cd 9631          adiw r30,1
0014ce cffb          rjmp strlen0
                 strlen1:
0014cf 9508          ret
                 _strlenf:
0014d0 27aa          clr  r26
0014d1 27bb          clr  r27
0014d2 91e9          ld   r30,y+
0014d3 91f9          ld   r31,y+
                 strlenf0:
0014d4 9005      	lpm  r0,z+
0014d5 2000          tst  r0
0014d6 f011          breq strlenf1
0014d7 9611          adiw r26,1
0014d8 cffb          rjmp strlenf0
                 strlenf1:
0014d9 01fd          movw r30,r26
0014da 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
0014db 81e8      	LD   R30,Y
0014dc b9ef      	OUT  0xF,R30
                 _0x2020003:
0014dd 9b77      	SBIS 0xE,7
0014de cffe      	RJMP _0x2020003
0014df b1ef      	IN   R30,0xF
0014e0 9621      	ADIW R28,1
0014e1 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
0014e2 931a      	ST   -Y,R17
0014e3 930a      	ST   -Y,R16
0014e4 81aa      	LDD  R26,Y+2
0014e5 81bb      	LDD  R27,Y+2+1
0014e6 9612      	ADIW R26,2
0014e7 940e 2363 	CALL __GETW1P
0014e9 9730      	SBIW R30,0
0014ea f129      	BREQ _0x2040010
0014eb 81aa      	LDD  R26,Y+2
0014ec 81bb      	LDD  R27,Y+2+1
0014ed 9614      	ADIW R26,4
0014ee 940e 2363 	CALL __GETW1P
0014f0 018f      	MOVW R16,R30
0014f1 9730      	SBIW R30,0
0014f2 f061      	BREQ _0x2040012
                +
0014f3 3002     +CPI R16 , LOW ( 2 )
0014f4 e0e0     +LDI R30 , HIGH ( 2 )
0014f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0014f6 f0c0      	BRLO _0x2040013
0014f7 01f8      	MOVW R30,R16
0014f8 9731      	SBIW R30,1
0014f9 018f      	MOVW R16,R30
                +
0014fa 81aa     +LDD R26 , Y + 2
0014fb 81bb     +LDD R27 , Y + 2 + 1
0014fc 9614     +ADIW R26 , 4
0014fd 93ed     +ST X + , R30
0014fe 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0014ff 81aa      	LDD  R26,Y+2
001500 81bb      	LDD  R27,Y+2+1
001501 9612      	ADIW R26,2
001502 940e 1d8f 	CALL SUBOPT_0x4E
001504 9731      	SBIW R30,1
001505 81ac      	LDD  R26,Y+4
001506 83a0      	STD  Z+0,R26
001507 81aa      	LDD  R26,Y+2
001508 81bb      	LDD  R27,Y+2+1
001509 940e 2363 	CALL __GETW1P
00150b 23ff      	TST  R31
00150c f012      	BRMI _0x2040014
00150d 940e 1d8f 	CALL SUBOPT_0x4E
                 _0x2040014:
                 _0x2040013:
00150f c006      	RJMP _0x2040015
                 _0x2040010:
001510 81aa      	LDD  R26,Y+2
001511 81bb      	LDD  R27,Y+2+1
001512 efef      	LDI  R30,LOW(65535)
001513 efff      	LDI  R31,HIGH(65535)
001514 93ed      	ST   X+,R30
001515 93fc      	ST   X,R31
                 _0x2040015:
001516 8119      	LDD  R17,Y+1
001517 8108      	LDD  R16,Y+0
001518 9625      	ADIW R28,5
001519 9508      	RET
                 __ftoe_G102:
00151a 940e 1d95 	CALL SUBOPT_0x4F
00151c e8e0      	LDI  R30,LOW(128)
00151d 83ea      	STD  Y+2,R30
00151e e3ef      	LDI  R30,LOW(63)
00151f 83eb      	STD  Y+3,R30
001520 940e 23c0 	CALL __SAVELOCR4
001522 85ee      	LDD  R30,Y+14
001523 85ff      	LDD  R31,Y+14+1
001524 3fef      	CPI  R30,LOW(0xFFFF)
001525 efaf      	LDI  R26,HIGH(0xFFFF)
001526 07fa      	CPC  R31,R26
001527 f449      	BRNE _0x2040019
001528 85e8      	LDD  R30,Y+8
001529 85f9      	LDD  R31,Y+8+1
00152a 93fa      	ST   -Y,R31
00152b 93ea      	ST   -Y,R30
                +
00152c e3e4     +LDI R30 , LOW ( 2 * _0x2040000 + ( 0 ) )
00152d e0f4     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW1FN _0x2040000,0
00152e 940e 1f39 	CALL SUBOPT_0x95
001530 c0aa      	RJMP _0x20C000B
                 _0x2040019:
001531 3fef      	CPI  R30,LOW(0x7FFF)
001532 e7af      	LDI  R26,HIGH(0x7FFF)
001533 07fa      	CPC  R31,R26
001534 f449      	BRNE _0x2040018
001535 85e8      	LDD  R30,Y+8
001536 85f9      	LDD  R31,Y+8+1
001537 93fa      	ST   -Y,R31
001538 93ea      	ST   -Y,R30
                +
001539 e3e5     +LDI R30 , LOW ( 2 * _0x2040000 + ( 1 ) )
00153a e0f4     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW1FN _0x2040000,1
00153b 940e 1f39 	CALL SUBOPT_0x95
00153d c09d      	RJMP _0x20C000B
                 _0x2040018:
00153e 85ab      	LDD  R26,Y+11
00153f 30a7      	CPI  R26,LOW(0x7)
001540 f010      	BRLO _0x204001B
001541 e0e6      	LDI  R30,LOW(6)
001542 87eb      	STD  Y+11,R30
                 _0x204001B:
001543 851b      	LDD  R17,Y+11
                 _0x204001C:
001544 2fe1      	MOV  R30,R17
001545 5011      	SUBI R17,1
001546 30e0      	CPI  R30,0
001547 f019      	BREQ _0x204001E
001548 940e 1f3d 	CALL SUBOPT_0x96
00154a cff9      	RJMP _0x204001C
                 _0x204001E:
00154b 940e 1eac 	CALL SUBOPT_0x7E
00154d 940e 23ab 	CALL __CPD10
00154f f421      	BRNE _0x204001F
001550 e030      	LDI  R19,LOW(0)
001551 940e 1f3d 	CALL SUBOPT_0x96
001553 c028      	RJMP _0x2040020
                 _0x204001F:
001554 853b      	LDD  R19,Y+11
001555 940e 1f42 	CALL SUBOPT_0x97
001557 f009      	BREQ PC+2
001558 f410      	BRCC PC+3
001559 940c 1564 	JMP  _0x2040021
00155b 940e 1f3d 	CALL SUBOPT_0x96
                 _0x2040022:
00155d 940e 1f42 	CALL SUBOPT_0x97
00155f f018      	BRLO _0x2040024
001560 940e 1f47 	CALL SUBOPT_0x98
001562 cffa      	RJMP _0x2040022
                 _0x2040024:
001563 c00d      	RJMP _0x2040025
                 _0x2040021:
                 _0x2040026:
001564 940e 1f42 	CALL SUBOPT_0x97
001566 f440      	BRSH _0x2040028
001567 940e 1e89 	CALL SUBOPT_0x79
001569 940e 1f51 	CALL SUBOPT_0x99
00156b 940e 1c9a 	CALL SUBOPT_0x3B
00156d 5031      	SUBI R19,LOW(1)
00156e cff5      	RJMP _0x2040026
                 _0x2040028:
00156f 940e 1f3d 	CALL SUBOPT_0x96
                 _0x2040025:
001571 940e 1eac 	CALL SUBOPT_0x7E
001573 940e 1f55 	CALL SUBOPT_0x9A
001575 940e 1c9a 	CALL SUBOPT_0x3B
001577 940e 1f42 	CALL SUBOPT_0x97
001579 f010      	BRLO _0x2040029
00157a 940e 1f47 	CALL SUBOPT_0x98
                 _0x2040029:
                 _0x2040020:
00157c e010      	LDI  R17,LOW(0)
                 _0x204002A:
00157d 85eb      	LDD  R30,Y+11
00157e 17e1      	CP   R30,R17
00157f f178      	BRLO _0x204002C
001580 940e 1cbd 	CALL SUBOPT_0x40
001582 940e 1f5c 	CALL SUBOPT_0x9B
001584 940e 1f55 	CALL SUBOPT_0x9A
001586 940e 1f63 	CALL SUBOPT_0x9C
001588 940e 1caa 	CALL SUBOPT_0x3D
00158a 940e 1b27 	CALL SUBOPT_0x4
00158c 940e 1e89 	CALL SUBOPT_0x79
00158e 940e 21d1 	CALL __DIVF21
001590 940e 20c0 	CALL __CFD1U
001592 2f0e      	MOV  R16,R30
001593 940e 1f67 	CALL SUBOPT_0x9D
001595 2fe0      	MOV  R30,R16
001596 5de0      	SUBI R30,-LOW(48)
001597 93ec      	ST   X,R30
001598 2fe0      	MOV  R30,R16
001599 27ff      	CLR  R31
00159a 2766      	CLR  R22
00159b 2777      	CLR  R23
00159c 940e 20f9 	CALL __CDF1
00159e 940e 1f6e 	CALL SUBOPT_0x9E
0015a0 940e 1e89 	CALL SUBOPT_0x79
0015a2 940e 1f72 	CALL SUBOPT_0x9F
0015a4 940e 1c9a 	CALL SUBOPT_0x3B
0015a6 2fe1      	MOV  R30,R17
0015a7 5f1f      	SUBI R17,-1
0015a8 30e0      	CPI  R30,0
0015a9 f699      	BRNE _0x204002A
0015aa 940e 1f67 	CALL SUBOPT_0x9D
0015ac e2ee      	LDI  R30,LOW(46)
0015ad 93ec      	ST   X,R30
0015ae cfce      	RJMP _0x204002A
                 _0x204002C:
0015af 940e 1f77 	CALL SUBOPT_0xA0
0015b1 9731      	SBIW R30,1
0015b2 85aa      	LDD  R26,Y+10
0015b3 83a0      	STD  Z+0,R26
0015b4 3030      	CPI  R19,0
0015b5 f42c      	BRGE _0x204002E
0015b6 9531      	NEG  R19
0015b7 85a8      	LDD  R26,Y+8
0015b8 85b9      	LDD  R27,Y+8+1
0015b9 e2ed      	LDI  R30,LOW(45)
0015ba c003      	RJMP _0x204010E
                 _0x204002E:
0015bb 85a8      	LDD  R26,Y+8
0015bc 85b9      	LDD  R27,Y+8+1
0015bd e2eb      	LDI  R30,LOW(43)
                 _0x204010E:
0015be 93ec      	ST   X,R30
0015bf 940e 1f77 	CALL SUBOPT_0xA0
0015c1 940e 1f77 	CALL SUBOPT_0xA0
0015c3 9731      	SBIW R30,1
0015c4 01bf      	MOVW R22,R30
0015c5 2fa3      	MOV  R26,R19
0015c6 e0ea      	LDI  R30,LOW(10)
0015c7 940e 22dc 	CALL __DIVB21
0015c9 5de0      	SUBI R30,-LOW(48)
0015ca 01db      	MOVW R26,R22
0015cb 93ec      	ST   X,R30
0015cc 940e 1f77 	CALL SUBOPT_0xA0
0015ce 9731      	SBIW R30,1
0015cf 01bf      	MOVW R22,R30
0015d0 2fa3      	MOV  R26,R19
0015d1 e0ea      	LDI  R30,LOW(10)
0015d2 940e 2323 	CALL __MODB21
0015d4 5de0      	SUBI R30,-LOW(48)
0015d5 01db      	MOVW R26,R22
0015d6 93ec      	ST   X,R30
0015d7 85a8      	LDD  R26,Y+8
0015d8 85b9      	LDD  R27,Y+8+1
0015d9 e0e0      	LDI  R30,LOW(0)
0015da 93ec      	ST   X,R30
                 _0x20C000B:
0015db 940e 23c7 	CALL __LOADLOCR4
                 _0x20C000C:
0015dd 9660      	ADIW R28,16
0015de 9508      	RET
                 __print_G102:
0015df 97ef      	SBIW R28,63
0015e0 9761      	SBIW R28,17
0015e1 940e 23be 	CALL __SAVELOCR6
0015e3 e010      	LDI  R17,0
                +
0015e4 01fe     +MOVW R30 , R28
0015e5 5ae8     +SUBI R30 , LOW ( - 88 )
0015e6 4fff     +SBCI R31 , HIGH ( - 88 )
0015e7 9001     +LD R0 , Z +
0015e8 81f0     +LD R31 , Z
0015e9 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0015ea 87e8      	STD  Y+8,R30
0015eb 87f9      	STD  Y+8+1,R31
                +
0015ec 01fe     +MOVW R30 , R28
0015ed 5aea     +SUBI R30 , LOW ( - 86 )
0015ee 4fff     +SBCI R31 , HIGH ( - 86 )
0015ef 9001     +LD R0 , Z +
0015f0 81f0     +LD R31 , Z
0015f1 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0015f2 83ee      	STD  Y+6,R30
0015f3 83ff      	STD  Y+6+1,R31
0015f4 81ae      	LDD  R26,Y+6
0015f5 81bf      	LDD  R27,Y+6+1
0015f6 e0e0      	LDI  R30,LOW(0)
0015f7 e0f0      	LDI  R31,HIGH(0)
0015f8 93ed      	ST   X+,R30
0015f9 93fc      	ST   X,R31
                 _0x2040030:
0015fa 01de      	MOVW R26,R28
0015fb 5aa4      	SUBI R26,LOW(-(92))
0015fc 4fbf      	SBCI R27,HIGH(-(92))
0015fd 940e 1d8f 	CALL SUBOPT_0x4E
0015ff 9731      	SBIW R30,1
001600 91e4      	LPM  R30,Z
001601 2f2e      	MOV  R18,R30
001602 30e0      	CPI  R30,0
001603 f411      	BRNE PC+3
001604 940c 17e9 	JMP _0x2040032
001606 2fe1      	MOV  R30,R17
001607 30e0      	CPI  R30,0
001608 f439      	BRNE _0x2040036
001609 3225      	CPI  R18,37
00160a f411      	BRNE _0x2040037
00160b e011      	LDI  R17,LOW(1)
00160c c002      	RJMP _0x2040038
                 _0x2040037:
00160d 940e 1f7d 	CALL SUBOPT_0xA1
                 _0x2040038:
00160f c1d8      	RJMP _0x2040035
                 _0x2040036:
001610 30e1      	CPI  R30,LOW(0x1)
001611 f4c1      	BRNE _0x2040039
001612 3225      	CPI  R18,37
001613 f419      	BRNE _0x204003A
001614 940e 1f7d 	CALL SUBOPT_0xA1
001616 c1d0      	RJMP _0x204010F
                 _0x204003A:
001617 e012      	LDI  R17,LOW(2)
001618 e0e0      	LDI  R30,LOW(0)
001619 8bed      	STD  Y+21,R30
00161a e000      	LDI  R16,LOW(0)
00161b 322d      	CPI  R18,45
00161c f411      	BRNE _0x204003B
00161d e001      	LDI  R16,LOW(1)
00161e c1c9      	RJMP _0x2040035
                 _0x204003B:
00161f 322b      	CPI  R18,43
001620 f419      	BRNE _0x204003C
001621 e2eb      	LDI  R30,LOW(43)
001622 8bed      	STD  Y+21,R30
001623 c1c4      	RJMP _0x2040035
                 _0x204003C:
001624 3220      	CPI  R18,32
001625 f419      	BRNE _0x204003D
001626 e2e0      	LDI  R30,LOW(32)
001627 8bed      	STD  Y+21,R30
001628 c1bf      	RJMP _0x2040035
                 _0x204003D:
001629 c002      	RJMP _0x204003E
                 _0x2040039:
00162a 30e2      	CPI  R30,LOW(0x2)
00162b f439      	BRNE _0x204003F
                 _0x204003E:
00162c e050      	LDI  R21,LOW(0)
00162d e013      	LDI  R17,LOW(3)
00162e 3320      	CPI  R18,48
00162f f411      	BRNE _0x2040040
001630 6800      	ORI  R16,LOW(128)
001631 c1b6      	RJMP _0x2040035
                 _0x2040040:
001632 c002      	RJMP _0x2040041
                 _0x204003F:
001633 30e3      	CPI  R30,LOW(0x3)
001634 f491      	BRNE _0x2040042
                 _0x2040041:
001635 3320      	CPI  R18,48
001636 f010      	BRLO _0x2040044
001637 332a      	CPI  R18,58
001638 f008      	BRLO _0x2040045
                 _0x2040044:
001639 c007      	RJMP _0x2040043
                 _0x2040045:
00163a e0aa      	LDI  R26,LOW(10)
00163b 9f5a      	MUL  R21,R26
00163c 2d50      	MOV  R21,R0
00163d 2fe2      	MOV  R30,R18
00163e 53e0      	SUBI R30,LOW(48)
00163f 0f5e      	ADD  R21,R30
001640 c1a7      	RJMP _0x2040035
                 _0x2040043:
001641 e040      	LDI  R20,LOW(0)
001642 322e      	CPI  R18,46
001643 f411      	BRNE _0x2040046
001644 e014      	LDI  R17,LOW(4)
001645 c1a2      	RJMP _0x2040035
                 _0x2040046:
001646 c00f      	RJMP _0x2040047
                 _0x2040042:
001647 30e4      	CPI  R30,LOW(0x4)
001648 f499      	BRNE _0x2040049
001649 3320      	CPI  R18,48
00164a f010      	BRLO _0x204004B
00164b 332a      	CPI  R18,58
00164c f008      	BRLO _0x204004C
                 _0x204004B:
00164d c008      	RJMP _0x204004A
                 _0x204004C:
00164e 6200      	ORI  R16,LOW(32)
00164f e0aa      	LDI  R26,LOW(10)
001650 9f4a      	MUL  R20,R26
001651 2d40      	MOV  R20,R0
001652 2fe2      	MOV  R30,R18
001653 53e0      	SUBI R30,LOW(48)
001654 0f4e      	ADD  R20,R30
001655 c192      	RJMP _0x2040035
                 _0x204004A:
                 _0x2040047:
001656 362c      	CPI  R18,108
001657 f419      	BRNE _0x204004D
001658 6002      	ORI  R16,LOW(2)
001659 e015      	LDI  R17,LOW(5)
00165a c18d      	RJMP _0x2040035
                 _0x204004D:
00165b c004      	RJMP _0x204004E
                 _0x2040049:
00165c 30e5      	CPI  R30,LOW(0x5)
00165d f011      	BREQ PC+3
00165e 940c 17e8 	JMP _0x2040035
                 _0x204004E:
001660 2fe2      	MOV  R30,R18
001661 36e3      	CPI  R30,LOW(0x63)
001662 f459      	BRNE _0x2040053
001663 940e 1f86 	CALL SUBOPT_0xA2
001665 940e 1f8d 	CALL SUBOPT_0xA3
001667 940e 1f86 	CALL SUBOPT_0xA2
001669 81a4      	LDD  R26,Z+4
00166a 93aa      	ST   -Y,R26
00166b 940e 1f94 	CALL SUBOPT_0xA4
00166d c179      	RJMP _0x2040054
                 _0x2040053:
00166e 34e5      	CPI  R30,LOW(0x45)
00166f f011      	BREQ _0x2040057
001670 36e5      	CPI  R30,LOW(0x65)
001671 f409      	BRNE _0x2040058
                 _0x2040057:
001672 c004      	RJMP _0x2040059
                 _0x2040058:
001673 36e6      	CPI  R30,LOW(0x66)
001674 f011      	BREQ PC+3
001675 940c 16c1 	JMP _0x204005A
                 _0x2040059:
001677 01fe      	MOVW R30,R28
001678 9676      	ADIW R30,22
001679 87ee      	STD  Y+14,R30
00167a 87ff      	STD  Y+14+1,R31
00167b 940e 1f9c 	CALL SUBOPT_0xA5
00167d 940e 2367 	CALL __GETD1P
00167f 940e 1fa3 	CALL SUBOPT_0xA6
001681 940e 1fa8 	CALL SUBOPT_0xA7
001683 85ad      	LDD  R26,Y+13
001684 23aa      	TST  R26
001685 f022      	BRMI _0x204005B
001686 89ad      	LDD  R26,Y+21
001687 32ab      	CPI  R26,LOW(0x2B)
001688 f049      	BREQ _0x204005D
001689 c017      	RJMP _0x204005E
                 _0x204005B:
00168a 940e 1faa 	CALL SUBOPT_0xA8
00168c 940e 208d 	CALL __ANEGF1
00168e 940e 1fa3 	CALL SUBOPT_0xA6
001690 e2ed      	LDI  R30,LOW(45)
001691 8bed      	STD  Y+21,R30
                 _0x204005D:
001692 ff07      	SBRS R16,7
001693 c005      	RJMP _0x204005F
001694 89ed      	LDD  R30,Y+21
001695 93ea      	ST   -Y,R30
001696 940e 1f94 	CALL SUBOPT_0xA4
001698 c008      	RJMP _0x2040060
                 _0x204005F:
001699 85ee      	LDD  R30,Y+14
00169a 85ff      	LDD  R31,Y+14+1
00169b 9631      	ADIW R30,1
00169c 87ee      	STD  Y+14,R30
00169d 87ff      	STD  Y+14+1,R31
00169e 9731      	SBIW R30,1
00169f 89ad      	LDD  R26,Y+21
0016a0 83a0      	STD  Z+0,R26
                 _0x2040060:
                 _0x204005E:
0016a1 ff05      	SBRS R16,5
0016a2 e046      	LDI  R20,LOW(6)
0016a3 3626      	CPI  R18,102
0016a4 f461      	BRNE _0x2040062
0016a5 940e 1faa 	CALL SUBOPT_0xA8
0016a7 940e 237c 	CALL __PUTPARD1
0016a9 934a      	ST   -Y,R20
0016aa 89eb      	LDD  R30,Y+19
0016ab 89fc      	LDD  R31,Y+19+1
0016ac 93fa      	ST   -Y,R31
0016ad 93ea      	ST   -Y,R30
0016ae 940e 1a6b 	CALL _ftoa
0016b0 c00b      	RJMP _0x2040063
                 _0x2040062:
0016b1 940e 1faa 	CALL SUBOPT_0xA8
0016b3 940e 237c 	CALL __PUTPARD1
0016b5 934a      	ST   -Y,R20
0016b6 932a      	ST   -Y,R18
0016b7 89ec      	LDD  R30,Y+20
0016b8 89fd      	LDD  R31,Y+20+1
0016b9 93fa      	ST   -Y,R31
0016ba 93ea      	ST   -Y,R30
0016bb de5e      	RCALL __ftoe_G102
                 _0x2040063:
0016bc 01fe      	MOVW R30,R28
0016bd 9676      	ADIW R30,22
0016be 940e 1faf 	CALL SUBOPT_0xA9
0016c0 c01e      	RJMP _0x2040064
                 _0x204005A:
0016c1 37e3      	CPI  R30,LOW(0x73)
0016c2 f439      	BRNE _0x2040066
0016c3 940e 1fa8 	CALL SUBOPT_0xA7
0016c5 940e 1fb7 	CALL SUBOPT_0xAA
0016c7 940e 1faf 	CALL SUBOPT_0xA9
0016c9 c00e      	RJMP _0x2040067
                 _0x2040066:
0016ca 37e0      	CPI  R30,LOW(0x70)
0016cb f4c1      	BRNE _0x2040069
0016cc 940e 1fa8 	CALL SUBOPT_0xA7
0016ce 940e 1fb7 	CALL SUBOPT_0xAA
0016d0 87ee      	STD  Y+14,R30
0016d1 87ff      	STD  Y+14+1,R31
0016d2 93fa      	ST   -Y,R31
0016d3 93ea      	ST   -Y,R30
0016d4 940e 14d0 	CALL _strlenf
0016d6 2f1e      	MOV  R17,R30
0016d7 6008      	ORI  R16,LOW(8)
                 _0x2040067:
0016d8 770f      	ANDI R16,LOW(127)
0016d9 3040      	CPI  R20,0
0016da f011      	BREQ _0x204006B
0016db 1741      	CP   R20,R17
0016dc f008      	BRLO _0x204006C
                 _0x204006B:
0016dd c001      	RJMP _0x204006A
                 _0x204006C:
0016de 2f14      	MOV  R17,R20
                 _0x204006A:
                 _0x2040064:
0016df e040      	LDI  R20,LOW(0)
0016e0 e0e0      	LDI  R30,LOW(0)
0016e1 8bec      	STD  Y+20,R30
0016e2 e030      	LDI  R19,LOW(0)
0016e3 c06e      	RJMP _0x204006D
                 _0x2040069:
0016e4 36e4      	CPI  R30,LOW(0x64)
0016e5 f011      	BREQ _0x2040070
0016e6 36e9      	CPI  R30,LOW(0x69)
0016e7 f411      	BRNE _0x2040071
                 _0x2040070:
0016e8 6004      	ORI  R16,LOW(4)
0016e9 c002      	RJMP _0x2040072
                 _0x2040071:
0016ea 37e5      	CPI  R30,LOW(0x75)
0016eb f4a1      	BRNE _0x2040073
                 _0x2040072:
0016ec e0ea      	LDI  R30,LOW(10)
0016ed 8bec      	STD  Y+20,R30
0016ee ff01      	SBRS R16,1
0016ef c008      	RJMP _0x2040074
                +
0016f0 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0016f1 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0016f2 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0016f3 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0016f4 940e 1c8c 	CALL SUBOPT_0x38
0016f6 e01a      	LDI  R17,LOW(10)
0016f7 c023      	RJMP _0x2040075
                 _0x2040074:
                +
0016f8 e1e0     +LDI R30 , LOW ( 0x2710 )
0016f9 e2f7     +LDI R31 , HIGH ( 0x2710 )
0016fa e060     +LDI R22 , BYTE3 ( 0x2710 )
0016fb e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0016fc 940e 1c8c 	CALL SUBOPT_0x38
0016fe e015      	LDI  R17,LOW(5)
0016ff c01b      	RJMP _0x2040075
                 _0x2040073:
001700 35e8      	CPI  R30,LOW(0x58)
001701 f411      	BRNE _0x2040077
001702 6008      	ORI  R16,LOW(8)
001703 c004      	RJMP _0x2040078
                 _0x2040077:
001704 37e8      	CPI  R30,LOW(0x78)
001705 f011      	BREQ PC+3
001706 940c 17e7 	JMP _0x20400B6
                 _0x2040078:
001708 e1e0      	LDI  R30,LOW(16)
001709 8bec      	STD  Y+20,R30
00170a ff01      	SBRS R16,1
00170b c008      	RJMP _0x204007A
                +
00170c e0e0     +LDI R30 , LOW ( 0x10000000 )
00170d e0f0     +LDI R31 , HIGH ( 0x10000000 )
00170e e060     +LDI R22 , BYTE3 ( 0x10000000 )
00170f e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
001710 940e 1c8c 	CALL SUBOPT_0x38
001712 e018      	LDI  R17,LOW(8)
001713 c007      	RJMP _0x2040075
                 _0x204007A:
                +
001714 e0e0     +LDI R30 , LOW ( 0x1000 )
001715 e1f0     +LDI R31 , HIGH ( 0x1000 )
001716 e060     +LDI R22 , BYTE3 ( 0x1000 )
001717 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
001718 940e 1c8c 	CALL SUBOPT_0x38
00171a e014      	LDI  R17,LOW(4)
                 _0x2040075:
00171b 3040      	CPI  R20,0
00171c f011      	BREQ _0x204007B
00171d 770f      	ANDI R16,LOW(127)
00171e c001      	RJMP _0x204007C
                 _0x204007B:
00171f e041      	LDI  R20,LOW(1)
                 _0x204007C:
001720 ff01      	SBRS R16,1
001721 c008      	RJMP _0x204007D
001722 940e 1fa8 	CALL SUBOPT_0xA7
001724 940e 1f9c 	CALL SUBOPT_0xA5
001726 9614      	ADIW R26,4
001727 940e 2367 	CALL __GETD1P
001729 c00f      	RJMP _0x2040110
                 _0x204007D:
00172a ff02      	SBRS R16,2
00172b c007      	RJMP _0x204007F
00172c 940e 1fa8 	CALL SUBOPT_0xA7
00172e 940e 1fb7 	CALL SUBOPT_0xAA
001730 940e 228c 	CALL __CWD1
001732 c006      	RJMP _0x2040110
                 _0x204007F:
001733 940e 1fa8 	CALL SUBOPT_0xA7
001735 940e 1fb7 	CALL SUBOPT_0xAA
001737 2766      	CLR  R22
001738 2777      	CLR  R23
                 _0x2040110:
                +
001739 87ea     +STD Y + 10 , R30
00173a 87fb     +STD Y + 10 + 1 , R31
00173b 876c     +STD Y + 10 + 2 , R22
00173c 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00173d ff02      	SBRS R16,2
00173e c012      	RJMP _0x2040081
00173f 85ad      	LDD  R26,Y+13
001740 23aa      	TST  R26
001741 f442      	BRPL _0x2040082
001742 940e 1faa 	CALL SUBOPT_0xA8
001744 940e 227e 	CALL __ANEGD1
001746 940e 1fa3 	CALL SUBOPT_0xA6
001748 e2ed      	LDI  R30,LOW(45)
001749 8bed      	STD  Y+21,R30
                 _0x2040082:
00174a 89ed      	LDD  R30,Y+21
00174b 30e0      	CPI  R30,0
00174c f019      	BREQ _0x2040083
00174d 5f1f      	SUBI R17,-LOW(1)
00174e 5f4f      	SUBI R20,-LOW(1)
00174f c001      	RJMP _0x2040084
                 _0x2040083:
001750 7f0b      	ANDI R16,LOW(251)
                 _0x2040084:
                 _0x2040081:
001751 2f34      	MOV  R19,R20
                 _0x204006D:
001752 fd00      	SBRC R16,0
001753 c014      	RJMP _0x2040085
                 _0x2040086:
001754 1715      	CP   R17,R21
001755 f410      	BRSH _0x2040089
001756 1735      	CP   R19,R21
001757 f008      	BRLO _0x204008A
                 _0x2040089:
001758 c00f      	RJMP _0x2040088
                 _0x204008A:
001759 ff07      	SBRS R16,7
00175a c008      	RJMP _0x204008B
00175b ff02      	SBRS R16,2
00175c c004      	RJMP _0x204008C
00175d 7f0b      	ANDI R16,LOW(251)
00175e 892d      	LDD  R18,Y+21
00175f 5011      	SUBI R17,LOW(1)
001760 c001      	RJMP _0x204008D
                 _0x204008C:
001761 e320      	LDI  R18,LOW(48)
                 _0x204008D:
001762 c001      	RJMP _0x204008E
                 _0x204008B:
001763 e220      	LDI  R18,LOW(32)
                 _0x204008E:
001764 940e 1f7d 	CALL SUBOPT_0xA1
001766 5051      	SUBI R21,LOW(1)
001767 cfec      	RJMP _0x2040086
                 _0x2040088:
                 _0x2040085:
                 _0x204008F:
001768 1714      	CP   R17,R20
001769 f490      	BRSH _0x2040091
00176a 6100      	ORI  R16,LOW(16)
00176b ff02      	SBRS R16,2
00176c c006      	RJMP _0x2040092
00176d 940e 1fbc 	CALL SUBOPT_0xAB
00176f f009      	BREQ _0x2040093
001770 5051      	SUBI R21,LOW(1)
                 _0x2040093:
001771 5011      	SUBI R17,LOW(1)
001772 5041      	SUBI R20,LOW(1)
                 _0x2040092:
001773 e3e0      	LDI  R30,LOW(48)
001774 93ea      	ST   -Y,R30
001775 940e 1f94 	CALL SUBOPT_0xA4
001777 3050      	CPI  R21,0
001778 f009      	BREQ _0x2040094
001779 5051      	SUBI R21,LOW(1)
                 _0x2040094:
00177a 5041      	SUBI R20,LOW(1)
00177b cfec      	RJMP _0x204008F
                 _0x2040091:
00177c 2f31      	MOV  R19,R17
00177d 89ec      	LDD  R30,Y+20
00177e 30e0      	CPI  R30,0
00177f f4b9      	BRNE _0x2040095
                 _0x2040096:
001780 3030      	CPI  R19,0
001781 f0a1      	BREQ _0x2040098
001782 ff03      	SBRS R16,3
001783 c006      	RJMP _0x2040099
001784 85ee      	LDD  R30,Y+14
001785 85ff      	LDD  R31,Y+14+1
001786 9125      	LPM  R18,Z+
001787 87ee      	STD  Y+14,R30
001788 87ff      	STD  Y+14+1,R31
001789 c005      	RJMP _0x204009A
                 _0x2040099:
00178a 85ae      	LDD  R26,Y+14
00178b 85bf      	LDD  R27,Y+14+1
00178c 912d      	LD   R18,X+
00178d 87ae      	STD  Y+14,R26
00178e 87bf      	STD  Y+14+1,R27
                 _0x204009A:
00178f 940e 1f7d 	CALL SUBOPT_0xA1
001791 3050      	CPI  R21,0
001792 f009      	BREQ _0x204009B
001793 5051      	SUBI R21,LOW(1)
                 _0x204009B:
001794 5031      	SUBI R19,LOW(1)
001795 cfea      	RJMP _0x2040096
                 _0x2040098:
001796 c046      	RJMP _0x204009C
                 _0x2040095:
                 _0x204009E:
001797 940e 1fd0 	CALL SUBOPT_0xAC
001799 940e 22f9 	CALL __DIVD21U
00179b 2f2e      	MOV  R18,R30
00179c 302a      	CPI  R18,10
00179d f030      	BRLO _0x20400A0
00179e ff03      	SBRS R16,3
00179f c002      	RJMP _0x20400A1
0017a0 5c29      	SUBI R18,-LOW(55)
0017a1 c001      	RJMP _0x20400A2
                 _0x20400A1:
0017a2 5a29      	SUBI R18,-LOW(87)
                 _0x20400A2:
0017a3 c001      	RJMP _0x20400A3
                 _0x20400A0:
0017a4 5d20      	SUBI R18,-LOW(48)
                 _0x20400A3:
0017a5 fd04      	SBRC R16,4
0017a6 c01a      	RJMP _0x20400A5
0017a7 3321      	CPI  R18,49
0017a8 f428      	BRSH _0x20400A7
0017a9 940e 1e97 	CALL SUBOPT_0x7B
0017ab 940e 1e81 	CALL SUBOPT_0x78
0017ad f409      	BRNE _0x20400A6
                 _0x20400A7:
0017ae c00b      	RJMP _0x20400A9
                 _0x20400A6:
0017af 1743      	CP   R20,R19
0017b0 f440      	BRSH _0x2040111
0017b1 1753      	CP   R21,R19
0017b2 f010      	BRLO _0x20400AC
0017b3 ff00      	SBRS R16,0
0017b4 c001      	RJMP _0x20400AD
                 _0x20400AC:
0017b5 c010      	RJMP _0x20400AB
                 _0x20400AD:
0017b6 e220      	LDI  R18,LOW(32)
0017b7 ff07      	SBRS R16,7
0017b8 c008      	RJMP _0x20400AE
                 _0x2040111:
0017b9 e320      	LDI  R18,LOW(48)
                 _0x20400A9:
0017ba 6100      	ORI  R16,LOW(16)
0017bb ff02      	SBRS R16,2
0017bc c004      	RJMP _0x20400AF
0017bd 940e 1fbc 	CALL SUBOPT_0xAB
0017bf f009      	BREQ _0x20400B0
0017c0 5051      	SUBI R21,LOW(1)
                 _0x20400B0:
                 _0x20400AF:
                 _0x20400AE:
                 _0x20400A5:
0017c1 940e 1f7d 	CALL SUBOPT_0xA1
0017c3 3050      	CPI  R21,0
0017c4 f009      	BREQ _0x20400B1
0017c5 5051      	SUBI R21,LOW(1)
                 _0x20400B1:
                 _0x20400AB:
0017c6 5031      	SUBI R19,LOW(1)
0017c7 940e 1fd0 	CALL SUBOPT_0xAC
0017c9 940e 2332 	CALL __MODD21U
0017cb 940e 1fa3 	CALL SUBOPT_0xA6
0017cd 89ec      	LDD  R30,Y+20
0017ce 940e 1e97 	CALL SUBOPT_0x7B
0017d0 27ff      	CLR  R31
0017d1 2766      	CLR  R22
0017d2 2777      	CLR  R23
0017d3 940e 22f9 	CALL __DIVD21U
0017d5 940e 1c8c 	CALL SUBOPT_0x38
0017d7 940e 1caf 	CALL SUBOPT_0x3E
0017d9 940e 23ab 	CALL __CPD10
0017db f009      	BREQ _0x204009F
0017dc cfba      	RJMP _0x204009E
                 _0x204009F:
                 _0x204009C:
0017dd ff00      	SBRS R16,0
0017de c008      	RJMP _0x20400B2
                 _0x20400B3:
0017df 3050      	CPI  R21,0
0017e0 f031      	BREQ _0x20400B5
0017e1 5051      	SUBI R21,LOW(1)
0017e2 e2e0      	LDI  R30,LOW(32)
0017e3 93ea      	ST   -Y,R30
0017e4 940e 1f94 	CALL SUBOPT_0xA4
0017e6 cff8      	RJMP _0x20400B3
                 _0x20400B5:
                 _0x20400B2:
                 _0x20400B6:
                 _0x2040054:
                 _0x204010F:
0017e7 e010      	LDI  R17,LOW(0)
                 _0x2040035:
0017e8 ce11      	RJMP _0x2040030
                 _0x2040032:
0017e9 81ae      	LDD  R26,Y+6
0017ea 81bf      	LDD  R27,Y+6+1
0017eb 940e 2363 	CALL __GETW1P
0017ed 940e 23c5 	CALL __LOADLOCR6
0017ef 96ef      	ADIW R28,63
0017f0 966f      	ADIW R28,31
0017f1 9508      	RET
                 _sprintf:
0017f2 92ff      	PUSH R15
0017f3 2ef8      	MOV  R15,R24
0017f4 9726      	SBIW R28,6
0017f5 940e 23c0 	CALL __SAVELOCR4
0017f7 940e 1fd6 	CALL SUBOPT_0xAD
0017f9 9730      	SBIW R30,0
0017fa f419      	BRNE _0x20400B7
0017fb efef      	LDI  R30,LOW(65535)
0017fc efff      	LDI  R31,HIGH(65535)
0017fd c025      	RJMP _0x20C000A
                 _0x20400B7:
0017fe 01de      	MOVW R26,R28
0017ff 9616      	ADIW R26,6
001800 940e 226c 	CALL __ADDW2R15
001802 018d      	MOVW R16,R26
001803 940e 1fd6 	CALL SUBOPT_0xAD
001805 83ee      	STD  Y+6,R30
001806 83ff      	STD  Y+6+1,R31
001807 e0e0      	LDI  R30,LOW(0)
001808 87e8      	STD  Y+8,R30
001809 87e9      	STD  Y+8+1,R30
00180a 01de      	MOVW R26,R28
00180b 961a      	ADIW R26,10
00180c 940e 226c 	CALL __ADDW2R15
00180e 940e 2363 	CALL __GETW1P
001810 93fa      	ST   -Y,R31
001811 93ea      	ST   -Y,R30
001812 931a      	ST   -Y,R17
001813 930a      	ST   -Y,R16
001814 eee2      	LDI  R30,LOW(_put_buff_G102)
001815 e1f4      	LDI  R31,HIGH(_put_buff_G102)
001816 93fa      	ST   -Y,R31
001817 93ea      	ST   -Y,R30
001818 01fe      	MOVW R30,R28
001819 963a      	ADIW R30,10
00181a 93fa      	ST   -Y,R31
00181b 93ea      	ST   -Y,R30
00181c ddc2      	RCALL __print_G102
00181d 019f      	MOVW R18,R30
00181e 81ae      	LDD  R26,Y+6
00181f 81bf      	LDD  R27,Y+6+1
001820 e0e0      	LDI  R30,LOW(0)
001821 93ec      	ST   X,R30
001822 01f9      	MOVW R30,R18
                 _0x20C000A:
001823 940e 23c7 	CALL __LOADLOCR4
001825 962a      	ADIW R28,10
001826 90ff      	POP  R15
001827 9508      	RET
                 
                 	.CSEG
                 _ftrunc:
001828 817b         ldd  r23,y+3
001829 816a         ldd  r22,y+2
00182a 81f9         ldd  r31,y+1
00182b 81e8         ld   r30,y
00182c fb77         bst  r23,7
00182d 0f77         lsl  r23
00182e fd67         sbrc r22,7
00182f 6071         sbr  r23,1
001830 2f97         mov  r25,r23
001831 579e         subi r25,0x7e
001832 f081         breq __ftrunc0
001833 f078         brcs __ftrunc0
001834 3198         cpi  r25,24
001835 f490         brsh __ftrunc1
001836 27aa         clr  r26
001837 27bb         clr  r27
001838 2788         clr  r24
                 __ftrunc2:
001839 9408         sec
00183a 9587         ror  r24
00183b 95b7         ror  r27
00183c 95a7         ror  r26
00183d 959a         dec  r25
00183e f7d1         brne __ftrunc2
00183f 23ea         and  r30,r26
001840 23fb         and  r31,r27
001841 2368         and  r22,r24
001842 c005         rjmp __ftrunc1
                 __ftrunc0:
001843 94e8         clt
001844 2777         clr  r23
001845 27ee         clr  r30
001846 27ff         clr  r31
001847 2766         clr  r22
                 __ftrunc1:
001848 776f         cbr  r22,0x80
001849 9576         lsr  r23
00184a f408         brcc __ftrunc3
00184b 6860         sbr  r22,0x80
                 __ftrunc3:
00184c f977         bld  r23,7
00184d 91a9         ld   r26,y+
00184e 91b9         ld   r27,y+
00184f 9189         ld   r24,y+
001850 9199         ld   r25,y+
001851 17ea         cp   r30,r26
001852 07fb         cpc  r31,r27
001853 0768         cpc  r22,r24
001854 0779         cpc  r23,r25
001855 fb97         bst  r25,7
001856 9508         ret
                 _floor:
001857 940e 1fdd 	CALL SUBOPT_0xAE
001859 940e 1fe0 	CALL SUBOPT_0xAF
00185b f419          brne __floor1
                 __floor0:
00185c 940e 1fdd 	CALL SUBOPT_0xAE
00185e c1bf      	RJMP _0x20C0004
                 __floor1:
00185f f7e6          brtc __floor0
001860 940e 1fe5 	CALL SUBOPT_0xB0
001862 c1b9      	RJMP _0x20C0006
                 _ceil:
001863 940e 1fdd 	CALL SUBOPT_0xAE
001865 940e 1fe0 	CALL SUBOPT_0xAF
001867 f419          brne __ceil1
                 __ceil0:
001868 940e 1fdd 	CALL SUBOPT_0xAE
00186a c1b3      	RJMP _0x20C0004
                 __ceil1:
00186b f3e6          brts __ceil0
00186c 940e 1fe5 	CALL SUBOPT_0xB0
00186e 940e 2133 	CALL __ADDF12
001870 c1ad      	RJMP _0x20C0004
                 _fmod:
001871 9724      	SBIW R28,4
001872 940e 1b27 	CALL SUBOPT_0x4
001874 940e 23ab 	CALL __CPD10
001876 f429      	BRNE _0x2060005
                +
001877 e0e0     +LDI R30 , LOW ( 0x0 )
001878 e0f0     +LDI R31 , HIGH ( 0x0 )
001879 e060     +LDI R22 , BYTE3 ( 0x0 )
00187a e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
00187b c1ed      	RJMP _0x20C0003
                 _0x2060005:
00187c 940e 1feb 	CALL SUBOPT_0xB1
00187e 940e 1fdd 	CALL SUBOPT_0xAE
001880 940e 23ab 	CALL __CPD10
001882 f429      	BRNE _0x2060006
                +
001883 e0e0     +LDI R30 , LOW ( 0x0 )
001884 e0f0     +LDI R31 , HIGH ( 0x0 )
001885 e060     +LDI R22 , BYTE3 ( 0x0 )
001886 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001887 c1e1      	RJMP _0x20C0003
                 _0x2060006:
001888 940e 1cce 	CALL SUBOPT_0x43
00188a 940e 23b3 	CALL __CPD02
00188c f42c      	BRGE _0x2060007
00188d 940e 1fdd 	CALL SUBOPT_0xAE
00188f 940e 1f63 	CALL SUBOPT_0x9C
001891 c003      	RJMP _0x2060033
                 _0x2060007:
001892 940e 1ff3 	CALL SUBOPT_0xB2
001894 dfce      	RCALL _ceil
                 _0x2060033:
001895 940e 2377 	CALL __PUTD1S0
001897 940e 1fdd 	CALL SUBOPT_0xAE
001899 940e 1f6e 	CALL SUBOPT_0x9E
                +
00189b 85a8     +LDD R26 , Y + 8
00189c 85b9     +LDD R27 , Y + 8 + 1
00189d 858a     +LDD R24 , Y + 8 + 2
00189e 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
00189f 940e 1f72 	CALL SUBOPT_0x9F
0018a1 c1c7      	RJMP _0x20C0003
                 _sin:
0018a2 940e 1ff7 	CALL SUBOPT_0xB3
                +
0018a4 e8e3     +LDI R30 , LOW ( 0x3E22F983 )
0018a5 eff9     +LDI R31 , HIGH ( 0x3E22F983 )
0018a6 e262     +LDI R22 , BYTE3 ( 0x3E22F983 )
0018a7 e37e     +LDI R23 , BYTE4 ( 0x3E22F983 )
                 	__GETD1N 0x3E22F983
0018a8 940e 2183 	CALL __MULF12
0018aa 940e 1fff 	CALL SUBOPT_0xB4
0018ac 940e 2004 	CALL SUBOPT_0xB5
0018ae 940e 1f63 	CALL SUBOPT_0x9C
0018b0 940e 2009 	CALL SUBOPT_0xB6
0018b2 940e 1f72 	CALL SUBOPT_0x9F
0018b4 940e 1fff 	CALL SUBOPT_0xB4
0018b6 940e 200e 	CALL SUBOPT_0xB7
0018b8 940e 2216 	CALL __CMPF12
0018ba f009      	BREQ PC+2
0018bb f410      	BRCC PC+3
0018bc 940c 18c9 	JMP  _0x2060017
0018be 940e 2004 	CALL SUBOPT_0xB5
                +
0018c0 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0018c1 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0018c2 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0018c3 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0018c4 940e 212c 	CALL __SUBF12
0018c6 940e 1fff 	CALL SUBOPT_0xB4
0018c8 e011      	LDI  R17,LOW(1)
                 _0x2060017:
0018c9 940e 2009 	CALL SUBOPT_0xB6
                +
0018cb e0e0     +LDI R30 , LOW ( 0x3E800000 )
0018cc e0f0     +LDI R31 , HIGH ( 0x3E800000 )
0018cd e860     +LDI R22 , BYTE3 ( 0x3E800000 )
0018ce e37e     +LDI R23 , BYTE4 ( 0x3E800000 )
                 	__GETD1N 0x3E800000
0018cf 940e 2216 	CALL __CMPF12
0018d1 f009      	BREQ PC+2
0018d2 f410      	BRCC PC+3
0018d3 940c 18db 	JMP  _0x2060018
0018d5 940e 200e 	CALL SUBOPT_0xB7
0018d7 940e 212c 	CALL __SUBF12
0018d9 940e 1fff 	CALL SUBOPT_0xB4
                 _0x2060018:
0018db 3010      	CPI  R17,0
0018dc f011      	BREQ _0x2060019
0018dd 940e 2014 	CALL SUBOPT_0xB8
                 _0x2060019:
0018df 940e 2018 	CALL SUBOPT_0xB9
                +
0018e1 83e9     +STD Y + 1 , R30
0018e2 83fa     +STD Y + 1 + 1 , R31
0018e3 836b     +STD Y + 1 + 2 , R22
0018e4 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0018e5 940e 201d 	CALL SUBOPT_0xBA
                +
0018e7 eba1     +LDI R26 , LOW ( 0x4226C4B1 )
0018e8 ecb4     +LDI R27 , HIGH ( 0x4226C4B1 )
0018e9 e286     +LDI R24 , BYTE3 ( 0x4226C4B1 )
0018ea e492     +LDI R25 , BYTE4 ( 0x4226C4B1 )
                 	__GETD2N 0x4226C4B1
0018eb 940e 2183 	CALL __MULF12
0018ed 01df      	MOVW R26,R30
0018ee 01cb      	MOVW R24,R22
                +
0018ef e1ed     +LDI R30 , LOW ( 0x422DE51D )
0018f0 eef5     +LDI R31 , HIGH ( 0x422DE51D )
0018f1 e26d     +LDI R22 , BYTE3 ( 0x422DE51D )
0018f2 e472     +LDI R23 , BYTE4 ( 0x422DE51D )
                 	__GETD1N 0x422DE51D
0018f3 940e 1f72 	CALL SUBOPT_0x9F
0018f5 940e 2022 	CALL SUBOPT_0xBB
                +
0018f7 e4ac     +LDI R26 , LOW ( 0x4104534C )
0018f8 e5b3     +LDI R27 , HIGH ( 0x4104534C )
0018f9 e084     +LDI R24 , BYTE3 ( 0x4104534C )
0018fa e491     +LDI R25 , BYTE4 ( 0x4104534C )
                 	__GETD2N 0x4104534C
0018fb 940e 2133 	CALL __ADDF12
0018fd 940e 2009 	CALL SUBOPT_0xB6
0018ff 940e 2183 	CALL __MULF12
001901 937f      	PUSH R23
001902 936f      	PUSH R22
001903 93ff      	PUSH R31
001904 93ef      	PUSH R30
001905 940e 201d 	CALL SUBOPT_0xBA
                +
001907 e1a1     +LDI R26 , LOW ( 0x3FDEED11 )
001908 eebd     +LDI R27 , HIGH ( 0x3FDEED11 )
001909 ed8e     +LDI R24 , BYTE3 ( 0x3FDEED11 )
00190a e39f     +LDI R25 , BYTE4 ( 0x3FDEED11 )
                 	__GETD2N 0x3FDEED11
00190b 940e 2133 	CALL __ADDF12
00190d 940e 2022 	CALL SUBOPT_0xBB
                +
00190f e5ae     +LDI R26 , LOW ( 0x3FA87B5E )
001910 e7bb     +LDI R27 , HIGH ( 0x3FA87B5E )
001911 ea88     +LDI R24 , BYTE3 ( 0x3FA87B5E )
001912 e39f     +LDI R25 , BYTE4 ( 0x3FA87B5E )
                 	__GETD2N 0x3FA87B5E
001913 940e 2133 	CALL __ADDF12
001915 91af      	POP  R26
001916 91bf      	POP  R27
001917 918f      	POP  R24
001918 919f      	POP  R25
001919 940e 21d1 	CALL __DIVF21
00191b c0e3      	RJMP _0x20C0007
                 _cos:
00191c 940e 1cce 	CALL SUBOPT_0x43
                +
00191e edeb     +LDI R30 , LOW ( 0x3FC90FDB )
00191f e0ff     +LDI R31 , HIGH ( 0x3FC90FDB )
001920 ec69     +LDI R22 , BYTE3 ( 0x3FC90FDB )
001921 e37f     +LDI R23 , BYTE4 ( 0x3FC90FDB )
                 	__GETD1N 0x3FC90FDB
001922 940e 212c 	CALL __SUBF12
001924 940e 237c 	CALL __PUTPARD1
001926 df7b      	RCALL _sin
001927 c0f6      	RJMP _0x20C0004
                 _tan:
001928 9724      	SBIW R28,4
001929 940e 1b27 	CALL SUBOPT_0x4
00192b 940e 237c 	CALL __PUTPARD1
00192d dfee      	RCALL _cos
00192e 940e 1ccb 	CALL SUBOPT_0x42
001930 940e 23ab 	CALL __CPD10
001932 f469      	BRNE _0x206001A
001933 940e 1cbd 	CALL SUBOPT_0x40
001935 940e 23b3 	CALL __CPD02
001937 f41c      	BRGE _0x206001B
001938 940e 2029 	CALL SUBOPT_0xBC
00193a c036      	RJMP _0x20C0009
                 _0x206001B:
                +
00193b efef     +LDI R30 , LOW ( 0xFF7FFFFF )
00193c efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
00193d e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
00193e ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
00193f c031      	RJMP _0x20C0009
                 _0x206001A:
001940 940e 1b27 	CALL SUBOPT_0x4
001942 940e 237c 	CALL __PUTPARD1
001944 df5d      	RCALL _sin
001945 01df      	MOVW R26,R30
001946 01cb      	MOVW R24,R22
001947 940e 1fdd 	CALL SUBOPT_0xAE
001949 c025      	RJMP _0x20C0008
                 _xatan:
00194a 9724      	SBIW R28,4
00194b 940e 1b27 	CALL SUBOPT_0x4
00194d 940e 1f6e 	CALL SUBOPT_0x9E
00194f 940e 1ccb 	CALL SUBOPT_0x42
001951 940e 1fdd 	CALL SUBOPT_0xAE
                +
001953 e6a5     +LDI R26 , LOW ( 0x40CBD065 )
001954 edb0     +LDI R27 , HIGH ( 0x40CBD065 )
001955 ec8b     +LDI R24 , BYTE3 ( 0x40CBD065 )
001956 e490     +LDI R25 , BYTE4 ( 0x40CBD065 )
                 	__GETD2N 0x40CBD065
001957 940e 202e 	CALL SUBOPT_0xBD
001959 940e 1f6e 	CALL SUBOPT_0x9E
00195b 937f      	PUSH R23
00195c 936f      	PUSH R22
00195d 93ff      	PUSH R31
00195e 93ef      	PUSH R30
00195f 940e 1fdd 	CALL SUBOPT_0xAE
                +
001961 e0a0     +LDI R26 , LOW ( 0x41296D00 )
001962 e6bd     +LDI R27 , HIGH ( 0x41296D00 )
001963 e289     +LDI R24 , BYTE3 ( 0x41296D00 )
001964 e491     +LDI R25 , BYTE4 ( 0x41296D00 )
                 	__GETD2N 0x41296D00
001965 940e 2133 	CALL __ADDF12
001967 940e 1cce 	CALL SUBOPT_0x43
001969 940e 202e 	CALL SUBOPT_0xBD
00196b 91af      	POP  R26
00196c 91bf      	POP  R27
00196d 918f      	POP  R24
00196e 919f      	POP  R25
                 _0x20C0008:
00196f 940e 21d1 	CALL __DIVF21
                 _0x20C0009:
001971 9628      	ADIW R28,8
001972 9508      	RET
                 _yatan:
001973 940e 1cce 	CALL SUBOPT_0x43
                +
001975 eced     +LDI R30 , LOW ( 0x3ED413CD )
001976 e1f3     +LDI R31 , HIGH ( 0x3ED413CD )
001977 ed64     +LDI R22 , BYTE3 ( 0x3ED413CD )
001978 e37e     +LDI R23 , BYTE4 ( 0x3ED413CD )
                 	__GETD1N 0x3ED413CD
001979 940e 2216 	CALL __CMPF12
00197b f420      	BRSH _0x2060020
00197c 940e 1ff3 	CALL SUBOPT_0xB2
00197e dfcb      	RCALL _xatan
00197f c09e      	RJMP _0x20C0004
                 _0x2060020:
001980 940e 1cce 	CALL SUBOPT_0x43
                +
001982 e7ea     +LDI R30 , LOW ( 0x401A827A )
001983 e8f2     +LDI R31 , HIGH ( 0x401A827A )
001984 e16a     +LDI R22 , BYTE3 ( 0x401A827A )
001985 e470     +LDI R23 , BYTE4 ( 0x401A827A )
                 	__GETD1N 0x401A827A
001986 940e 2216 	CALL __CMPF12
001988 f009      	BREQ PC+2
001989 f410      	BRCC PC+3
00198a 940c 1991 	JMP  _0x2060021
00198c 940e 1fe5 	CALL SUBOPT_0xB0
00198e 940e 2037 	CALL SUBOPT_0xBE
001990 c085      	RJMP _0x20C0005
                 _0x2060021:
001991 940e 1fe5 	CALL SUBOPT_0xB0
001993 940e 212c 	CALL __SUBF12
001995 937f      	PUSH R23
001996 936f      	PUSH R22
001997 93ff      	PUSH R31
001998 93ef      	PUSH R30
001999 940e 1fe5 	CALL SUBOPT_0xB0
00199b 940e 2133 	CALL __ADDF12
00199d 91af      	POP  R26
00199e 91bf      	POP  R27
00199f 918f      	POP  R24
0019a0 919f      	POP  R25
0019a1 940e 2037 	CALL SUBOPT_0xBE
                +
0019a3 edab     +LDI R26 , LOW ( 0x3F490FDB )
0019a4 e0bf     +LDI R27 , HIGH ( 0x3F490FDB )
0019a5 e489     +LDI R24 , BYTE3 ( 0x3F490FDB )
0019a6 e39f     +LDI R25 , BYTE4 ( 0x3F490FDB )
                 	__GETD2N 0x3F490FDB
0019a7 940e 2133 	CALL __ADDF12
0019a9 c074      	RJMP _0x20C0004
                 _asin:
0019aa 940e 1ff7 	CALL SUBOPT_0xB3
0019ac 940e 203d 	CALL SUBOPT_0xBF
0019ae f048      	BRLO _0x2060023
0019af 940e 2009 	CALL SUBOPT_0xB6
0019b1 940e 2044 	CALL SUBOPT_0xC0
0019b3 f019      	BREQ PC+4
0019b4 f010      	BRCS PC+3
0019b5 940c 19b8 	JMP  _0x2060023
0019b7 c003      	RJMP _0x2060022
                 _0x2060023:
0019b8 940e 2029 	CALL SUBOPT_0xBC
0019ba c044      	RJMP _0x20C0007
                 _0x2060022:
0019bb 85a8      	LDD  R26,Y+8
0019bc 23aa      	TST  R26
0019bd f41a      	BRPL _0x2060025
0019be 940e 2014 	CALL SUBOPT_0xB8
0019c0 e011      	LDI  R17,LOW(1)
                 _0x2060025:
0019c1 940e 2018 	CALL SUBOPT_0xB9
                +
0019c3 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0019c4 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0019c5 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0019c6 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0019c7 940e 1f72 	CALL SUBOPT_0x9F
0019c9 940e 237c 	CALL __PUTPARD1
0019cb 940e 2236 	CALL _sqrt
                +
0019cd 83e9     +STD Y + 1 , R30
0019ce 83fa     +STD Y + 1 + 1 , R31
0019cf 836b     +STD Y + 1 + 2 , R22
0019d0 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0019d1 940e 2009 	CALL SUBOPT_0xB6
                +
0019d3 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0019d4 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0019d5 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0019d6 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0019d7 940e 2216 	CALL __CMPF12
0019d9 f009      	BREQ PC+2
0019da f410      	BRCC PC+3
0019db 940c 19ec 	JMP  _0x2060026
0019dd 940e 2004 	CALL SUBOPT_0xB5
                +
0019df 81a9     +LDD R26 , Y + 1
0019e0 81ba     +LDD R27 , Y + 1 + 1
0019e1 818b     +LDD R24 , Y + 1 + 2
0019e2 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0019e3 940e 204b 	CALL SUBOPT_0xC1
                +
0019e5 edab     +LDI R26 , LOW ( 0x3FC90FDB )
0019e6 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
0019e7 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
0019e8 e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
0019e9 940e 1f72 	CALL SUBOPT_0x9F
0019eb c006      	RJMP _0x2060035
                 _0x2060026:
0019ec 940e 201d 	CALL SUBOPT_0xBA
0019ee 940e 2009 	CALL SUBOPT_0xB6
0019f0 940e 204b 	CALL SUBOPT_0xC1
                 _0x2060035:
                +
0019f2 83e9     +STD Y + 1 , R30
0019f3 83fa     +STD Y + 1 + 1 , R31
0019f4 836b     +STD Y + 1 + 2 , R22
0019f5 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0019f6 3010      	CPI  R17,0
0019f7 f029      	BREQ _0x2060028
0019f8 940e 201d 	CALL SUBOPT_0xBA
0019fa 940e 208d 	CALL __ANEGF1
0019fc c002      	RJMP _0x20C0007
                 _0x2060028:
0019fd 940e 201d 	CALL SUBOPT_0xBA
                 _0x20C0007:
0019ff 8118      	LDD  R17,Y+0
001a00 9629      	ADIW R28,9
001a01 9508      	RET
                 _acos:
001a02 940e 1cce 	CALL SUBOPT_0x43
001a04 940e 203d 	CALL SUBOPT_0xBF
001a06 f048      	BRLO _0x206002A
001a07 940e 1cce 	CALL SUBOPT_0x43
001a09 940e 2044 	CALL SUBOPT_0xC0
001a0b f019      	BREQ PC+4
001a0c f010      	BRCS PC+3
001a0d 940c 1a10 	JMP  _0x206002A
001a0f c003      	RJMP _0x2060029
                 _0x206002A:
001a10 940e 2029 	CALL SUBOPT_0xBC
001a12 c00b      	RJMP _0x20C0004
                 _0x2060029:
001a13 940e 1ff3 	CALL SUBOPT_0xB2
001a15 df94      	RCALL _asin
                 _0x20C0005:
                +
001a16 edab     +LDI R26 , LOW ( 0x3FC90FDB )
001a17 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
001a18 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
001a19 e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
001a1a 940e 238e 	CALL __SWAPD12
                 _0x20C0006:
001a1c 940e 212c 	CALL __SUBF12
                 _0x20C0004:
001a1e 9624      	ADIW R28,4
001a1f 9508      	RET
                 _atan2:
001a20 9724      	SBIW R28,4
001a21 940e 1b27 	CALL SUBOPT_0x4
001a23 940e 23ab 	CALL __CPD10
001a25 f4d9      	BRNE _0x206002D
                +
001a26 85e8     +LDD R30 , Y + 8
001a27 85f9     +LDD R31 , Y + 8 + 1
001a28 856a     +LDD R22 , Y + 8 + 2
001a29 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001a2a 940e 23ab 	CALL __CPD10
001a2c f419      	BRNE _0x206002E
001a2d 940e 2029 	CALL SUBOPT_0xBC
001a2f c039      	RJMP _0x20C0003
                 _0x206002E:
                +
001a30 85a8     +LDD R26 , Y + 8
001a31 85b9     +LDD R27 , Y + 8 + 1
001a32 858a     +LDD R24 , Y + 8 + 2
001a33 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001a34 940e 23b3 	CALL __CPD02
001a36 f42c      	BRGE _0x206002F
                +
001a37 edeb     +LDI R30 , LOW ( 0x3FC90FDB )
001a38 e0ff     +LDI R31 , HIGH ( 0x3FC90FDB )
001a39 ec69     +LDI R22 , BYTE3 ( 0x3FC90FDB )
001a3a e37f     +LDI R23 , BYTE4 ( 0x3FC90FDB )
                 	__GETD1N 0x3FC90FDB
001a3b c02d      	RJMP _0x20C0003
                 _0x206002F:
                +
001a3c edeb     +LDI R30 , LOW ( 0xBFC90FDB )
001a3d e0ff     +LDI R31 , HIGH ( 0xBFC90FDB )
001a3e ec69     +LDI R22 , BYTE3 ( 0xBFC90FDB )
001a3f eb7f     +LDI R23 , BYTE4 ( 0xBFC90FDB )
                 	__GETD1N 0xBFC90FDB
001a40 c028      	RJMP _0x20C0003
                 _0x206002D:
001a41 940e 1feb 	CALL SUBOPT_0xB1
001a43 940e 1cbd 	CALL SUBOPT_0x40
001a45 940e 23b3 	CALL __CPD02
001a47 f464      	BRGE _0x2060030
001a48 85ab      	LDD  R26,Y+11
001a49 23aa      	TST  R26
001a4a f022      	BRMI _0x2060031
001a4b 940e 1ff3 	CALL SUBOPT_0xB2
001a4d df25      	RCALL _yatan
001a4e c01a      	RJMP _0x20C0003
                 _0x2060031:
001a4f 940e 2051 	CALL SUBOPT_0xC2
001a51 940e 208d 	CALL __ANEGF1
001a53 c015      	RJMP _0x20C0003
                 _0x2060030:
001a54 85ab      	LDD  R26,Y+11
001a55 23aa      	TST  R26
001a56 f04a      	BRMI _0x2060032
001a57 940e 2051 	CALL SUBOPT_0xC2
                +
001a59 edab     +LDI R26 , LOW ( 0x40490FDB )
001a5a e0bf     +LDI R27 , HIGH ( 0x40490FDB )
001a5b e489     +LDI R24 , BYTE3 ( 0x40490FDB )
001a5c e490     +LDI R25 , BYTE4 ( 0x40490FDB )
                 	__GETD2N 0x40490FDB
001a5d 940e 1f72 	CALL SUBOPT_0x9F
001a5f c009      	RJMP _0x20C0003
                 _0x2060032:
001a60 940e 1ff3 	CALL SUBOPT_0xB2
001a62 df10      	RCALL _yatan
                +
001a63 edab     +LDI R26 , LOW ( 0xC0490FDB )
001a64 e0bf     +LDI R27 , HIGH ( 0xC0490FDB )
001a65 e489     +LDI R24 , BYTE3 ( 0xC0490FDB )
001a66 ec90     +LDI R25 , BYTE4 ( 0xC0490FDB )
                 	__GETD2N 0xC0490FDB
001a67 940e 2133 	CALL __ADDF12
                 _0x20C0003:
001a69 962c      	ADIW R28,12
001a6a 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftoa:
001a6b d329      	RCALL SUBOPT_0x4F
001a6c e0e0      	LDI  R30,LOW(0)
001a6d 83ea      	STD  Y+2,R30
001a6e e3ef      	LDI  R30,LOW(63)
001a6f 83eb      	STD  Y+3,R30
001a70 931a      	ST   -Y,R17
001a71 930a      	ST   -Y,R16
001a72 85eb      	LDD  R30,Y+11
001a73 85fc      	LDD  R31,Y+11+1
001a74 3fef      	CPI  R30,LOW(0xFFFF)
001a75 efaf      	LDI  R26,HIGH(0xFFFF)
001a76 07fa      	CPC  R31,R26
001a77 f429      	BRNE _0x20A000D
001a78 d5df      	RCALL SUBOPT_0xC3
                +
001a79 e3ec     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 0 ) )
001a7a e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 0 ) )
                 	__POINTW1FN _0x20A0000,0
001a7b d4bd      	RCALL SUBOPT_0x95
001a7c c082      	RJMP _0x20C0002
                 _0x20A000D:
001a7d 3fef      	CPI  R30,LOW(0x7FFF)
001a7e e7af      	LDI  R26,HIGH(0x7FFF)
001a7f 07fa      	CPC  R31,R26
001a80 f429      	BRNE _0x20A000C
001a81 d5d6      	RCALL SUBOPT_0xC3
                +
001a82 e3ed     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 1 ) )
001a83 e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 1 ) )
                 	__POINTW1FN _0x20A0000,1
001a84 d4b4      	RCALL SUBOPT_0x95
001a85 c079      	RJMP _0x20C0002
                 _0x20A000C:
001a86 85ac      	LDD  R26,Y+12
001a87 23aa      	TST  R26
001a88 f452      	BRPL _0x20A000F
                +
001a89 85e9     +LDD R30 , Y + 9
001a8a 85fa     +LDD R31 , Y + 9 + 1
001a8b 856b     +LDD R22 , Y + 9 + 2
001a8c 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001a8d 940e 208d 	CALL __ANEGF1
001a8f d5cd      	RCALL SUBOPT_0xC4
001a90 d5d1      	RCALL SUBOPT_0xC5
001a91 e2ed      	LDI  R30,LOW(45)
001a92 93ec      	ST   X,R30
                 _0x20A000F:
001a93 85a8      	LDD  R26,Y+8
001a94 30a7      	CPI  R26,LOW(0x7)
001a95 f010      	BRLO _0x20A0010
001a96 e0e6      	LDI  R30,LOW(6)
001a97 87e8      	STD  Y+8,R30
                 _0x20A0010:
001a98 8518      	LDD  R17,Y+8
                 _0x20A0011:
001a99 2fe1      	MOV  R30,R17
001a9a 5011      	SUBI R17,1
001a9b 30e0      	CPI  R30,0
001a9c f021      	BREQ _0x20A0013
001a9d d5cb      	RCALL SUBOPT_0xC6
001a9e d4bd      	RCALL SUBOPT_0x9B
001a9f d5ce      	RCALL SUBOPT_0xC7
001aa0 cff8      	RJMP _0x20A0011
                 _0x20A0013:
001aa1 d5d1      	RCALL SUBOPT_0xC8
001aa2 940e 2133 	CALL __ADDF12
001aa4 d5b8      	RCALL SUBOPT_0xC4
001aa5 e010      	LDI  R17,LOW(0)
                +
001aa6 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001aa7 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001aa8 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001aa9 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001aaa d5c3      	RCALL SUBOPT_0xC7
                 _0x20A0014:
001aab d5c7      	RCALL SUBOPT_0xC8
001aac 940e 2216 	CALL __CMPF12
001aae f060      	BRLO _0x20A0016
001aaf d5b9      	RCALL SUBOPT_0xC6
001ab0 d4a0      	RCALL SUBOPT_0x99
001ab1 d5bc      	RCALL SUBOPT_0xC7
001ab2 5f1f      	SUBI R17,-LOW(1)
001ab3 3217      	CPI  R17,39
001ab4 f028      	BRLO _0x20A0017
001ab5 d5a2      	RCALL SUBOPT_0xC3
                +
001ab6 e4e1     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 5 ) )
001ab7 e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 5 ) )
                 	__POINTW1FN _0x20A0000,5
001ab8 d480      	RCALL SUBOPT_0x95
001ab9 c045      	RJMP _0x20C0002
                 _0x20A0017:
001aba cff0      	RJMP _0x20A0014
                 _0x20A0016:
001abb 3010      	CPI  R17,0
001abc f421      	BRNE _0x20A0018
001abd d5a4      	RCALL SUBOPT_0xC5
001abe e3e0      	LDI  R30,LOW(48)
001abf 93ec      	ST   X,R30
001ac0 c01c      	RJMP _0x20A0019
                 _0x20A0018:
                 _0x20A001A:
001ac1 2fe1      	MOV  R30,R17
001ac2 5011      	SUBI R17,1
001ac3 30e0      	CPI  R30,0
001ac4 f0c1      	BREQ _0x20A001C
001ac5 d5a3      	RCALL SUBOPT_0xC6
001ac6 d495      	RCALL SUBOPT_0x9B
001ac7 d48d      	RCALL SUBOPT_0x9A
001ac8 d49a      	RCALL SUBOPT_0x9C
001ac9 d5a4      	RCALL SUBOPT_0xC7
001aca d5a8      	RCALL SUBOPT_0xC8
001acb 940e 21d1 	CALL __DIVF21
001acd 940e 20c0 	CALL __CFD1U
001acf 2f0e      	MOV  R16,R30
001ad0 d591      	RCALL SUBOPT_0xC5
001ad1 2fe0      	MOV  R30,R16
001ad2 5de0      	SUBI R30,-LOW(48)
001ad3 93ec      	ST   X,R30
001ad4 d374      	RCALL SUBOPT_0x6D
001ad5 d593      	RCALL SUBOPT_0xC6
001ad6 d0c8      	RCALL SUBOPT_0x16
001ad7 940e 2183 	CALL __MULF12
001ad9 d5a2      	RCALL SUBOPT_0xC9
001ada d497      	RCALL SUBOPT_0x9F
001adb d581      	RCALL SUBOPT_0xC4
001adc cfe4      	RJMP _0x20A001A
                 _0x20A001C:
                 _0x20A0019:
001add 85e8      	LDD  R30,Y+8
001ade 30e0      	CPI  R30,0
001adf f0d9      	BREQ _0x20C0001
001ae0 d581      	RCALL SUBOPT_0xC5
001ae1 e2ee      	LDI  R30,LOW(46)
001ae2 93ec      	ST   X,R30
                 _0x20A001E:
001ae3 85e8      	LDD  R30,Y+8
001ae4 50e1      	SUBI R30,LOW(1)
001ae5 87e8      	STD  Y+8,R30
001ae6 5fef      	SUBI R30,-LOW(1)
001ae7 f099      	BREQ _0x20A0020
001ae8 d593      	RCALL SUBOPT_0xC9
001ae9 d467      	RCALL SUBOPT_0x99
001aea d572      	RCALL SUBOPT_0xC4
                +
001aeb 85e9     +LDD R30 , Y + 9
001aec 85fa     +LDD R31 , Y + 9 + 1
001aed 856b     +LDD R22 , Y + 9 + 2
001aee 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001aef 940e 20c0 	CALL __CFD1U
001af1 2f0e      	MOV  R16,R30
001af2 d56f      	RCALL SUBOPT_0xC5
001af3 2fe0      	MOV  R30,R16
001af4 5de0      	SUBI R30,-LOW(48)
001af5 93ec      	ST   X,R30
001af6 d352      	RCALL SUBOPT_0x6D
001af7 d584      	RCALL SUBOPT_0xC9
001af8 d163      	RCALL SUBOPT_0x30
001af9 d563      	RCALL SUBOPT_0xC4
001afa cfe8      	RJMP _0x20A001E
                 _0x20A0020:
                 _0x20C0001:
001afb 81ae      	LDD  R26,Y+6
001afc 81bf      	LDD  R27,Y+6+1
001afd e0e0      	LDI  R30,LOW(0)
001afe 93ec      	ST   X,R30
                 _0x20C0002:
001aff 8119      	LDD  R17,Y+1
001b00 8108      	LDD  R16,Y+0
001b01 962d      	ADIW R28,13
001b02 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _TX_ADDRESS:
0003c5           	.BYTE 0x5
                 _RX_ADDRESS:
0003ca           	.BYTE 0x5
                 _debugMsgBuff:
0003cf           	.BYTE 0x20
                 _rb:
0003ef           	.BYTE 0x1C
                 _robot11:
00040b           	.BYTE 0xE
                 _robot12:
000419           	.BYTE 0xE
                 _robot13:
000427           	.BYTE 0xE
                 _robot21:
000435           	.BYTE 0xE
                 _robot22:
000443           	.BYTE 0xE
                 _robot23:
000451           	.BYTE 0xE
                 _robotctrl:
00045f           	.BYTE 0xE
                 _errangle:
00046d           	.BYTE 0x4
                 _distance:
000471           	.BYTE 0x4
                 _orientation:
000475           	.BYTE 0x4
                 _RxBuf:
000479           	.BYTE 0x20
                 _setRobotX:
000499           	.BYTE 0x4
                 _setRobotY:
00049d           	.BYTE 0x4
                 _setRobotXmin:
0004a1           	.BYTE 0x4
                 _setRobotXmax:
0004a5           	.BYTE 0x4
                 _setRobotAngleX:
0004a9           	.BYTE 0x4
                 _setRobotAngleY:
0004ad           	.BYTE 0x4
                 _offestsanco:
0004b1           	.BYTE 0x4
                 _rbctrlHomeX:
0004b5           	.BYTE 0x4
                 _rbctrlHomeY:
0004b9           	.BYTE 0x4
                 _rbctrlPenaltyX:
0004bd           	.BYTE 0x4
                 _rbctrlPenaltyY:
0004c1           	.BYTE 0x4
                 _rbctrlPenaltyAngle:
0004c5           	.BYTE 0x4
                 _rbctrlHomeAngle:
0004c9           	.BYTE 0x4
                 _cntsethomeRB:
0004cd           	.BYTE 0x2
                 _cntstuckRB:
0004cf           	.BYTE 0x2
                 _cntunlookRB:
0004d1           	.BYTE 0x2
                 _flagsethome:
0004d3           	.BYTE 0x2
                 _flagselftest:
0004d5           	.BYTE 0x2
                 _cntselftest:
0004d7           	.BYTE 0x2
                 _leftSpeed:
0004d9           	.BYTE 0x2
                 _rightSpeed:
0004db           	.BYTE 0x2
                 _id:
0004dd           	.BYTE 0x1
                 _IRFL:
0004de           	.BYTE 0x2
                 _IRFR:
0004e0           	.BYTE 0x2
                 _IRLINE:
0004e2           	.BYTE 0xA
                 _timerstick:
0004ec           	.BYTE 0x2
                 _timerstickdis:
0004ee           	.BYTE 0x2
                 _timerstickang:
0004f0           	.BYTE 0x2
                 _timerstickctr:
0004f2           	.BYTE 0x2
                 _vQEL:
0004f4           	.BYTE 0x2
                 _vQER:
0004f6           	.BYTE 0x2
                 _oldQEL:
0004f8           	.BYTE 0x2
                 _oldQER:
0004fa           	.BYTE 0x2
                 _svQEL:
0004fc           	.BYTE 0x2
                 _svQER:
0004fe           	.BYTE 0x2
                 _seRki_G001:
000500           	.BYTE 0x2
                 _seLki_G001:
000502           	.BYTE 0x2
                 _uL:
000504           	.BYTE 0x2
                 _uR:
000506           	.BYTE 0x2
                 _KpR:
000508           	.BYTE 0x2
                 _KiR:
00050a           	.BYTE 0x2
                 _KpL:
00050c           	.BYTE 0x2
                 _KiL:
00050e           	.BYTE 0x2
                 _xrb_last:
000510           	.BYTE 0x2
                 _yrb_last:
000512           	.BYTE 0x2
                 _angle_last:
000514           	.BYTE 0x4
                 _sd:
000518           	.BYTE 0x2
                 _oldd:
00051a           	.BYTE 0x2
                 _flagwaitctrRobot:
00051c           	.BYTE 0x1
                 _sa:
00051d           	.BYTE 0x2
                 _olda:
00051f           	.BYTE 0x2
                 _flagwaitctrAngle:
000521           	.BYTE 0x1
                 _flagtask:
000522           	.BYTE 0x2
                 _flagtaskold:
000524           	.BYTE 0x2
                 _flaghuongtrue:
000526           	.BYTE 0x2
                 _verranglekisum:
000528           	.BYTE 0x2
                 _QEL:
00052a           	.BYTE 0x2
                 _QER:
00052c           	.BYTE 0x2
                 _rx_buffer:
00052e           	.BYTE 0x8
                 _rx_wr_index:
000536           	.BYTE 0x1
                 _rx_rd_index:
000537           	.BYTE 0x1
                 _rx_counter:
000538           	.BYTE 0x1
                 _tx_buffer:
000539           	.BYTE 0x8
                 _tx_wr_index:
000541           	.BYTE 0x1
                 _tx_rd_index:
000542           	.BYTE 0x1
                 _tx_counter:
000543           	.BYTE 0x1
                 _oldOrientation:
000544           	.BYTE 0x4
                 _timer2Count:
000548           	.BYTE 0x1
                 _posUpdateFlag:
000549           	.BYTE 0x1
                 _oldPos:
00054a           	.BYTE 0x4
                 __seed_G105:
00054e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
001b03 93fa      	ST   -Y,R31
001b04 93ea      	ST   -Y,R30
001b05 e0e5      	LDI  R30,LOW(5)
001b06 e0f0      	LDI  R31,HIGH(5)
001b07 93fa      	ST   -Y,R31
001b08 93ea      	ST   -Y,R30
001b09 940c 0357 	JMP  _SPI_Write_Buf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
001b0b 93ea      	ST   -Y,R30
001b0c 940e 0318 	CALL _SPI_RW
001b0e 2f1e      	MOV  R17,R30
001b0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
001b10 9724      	SBIW R28,4
                +
001b11 85ec     +LDD R30 , Y + 12
001b12 85fd     +LDD R31 , Y + 12 + 1
001b13 856e     +LDD R22 , Y + 12 + 2
001b14 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001b15 940e 2377 	CALL __PUTD1S0
                +
001b17 85e8     +LDD R30 , Y + 8
001b18 85f9     +LDD R31 , Y + 8 + 1
001b19 856a     +LDD R22 , Y + 8 + 2
001b1a 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001b1b 940e 2372 	CALL __GETD2S0
001b1d 940e 2216 	CALL __CMPF12
001b1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
                +
001b20 85e8     +LDD R30 , Y + 8
001b21 85f9     +LDD R31 , Y + 8 + 1
001b22 856a     +LDD R22 , Y + 8 + 2
001b23 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001b24 940e 2377 	CALL __PUTD1S0
001b26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4:
                +
001b27 81ec     +LDD R30 , Y + 4
001b28 81fd     +LDD R31 , Y + 4 + 1
001b29 816e     +LDD R22 , Y + 4 + 2
001b2a 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
001b2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
001b2c 940e 2372 	CALL __GETD2S0
001b2e 940e 2216 	CALL __CMPF12
001b30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
001b31 dff5      	RCALL SUBOPT_0x4
001b32 940e 2377 	CALL __PUTD1S0
001b34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x7:
001b35 e0e0      	LDI  R30,LOW(0)
001b36 93e0 0500 	STS  _seRki_G001,R30
001b38 93e0 0501 	STS  _seRki_G001+1,R30
001b3a 93e0 0502 	STS  _seLki_G001,R30
001b3c 93e0 0503 	STS  _seLki_G001+1,R30
001b3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
001b3f 93e0 04fc 	STS  _svQEL,R30
001b41 93f0 04fd 	STS  _svQEL+1,R31
001b43 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
001b44 940e 228c 	CALL __CWD1
001b46 940e 20f9 	CALL __CDF1
001b48 940e 237c 	CALL __PUTPARD1
001b4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xA:
001b4b 940e 20c2 	CALL __CFD1
001b4d 93ed      	ST   X+,R30
001b4e 93fc      	ST   X,R31
001b4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
001b50 91e0 0475 	LDS  R30,_orientation
001b52 91f0 0476 	LDS  R31,_orientation+1
001b54 9160 0477 	LDS  R22,_orientation+2
001b56 9170 0478 	LDS  R23,_orientation+3
001b58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
                +
001b59 a1a8     +LDD R26 , Y + 32
001b5a a1b9     +LDD R27 , Y + 32 + 1
001b5b a18a     +LDD R24 , Y + 32 + 2
001b5c a19b     +LDD R25 , Y + 32 + 3
                 	__GETD2S 32
001b5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
001b5e 940e 212c 	CALL __SUBF12
001b60 01de      	MOVW R26,R28
001b61 9656      	ADIW R26,22
001b62 cfe8      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
001b63 89ee      	LDD  R30,Y+22
001b64 89ff      	LDD  R31,Y+22+1
001b65 940e 228c 	CALL __CWD1
001b67 940e 20f9 	CALL __CDF1
001b69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
001b6a edeb     +LDI R30 , LOW ( 0xC0490FDB )
001b6b e0ff     +LDI R31 , HIGH ( 0xC0490FDB )
001b6c e469     +LDI R22 , BYTE3 ( 0xC0490FDB )
001b6d ec70     +LDI R23 , BYTE4 ( 0xC0490FDB )
                 	__GETD1N 0xC0490FDB
001b6e 940e 2216 	CALL __CMPF12
001b70 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
                +
001b71 a1e8     +LDD R30 , Y + 32
001b72 a1f9     +LDD R31 , Y + 32 + 1
001b73 a16a     +LDD R22 , Y + 32 + 2
001b74 a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
                +
001b75 8da8     +LDD R26 , Y + 24
001b76 8db9     +LDD R27 , Y + 24 + 1
001b77 8d8a     +LDD R24 , Y + 24 + 2
001b78 8d9b     +LDD R25 , Y + 24 + 3
                 	__GETD2S 24
001b79 940e 2216 	CALL __CMPF12
001b7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
001b7c 89ee      	LDD  R30,Y+22
001b7d 89ff      	LDD  R31,Y+22+1
001b7e 940e 227a 	CALL __ANEGW1
001b80 8bee      	STD  Y+22,R30
001b81 8bff      	STD  Y+22+1,R31
001b82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
001b83 01df      	MOVW R26,R30
001b84 01cb      	MOVW R24,R22
                +
001b85 edeb     +LDI R30 , LOW ( 0x40490FDB )
001b86 e0ff     +LDI R31 , HIGH ( 0x40490FDB )
001b87 e469     +LDI R22 , BYTE3 ( 0x40490FDB )
001b88 e470     +LDI R23 , BYTE4 ( 0x40490FDB )
                 	__GETD1N 0x40490FDB
001b89 940e 2216 	CALL __CMPF12
001b8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x13:
                +
001b8c a1ec     +LDD R30 , Y + 36
001b8d a1fd     +LDD R31 , Y + 36 + 1
001b8e a16e     +LDD R22 , Y + 36 + 2
001b8f a17f     +LDD R23 , Y + 36 + 3
                 	__GETD1S 36
001b90 940e 237c 	CALL __PUTPARD1
001b92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
                +
001b93 a1e8     +LDD R30 , Y + 32
001b94 a1f9     +LDD R31 , Y + 32 + 1
001b95 a16a     +LDD R22 , Y + 32 + 2
001b96 a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
001b97 940e 237c 	CALL __PUTPARD1
001b99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
                +
001b9a a1ec     +LDD R30 , Y + 36
001b9b a1fd     +LDD R31 , Y + 36 + 1
001b9c a16e     +LDD R22 , Y + 36 + 2
001b9d a17f     +LDD R23 , Y + 36 + 3
                 	__GETD1S 36
001b9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x16:
001b9f 940e 228c 	CALL __CWD1
001ba1 940e 20f9 	CALL __CDF1
001ba3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
001ba4 89ea      	LDD  R30,Y+18
001ba5 89fb      	LDD  R31,Y+18+1
001ba6 dfb2      	RCALL SUBOPT_0xC
001ba7 cff7      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
                +
001ba8 a1e8     +LDD R30 , Y + 32
001ba9 a1f9     +LDD R31 , Y + 32 + 1
001baa a16a     +LDD R22 , Y + 32 + 2
001bab a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
001bac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
001bad 89ee      	LDD  R30,Y+22
001bae 89ff      	LDD  R31,Y+22+1
001baf e1a9      	LDI  R26,LOW(25)
001bb0 e0b0      	LDI  R27,HIGH(25)
001bb1 940e 22c4 	CALL __MULW12
001bb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1A:
001bb4 89e8      	LDD  R30,Y+16
001bb5 89f9      	LDD  R31,Y+16+1
001bb6 93fa      	ST   -Y,R31
001bb7 93ea      	ST   -Y,R30
001bb8 e0ef      	LDI  R30,LOW(15)
001bb9 e0f0      	LDI  R31,HIGH(15)
001bba 93fa      	ST   -Y,R31
001bbb 93ea      	ST   -Y,R30
001bbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
001bbd e0e5      	LDI  R30,LOW(5)
001bbe e0f0      	LDI  R31,HIGH(5)
001bbf 93fa      	ST   -Y,R31
001bc0 93ea      	ST   -Y,R30
001bc1 e1e6      	LDI  R30,LOW(22)
001bc2 e0f0      	LDI  R31,HIGH(22)
001bc3 93fa      	ST   -Y,R31
001bc4 93ea      	ST   -Y,R30
001bc5 940c 040b 	JMP  _map
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1C:
001bc7 93ea      	ST   -Y,R30
001bc8 940e 05af 	CALL _LcdWrite
001bca e0e0      	LDI  R30,LOW(0)
001bcb 93ea      	ST   -Y,R30
001bcc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1D:
001bcd 931a      	ST   -Y,R17
001bce 930a      	ST   -Y,R16
                +
001bcf e000     +LDI R16 , LOW ( 0 )
001bd0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001bd1 e0e1      	LDI  R30,LOW(1)
001bd2 93ea      	ST   -Y,R30
001bd3 e0e0      	LDI  R30,LOW(0)
001bd4 93ea      	ST   -Y,R30
001bd5 940e 05af 	CALL _LcdWrite
                +
001bd7 e000     +LDI R16 , LOW ( 0 )
001bd8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001bd9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x1E:
001bda e0e1      	LDI  R30,LOW(1)
001bdb 93ea      	ST   -Y,R30
001bdc 81eb      	LDD  R30,Y+3
001bdd e0f0      	LDI  R31,0
001bde 97b0      	SBIW R30,32
001bdf e0a5      	LDI  R26,LOW(5)
001be0 e0b0      	LDI  R27,HIGH(5)
001be1 940e 229c 	CALL __MULW12U
001be3 5aec      	SUBI R30,LOW(-_ASCII*2)
001be4 4fff      	SBCI R31,HIGH(-_ASCII*2)
001be5 0fe0      	ADD  R30,R16
001be6 1ff1      	ADC  R31,R17
001be7 91e4      	LPM  R30,Z
001be8 93ea      	ST   -Y,R30
001be9 940c 05af 	JMP  _LcdWrite
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
001beb 93ea      	ST   -Y,R30
001bec e0e0      	LDI  R30,LOW(0)
001bed 93ea      	ST   -Y,R30
001bee 940c 05af 	JMP  _LcdWrite
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
001bf0 931a      	ST   -Y,R17
001bf1 930a      	ST   -Y,R16
                +
001bf2 e000     +LDI R16 , LOW ( 0 )
001bf3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
001bf4 e000     +LDI R16 , LOW ( 0 )
001bf5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
001bf6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:123 WORDS
                 SUBOPT_0x21:
001bf7 93fa      	ST   -Y,R31
001bf8 93ea      	ST   -Y,R30
001bf9 e0e0      	LDI  R30,LOW(0)
001bfa e0f0      	LDI  R31,HIGH(0)
001bfb 93fa      	ST   -Y,R31
001bfc 93ea      	ST   -Y,R30
001bfd 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
001bff 2fe1      	MOV  R30,R17
001c00 e0f0      	LDI  R31,0
001c01 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x23:
001c02 01de      	MOVW R26,R28
001c03 9611      	ADIW R26,1
001c04 0fea      	ADD  R30,R26
001c05 1ffb      	ADC  R31,R27
001c06 01bf      	MOVW R22,R30
001c07 81ae      	LDD  R26,Y+6
001c08 81bf      	LDD  R27,Y+6+1
001c09 e0ea      	LDI  R30,LOW(10)
001c0a e0f0      	LDI  R31,HIGH(10)
001c0b 940e 232f 	CALL __MODW21U
001c0d 01db      	MOVW R26,R22
001c0e 93ec      	ST   X,R30
001c0f 81ae      	LDD  R26,Y+6
001c10 81bf      	LDD  R27,Y+6+1
001c11 e0ea      	LDI  R30,LOW(10)
001c12 e0f0      	LDI  R31,HIGH(10)
001c13 940e 22e1 	CALL __DIVW21U
001c15 83ee      	STD  Y+6,R30
001c16 83ff      	STD  Y+6+1,R31
001c17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x24:
001c18 e0a4      	LDI  R26,LOW(4)
001c19 e0b0      	LDI  R27,HIGH(4)
001c1a 940e 2394 	CALL __SWAPW12
001c1c 1bea      	SUB  R30,R26
001c1d 0bfb      	SBC  R31,R27
001c1e 01de      	MOVW R26,R28
001c1f 9611      	ADIW R26,1
001c20 0fae      	ADD  R26,R30
001c21 1fbf      	ADC  R27,R31
001c22 91ec      	LD   R30,X
001c23 5de0      	SUBI R30,-LOW(48)
001c24 93ea      	ST   -Y,R30
001c25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
001c26 eee8      	LDI  R30,LOW(1000)
001c27 e0f3      	LDI  R31,HIGH(1000)
001c28 93fa      	ST   -Y,R31
001c29 93ea      	ST   -Y,R30
001c2a 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
001c2c 1bea      	SUB  R30,R26
001c2d 0bfb      	SBC  R31,R27
001c2e 83e8      	ST   Y,R30
001c2f 83f9      	STD  Y+1,R31
001c30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x27:
001c31 93fa      	ST   -Y,R31
001c32 93ea      	ST   -Y,R30
001c33 940c 0644 	JMP  _wn16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x28:
001c35 93fa      	ST   -Y,R31
001c36 93ea      	ST   -Y,R30
001c37 940c 05e6 	JMP  _ws
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
001c39 50e1      	SUBI R30,LOW(1)
001c3a e0f0      	LDI  R31,0
001c3b 5de2      	SUBI R30,LOW(-_rx_buffer)
001c3c 4ffa      	SBCI R31,HIGH(-_rx_buffer)
001c3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
001c3e 50e1      	SUBI R30,LOW(1)
001c3f e0f0      	LDI  R31,0
001c40 5ce7      	SUBI R30,LOW(-_tx_buffer)
001c41 4ffa      	SBCI R31,HIGH(-_tx_buffer)
001c42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
001c43 93aa      	ST   -Y,R26
001c44 93ba      	ST   -Y,R27
001c45 93ea      	ST   -Y,R30
001c46 93fa      	ST   -Y,R31
001c47 b7ef      	IN   R30,SREG
001c48 93ea      	ST   -Y,R30
001c49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
001c4a 81e8      	LD   R30,Y
001c4b e0f0      	LDI  R31,0
001c4c cef2      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2D:
                +
001c4d a5e8     +LDD R30 , Y + 40
001c4e a5f9     +LDD R31 , Y + 40 + 1
001c4f a56a     +LDD R22 , Y + 40 + 2
001c50 a57b     +LDD R23 , Y + 40 + 3
                 	__GETD1S 40
001c51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
                +
001c52 a9e8     +LDD R30 , Y + 48
001c53 a9f9     +LDD R31 , Y + 48 + 1
001c54 a96a     +LDD R22 , Y + 48 + 2
001c55 a97b     +LDD R23 , Y + 48 + 3
                 	__GETD1S 48
001c56 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
                +
001c57 91e0 0461+LDS R30 , _robotctrl + ( 2 )
001c59 91f0 0462+LDS R31 , _robotctrl + ( 2 ) + 1
                 	__GETW1MN _robotctrl,2
001c5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x30:
001c5c df42      	RCALL SUBOPT_0x16
001c5d 940e 238e 	CALL __SWAPD12
001c5f 940e 212c 	CALL __SUBF12
001c61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
                +
001c62 91e0 0463+LDS R30 , _robotctrl + ( 4 )
001c64 91f0 0464+LDS R31 , _robotctrl + ( 4 ) + 1
                 	__GETW1MN _robotctrl,4
001c66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
                +
001c67 a5ac     +LDD R26 , Y + 44
001c68 a5bd     +LDD R27 , Y + 44 + 1
001c69 a58e     +LDD R24 , Y + 44 + 2
001c6a a59f     +LDD R25 , Y + 44 + 3
                 	__GETD2S 44
001c6b 940e 2183 	CALL __MULF12
001c6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
                +
001c6e a5a8     +LDD R26 , Y + 40
001c6f a5b9     +LDD R27 , Y + 40 + 1
001c70 a58a     +LDD R24 , Y + 40 + 2
001c71 a59b     +LDD R25 , Y + 40 + 3
                 	__GETD2S 40
001c72 940e 2183 	CALL __MULF12
001c74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
001c75 940e 2133 	CALL __ADDF12
001c77 940e 237c 	CALL __PUTPARD1
001c79 940c 2236 	JMP  _sqrt
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
                +
001c7b a1ac     +LDD R26 , Y + 36
001c7c a1bd     +LDD R27 , Y + 36 + 1
001c7d a18e     +LDD R24 , Y + 36 + 2
001c7e a19f     +LDD R25 , Y + 36 + 3
                 	__GETD2S 36
001c7f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
001c80 940e 2133 	CALL __ADDF12
                +
001c82 8bec     +STD Y + 20 , R30
001c83 8bfd     +STD Y + 20 + 1 , R31
001c84 8b6e     +STD Y + 20 + 2 , R22
001c85 8b7f     +STD Y + 20 + 3 , R23
                 	__PUTD1S 20
001c86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
                +
001c87 89ac     +LDD R26 , Y + 20
001c88 89bd     +LDD R27 , Y + 20 + 1
001c89 898e     +LDD R24 , Y + 20 + 2
001c8a 899f     +LDD R25 , Y + 20 + 3
                 	__GETD2S 20
001c8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x38:
                +
001c8c 8be8     +STD Y + 16 , R30
001c8d 8bf9     +STD Y + 16 + 1 , R31
001c8e 8b6a     +STD Y + 16 + 2 , R22
001c8f 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
001c90 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
001c91 dfbb      	RCALL SUBOPT_0x2D
001c92 940e 237c 	CALL __PUTPARD1
001c94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
001c95 dfbc      	RCALL SUBOPT_0x2E
001c96 940e 237c 	CALL __PUTPARD1
001c98 940c 1a20 	JMP  _atan2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3B:
                +
001c9a 87ec     +STD Y + 12 , R30
001c9b 87fd     +STD Y + 12 + 1 , R31
001c9c 876e     +STD Y + 12 + 2 , R22
001c9d 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
001c9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3C:
                +
001c9f 85a8     +LDD R26 , Y + 8
001ca0 85b9     +LDD R27 , Y + 8 + 1
001ca1 858a     +LDD R24 , Y + 8 + 2
001ca2 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
                +
001ca3 85ec     +LDD R30 , Y + 12
001ca4 85fd     +LDD R31 , Y + 12 + 1
001ca5 856e     +LDD R22 , Y + 12 + 2
001ca6 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001ca7 940e 212c 	CALL __SUBF12
001ca9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3D:
                +
001caa 83ec     +STD Y + 4 , R30
001cab 83fd     +STD Y + 4 + 1 , R31
001cac 836e     +STD Y + 4 + 2 , R22
001cad 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
001cae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
                +
001caf 89e8     +LDD R30 , Y + 16
001cb0 89f9     +LDD R31 , Y + 16 + 1
001cb1 896a     +LDD R22 , Y + 16 + 2
001cb2 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
001cb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
                +
001cb4 e0a0     +LDI R26 , LOW ( 0x43340000 )
001cb5 e0b0     +LDI R27 , HIGH ( 0x43340000 )
001cb6 e384     +LDI R24 , BYTE3 ( 0x43340000 )
001cb7 e493     +LDI R25 , BYTE4 ( 0x43340000 )
                 	__GETD2N 0x43340000
001cb8 940e 2183 	CALL __MULF12
001cba 01df      	MOVW R26,R30
001cbb 01cb      	MOVW R24,R22
001cbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x40:
                +
001cbd 81ac     +LDD R26 , Y + 4
001cbe 81bd     +LDD R27 , Y + 4 + 1
001cbf 818e     +LDD R24 , Y + 4 + 2
001cc0 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
001cc1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
001cc2 91e0 046d 	LDS  R30,_errangle
001cc4 91f0 046e 	LDS  R31,_errangle+1
001cc6 9160 046f 	LDS  R22,_errangle+2
001cc8 9170 0470 	LDS  R23,_errangle+3
001cca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x42:
001ccb 940e 2377 	CALL __PUTD1S0
001ccd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x43:
001cce 940e 2372 	CALL __GETD2S0
001cd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x44:
                +
001cd1 e0e0     +LDI R30 , LOW ( 0x3F000000 )
001cd2 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
001cd3 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
001cd4 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
001cd5 940e 2183 	CALL __MULF12
001cd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x45:
001cd8 91a0 0475 	LDS  R26,_orientation
001cda 91b0 0476 	LDS  R27,_orientation+1
001cdc 9180 0477 	LDS  R24,_orientation+2
001cde 9190 0478 	LDS  R25,_orientation+3
001ce0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:157 WORDS
                 SUBOPT_0x46:
001ce1 e0e0      	LDI  R30,LOW(0)
001ce2 93e0 04bd 	STS  _rbctrlPenaltyX,R30
001ce4 93e0 04be 	STS  _rbctrlPenaltyX+1,R30
001ce6 93e0 04bf 	STS  _rbctrlPenaltyX+2,R30
001ce8 93e0 04c0 	STS  _rbctrlPenaltyX+3,R30
001cea 93e0 04c1 	STS  _rbctrlPenaltyY,R30
001cec 93e0 04c2 	STS  _rbctrlPenaltyY+1,R30
001cee 93e0 04c3 	STS  _rbctrlPenaltyY+2,R30
001cf0 93e0 04c4 	STS  _rbctrlPenaltyY+3,R30
                +
001cf2 e0e0     +LDI R30 , LOW ( 0x43330000 )
001cf3 e0f0     +LDI R31 , HIGH ( 0x43330000 )
001cf4 e363     +LDI R22 , BYTE3 ( 0x43330000 )
001cf5 e473     +LDI R23 , BYTE4 ( 0x43330000 )
                 	__GETD1N 0x43330000
001cf6 93e0 04c5 	STS  _rbctrlPenaltyAngle,R30
001cf8 93f0 04c6 	STS  _rbctrlPenaltyAngle+1,R31
001cfa 9360 04c7 	STS  _rbctrlPenaltyAngle+2,R22
001cfc 9370 04c8 	STS  _rbctrlPenaltyAngle+3,R23
001cfe 93e0 04c9 	STS  _rbctrlHomeAngle,R30
001d00 93f0 04ca 	STS  _rbctrlHomeAngle+1,R31
001d02 9360 04cb 	STS  _rbctrlHomeAngle+2,R22
001d04 9370 04cc 	STS  _rbctrlHomeAngle+3,R23
001d06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x47:
                +
001d07 e9ea     +LDI R30 , LOW ( 0x4386D99A )
001d08 edf9     +LDI R31 , HIGH ( 0x4386D99A )
001d09 e866     +LDI R22 , BYTE3 ( 0x4386D99A )
001d0a e473     +LDI R23 , BYTE4 ( 0x4386D99A )
                 	__GETD1N 0x4386D99A
001d0b 93e0 04b5 	STS  _rbctrlHomeX,R30
001d0d 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001d0f 9360 04b7 	STS  _rbctrlHomeX+2,R22
001d11 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001d13 e9ea     +LDI R30 , LOW ( 0x3FD9999A )
001d14 e9f9     +LDI R31 , HIGH ( 0x3FD9999A )
001d15 ed69     +LDI R22 , BYTE3 ( 0x3FD9999A )
001d16 e37f     +LDI R23 , BYTE4 ( 0x3FD9999A )
                 	__GETD1N 0x3FD9999A
001d17 93e0 04b9 	STS  _rbctrlHomeY,R30
001d19 93f0 04ba 	STS  _rbctrlHomeY+1,R31
001d1b 9360 04bb 	STS  _rbctrlHomeY+2,R22
001d1d 9370 04bc 	STS  _rbctrlHomeY+3,R23
                +
001d1f e0e0     +LDI R30 , LOW ( 0x42A00000 )
001d20 e0f0     +LDI R31 , HIGH ( 0x42A00000 )
001d21 ea60     +LDI R22 , BYTE3 ( 0x42A00000 )
001d22 e472     +LDI R23 , BYTE4 ( 0x42A00000 )
                 	__GETD1N 0x42A00000
001d23 93e0 04a1 	STS  _setRobotXmin,R30
001d25 93f0 04a2 	STS  _setRobotXmin+1,R31
001d27 9360 04a3 	STS  _setRobotXmin+2,R22
001d29 9370 04a4 	STS  _setRobotXmin+3,R23
                +
001d2b e0e0     +LDI R30 , LOW ( 0x43820000 )
001d2c e0f0     +LDI R31 , HIGH ( 0x43820000 )
001d2d e862     +LDI R22 , BYTE3 ( 0x43820000 )
001d2e e473     +LDI R23 , BYTE4 ( 0x43820000 )
                 	__GETD1N 0x43820000
001d2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x48:
                +
001d30 e0e0     +LDI R30 , LOW ( 0x42840000 )
001d31 e0f0     +LDI R31 , HIGH ( 0x42840000 )
001d32 e864     +LDI R22 , BYTE3 ( 0x42840000 )
001d33 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
001d34 93e0 04b5 	STS  _rbctrlHomeX,R30
001d36 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001d38 9360 04b7 	STS  _rbctrlHomeX+2,R22
001d3a 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001d3c eced     +LDI R30 , LOW ( 0x429ECCCD )
001d3d ecfc     +LDI R31 , HIGH ( 0x429ECCCD )
001d3e e96e     +LDI R22 , BYTE3 ( 0x429ECCCD )
001d3f e472     +LDI R23 , BYTE4 ( 0x429ECCCD )
                 	__GETD1N 0x429ECCCD
001d40 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x49:
                +
001d41 e0e0     +LDI R30 , LOW ( 0xC3870000 )
001d42 e0f0     +LDI R31 , HIGH ( 0xC3870000 )
001d43 e867     +LDI R22 , BYTE3 ( 0xC3870000 )
001d44 ec73     +LDI R23 , BYTE4 ( 0xC3870000 )
                 	__GETD1N 0xC3870000
001d45 93e0 04a1 	STS  _setRobotXmin,R30
001d47 93f0 04a2 	STS  _setRobotXmin+1,R31
001d49 9360 04a3 	STS  _setRobotXmin+2,R22
001d4b 9370 04a4 	STS  _setRobotXmin+3,R23
001d4d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4A:
                +
001d4e e0e0     +LDI R30 , LOW ( 0x43870000 )
001d4f e0f0     +LDI R31 , HIGH ( 0x43870000 )
001d50 e867     +LDI R22 , BYTE3 ( 0x43870000 )
001d51 e473     +LDI R23 , BYTE4 ( 0x43870000 )
                 	__GETD1N 0x43870000
001d52 93e0 04a5 	STS  _setRobotXmax,R30
001d54 93f0 04a6 	STS  _setRobotXmax+1,R31
001d56 9360 04a7 	STS  _setRobotXmax+2,R22
001d58 9370 04a8 	STS  _setRobotXmax+3,R23
001d5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4B:
001d5b 93e0 04c5 	STS  _rbctrlPenaltyAngle,R30
001d5d 93f0 04c6 	STS  _rbctrlPenaltyAngle+1,R31
001d5f 9360 04c7 	STS  _rbctrlPenaltyAngle+2,R22
001d61 9370 04c8 	STS  _rbctrlPenaltyAngle+3,R23
                +
001d63 e0e0     +LDI R30 , LOW ( 0x43330000 )
001d64 e0f0     +LDI R31 , HIGH ( 0x43330000 )
001d65 e363     +LDI R22 , BYTE3 ( 0x43330000 )
001d66 e473     +LDI R23 , BYTE4 ( 0x43330000 )
                 	__GETD1N 0x43330000
001d67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x4C:
                +
001d68 e6e6     +LDI R30 , LOW ( 0x42586666 )
001d69 e6f6     +LDI R31 , HIGH ( 0x42586666 )
001d6a e568     +LDI R22 , BYTE3 ( 0x42586666 )
001d6b e472     +LDI R23 , BYTE4 ( 0x42586666 )
                 	__GETD1N 0x42586666
001d6c 93e0 04b5 	STS  _rbctrlHomeX,R30
001d6e 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001d70 9360 04b7 	STS  _rbctrlHomeX+2,R22
001d72 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001d74 eced     +LDI R30 , LOW ( 0xC2C7CCCD )
001d75 ecfc     +LDI R31 , HIGH ( 0xC2C7CCCD )
001d76 ec67     +LDI R22 , BYTE3 ( 0xC2C7CCCD )
001d77 ec72     +LDI R23 , BYTE4 ( 0xC2C7CCCD )
                 	__GETD1N 0xC2C7CCCD
001d78 93e0 04b9 	STS  _rbctrlHomeY,R30
001d7a 93f0 04ba 	STS  _rbctrlHomeY+1,R31
001d7c 9360 04bb 	STS  _rbctrlHomeY+2,R22
001d7e 9370 04bc 	STS  _rbctrlHomeY+3,R23
001d80 cfc0      	RJMP SUBOPT_0x49
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4D:
001d81 920a      	ST   -Y,R0
001d82 921a      	ST   -Y,R1
001d83 92fa      	ST   -Y,R15
001d84 936a      	ST   -Y,R22
001d85 937a      	ST   -Y,R23
001d86 938a      	ST   -Y,R24
001d87 939a      	ST   -Y,R25
001d88 93aa      	ST   -Y,R26
001d89 93ba      	ST   -Y,R27
001d8a 93ea      	ST   -Y,R30
001d8b 93fa      	ST   -Y,R31
001d8c b7ef      	IN   R30,SREG
001d8d 93ea      	ST   -Y,R30
001d8e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x4E:
001d8f 91ed      	LD   R30,X+
001d90 91fd      	LD   R31,X+
001d91 9631      	ADIW R30,1
001d92 93fe      	ST   -X,R31
001d93 93ee      	ST   -X,R30
001d94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001d95 9724      	SBIW R28,4
001d96 e0e0      	LDI  R30,LOW(0)
001d97 83e8      	ST   Y,R30
001d98 83e9      	STD  Y+1,R30
001d99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x50:
001d9a 91e0 052c 	LDS  R30,_QER
001d9c 91f0 052d 	LDS  R31,_QER+1
001d9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x51:
001d9f 91e0 052a 	LDS  R30,_QEL
001da1 91f0 052b 	LDS  R31,_QEL+1
001da3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x52:
001da4 91a0 0500 	LDS  R26,_seRki_G001
001da6 91b0 0501 	LDS  R27,_seRki_G001+1
001da8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x53:
001da9 93e0 0500 	STS  _seRki_G001,R30
001dab 93f0 0501 	STS  _seRki_G001+1,R31
001dad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x54:
001dae 91a0 0502 	LDS  R26,_seLki_G001
001db0 91b0 0503 	LDS  R27,_seLki_G001+1
001db2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x55:
001db3 93e0 0502 	STS  _seLki_G001,R30
001db5 93f0 0503 	STS  _seLki_G001+1,R31
001db7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x56:
001db8 e0e0      	LDI  R30,LOW(0)
001db9 83e8      	ST   Y,R30
001dba 83e9      	STD  Y+1,R30
001dbb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x57:
001dbc dfe2      	RCALL SUBOPT_0x51
001dbd 91a0 052c 	LDS  R26,_QER
001dbf 91b0 052d 	LDS  R27,_QER+1
001dc1 0fae      	ADD  R26,R30
001dc2 1fbf      	ADC  R27,R31
001dc3 01fd      	MOVW R30,R26
001dc4 95f6      	LSR  R31
001dc5 95e7      	ROR  R30
001dc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x58:
001dc7 91e9      	LD   R30,Y+
001dc8 bfef      	OUT  SREG,R30
001dc9 91f9      	LD   R31,Y+
001dca 91e9      	LD   R30,Y+
001dcb 91b9      	LD   R27,Y+
001dcc 91a9      	LD   R26,Y+
001dcd 9199      	LD   R25,Y+
001dce 9189      	LD   R24,Y+
001dcf 9179      	LD   R23,Y+
001dd0 9169      	LD   R22,Y+
001dd1 90f9      	LD   R15,Y+
001dd2 9019      	LD   R1,Y+
001dd3 9009      	LD   R0,Y+
001dd4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
001dd5 93fa      	ST   -Y,R31
001dd6 93ea      	ST   -Y,R30
001dd7 e2e8      	LDI  R30,LOW(40)
001dd8 e0f0      	LDI  R31,HIGH(40)
001dd9 93fa      	ST   -Y,R31
001dda 93ea      	ST   -Y,R30
001ddb 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x5A:
001ddd 93fa      	ST   -Y,R31
001dde 93ea      	ST   -Y,R30
001ddf 940c 065c 	JMP  _wn16s
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5B:
001de1 e0e3      	LDI  R30,LOW(3)
001de2 e0f0      	LDI  R31,HIGH(3)
001de3 93fa      	ST   -Y,R31
001de4 93ea      	ST   -Y,R30
001de5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5C:
001de6 e1e4      	LDI  R30,LOW(20)
001de7 e0f0      	LDI  R31,HIGH(20)
001de8 93fa      	ST   -Y,R31
001de9 93ea      	ST   -Y,R30
001dea 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5D:
001dec e0e2      	LDI  R30,LOW(2)
001ded e0f0      	LDI  R31,HIGH(2)
001dee 93fa      	ST   -Y,R31
001def 93ea      	ST   -Y,R30
001df0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5E:
001df1 e0e1      	LDI  R30,LOW(1)
001df2 e0f0      	LDI  R31,HIGH(1)
001df3 93fa      	ST   -Y,R31
001df4 93ea      	ST   -Y,R30
001df5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x5F:
001df6 e0e0      	LDI  R30,LOW(0)
001df7 e0f0      	LDI  R31,HIGH(0)
001df8 93fa      	ST   -Y,R31
001df9 93ea      	ST   -Y,R30
001dfa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x60:
001dfb ece8      	LDI  R30,LOW(200)
001dfc e0f0      	LDI  R31,HIGH(200)
001dfd 93fa      	ST   -Y,R31
001dfe 93ea      	ST   -Y,R30
001dff 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x61:
001e01 e0e0      	LDI  R30,LOW(0)
001e02 bbea      	OUT  0x1A,R30
001e03 bbeb      	OUT  0x1B,R30
001e04 940e 05f2 	CALL _LcdClear
001e06 cfef      	RJMP SUBOPT_0x5F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x62:
001e07 e0ea      	LDI  R30,LOW(10)
001e08 e0f0      	LDI  R31,HIGH(10)
001e09 93fa      	ST   -Y,R31
001e0a 93ea      	ST   -Y,R30
001e0b 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x63:
001e0d e0e1      	LDI  R30,LOW(1)
001e0e e0f0      	LDI  R31,HIGH(1)
001e0f cde7      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
001e10 e2ea      	LDI  R30,LOW(42)
001e11 e0f0      	LDI  R31,HIGH(42)
001e12 93fa      	ST   -Y,R31
001e13 93ea      	ST   -Y,R30
001e14 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x65:
001e16 93ea      	ST   -Y,R30
001e17 940e 075e 	CALL _vMRlui
001e19 e5e8      	LDI  R30,LOW(600)
001e1a e0f2      	LDI  R31,HIGH(600)
001e1b 93fa      	ST   -Y,R31
001e1c 93ea      	ST   -Y,R30
001e1d 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
001e1f 940e 059e 	CALL _LEDLtoggle
001e21 940c 05a4 	JMP  _LEDRtoggle
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x67:
001e23 01f8      	MOVW R30,R16
001e24 eea2      	LDI  R26,LOW(_IRLINE)
001e25 e0b4      	LDI  R27,HIGH(_IRLINE)
001e26 0fee      	LSL  R30
001e27 1fff      	ROL  R31
001e28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x68:
                +
001e29 91a0 04e6+LDS R26 , _IRLINE + ( 4 )
001e2b 91b0 04e7+LDS R27 , _IRLINE + ( 4 ) + 1
                 	__GETW2MN _IRLINE,4
001e2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x69:
001e2e 0fae      	ADD  R26,R30
001e2f 1fbf      	ADC  R27,R31
001e30 940e 2363 	CALL __GETW1P
001e32 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6A:
001e33 940e 0bf0 	CALL _readline
                +
001e35 9140 04e2+LDS R20 , 0 + ( _IRLINE )
001e37 9150 04e3+LDS R21 , 0 + ( _IRLINE ) + 1
                 	__GETWRMN 20,21,0,_IRLINE
001e39 e000      	LDI  R16,LOW(0)
001e3a e011      	LDI  R17,LOW(1)
001e3b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x6B:
001e3c 2fe1      	MOV  R30,R17
001e3d eea2      	LDI  R26,LOW(_IRLINE)
001e3e e0b4      	LDI  R27,HIGH(_IRLINE)
001e3f e0f0      	LDI  R31,0
001e40 0fee      	LSL  R30
001e41 1fff      	ROL  R31
001e42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6C:
001e43 0fae      	ADD  R26,R30
001e44 1fbf      	ADC  R27,R31
001e45 914d      	LD   R20,X+
001e46 915c      	LD   R21,X
001e47 2f01      	MOV  R16,R17
001e48 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
001e49 2fe0      	MOV  R30,R16
001e4a e0f0      	LDI  R31,0
001e4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6E:
001e4c e0e1      	LDI  R30,LOW(1)
001e4d 93ea      	ST   -Y,R30
001e4e 940c 0742 	JMP  _vMLtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6F:
001e50 e1e4      	LDI  R30,LOW(20)
001e51 93ea      	ST   -Y,R30
001e52 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x70:
001e54 e0ef      	LDI  R30,LOW(15)
001e55 93ea      	ST   -Y,R30
001e56 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x71:
001e58 e0ef      	LDI  R30,LOW(15)
001e59 93ea      	ST   -Y,R30
001e5a 940c 0742 	JMP  _vMLtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x72:
001e5c e0e1      	LDI  R30,LOW(1)
001e5d 93ea      	ST   -Y,R30
001e5e 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x73:
001e60 e1e4      	LDI  R30,LOW(20)
001e61 93ea      	ST   -Y,R30
001e62 940e 0742 	CALL _vMLtoi
001e64 cff7      	RJMP SUBOPT_0x72
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x74:
001e65 e0a0      	LDI  R26,0
001e66 9998      	SBIC 0x13,0
001e67 e0a1      	LDI  R26,1
001e68 30a0      	CPI  R26,LOW(0x0)
001e69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x75:
001e6a e0e4      	LDI  R30,LOW(4)
001e6b e0f0      	LDI  R31,HIGH(4)
001e6c 93fa      	ST   -Y,R31
001e6d 93ea      	ST   -Y,R30
001e6e cf98      	RJMP SUBOPT_0x62
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x76:
001e6f 940e 0bf0 	CALL _readline
001e71 91e0 04e2 	LDS  R30,_IRLINE
001e73 91f0 04e3 	LDS  R31,_IRLINE+1
001e75 a3eb      	STD  Y+35,R30
001e76 a3fc      	STD  Y+35+1,R31
                +
001e77 e040     +LDI R20 , LOW ( 0 )
001e78 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                +
001e79 e001     +LDI R16 , LOW ( 1 )
001e7a e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
001e7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x77:
001e7c a1ab      	LDD  R26,Y+35
001e7d a1bc      	LDD  R27,Y+35+1
001e7e 17ea      	CP   R30,R26
001e7f 07fb      	CPC  R31,R27
001e80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x78:
                +
001e81 30a1     +CPI R26 , LOW ( 0x1 )
001e82 e0e0     +LDI R30 , HIGH ( 0x1 )
001e83 07be     +CPC R27 , R30
001e84 e0e0     +LDI R30 , BYTE3 ( 0x1 )
001e85 078e     +CPC R24 , R30
001e86 e0e0     +LDI R30 , BYTE4 ( 0x1 )
001e87 079e     +CPC R25 , R30
                 	__CPD2N 0x1
001e88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x79:
                +
001e89 85ac     +LDD R26 , Y + 12
001e8a 85bd     +LDD R27 , Y + 12 + 1
001e8b 858e     +LDD R24 , Y + 12 + 2
001e8c 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001e8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7A:
001e8e 940e 21d1 	CALL __DIVF21
                +
001e90 89a8     +LDD R26 , Y + 16
001e91 89b9     +LDD R27 , Y + 16 + 1
001e92 898a     +LDD R24 , Y + 16 + 2
001e93 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
001e94 940e 2133 	CALL __ADDF12
001e96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7B:
                +
001e97 89a8     +LDD R26 , Y + 16
001e98 89b9     +LDD R27 , Y + 16 + 1
001e99 898a     +LDD R24 , Y + 16 + 2
001e9a 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
001e9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7C:
001e9c ddea      	RCALL SUBOPT_0x37
                +
001e9d e0e0     +LDI R30 , LOW ( 0x41200000 )
001e9e e0f0     +LDI R31 , HIGH ( 0x41200000 )
001e9f e260     +LDI R22 , BYTE3 ( 0x41200000 )
001ea0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001ea1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7D:
                +
001ea2 8bec     +STD Y + 20 , R30
001ea3 8bfd     +STD Y + 20 + 1 , R31
001ea4 8b6e     +STD Y + 20 + 2 , R22
001ea5 8b7f     +STD Y + 20 + 3 , R23
                 	__PUTD1S 20
001ea6 e0e0      	LDI  R30,LOW(0)
                +
001ea7 8be8     +STD Y + 16 , R30
001ea8 8be9     +STD Y + 16 + 1 , R30
001ea9 8bea     +STD Y + 16 + 2 , R30
001eaa 8beb     +STD Y + 16 + 3 , R30
                 	__CLRD1S 16
001eab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7E:
                +
001eac 85ec     +LDD R30 , Y + 12
001ead 85fd     +LDD R31 , Y + 12 + 1
001eae 856e     +LDD R22 , Y + 12 + 2
001eaf 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001eb0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7F:
001eb1 93ea      	ST   -Y,R30
001eb2 940e 0742 	CALL _vMLtoi
001eb4 e0e2      	LDI  R30,LOW(2)
001eb5 93ea      	ST   -Y,R30
001eb6 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x80:
001eb8 940e 05f2 	CALL _LcdClear
001eba cf3b      	RJMP SUBOPT_0x5F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x81:
001ebb 93fa      	ST   -Y,R31
001ebc 93ea      	ST   -Y,R30
001ebd 940c 05bc 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x82:
001ebf 9aac      	SBI  0x15,4
001ec0 9aad      	SBI  0x15,5
001ec1 e6e4      	LDI  R30,LOW(100)
001ec2 e0f0      	LDI  R31,HIGH(100)
001ec3 93fa      	ST   -Y,R31
001ec4 93ea      	ST   -Y,R30
001ec5 940e 2081 	CALL _delay_ms
001ec7 98ac      	CBI  0x15,4
001ec8 98ad      	CBI  0x15,5
001ec9 e6e4      	LDI  R30,LOW(100)
001eca e0f0      	LDI  R31,HIGH(100)
001ecb 93fa      	ST   -Y,R31
001ecc 93ea      	ST   -Y,R30
001ecd 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x83:
001ecf 93ea      	ST   -Y,R30
001ed0 940e 0742 	CALL _vMLtoi
001ed2 e0e0      	LDI  R30,LOW(0)
001ed3 93ea      	ST   -Y,R30
001ed4 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x84:
001ed6 93ea      	ST   -Y,R30
001ed7 940e 0742 	CALL _vMLtoi
001ed9 e6e4      	LDI  R30,LOW(100)
001eda 93ea      	ST   -Y,R30
001edb 940c 075a 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x85:
001edd e0e2      	LDI  R30,LOW(2)
001ede e0f0      	LDI  R31,HIGH(2)
001edf cd17      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x86:
001ee0 e0ea      	LDI  R30,LOW(10)
001ee1 e0f0      	LDI  R31,HIGH(10)
001ee2 93fa      	ST   -Y,R31
001ee3 93ea      	ST   -Y,R30
001ee4 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x87:
001ee6 93fa      	ST   -Y,R31
001ee7 93ea      	ST   -Y,R30
001ee8 940c 0612 	JMP  _wn164
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x88:
001eea e2eb      	LDI  R30,LOW(43)
001eeb e0f0      	LDI  R31,HIGH(43)
001eec cfce      	RJMP SUBOPT_0x81
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x89:
001eed 91e0 04dd 	LDS  R30,_id
001eef e0f0      	LDI  R31,0
001ef0 30e1      	CPI  R30,LOW(0x1)
001ef1 e0a0      	LDI  R26,HIGH(0x1)
001ef2 07fa      	CPC  R31,R26
001ef3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8A:
001ef4 93fa      	ST   -Y,R31
001ef5 93ea      	ST   -Y,R30
001ef6 940c 2081 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8B:
001ef8 bfe3      	OUT  0x33,R30
001ef9 e0e0      	LDI  R30,LOW(0)
001efa bfe2      	OUT  0x32,R30
001efb bfec      	OUT  0x3C,R30
001efc bde2      	OUT  0x22,R30
001efd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x8C:
001efe 940e 1158 	CALL _outlcd1
001f00 cfdc      	RJMP SUBOPT_0x85
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8D:
001f01 91e0 03ef 	LDS  R30,_rb
001f03 91f0 03f0 	LDS  R31,_rb+1
001f05 9160 03f1 	LDS  R22,_rb+2
001f07 9170 03f2 	LDS  R23,_rb+3
001f09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8E:
                +
001f0a e0e0     +LDI R30 , LOW ( 0x41200000 )
001f0b e0f0     +LDI R31 , HIGH ( 0x41200000 )
001f0c e260     +LDI R22 , BYTE3 ( 0x41200000 )
001f0d e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001f0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8F:
001f0f dff1      	RCALL SUBOPT_0x8D
001f10 940e 20c2 	CALL __CFD1
001f12 01df      	MOVW R26,R30
001f13 e0ea      	LDI  R30,LOW(10)
001f14 e0f0      	LDI  R31,HIGH(10)
001f15 940e 22f4 	CALL __DIVW21
001f17 015f      	MOVW R10,R30
001f18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x90:
                +
001f19 e0e0     +LDI R30 , LOW ( 0x0 )
001f1a e0f0     +LDI R31 , HIGH ( 0x0 )
001f1b e060     +LDI R22 , BYTE3 ( 0x0 )
001f1c e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001f1d 940e 237c 	CALL __PUTPARD1
001f1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x91:
001f20 ecef      	LDI  R30,LOW(_debugMsgBuff)
001f21 e0f3      	LDI  R31,HIGH(_debugMsgBuff)
001f22 93fa      	ST   -Y,R31
001f23 93ea      	ST   -Y,R30
001f24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x92:
001f25 940e 237c 	CALL __PUTPARD1
001f27 e084      	LDI  R24,4
001f28 940e 17f2 	CALL _sprintf
001f2a 9628      	ADIW R28,8
001f2b 83e8      	ST   Y,R30
001f2c cff3      	RJMP SUBOPT_0x91
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x93:
001f2d 81ea      	LDD  R30,Y+2
001f2e 93ea      	ST   -Y,R30
001f2f 940e 039d 	CALL _debug_out
001f31 cfee      	RJMP SUBOPT_0x91
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x94:
001f32 93fa      	ST   -Y,R31
001f33 93ea      	ST   -Y,R30
001f34 91e0 04db 	LDS  R30,_rightSpeed
001f36 91f0 04dc 	LDS  R31,_rightSpeed+1
001f38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x95:
001f39 93fa      	ST   -Y,R31
001f3a 93ea      	ST   -Y,R30
001f3b 940c 14bb 	JMP  _strcpyf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x96:
001f3d dd7f      	RCALL SUBOPT_0x40
001f3e dfcb      	RCALL SUBOPT_0x8E
001f3f 940e 2183 	CALL __MULF12
001f41 cd68      	RJMP SUBOPT_0x3D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x97:
001f42 dbe4      	RCALL SUBOPT_0x4
001f43 df45      	RCALL SUBOPT_0x79
001f44 940e 2216 	CALL __CMPF12
001f46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x98:
001f47 df41      	RCALL SUBOPT_0x79
                +
001f48 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001f49 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001f4a ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001f4b e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001f4c 940e 2183 	CALL __MULF12
001f4e dd4b      	RCALL SUBOPT_0x3B
001f4f 5f3f      	SUBI R19,-LOW(1)
001f50 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x99:
001f51 dfb8      	RCALL SUBOPT_0x8E
001f52 940e 2183 	CALL __MULF12
001f54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9A:
                +
001f55 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001f56 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001f57 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001f58 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001f59 940e 2133 	CALL __ADDF12
001f5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9B:
                +
001f5c eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001f5d ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001f5e ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001f5f e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001f60 940e 2183 	CALL __MULF12
001f62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9C:
001f63 940e 237c 	CALL __PUTPARD1
001f65 940c 1857 	JMP  _floor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9D:
001f67 85a8      	LDD  R26,Y+8
001f68 85b9      	LDD  R27,Y+8+1
001f69 9611      	ADIW R26,1
001f6a 87a8      	STD  Y+8,R26
001f6b 87b9      	STD  Y+8+1,R27
001f6c 9711      	SBIW R26,1
001f6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9E:
001f6e dd4e      	RCALL SUBOPT_0x40
001f6f 940e 2183 	CALL __MULF12
001f71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9F:
001f72 940e 238e 	CALL __SWAPD12
001f74 940e 212c 	CALL __SUBF12
001f76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA0:
001f77 85e8      	LDD  R30,Y+8
001f78 85f9      	LDD  R31,Y+8+1
001f79 9631      	ADIW R30,1
001f7a 87e8      	STD  Y+8,R30
001f7b 87f9      	STD  Y+8+1,R31
001f7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xA1:
001f7d 932a      	ST   -Y,R18
001f7e 81ef      	LDD  R30,Y+7
001f7f 85f8      	LDD  R31,Y+7+1
001f80 93fa      	ST   -Y,R31
001f81 93ea      	ST   -Y,R30
001f82 85eb      	LDD  R30,Y+11
001f83 85fc      	LDD  R31,Y+11+1
001f84 9509      	ICALL
001f85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xA2:
                +
001f86 01fe     +MOVW R30 , R28
001f87 5ae6     +SUBI R30 , LOW ( - 90 )
001f88 4fff     +SBCI R31 , HIGH ( - 90 )
001f89 9001     +LD R0 , Z +
001f8a 81f0     +LD R31 , Z
001f8b 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001f8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xA3:
001f8d 9734      	SBIW R30,4
                +
001f8e 01de     +MOVW R26 , R28
001f8f 5aa6     +SUBI R26 , LOW ( - 90 )
001f90 4fbf     +SBCI R27 , HIGH ( - 90 )
001f91 93ed     +ST X + , R30
001f92 93fc     +ST X , R31
                 	__PUTW1SX 90
001f93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA4:
001f94 81ef      	LDD  R30,Y+7
001f95 85f8      	LDD  R31,Y+7+1
001f96 93fa      	ST   -Y,R31
001f97 93ea      	ST   -Y,R30
001f98 85eb      	LDD  R30,Y+11
001f99 85fc      	LDD  R31,Y+11+1
001f9a 9509      	ICALL
001f9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA5:
                +
001f9c 01de     +MOVW R26 , R28
001f9d 5aa6     +SUBI R26 , LOW ( - 90 )
001f9e 4fbf     +SBCI R27 , HIGH ( - 90 )
001f9f 900d     +LD R0 , X +
001fa0 91bc     +LD R27 , X
001fa1 2da0     +MOV R26 , R0
                 	__GETW2SX 90
001fa2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA6:
                +
001fa3 87ea     +STD Y + 10 , R30
001fa4 87fb     +STD Y + 10 + 1 , R31
001fa5 876c     +STD Y + 10 + 2 , R22
001fa6 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001fa7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA7:
001fa8 dfdd      	RCALL SUBOPT_0xA2
001fa9 cfe3      	RJMP SUBOPT_0xA3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA8:
                +
001faa 85ea     +LDD R30 , Y + 10
001fab 85fb     +LDD R31 , Y + 10 + 1
001fac 856c     +LDD R22 , Y + 10 + 2
001fad 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001fae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA9:
001faf 87ee      	STD  Y+14,R30
001fb0 87ff      	STD  Y+14+1,R31
001fb1 93fa      	ST   -Y,R31
001fb2 93ea      	ST   -Y,R30
001fb3 940e 14c6 	CALL _strlen
001fb5 2f1e      	MOV  R17,R30
001fb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xAA:
001fb7 dfe4      	RCALL SUBOPT_0xA5
001fb8 9614      	ADIW R26,4
001fb9 940e 2363 	CALL __GETW1P
001fbb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xAB:
001fbc 7f0b      	ANDI R16,LOW(251)
001fbd 89ed      	LDD  R30,Y+21
001fbe 93ea      	ST   -Y,R30
                +
001fbf 01fe     +MOVW R30 , R28
001fc0 5ae9     +SUBI R30 , LOW ( - 87 )
001fc1 4fff     +SBCI R31 , HIGH ( - 87 )
001fc2 9001     +LD R0 , Z +
001fc3 81f0     +LD R31 , Z
001fc4 2de0     +MOV R30 , R0
                 	__GETW1SX 87
001fc5 93fa      	ST   -Y,R31
001fc6 93ea      	ST   -Y,R30
                +
001fc7 01fe     +MOVW R30 , R28
001fc8 5ae5     +SUBI R30 , LOW ( - 91 )
001fc9 4fff     +SBCI R31 , HIGH ( - 91 )
001fca 9001     +LD R0 , Z +
001fcb 81f0     +LD R31 , Z
001fcc 2de0     +MOV R30 , R0
                 	__GETW1SX 91
001fcd 9509      	ICALL
001fce 3050      	CPI  R21,0
001fcf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAC:
001fd0 dcde      	RCALL SUBOPT_0x3E
                +
001fd1 85aa     +LDD R26 , Y + 10
001fd2 85bb     +LDD R27 , Y + 10 + 1
001fd3 858c     +LDD R24 , Y + 10 + 2
001fd4 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001fd5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAD:
001fd6 01de      	MOVW R26,R28
001fd7 961c      	ADIW R26,12
001fd8 940e 226c 	CALL __ADDW2R15
001fda 940e 2363 	CALL __GETW1P
001fdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0xAE:
001fdd 940e 236d 	CALL __GETD1S0
001fdf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAF:
001fe0 940e 237c 	CALL __PUTPARD1
001fe2 940e 1828 	CALL _ftrunc
001fe4 cce6      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB0:
001fe5 dff7      	RCALL SUBOPT_0xAE
                +
001fe6 e0a0     +LDI R26 , LOW ( 0x3F800000 )
001fe7 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001fe8 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001fe9 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001fea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB1:
001feb db3b      	RCALL SUBOPT_0x4
                +
001fec 85a8     +LDD R26 , Y + 8
001fed 85b9     +LDD R27 , Y + 8 + 1
001fee 858a     +LDD R24 , Y + 8 + 2
001fef 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001ff0 940e 21d1 	CALL __DIVF21
001ff2 ccd8      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB2:
001ff3 dfe9      	RCALL SUBOPT_0xAE
001ff4 940e 237c 	CALL __PUTPARD1
001ff6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB3:
001ff7 9724      	SBIW R28,4
001ff8 931a      	ST   -Y,R17
001ff9 e010      	LDI  R17,0
                +
001ffa 81ad     +LDD R26 , Y + 5
001ffb 81be     +LDD R27 , Y + 5 + 1
001ffc 818f     +LDD R24 , Y + 5 + 2
001ffd 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
001ffe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB4:
                +
001fff 83ed     +STD Y + 5 , R30
002000 83fe     +STD Y + 5 + 1 , R31
002001 836f     +STD Y + 5 + 2 , R22
002002 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
002003 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB5:
                +
002004 81ed     +LDD R30 , Y + 5
002005 81fe     +LDD R31 , Y + 5 + 1
002006 816f     +LDD R22 , Y + 5 + 2
002007 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
002008 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xB6:
                +
002009 81ad     +LDD R26 , Y + 5
00200a 81be     +LDD R27 , Y + 5 + 1
00200b 818f     +LDD R24 , Y + 5 + 2
00200c 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
00200d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB7:
00200e dffa      	RCALL SUBOPT_0xB6
                +
00200f e0e0     +LDI R30 , LOW ( 0x3F000000 )
002010 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
002011 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
002012 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
002013 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB8:
002014 dfef      	RCALL SUBOPT_0xB5
002015 940e 208d 	CALL __ANEGF1
002017 cfe7      	RJMP SUBOPT_0xB4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB9:
002018 dfeb      	RCALL SUBOPT_0xB5
002019 dfef      	RCALL SUBOPT_0xB6
00201a 940e 2183 	CALL __MULF12
00201c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xBA:
                +
00201d 81e9     +LDD R30 , Y + 1
00201e 81fa     +LDD R31 , Y + 1 + 1
00201f 816b     +LDD R22 , Y + 1 + 2
002020 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
002021 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xBB:
                +
002022 81a9     +LDD R26 , Y + 1
002023 81ba     +LDD R27 , Y + 1 + 1
002024 818b     +LDD R24 , Y + 1 + 2
002025 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
002026 940e 2183 	CALL __MULF12
002028 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xBC:
                +
002029 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00202a efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00202b e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00202c e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00202d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xBD:
00202e 940e 2183 	CALL __MULF12
                +
002030 e4ae     +LDI R26 , LOW ( 0x414A8F4E )
002031 e8bf     +LDI R27 , HIGH ( 0x414A8F4E )
002032 e48a     +LDI R24 , BYTE3 ( 0x414A8F4E )
002033 e491     +LDI R25 , BYTE4 ( 0x414A8F4E )
                 	__GETD2N 0x414A8F4E
002034 940e 2133 	CALL __ADDF12
002036 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xBE:
002037 940e 21d1 	CALL __DIVF21
002039 940e 237c 	CALL __PUTPARD1
00203b 940c 194a 	JMP  _xatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xBF:
                +
00203d e0e0     +LDI R30 , LOW ( 0xBF800000 )
00203e e0f0     +LDI R31 , HIGH ( 0xBF800000 )
00203f e860     +LDI R22 , BYTE3 ( 0xBF800000 )
002040 eb7f     +LDI R23 , BYTE4 ( 0xBF800000 )
                 	__GETD1N 0xBF800000
002041 940e 2216 	CALL __CMPF12
002043 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC0:
                +
002044 e0e0     +LDI R30 , LOW ( 0x3F800000 )
002045 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
002046 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
002047 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
002048 940e 2216 	CALL __CMPF12
00204a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC1:
00204b 940e 21d1 	CALL __DIVF21
00204d 940e 237c 	CALL __PUTPARD1
00204f 940c 1973 	JMP  _yatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC2:
002051 df8b      	RCALL SUBOPT_0xAE
002052 940e 208d 	CALL __ANEGF1
002054 940e 237c 	CALL __PUTPARD1
002056 940c 1973 	JMP  _yatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC3:
002058 81ee      	LDD  R30,Y+6
002059 81ff      	LDD  R31,Y+6+1
00205a 93fa      	ST   -Y,R31
00205b 93ea      	ST   -Y,R30
00205c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC4:
                +
00205d 87e9     +STD Y + 9 , R30
00205e 87fa     +STD Y + 9 + 1 , R31
00205f 876b     +STD Y + 9 + 2 , R22
002060 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
002061 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC5:
002062 81ae      	LDD  R26,Y+6
002063 81bf      	LDD  R27,Y+6+1
002064 9611      	ADIW R26,1
002065 83ae      	STD  Y+6,R26
002066 83bf      	STD  Y+6+1,R27
002067 9711      	SBIW R26,1
002068 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC6:
                +
002069 81aa     +LDD R26 , Y + 2
00206a 81bb     +LDD R27 , Y + 2 + 1
00206b 818c     +LDD R24 , Y + 2 + 2
00206c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00206d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC7:
                +
00206e 83ea     +STD Y + 2 , R30
00206f 83fb     +STD Y + 2 + 1 , R31
002070 836c     +STD Y + 2 + 2 , R22
002071 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
002072 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC8:
                +
002073 81ea     +LDD R30 , Y + 2
002074 81fb     +LDD R31 , Y + 2 + 1
002075 816c     +LDD R22 , Y + 2 + 2
002076 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
002077 85a9     +LDD R26 , Y + 9
002078 85ba     +LDD R27 , Y + 9 + 1
002079 858b     +LDD R24 , Y + 9 + 2
00207a 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
00207b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC9:
                +
00207c 85a9     +LDD R26 , Y + 9
00207d 85ba     +LDD R27 , Y + 9 + 1
00207e 858b     +LDD R24 , Y + 9 + 2
00207f 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
002080 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
002081 91e9      	ld   r30,y+
002082 91f9      	ld   r31,y+
002083 9630      	adiw r30,0
002084 f039      	breq __delay_ms1
                 __delay_ms0:
                +
002085 ed80     +LDI R24 , LOW ( 0x7D0 )
002086 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
002087 9701     +SBIW R24 , 1
002088 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
002089 95a8      	wdr
00208a 9731      	sbiw r30,1
00208b f7c9      	brne __delay_ms0
                 __delay_ms1:
00208c 9508      	ret
                 
                 __ANEGF1:
00208d 9730      	SBIW R30,0
00208e 4060      	SBCI R22,0
00208f 4070      	SBCI R23,0
002090 f009      	BREQ __ANEGF10
002091 5870      	SUBI R23,0x80
                 __ANEGF10:
002092 9508      	RET
                 
                 __ROUND_REPACK:
002093 2355      	TST  R21
002094 f442      	BRPL __REPACK
002095 3850      	CPI  R21,0x80
002096 f411      	BRNE __ROUND_REPACK0
002097 ffe0      	SBRS R30,0
002098 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
002099 9631      	ADIW R30,1
00209a 1f69      	ADC  R22,R25
00209b 1f79      	ADC  R23,R25
00209c f06b      	BRVS __REPACK1
                 
                 __REPACK:
00209d e850      	LDI  R21,0x80
00209e 2757      	EOR  R21,R23
00209f f411      	BRNE __REPACK0
0020a0 935f      	PUSH R21
0020a1 c0cf      	RJMP __ZERORES
                 __REPACK0:
0020a2 3f5f      	CPI  R21,0xFF
0020a3 f031      	BREQ __REPACK1
0020a4 0f66      	LSL  R22
0020a5 0c00      	LSL  R0
0020a6 9557      	ROR  R21
0020a7 9567      	ROR  R22
0020a8 2f75      	MOV  R23,R21
0020a9 9508      	RET
                 __REPACK1:
0020aa 935f      	PUSH R21
0020ab 2000      	TST  R0
0020ac f00a      	BRMI __REPACK2
0020ad c0cf      	RJMP __MAXRES
                 __REPACK2:
0020ae c0c8      	RJMP __MINRES
                 
                 __UNPACK:
0020af e850      	LDI  R21,0x80
0020b0 2e19      	MOV  R1,R25
0020b1 2215      	AND  R1,R21
0020b2 0f88      	LSL  R24
0020b3 1f99      	ROL  R25
0020b4 2795      	EOR  R25,R21
0020b5 0f55      	LSL  R21
0020b6 9587      	ROR  R24
                 
                 __UNPACK1:
0020b7 e850      	LDI  R21,0x80
0020b8 2e07      	MOV  R0,R23
0020b9 2205      	AND  R0,R21
0020ba 0f66      	LSL  R22
0020bb 1f77      	ROL  R23
0020bc 2775      	EOR  R23,R21
0020bd 0f55      	LSL  R21
0020be 9567      	ROR  R22
0020bf 9508      	RET
                 
                 __CFD1U:
0020c0 9468      	SET
0020c1 c001      	RJMP __CFD1U0
                 __CFD1:
0020c2 94e8      	CLT
                 __CFD1U0:
0020c3 935f      	PUSH R21
0020c4 dff2      	RCALL __UNPACK1
0020c5 3870      	CPI  R23,0x80
0020c6 f018      	BRLO __CFD10
0020c7 3f7f      	CPI  R23,0xFF
0020c8 f408      	BRCC __CFD10
0020c9 c0a7      	RJMP __ZERORES
                 __CFD10:
0020ca e156      	LDI  R21,22
0020cb 1b57      	SUB  R21,R23
0020cc f4aa      	BRPL __CFD11
0020cd 9551      	NEG  R21
0020ce 3058      	CPI  R21,8
0020cf f40e      	BRTC __CFD19
0020d0 3059      	CPI  R21,9
                 __CFD19:
0020d1 f030      	BRLO __CFD17
0020d2 efef      	SER  R30
0020d3 efff      	SER  R31
0020d4 ef6f      	SER  R22
0020d5 e77f      	LDI  R23,0x7F
0020d6 f977      	BLD  R23,7
0020d7 c01a      	RJMP __CFD15
                 __CFD17:
0020d8 2777      	CLR  R23
0020d9 2355      	TST  R21
0020da f0b9      	BREQ __CFD15
                 __CFD18:
0020db 0fee      	LSL  R30
0020dc 1fff      	ROL  R31
0020dd 1f66      	ROL  R22
0020de 1f77      	ROL  R23
0020df 955a      	DEC  R21
0020e0 f7d1      	BRNE __CFD18
0020e1 c010      	RJMP __CFD15
                 __CFD11:
0020e2 2777      	CLR  R23
                 __CFD12:
0020e3 3058      	CPI  R21,8
0020e4 f028      	BRLO __CFD13
0020e5 2fef      	MOV  R30,R31
0020e6 2ff6      	MOV  R31,R22
0020e7 2f67      	MOV  R22,R23
0020e8 5058      	SUBI R21,8
0020e9 cff9      	RJMP __CFD12
                 __CFD13:
0020ea 2355      	TST  R21
0020eb f031      	BREQ __CFD15
                 __CFD14:
0020ec 9576      	LSR  R23
0020ed 9567      	ROR  R22
0020ee 95f7      	ROR  R31
0020ef 95e7      	ROR  R30
0020f0 955a      	DEC  R21
0020f1 f7d1      	BRNE __CFD14
                 __CFD15:
0020f2 2000      	TST  R0
0020f3 f40a      	BRPL __CFD16
0020f4 d189      	RCALL __ANEGD1
                 __CFD16:
0020f5 915f      	POP  R21
0020f6 9508      	RET
                 
                 __CDF1U:
0020f7 9468      	SET
0020f8 c001      	RJMP __CDF1U0
                 __CDF1:
0020f9 94e8      	CLT
                 __CDF1U0:
0020fa 9730      	SBIW R30,0
0020fb 4060      	SBCI R22,0
0020fc 4070      	SBCI R23,0
0020fd f0b1      	BREQ __CDF10
0020fe 2400      	CLR  R0
0020ff f026      	BRTS __CDF11
002100 2377      	TST  R23
002101 f412      	BRPL __CDF11
002102 9400      	COM  R0
002103 d17a      	RCALL __ANEGD1
                 __CDF11:
002104 2e17      	MOV  R1,R23
002105 e17e      	LDI  R23,30
002106 2011      	TST  R1
                 __CDF12:
002107 f032      	BRMI __CDF13
002108 957a      	DEC  R23
002109 0fee      	LSL  R30
00210a 1fff      	ROL  R31
00210b 1f66      	ROL  R22
00210c 1c11      	ROL  R1
00210d cff9      	RJMP __CDF12
                 __CDF13:
00210e 2fef      	MOV  R30,R31
00210f 2ff6      	MOV  R31,R22
002110 2d61      	MOV  R22,R1
002111 935f      	PUSH R21
002112 df8a      	RCALL __REPACK
002113 915f      	POP  R21
                 __CDF10:
002114 9508      	RET
                 
                 __SWAPACC:
002115 934f      	PUSH R20
002116 01af      	MOVW R20,R30
002117 01fd      	MOVW R30,R26
002118 01da      	MOVW R26,R20
002119 01ab      	MOVW R20,R22
00211a 01bc      	MOVW R22,R24
00211b 01ca      	MOVW R24,R20
00211c 2d40      	MOV  R20,R0
00211d 2c01      	MOV  R0,R1
00211e 2e14      	MOV  R1,R20
00211f 914f      	POP  R20
002120 9508      	RET
                 
                 __UADD12:
002121 0fea      	ADD  R30,R26
002122 1ffb      	ADC  R31,R27
002123 1f68      	ADC  R22,R24
002124 9508      	RET
                 
                 __NEGMAN1:
002125 95e0      	COM  R30
002126 95f0      	COM  R31
002127 9560      	COM  R22
002128 5fef      	SUBI R30,-1
002129 4fff      	SBCI R31,-1
00212a 4f6f      	SBCI R22,-1
00212b 9508      	RET
                 
                 __SUBF12:
00212c 935f      	PUSH R21
00212d df81      	RCALL __UNPACK
00212e 3890      	CPI  R25,0x80
00212f f171      	BREQ __ADDF129
002130 e850      	LDI  R21,0x80
002131 2615      	EOR  R1,R21
                 
002132 c004      	RJMP __ADDF120
                 
                 __ADDF12:
002133 935f      	PUSH R21
002134 df7a      	RCALL __UNPACK
002135 3890      	CPI  R25,0x80
002136 f139      	BREQ __ADDF129
                 
                 __ADDF120:
002137 3870      	CPI  R23,0x80
002138 f121      	BREQ __ADDF128
                 __ADDF121:
002139 2f57      	MOV  R21,R23
00213a 1b59      	SUB  R21,R25
00213b f12b      	BRVS __ADDF1211
00213c f412      	BRPL __ADDF122
00213d dfd7      	RCALL __SWAPACC
00213e cffa      	RJMP __ADDF121
                 __ADDF122:
00213f 3158      	CPI  R21,24
002140 f018      	BRLO __ADDF123
002141 27aa      	CLR  R26
002142 27bb      	CLR  R27
002143 2788      	CLR  R24
                 __ADDF123:
002144 3058      	CPI  R21,8
002145 f028      	BRLO __ADDF124
002146 2fab      	MOV  R26,R27
002147 2fb8      	MOV  R27,R24
002148 2788      	CLR  R24
002149 5058      	SUBI R21,8
00214a cff9      	RJMP __ADDF123
                 __ADDF124:
00214b 2355      	TST  R21
00214c f029      	BREQ __ADDF126
                 __ADDF125:
00214d 9586      	LSR  R24
00214e 95b7      	ROR  R27
00214f 95a7      	ROR  R26
002150 955a      	DEC  R21
002151 f7d9      	BRNE __ADDF125
                 __ADDF126:
002152 2d50      	MOV  R21,R0
002153 2551      	EOR  R21,R1
002154 f072      	BRMI __ADDF127
002155 dfcb      	RCALL __UADD12
002156 f438      	BRCC __ADDF129
002157 9567      	ROR  R22
002158 95f7      	ROR  R31
002159 95e7      	ROR  R30
00215a 9573      	INC  R23
00215b f413      	BRVC __ADDF129
00215c c020      	RJMP __MAXRES
                 __ADDF128:
00215d dfb7      	RCALL __SWAPACC
                 __ADDF129:
00215e df3e      	RCALL __REPACK
00215f 915f      	POP  R21
002160 9508      	RET
                 __ADDF1211:
002161 f7d8      	BRCC __ADDF128
002162 cffb      	RJMP __ADDF129
                 __ADDF127:
002163 1bea      	SUB  R30,R26
002164 0bfb      	SBC  R31,R27
002165 0b68      	SBC  R22,R24
002166 f051      	BREQ __ZERORES
002167 f410      	BRCC __ADDF1210
002168 9400      	COM  R0
002169 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
00216a 2366      	TST  R22
00216b f392      	BRMI __ADDF129
00216c 0fee      	LSL  R30
00216d 1fff      	ROL  R31
00216e 1f66      	ROL  R22
00216f 957a      	DEC  R23
002170 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
002171 27ee      	CLR  R30
002172 27ff      	CLR  R31
002173 2766      	CLR  R22
002174 2777      	CLR  R23
002175 915f      	POP  R21
002176 9508      	RET
                 
                 __MINRES:
002177 efef      	SER  R30
002178 efff      	SER  R31
002179 e76f      	LDI  R22,0x7F
00217a ef7f      	SER  R23
00217b 915f      	POP  R21
00217c 9508      	RET
                 
                 __MAXRES:
00217d efef      	SER  R30
00217e efff      	SER  R31
00217f e76f      	LDI  R22,0x7F
002180 e77f      	LDI  R23,0x7F
002181 915f      	POP  R21
002182 9508      	RET
                 
                 __MULF12:
002183 935f      	PUSH R21
002184 df2a      	RCALL __UNPACK
002185 3870      	CPI  R23,0x80
002186 f351      	BREQ __ZERORES
002187 3890      	CPI  R25,0x80
002188 f341      	BREQ __ZERORES
002189 2401      	EOR  R0,R1
00218a 9408      	SEC
00218b 1f79      	ADC  R23,R25
00218c f423      	BRVC __MULF124
00218d f31c      	BRLT __ZERORES
                 __MULF125:
00218e 2000      	TST  R0
00218f f33a      	BRMI __MINRES
002190 cfec      	RJMP __MAXRES
                 __MULF124:
002191 920f      	PUSH R0
002192 931f      	PUSH R17
002193 932f      	PUSH R18
002194 933f      	PUSH R19
002195 934f      	PUSH R20
002196 2711      	CLR  R17
002197 2722      	CLR  R18
002198 2799      	CLR  R25
002199 9f68      	MUL  R22,R24
00219a 01a0      	MOVW R20,R0
00219b 9f8f      	MUL  R24,R31
00219c 2d30      	MOV  R19,R0
00219d 0d41      	ADD  R20,R1
00219e 1f59      	ADC  R21,R25
00219f 9f6b      	MUL  R22,R27
0021a0 0d30      	ADD  R19,R0
0021a1 1d41      	ADC  R20,R1
0021a2 1f59      	ADC  R21,R25
0021a3 9f8e      	MUL  R24,R30
0021a4 d027      	RCALL __MULF126
0021a5 9fbf      	MUL  R27,R31
0021a6 d025      	RCALL __MULF126
0021a7 9f6a      	MUL  R22,R26
0021a8 d023      	RCALL __MULF126
0021a9 9fbe      	MUL  R27,R30
0021aa d01d      	RCALL __MULF127
0021ab 9faf      	MUL  R26,R31
0021ac d01b      	RCALL __MULF127
0021ad 9fae      	MUL  R26,R30
0021ae 0d11      	ADD  R17,R1
0021af 1f29      	ADC  R18,R25
0021b0 1f39      	ADC  R19,R25
0021b1 1f49      	ADC  R20,R25
0021b2 1f59      	ADC  R21,R25
0021b3 2fe3      	MOV  R30,R19
0021b4 2ff4      	MOV  R31,R20
0021b5 2f65      	MOV  R22,R21
0021b6 2f52      	MOV  R21,R18
0021b7 914f      	POP  R20
0021b8 913f      	POP  R19
0021b9 912f      	POP  R18
0021ba 911f      	POP  R17
0021bb 900f      	POP  R0
0021bc 2366      	TST  R22
0021bd f02a      	BRMI __MULF122
0021be 0f55      	LSL  R21
0021bf 1fee      	ROL  R30
0021c0 1fff      	ROL  R31
0021c1 1f66      	ROL  R22
0021c2 c002      	RJMP __MULF123
                 __MULF122:
0021c3 9573      	INC  R23
0021c4 f24b      	BRVS __MULF125
                 __MULF123:
0021c5 decd      	RCALL __ROUND_REPACK
0021c6 915f      	POP  R21
0021c7 9508      	RET
                 
                 __MULF127:
0021c8 0d10      	ADD  R17,R0
0021c9 1d21      	ADC  R18,R1
0021ca 1f39      	ADC  R19,R25
0021cb c002      	RJMP __MULF128
                 __MULF126:
0021cc 0d20      	ADD  R18,R0
0021cd 1d31      	ADC  R19,R1
                 __MULF128:
0021ce 1f49      	ADC  R20,R25
0021cf 1f59      	ADC  R21,R25
0021d0 9508      	RET
                 
                 __DIVF21:
0021d1 935f      	PUSH R21
0021d2 dedc      	RCALL __UNPACK
0021d3 3870      	CPI  R23,0x80
0021d4 f421      	BRNE __DIVF210
0021d5 2011      	TST  R1
                 __DIVF211:
0021d6 f40a      	BRPL __DIVF219
0021d7 cf9f      	RJMP __MINRES
                 __DIVF219:
0021d8 cfa4      	RJMP __MAXRES
                 __DIVF210:
0021d9 3890      	CPI  R25,0x80
0021da f409      	BRNE __DIVF218
                 __DIVF217:
0021db cf95      	RJMP __ZERORES
                 __DIVF218:
0021dc 2401      	EOR  R0,R1
0021dd 9408      	SEC
0021de 0b97      	SBC  R25,R23
0021df f41b      	BRVC __DIVF216
0021e0 f3d4      	BRLT __DIVF217
0021e1 2000      	TST  R0
0021e2 cff3      	RJMP __DIVF211
                 __DIVF216:
0021e3 2f79      	MOV  R23,R25
0021e4 931f      	PUSH R17
0021e5 932f      	PUSH R18
0021e6 933f      	PUSH R19
0021e7 934f      	PUSH R20
0021e8 2411      	CLR  R1
0021e9 2711      	CLR  R17
0021ea 2722      	CLR  R18
0021eb 2733      	CLR  R19
0021ec 2744      	CLR  R20
0021ed 2755      	CLR  R21
0021ee e290      	LDI  R25,32
                 __DIVF212:
0021ef 17ae      	CP   R26,R30
0021f0 07bf      	CPC  R27,R31
0021f1 0786      	CPC  R24,R22
0021f2 0741      	CPC  R20,R17
0021f3 f030      	BRLO __DIVF213
0021f4 1bae      	SUB  R26,R30
0021f5 0bbf      	SBC  R27,R31
0021f6 0b86      	SBC  R24,R22
0021f7 0b41      	SBC  R20,R17
0021f8 9408      	SEC
0021f9 c001      	RJMP __DIVF214
                 __DIVF213:
0021fa 9488      	CLC
                 __DIVF214:
0021fb 1f55      	ROL  R21
0021fc 1f22      	ROL  R18
0021fd 1f33      	ROL  R19
0021fe 1c11      	ROL  R1
0021ff 1faa      	ROL  R26
002200 1fbb      	ROL  R27
002201 1f88      	ROL  R24
002202 1f44      	ROL  R20
002203 959a      	DEC  R25
002204 f751      	BRNE __DIVF212
002205 01f9      	MOVW R30,R18
002206 2d61      	MOV  R22,R1
002207 914f      	POP  R20
002208 913f      	POP  R19
002209 912f      	POP  R18
00220a 911f      	POP  R17
00220b 2366      	TST  R22
00220c f032      	BRMI __DIVF215
00220d 0f55      	LSL  R21
00220e 1fee      	ROL  R30
00220f 1fff      	ROL  R31
002210 1f66      	ROL  R22
002211 957a      	DEC  R23
002212 f243      	BRVS __DIVF217
                 __DIVF215:
002213 de7f      	RCALL __ROUND_REPACK
002214 915f      	POP  R21
002215 9508      	RET
                 
                 __CMPF12:
002216 2399      	TST  R25
002217 f09a      	BRMI __CMPF120
002218 2377      	TST  R23
002219 f042      	BRMI __CMPF121
00221a 1797      	CP   R25,R23
00221b f048      	BRLO __CMPF122
00221c f429      	BRNE __CMPF121
00221d 17ae      	CP   R26,R30
00221e 07bf      	CPC  R27,R31
00221f 0786      	CPC  R24,R22
002220 f020      	BRLO __CMPF122
002221 f031      	BREQ __CMPF123
                 __CMPF121:
002222 9498      	CLZ
002223 9488      	CLC
002224 9508      	RET
                 __CMPF122:
002225 9498      	CLZ
002226 9408      	SEC
002227 9508      	RET
                 __CMPF123:
002228 9418      	SEZ
002229 9488      	CLC
00222a 9508      	RET
                 __CMPF120:
00222b 2377      	TST  R23
00222c f7c2      	BRPL __CMPF122
00222d 1797      	CP   R25,R23
00222e f398      	BRLO __CMPF121
00222f f7a9      	BRNE __CMPF122
002230 17ea      	CP   R30,R26
002231 07fb      	CPC  R31,R27
002232 0768      	CPC  R22,R24
002233 f388      	BRLO __CMPF122
002234 f399      	BREQ __CMPF123
002235 cfec      	RJMP __CMPF121
                 
                 _sqrt:
002236 9724      	sbiw r28,4
002237 935f      	push r21
002238 819f      	ldd  r25,y+7
002239 2399      	tst  r25
00223a f411      	brne __sqrt0
00223b 9628      	adiw r28,8
00223c cf34      	rjmp __zerores
                 __sqrt0:
00223d f412      	brpl __sqrt1
00223e 9628      	adiw r28,8
00223f cf3d      	rjmp __maxres
                 __sqrt1:
002240 934f      	push r20
002241 e442      	ldi  r20,66
002242 818e      	ldd  r24,y+6
002243 81bd      	ldd  r27,y+5
002244 81ac      	ldd  r26,y+4
                 __sqrt2:
002245 8388      	st   y,r24
002246 8399      	std  y+1,r25
002247 83aa      	std  y+2,r26
002248 83bb      	std  y+3,r27
002249 01fd      	movw r30,r26
00224a 01bc      	movw r22,r24
00224b 81ac      	ldd  r26,y+4
00224c 81bd      	ldd  r27,y+5
00224d 818e      	ldd  r24,y+6
00224e 819f      	ldd  r25,y+7
00224f df81      	rcall __divf21
002250 8188      	ld   r24,y
002251 8199      	ldd  r25,y+1
002252 81aa      	ldd  r26,y+2
002253 81bb      	ldd  r27,y+3
002254 dede      	rcall __addf12
002255 de61      	rcall __unpack1
002256 957a      	dec  r23
002257 de45      	rcall __repack
002258 8188      	ld   r24,y
002259 8199      	ldd  r25,y+1
00225a 81aa      	ldd  r26,y+2
00225b 81bb      	ldd  r27,y+3
00225c 27ae      	eor  r26,r30
00225d 7fa8      	andi r26,0xf8
00225e f421      	brne __sqrt4
00225f 17bf      	cp   r27,r31
002260 0786      	cpc  r24,r22
002261 0797      	cpc  r25,r23
002262 f029      	breq __sqrt3
                 __sqrt4:
002263 954a      	dec  r20
002264 f019      	breq __sqrt3
002265 01df      	movw r26,r30
002266 01cb      	movw r24,r22
002267 cfdd      	rjmp __sqrt2
                 __sqrt3:
002268 914f      	pop  r20
002269 915f      	pop  r21
00226a 9628      	adiw r28,8
00226b 9508      	ret
                 
                 __ADDW2R15:
00226c 2400      	CLR  R0
00226d 0daf      	ADD  R26,R15
00226e 1db0      	ADC  R27,R0
00226f 9508      	RET
                 
                 __ADDD12:
002270 0fea      	ADD  R30,R26
002271 1ffb      	ADC  R31,R27
002272 1f68      	ADC  R22,R24
002273 1f79      	ADC  R23,R25
002274 9508      	RET
                 
                 __SUBD12:
002275 1bea      	SUB  R30,R26
002276 0bfb      	SBC  R31,R27
002277 0b68      	SBC  R22,R24
002278 0b79      	SBC  R23,R25
002279 9508      	RET
                 
                 __ANEGW1:
00227a 95f1      	NEG  R31
00227b 95e1      	NEG  R30
00227c 40f0      	SBCI R31,0
00227d 9508      	RET
                 
                 __ANEGD1:
00227e 95f0      	COM  R31
00227f 9560      	COM  R22
002280 9570      	COM  R23
002281 95e1      	NEG  R30
002282 4fff      	SBCI R31,-1
002283 4f6f      	SBCI R22,-1
002284 4f7f      	SBCI R23,-1
002285 9508      	RET
                 
                 __CBD1:
002286 2ffe      	MOV  R31,R30
002287 0fff      	ADD  R31,R31
002288 0bff      	SBC  R31,R31
002289 2f6f      	MOV  R22,R31
00228a 2f7f      	MOV  R23,R31
00228b 9508      	RET
                 
                 __CWD1:
00228c 2f6f      	MOV  R22,R31
00228d 0f66      	ADD  R22,R22
00228e 0b66      	SBC  R22,R22
00228f 2f76      	MOV  R23,R22
002290 9508      	RET
                 
                 __CWD2:
002291 2f8b      	MOV  R24,R27
002292 0f88      	ADD  R24,R24
002293 0b88      	SBC  R24,R24
002294 2f98      	MOV  R25,R24
002295 9508      	RET
                 
                 __LTW12U:
002296 17ae      	CP   R26,R30
002297 07bf      	CPC  R27,R31
002298 e0e1      	LDI  R30,1
002299 f008      	BRLO __LTW12UT
00229a 27ee      	CLR  R30
                 __LTW12UT:
00229b 9508      	RET
                 
                 __MULW12U:
00229c 9ffa      	MUL  R31,R26
00229d 2df0      	MOV  R31,R0
00229e 9feb      	MUL  R30,R27
00229f 0df0      	ADD  R31,R0
0022a0 9fea      	MUL  R30,R26
0022a1 2de0      	MOV  R30,R0
0022a2 0df1      	ADD  R31,R1
0022a3 9508      	RET
                 
                 __MULD12U:
0022a4 9f7a      	MUL  R23,R26
0022a5 2d70      	MOV  R23,R0
0022a6 9f6b      	MUL  R22,R27
0022a7 0d70      	ADD  R23,R0
0022a8 9ff8      	MUL  R31,R24
0022a9 0d70      	ADD  R23,R0
0022aa 9fe9      	MUL  R30,R25
0022ab 0d70      	ADD  R23,R0
0022ac 9f6a      	MUL  R22,R26
0022ad 2d60      	MOV  R22,R0
0022ae 0d71      	ADD  R23,R1
0022af 9ffb      	MUL  R31,R27
0022b0 0d60      	ADD  R22,R0
0022b1 1d71      	ADC  R23,R1
0022b2 9fe8      	MUL  R30,R24
0022b3 0d60      	ADD  R22,R0
0022b4 1d71      	ADC  R23,R1
0022b5 2788      	CLR  R24
0022b6 9ffa      	MUL  R31,R26
0022b7 2df0      	MOV  R31,R0
0022b8 0d61      	ADD  R22,R1
0022b9 1f78      	ADC  R23,R24
0022ba 9feb      	MUL  R30,R27
0022bb 0df0      	ADD  R31,R0
0022bc 1d61      	ADC  R22,R1
0022bd 1f78      	ADC  R23,R24
0022be 9fea      	MUL  R30,R26
0022bf 2de0      	MOV  R30,R0
0022c0 0df1      	ADD  R31,R1
0022c1 1f68      	ADC  R22,R24
0022c2 1f78      	ADC  R23,R24
0022c3 9508      	RET
                 
                 __MULW12:
0022c4 d07d      	RCALL __CHKSIGNW
0022c5 dfd6      	RCALL __MULW12U
0022c6 f40e      	BRTC __MULW121
0022c7 dfb2      	RCALL __ANEGW1
                 __MULW121:
0022c8 9508      	RET
                 
                 __MULD12:
0022c9 d086      	RCALL __CHKSIGND
0022ca dfd9      	RCALL __MULD12U
0022cb f40e      	BRTC __MULD121
0022cc dfb1      	RCALL __ANEGD1
                 __MULD121:
0022cd 9508      	RET
                 
                 __DIVB21U:
0022ce 2400      	CLR  R0
0022cf e098      	LDI  R25,8
                 __DIVB21U1:
0022d0 0faa      	LSL  R26
0022d1 1c00      	ROL  R0
0022d2 1a0e      	SUB  R0,R30
0022d3 f410      	BRCC __DIVB21U2
0022d4 0e0e      	ADD  R0,R30
0022d5 c001      	RJMP __DIVB21U3
                 __DIVB21U2:
0022d6 60a1      	SBR  R26,1
                 __DIVB21U3:
0022d7 959a      	DEC  R25
0022d8 f7b9      	BRNE __DIVB21U1
0022d9 2fea      	MOV  R30,R26
0022da 2da0      	MOV  R26,R0
0022db 9508      	RET
                 
                 __DIVB21:
0022dc d059      	RCALL __CHKSIGNB
0022dd dff0      	RCALL __DIVB21U
0022de f40e      	BRTC __DIVB211
0022df 95e1      	NEG  R30
                 __DIVB211:
0022e0 9508      	RET
                 
                 __DIVW21U:
0022e1 2400      	CLR  R0
0022e2 2411      	CLR  R1
0022e3 e190      	LDI  R25,16
                 __DIVW21U1:
0022e4 0faa      	LSL  R26
0022e5 1fbb      	ROL  R27
0022e6 1c00      	ROL  R0
0022e7 1c11      	ROL  R1
0022e8 1a0e      	SUB  R0,R30
0022e9 0a1f      	SBC  R1,R31
0022ea f418      	BRCC __DIVW21U2
0022eb 0e0e      	ADD  R0,R30
0022ec 1e1f      	ADC  R1,R31
0022ed c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0022ee 60a1      	SBR  R26,1
                 __DIVW21U3:
0022ef 959a      	DEC  R25
0022f0 f799      	BRNE __DIVW21U1
0022f1 01fd      	MOVW R30,R26
0022f2 01d0      	MOVW R26,R0
0022f3 9508      	RET
                 
                 __DIVW21:
0022f4 d04d      	RCALL __CHKSIGNW
0022f5 dfeb      	RCALL __DIVW21U
0022f6 f40e      	BRTC __DIVW211
0022f7 df82      	RCALL __ANEGW1
                 __DIVW211:
0022f8 9508      	RET
                 
                 __DIVD21U:
0022f9 933f      	PUSH R19
0022fa 934f      	PUSH R20
0022fb 935f      	PUSH R21
0022fc 2400      	CLR  R0
0022fd 2411      	CLR  R1
0022fe 2744      	CLR  R20
0022ff 2755      	CLR  R21
002300 e230      	LDI  R19,32
                 __DIVD21U1:
002301 0faa      	LSL  R26
002302 1fbb      	ROL  R27
002303 1f88      	ROL  R24
002304 1f99      	ROL  R25
002305 1c00      	ROL  R0
002306 1c11      	ROL  R1
002307 1f44      	ROL  R20
002308 1f55      	ROL  R21
002309 1a0e      	SUB  R0,R30
00230a 0a1f      	SBC  R1,R31
00230b 0b46      	SBC  R20,R22
00230c 0b57      	SBC  R21,R23
00230d f428      	BRCC __DIVD21U2
00230e 0e0e      	ADD  R0,R30
00230f 1e1f      	ADC  R1,R31
002310 1f46      	ADC  R20,R22
002311 1f57      	ADC  R21,R23
002312 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
002313 60a1      	SBR  R26,1
                 __DIVD21U3:
002314 953a      	DEC  R19
002315 f759      	BRNE __DIVD21U1
002316 01fd      	MOVW R30,R26
002317 01bc      	MOVW R22,R24
002318 01d0      	MOVW R26,R0
002319 01ca      	MOVW R24,R20
00231a 915f      	POP  R21
00231b 914f      	POP  R20
00231c 913f      	POP  R19
00231d 9508      	RET
                 
                 __DIVD21:
00231e d031      	RCALL __CHKSIGND
00231f dfd9      	RCALL __DIVD21U
002320 f40e      	BRTC __DIVD211
002321 df5c      	RCALL __ANEGD1
                 __DIVD211:
002322 9508      	RET
                 
                 __MODB21:
002323 94e8      	CLT
002324 ffa7      	SBRS R26,7
002325 c002      	RJMP __MODB211
002326 95a1      	NEG  R26
002327 9468      	SET
                 __MODB211:
002328 fde7      	SBRC R30,7
002329 95e1      	NEG  R30
00232a dfa3      	RCALL __DIVB21U
00232b 2fea      	MOV  R30,R26
00232c f40e      	BRTC __MODB212
00232d 95e1      	NEG  R30
                 __MODB212:
00232e 9508      	RET
                 
                 __MODW21U:
00232f dfb1      	RCALL __DIVW21U
002330 01fd      	MOVW R30,R26
002331 9508      	RET
                 
                 __MODD21U:
002332 dfc6      	RCALL __DIVD21U
002333 01fd      	MOVW R30,R26
002334 01bc      	MOVW R22,R24
002335 9508      	RET
                 
                 __CHKSIGNB:
002336 94e8      	CLT
002337 ffe7      	SBRS R30,7
002338 c002      	RJMP __CHKSB1
002339 95e1      	NEG  R30
00233a 9468      	SET
                 __CHKSB1:
00233b ffa7      	SBRS R26,7
00233c c004      	RJMP __CHKSB2
00233d 95a1      	NEG  R26
00233e f800      	BLD  R0,0
00233f 9403      	INC  R0
002340 fa00      	BST  R0,0
                 __CHKSB2:
002341 9508      	RET
                 
                 __CHKSIGNW:
002342 94e8      	CLT
002343 fff7      	SBRS R31,7
002344 c002      	RJMP __CHKSW1
002345 df34      	RCALL __ANEGW1
002346 9468      	SET
                 __CHKSW1:
002347 ffb7      	SBRS R27,7
002348 c006      	RJMP __CHKSW2
002349 95a0      	COM  R26
00234a 95b0      	COM  R27
00234b 9611      	ADIW R26,1
00234c f800      	BLD  R0,0
00234d 9403      	INC  R0
00234e fa00      	BST  R0,0
                 __CHKSW2:
00234f 9508      	RET
                 
                 __CHKSIGND:
002350 94e8      	CLT
002351 ff77      	SBRS R23,7
002352 c002      	RJMP __CHKSD1
002353 df2a      	RCALL __ANEGD1
002354 9468      	SET
                 __CHKSD1:
002355 ff97      	SBRS R25,7
002356 c00b      	RJMP __CHKSD2
002357 2400      	CLR  R0
002358 95a0      	COM  R26
002359 95b0      	COM  R27
00235a 9580      	COM  R24
00235b 9590      	COM  R25
00235c 9611      	ADIW R26,1
00235d 1d80      	ADC  R24,R0
00235e 1d90      	ADC  R25,R0
00235f f800      	BLD  R0,0
002360 9403      	INC  R0
002361 fa00      	BST  R0,0
                 __CHKSD2:
002362 9508      	RET
                 
                 __GETW1P:
002363 91ed      	LD   R30,X+
002364 91fc      	LD   R31,X
002365 9711      	SBIW R26,1
002366 9508      	RET
                 
                 __GETD1P:
002367 91ed      	LD   R30,X+
002368 91fd      	LD   R31,X+
002369 916d      	LD   R22,X+
00236a 917c      	LD   R23,X
00236b 9713      	SBIW R26,3
00236c 9508      	RET
                 
                 __GETD1S0:
00236d 81e8      	LD   R30,Y
00236e 81f9      	LDD  R31,Y+1
00236f 816a      	LDD  R22,Y+2
002370 817b      	LDD  R23,Y+3
002371 9508      	RET
                 
                 __GETD2S0:
002372 81a8      	LD   R26,Y
002373 81b9      	LDD  R27,Y+1
002374 818a      	LDD  R24,Y+2
002375 819b      	LDD  R25,Y+3
002376 9508      	RET
                 
                 __PUTD1S0:
002377 83e8      	ST   Y,R30
002378 83f9      	STD  Y+1,R31
002379 836a      	STD  Y+2,R22
00237a 837b      	STD  Y+3,R23
00237b 9508      	RET
                 
                 __PUTPARD1:
00237c 937a      	ST   -Y,R23
00237d 936a      	ST   -Y,R22
00237e 93fa      	ST   -Y,R31
00237f 93ea      	ST   -Y,R30
002380 9508      	RET
                 
                 __PUTPARL:
002381 27bb      	CLR  R27
                 __PUTPAR:
002382 0fea      	ADD  R30,R26
002383 1ffb      	ADC  R31,R27
                 __PUTPAR0:
002384 9002      	LD   R0,-Z
002385 920a      	ST   -Y,R0
002386 9711      	SBIW R26,1
002387 f7e1      	BRNE __PUTPAR0
002388 9508      	RET
                 
                 __CDF2U:
002389 9468      	SET
00238a c001      	RJMP __CDF2U0
                 __CDF2:
00238b 94e8      	CLT
                 __CDF2U0:
00238c d001      	RCALL __SWAPD12
00238d dd6c      	RCALL __CDF1U0
                 
                 __SWAPD12:
00238e 2e18      	MOV  R1,R24
00238f 2f86      	MOV  R24,R22
002390 2d61      	MOV  R22,R1
002391 2e19      	MOV  R1,R25
002392 2f97      	MOV  R25,R23
002393 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
002394 2e1b      	MOV  R1,R27
002395 2fbf      	MOV  R27,R31
002396 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
002397 2e1a      	MOV  R1,R26
002398 2fae      	MOV  R26,R30
002399 2de1      	MOV  R30,R1
00239a 9508      	RET
                 
                 __COPYMML:
00239b 2799      	CLR  R25
                 __COPYMM:
00239c 93ef      	PUSH R30
00239d 93ff      	PUSH R31
                 __COPYMM0:
00239e 9161      	LD   R22,Z+
00239f 936d      	ST   X+,R22
0023a0 9701      	SBIW R24,1
0023a1 f7e1      	BRNE __COPYMM0
0023a2 91ff      	POP  R31
0023a3 91ef      	POP  R30
0023a4 9508      	RET
                 
                 __CPD01:
0023a5 2400      	CLR  R0
0023a6 160e      	CP   R0,R30
0023a7 060f      	CPC  R0,R31
0023a8 0606      	CPC  R0,R22
0023a9 0607      	CPC  R0,R23
0023aa 9508      	RET
                 
                 __CPD10:
0023ab 9730      	SBIW R30,0
0023ac 4060      	SBCI R22,0
0023ad 4070      	SBCI R23,0
0023ae 9508      	RET
                 
                 __CPW02:
0023af 2400      	CLR  R0
0023b0 160a      	CP   R0,R26
0023b1 060b      	CPC  R0,R27
0023b2 9508      	RET
                 
                 __CPD02:
0023b3 2400      	CLR  R0
0023b4 160a      	CP   R0,R26
0023b5 060b      	CPC  R0,R27
0023b6 0608      	CPC  R0,R24
0023b7 0609      	CPC  R0,R25
0023b8 9508      	RET
                 
                 __CPD12:
0023b9 17ea      	CP   R30,R26
0023ba 07fb      	CPC  R31,R27
0023bb 0768      	CPC  R22,R24
0023bc 0779      	CPC  R23,R25
0023bd 9508      	RET
                 
                 __SAVELOCR6:
0023be 935a      	ST   -Y,R21
                 __SAVELOCR5:
0023bf 934a      	ST   -Y,R20
                 __SAVELOCR4:
0023c0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0023c1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0023c2 931a      	ST   -Y,R17
0023c3 930a      	ST   -Y,R16
0023c4 9508      	RET
                 
                 __LOADLOCR6:
0023c5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0023c6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0023c7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0023c8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0023c9 8119      	LDD  R17,Y+1
0023ca 8108      	LD   R16,Y
0023cb 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0023cc 0fac      	ADD  R26,R28
0023cd 1fbd      	ADC  R27,R29
                 __INITLOC0:
0023ce 9005      	LPM  R0,Z+
0023cf 920d      	ST   X+,R0
0023d0 958a      	DEC  R24
0023d1 f7e1      	BRNE __INITLOC0
0023d2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 : 112 r1 :  51 r2 :   1 r3 :   0 r4 :   2 r5 :   1 r6 :   1 r7 :   0 
r8 :   1 r9 :   0 r10:   1 r11:   0 r12:   4 r13:   2 r14:   0 r15:   6 
r16: 140 r17: 188 r18:  66 r19:  50 r20:  82 r21: 111 r22: 274 r23: 253 
r24: 168 r25: 138 r26: 591 r27: 310 r28: 102 r29:   2 r30:1627 r31: 781 
x  :  61 y  :1258 z  :  34 
Registers used: 30 out of 35 (85.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  57 add   :  50 
adiw  :  77 and   :   6 andi  :   7 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :  23 brcs  :   3 break :   0 breq  :  79 
brge  :  30 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  45 
brlt  :  12 brmi  :  13 brne  : 151 brpl  :  15 brsh  :  44 brtc  :   8 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  :1050 
cbi   :  37 cbr   :   1 clc   :   3 clh   :   0 cli   :   5 cln   :   0 
clr   :  67 cls   :   0 clt   :   8 clv   :   0 clz   :   2 com   :  14 
cp    :  33 cpc   : 128 cpi   : 200 cpse  :   0 dec   :  17 des   :   0 
eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  14 inc   :   5 jmp   :  88 ld    : 110 ldd   : 548 ldi   :1121 
lds   : 184 lpm   :  15 lsl   :  17 lsr   :   4 mov   : 109 movw  : 123 
mul   :  24 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 or    :   0 
ori   :  14 out   :  78 pop   :  64 push  :  64 rcall : 187 ret   : 263 
reti  :   4 rjmp  : 344 rol   :  37 ror   :  16 sbc   :  34 sbci  :  43 
sbi   :  62 sbic  :   7 sbis  :  14 sbiw  :  75 sbr   :   5 sbrc  :   4 
sbrs  :  25 sec   :   5 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   8 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 338 std   : 344 sts   : 204 sub   :  26 subi  :  97 swap  :   0 
tst   :  32 wdr   :   1 
Instructions used: 81 out of 116 (69.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0047a6  17042   1300  18342   32768  56.0%
[.dseg] 0x000060 0x000552      0    754    754    2143  35.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 18 warnings
