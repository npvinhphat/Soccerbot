
AVRASM ver. 2.1.30  C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm Thu Sep 10 12:08:01 2015

C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1058): warning: Register r4 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1059): warning: Register r6 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1060): warning: Register r8 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1061): warning: Register r10 already defined by the .DEF directive
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1062): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32A
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : float, width, precision
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2143
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _flagtancong=R4
                 	.DEF _offsetphongthu=R6
                 	.DEF _goctancong=R8
                 	.DEF _cmdCtrlRobot=R10
                 	.DEF _idRobot=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02a5 	JMP  __RESET
000002 940c 0527 	JMP  _ext_int0_isr
000004 940c 052c 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 11a4 	JMP  _timer2_comp_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 07d3 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 048d 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 04d5 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _ASCII:
00002a 0000
00002b 0000
00002c 0000
00002d 5f00      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5F
00002e 0000
00002f 0700
000030 0700
000031 1400      	.DB  0x0,0x0,0x0,0x7,0x0,0x7,0x0,0x14
000032 147f
000033 147f
000034 2a24
000035 2a7f      	.DB  0x7F,0x14,0x7F,0x14,0x24,0x2A,0x7F,0x2A
000036 2312
000037 0813
000038 6264
000039 4936      	.DB  0x12,0x23,0x13,0x8,0x64,0x62,0x36,0x49
00003a 2255
00003b 0050
00003c 0305
00003d 0000      	.DB  0x55,0x22,0x50,0x0,0x5,0x3,0x0,0x0
00003e 1c00
00003f 4122
000040 0000
000041 2241      	.DB  0x0,0x1C,0x22,0x41,0x0,0x0,0x41,0x22
000042 001c
000043 0814
000044 083e
000045 0814      	.DB  0x1C,0x0,0x14,0x8,0x3E,0x8,0x14,0x8
000046 3e08
000047 0808
000048 5000
000049 0030      	.DB  0x8,0x3E,0x8,0x8,0x0,0x50,0x30,0x0
00004a 0800
00004b 0808
00004c 0808
00004d 6000      	.DB  0x0,0x8,0x8,0x8,0x8,0x8,0x0,0x60
00004e 0060
00004f 2000
000050 0810
000051 0204      	.DB  0x60,0x0,0x0,0x20,0x10,0x8,0x4,0x2
000052 513e
000053 4549
000054 003e
000055 7f42      	.DB  0x3E,0x51,0x49,0x45,0x3E,0x0,0x42,0x7F
000056 0040
000057 6142
000058 4951
000059 2146      	.DB  0x40,0x0,0x42,0x61,0x51,0x49,0x46,0x21
00005a 4541
00005b 314b
00005c 1418
00005d 7f12      	.DB  0x41,0x45,0x4B,0x31,0x18,0x14,0x12,0x7F
00005e 2710
00005f 4545
000060 3945
000061 4a3c      	.DB  0x10,0x27,0x45,0x45,0x45,0x39,0x3C,0x4A
000062 4949
000063 0130
000064 0971
000065 0305      	.DB  0x49,0x49,0x30,0x1,0x71,0x9,0x5,0x3
000066 4936
000067 4949
000068 0636
000069 4949      	.DB  0x36,0x49,0x49,0x49,0x36,0x6,0x49,0x49
00006a 1e29
00006b 3600
00006c 0036
00006d 0000      	.DB  0x29,0x1E,0x0,0x36,0x36,0x0,0x0,0x0
00006e 3656
00006f 0000
000070 1408
000071 4122      	.DB  0x56,0x36,0x0,0x0,0x8,0x14,0x22,0x41
000072 1400
000073 1414
000074 1414
000075 4100      	.DB  0x0,0x14,0x14,0x14,0x14,0x14,0x0,0x41
000076 1422
000077 0208
000078 5101
000079 0609      	.DB  0x22,0x14,0x8,0x2,0x1,0x51,0x9,0x6
00007a 4932
00007b 4179
00007c 7e3e
00007d 1111      	.DB  0x32,0x49,0x79,0x41,0x3E,0x7E,0x11,0x11
00007e 7e11
00007f 497f
000080 4949
000081 3e36      	.DB  0x11,0x7E,0x7F,0x49,0x49,0x49,0x36,0x3E
000082 4141
000083 2241
000084 417f
000085 2241      	.DB  0x41,0x41,0x41,0x22,0x7F,0x41,0x41,0x22
000086 7f1c
000087 4949
000088 4149
000089 097f      	.DB  0x1C,0x7F,0x49,0x49,0x49,0x41,0x7F,0x9
00008a 0909
00008b 3e01
00008c 4941
00008d 7a49      	.DB  0x9,0x9,0x1,0x3E,0x41,0x49,0x49,0x7A
00008e 087f
00008f 0808
000090 007f
000091 7f41      	.DB  0x7F,0x8,0x8,0x8,0x7F,0x0,0x41,0x7F
000092 0041
000093 4020
000094 3f41
000095 7f01      	.DB  0x41,0x0,0x20,0x40,0x41,0x3F,0x1,0x7F
000096 1408
000097 4122
000098 407f
000099 4040      	.DB  0x8,0x14,0x22,0x41,0x7F,0x40,0x40,0x40
00009a 7f40
00009b 0c02
00009c 7f02
00009d 047f      	.DB  0x40,0x7F,0x2,0xC,0x2,0x7F,0x7F,0x4
00009e 1008
00009f 3e7f
0000a0 4141
0000a1 3e41      	.DB  0x8,0x10,0x7F,0x3E,0x41,0x41,0x41,0x3E
0000a2 097f
0000a3 0909
0000a4 3e06
0000a5 5141      	.DB  0x7F,0x9,0x9,0x9,0x6,0x3E,0x41,0x51
0000a6 5e21
0000a7 097f
0000a8 2919
0000a9 4646      	.DB  0x21,0x5E,0x7F,0x9,0x19,0x29,0x46,0x46
0000aa 4949
0000ab 3149
0000ac 0101
0000ad 017f      	.DB  0x49,0x49,0x49,0x31,0x1,0x1,0x7F,0x1
0000ae 3f01
0000af 4040
0000b0 3f40
0000b1 201f      	.DB  0x1,0x3F,0x40,0x40,0x40,0x3F,0x1F,0x20
0000b2 2040
0000b3 3f1f
0000b4 3840
0000b5 3f40      	.DB  0x40,0x20,0x1F,0x3F,0x40,0x38,0x40,0x3F
0000b6 1463
0000b7 1408
0000b8 0763
0000b9 7008      	.DB  0x63,0x14,0x8,0x14,0x63,0x7,0x8,0x70
0000ba 0708
0000bb 5161
0000bc 4549
0000bd 0043      	.DB  0x8,0x7,0x61,0x51,0x49,0x45,0x43,0x0
0000be 417f
0000bf 0041
0000c0 0402
0000c1 1008      	.DB  0x7F,0x41,0x41,0x0,0x2,0x4,0x8,0x10
0000c2 0020
0000c3 4141
0000c4 007f
0000c5 0204      	.DB  0x20,0x0,0x41,0x41,0x7F,0x0,0x4,0x2
0000c6 0201
0000c7 4004
0000c8 4040
0000c9 4040      	.DB  0x1,0x2,0x4,0x40,0x40,0x40,0x40,0x40
0000ca 0100
0000cb 0402
0000cc 2000
0000cd 5454      	.DB  0x0,0x1,0x2,0x4,0x0,0x20,0x54,0x54
0000ce 7854
0000cf 487f
0000d0 4444
0000d1 3838      	.DB  0x54,0x78,0x7F,0x48,0x44,0x44,0x38,0x38
0000d2 4444
0000d3 2044
0000d4 4438
0000d5 4844      	.DB  0x44,0x44,0x44,0x20,0x38,0x44,0x44,0x48
0000d6 387f
0000d7 5454
0000d8 1854
0000d9 7e08      	.DB  0x7F,0x38,0x54,0x54,0x54,0x18,0x8,0x7E
0000da 0109
0000db 0c02
0000dc 5252
0000dd 3e52      	.DB  0x9,0x1,0x2,0xC,0x52,0x52,0x52,0x3E
0000de 087f
0000df 0404
0000e0 0078
0000e1 7d44      	.DB  0x7F,0x8,0x4,0x4,0x78,0x0,0x44,0x7D
0000e2 0040
0000e3 4020
0000e4 3d44
0000e5 7f00      	.DB  0x40,0x0,0x20,0x40,0x44,0x3D,0x0,0x7F
0000e6 2810
0000e7 0044
0000e8 4100
0000e9 407f      	.DB  0x10,0x28,0x44,0x0,0x0,0x41,0x7F,0x40
0000ea 7c00
0000eb 1804
0000ec 7804
0000ed 087c      	.DB  0x0,0x7C,0x4,0x18,0x4,0x78,0x7C,0x8
0000ee 0404
0000ef 3878
0000f0 4444
0000f1 3844      	.DB  0x4,0x4,0x78,0x38,0x44,0x44,0x44,0x38
0000f2 147c
0000f3 1414
0000f4 0808
0000f5 1414      	.DB  0x7C,0x14,0x14,0x14,0x8,0x8,0x14,0x14
0000f6 7c18
0000f7 087c
0000f8 0404
0000f9 4808      	.DB  0x18,0x7C,0x7C,0x8,0x4,0x4,0x8,0x48
0000fa 5454
0000fb 2054
0000fc 3f04
0000fd 4044      	.DB  0x54,0x54,0x54,0x20,0x4,0x3F,0x44,0x40
0000fe 3c20
0000ff 4040
000100 7c20
000101 201c      	.DB  0x20,0x3C,0x40,0x40,0x20,0x7C,0x1C,0x20
000102 2040
000103 3c1c
000104 3040
000105 3c40      	.DB  0x40,0x20,0x1C,0x3C,0x40,0x30,0x40,0x3C
000106 2844
000107 2810
000108 0c44
000109 5050      	.DB  0x44,0x28,0x10,0x28,0x44,0xC,0x50,0x50
00010a 3c50
00010b 6444
00010c 4c54
00010d 0044      	.DB  0x50,0x3C,0x44,0x64,0x54,0x4C,0x44,0x0
00010e 3608
00010f 0041
000110 0000
000111 007f      	.DB  0x8,0x36,0x41,0x0,0x0,0x0,0x7F,0x0
000112 0000
000113 3641
000114 0008
000115 0810      	.DB  0x0,0x0,0x41,0x36,0x8,0x0,0x10,0x8
000116 1008
000117 7808
000118 4146
000119 7846      	.DB  0x8,0x10,0x8,0x78,0x46,0x41,0x46,0x78
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00011a 0000      	.DW  0x0000
                 
                 _0x3:
00011b e7e7
00011c e7e7
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1160): warning: .cseg .db misalignment - padding zero byte
00011d 00e7      	.DB  0xE7,0xE7,0xE7,0xE7,0xE7
                 _0x4:
00011e e7e7
00011f e7e7
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1162): warning: .cseg .db misalignment - padding zero byte
000120 00e7      	.DB  0xE7,0xE7,0xE7,0xE7,0xE7
                 _0x20006:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1164): warning: .cseg .db misalignment - padding zero byte
000121 0001      	.DB  0x1
                 _0x20007:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1166): warning: .cseg .db misalignment - padding zero byte
000122 000a      	.DB  0xA
                 _0x20008:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1168): warning: .cseg .db misalignment - padding zero byte
000123 0001      	.DB  0x1
                 _0x20009:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1170): warning: .cseg .db misalignment - padding zero byte
000124 000a      	.DB  0xA
                 _0x2000A:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1172): warning: .cseg .db misalignment - padding zero byte
000125 0001      	.DB  0x1
                 _0x20053:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1174): warning: .cseg .db misalignment - padding zero byte
000126 0001      	.DB  0x1
                 _0x201F9:
000127 0000
000128 0000
000129 0000
00012a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012b 0000
00012c 0000
00012d 0000
00012e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00012f 0000
000130 0000
000131 0000
000132 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000133 0000
000134 0000
000135 0000
000136 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000137 0000
000138 0000
000139 0000
00013a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013b 0000
00013c 0000
00013d 0000
00013e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00013f 0000
000140 0000
000141 0000
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1182): warning: .cseg .db misalignment - padding zero byte
000142 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0
                 _0x20348:
000143 0001
000144 0000
000145 0000      	.DB  0x1,0x0,0x0,0x0,0x0,0x0
                 _0x20000:
000146 6425
000147 2500
000148 2e30
000149 6632      	.DB  0x25,0x64,0x0,0x25,0x30,0x2E,0x32,0x66
00014a 2000
00014b 413c
00014c 424b
00014d 544f      	.DB  0x0,0x20,0x3C,0x41,0x4B,0x42,0x4F,0x54
00014e 494b
00014f 3e54
000150 4400
000151 7369      	.DB  0x4B,0x49,0x54,0x3E,0x0,0x44,0x69,0x73
000152 6174
000153 636e
000154 2065
000155 7153      	.DB  0x74,0x61,0x6E,0x63,0x65,0x20,0x53,0x71
000156 6175
000157 6572
000158 203a
000159 6625      	.DB  0x75,0x61,0x72,0x65,0x3A,0x20,0x25,0x66
00015a 0a20
00015b 000d
00015c 6f52
00015d 6f62      	.DB  0x20,0xA,0xD,0x0,0x52,0x6F,0x62,0x6F
00015e 2e74
00015f 3a78
000160 2520
000161 2064      	.DB  0x74,0x2E,0x78,0x3A,0x20,0x25,0x64,0x20
000162 0d0a
000163 5200
000164 626f
000165 746f      	.DB  0xA,0xD,0x0,0x52,0x6F,0x62,0x6F,0x74
000166 792e
000167 203a
000168 6425
000169 0a20      	.DB  0x2E,0x79,0x3A,0x20,0x25,0x64,0x20,0xA
00016a 000d
00016b 2d2d
00016c 2d2d
00016d 2d2d      	.DB  0xD,0x0,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
00016e 2d2d
00016f 2d2d
000170 2d2d
000171 2d2d      	.DB  0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D,0x2D
000172 202d
000173 0d0a
000174 5200
000175 424f      	.DB  0x2D,0x20,0xA,0xD,0x0,0x52,0x4F,0x42
000176 544f
000177 5720
000178 4c41
000179 004c      	.DB  0x4F,0x54,0x20,0x57,0x41,0x4C,0x4C,0x0
00017a 4857
00017b 5449
00017c 2045
00017d 494c      	.DB  0x57,0x48,0x49,0x54,0x45,0x20,0x4C,0x49
00017e 454e
00017f 4600
000180 4c4f
000181 574f      	.DB  0x4E,0x45,0x0,0x46,0x4F,0x4C,0x4F,0x57
000182 5245
000183 4200
000184 414c
000185 4b43      	.DB  0x45,0x52,0x0,0x42,0x4C,0x41,0x43,0x4B
000186 4c20
000187 4e49
000188 0045
000189 4c42      	.DB  0x20,0x4C,0x49,0x4E,0x45,0x0,0x42,0x4C
00018a 4555
00018b 4f54
00018c 544f
00018d 0048      	.DB  0x55,0x45,0x54,0x4F,0x4F,0x54,0x48,0x0
00018e 5244
00018f 5649
000190 0045
000191 4554      	.DB  0x44,0x52,0x49,0x56,0x45,0x0,0x54,0x45
000192 5453
000193 4d20
000194 544f
000195 524f      	.DB  0x53,0x54,0x20,0x4D,0x4F,0x54,0x4F,0x52
000196 4d00
000197 746f
000198 726f
000199 004c      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x4C,0x0
00019a 6f4d
00019b 6f74
00019c 5272
00019d 5400      	.DB  0x4D,0x6F,0x74,0x6F,0x72,0x52,0x0,0x54
00019e 5345
00019f 2054
0001a0 4155
0001a1 5452      	.DB  0x45,0x53,0x54,0x20,0x55,0x41,0x52,0x54
0001a2 5400
0001a3 5345
0001a4 2054
0001a5 5249      	.DB  0x0,0x54,0x45,0x53,0x54,0x20,0x49,0x52
0001a6 3000
0001a7 002e
0001a8 2e31
0001a9 3200      	.DB  0x0,0x30,0x2E,0x0,0x31,0x2E,0x0,0x32
0001aa 002e
0001ab 2e33
0001ac 3400
0001ad 002e      	.DB  0x2E,0x0,0x33,0x2E,0x0,0x34,0x2E,0x0
0001ae 2e35
0001af 3600
0001b0 002e
0001b1 2e37      	.DB  0x35,0x2E,0x0,0x36,0x2E,0x0,0x37,0x2E
0001b2 3c00
0001b3 4553
0001b4 464c
0001b5 5420      	.DB  0x0,0x3C,0x53,0x45,0x4C,0x46,0x20,0x54
0001b6 5345
0001b7 3e54
0001b8 2a00
0001b9 2a2a      	.DB  0x45,0x53,0x54,0x3E,0x0,0x2A,0x2A,0x2A
0001ba 2a2a
0001bb 2a2a
0001bc 2a2a
0001bd 2a2a      	.DB  0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A,0x2A
0001be 002a
0001bf 4352
0001c0 5320
0001c1 5245      	.DB  0x2A,0x0,0x52,0x43,0x20,0x53,0x45,0x52
0001c2 4f56
0001c3 3100
0001c4 522e
0001c5 424f      	.DB  0x56,0x4F,0x0,0x31,0x2E,0x52,0x4F,0x42
0001c6 544f
0001c7 5720
0001c8 4c41
0001c9 004c      	.DB  0x4F,0x54,0x20,0x57,0x41,0x4C,0x4C,0x0
0001ca 2e32
0001cb 4c42
0001cc 4555
0001cd 4f54      	.DB  0x32,0x2E,0x42,0x4C,0x55,0x45,0x54,0x4F
0001ce 544f
0001cf 2048
0001d0 3300
0001d1 572e      	.DB  0x4F,0x54,0x48,0x20,0x0,0x33,0x2E,0x57
0001d2 4948
0001d3 4554
0001d4 4c20
0001d5 4e49      	.DB  0x48,0x49,0x54,0x45,0x20,0x4C,0x49,0x4E
0001d6 0045
0001d7 2e34
0001d8 4c42
0001d9 4341      	.DB  0x45,0x0,0x34,0x2E,0x42,0x4C,0x41,0x43
0001da 204b
0001db 494c
0001dc 454e
0001dd 3500      	.DB  0x4B,0x20,0x4C,0x49,0x4E,0x45,0x0,0x35
0001de 542e
0001df 5345
0001e0 2054
0001e1 4f4d      	.DB  0x2E,0x54,0x45,0x53,0x54,0x20,0x4D,0x4F
0001e2 4f54
0001e3 0052
0001e4 2e36
0001e5 4554      	.DB  0x54,0x4F,0x52,0x0,0x36,0x2E,0x54,0x45
0001e6 5453
0001e7 4920
0001e8 2052
0001e9 2020      	.DB  0x53,0x54,0x20,0x49,0x52,0x20,0x20,0x20
0001ea 3700
0001eb 542e
0001ec 5345
0001ed 2054      	.DB  0x0,0x37,0x2E,0x54,0x45,0x53,0x54,0x20
0001ee 4652
0001ef 2020
0001f0 0020
0001f1 2e38      	.DB  0x52,0x46,0x20,0x20,0x20,0x0,0x38,0x2E
0001f2 4554
0001f3 5453
0001f4 5520
0001f5 5241      	.DB  0x54,0x45,0x53,0x54,0x20,0x55,0x41,0x52
0001f6 2054
0001f7 3900
0001f8 522e
0001f9 2043      	.DB  0x54,0x20,0x0,0x39,0x2E,0x52,0x43,0x20
0001fa 4553
0001fb 5652
0001fc 204f
0001fd 3100      	.DB  0x53,0x45,0x52,0x56,0x4F,0x20,0x0,0x31
0001fe 2e30
0001ff 5055
000200 4144
000201 4554      	.DB  0x30,0x2E,0x55,0x50,0x44,0x41,0x54,0x45
000202 5220
000203 0042
000204 414d
000205 4e49      	.DB  0x20,0x52,0x42,0x0,0x4D,0x41,0x49,0x4E
000206 5020
000207 4f52
000208 5247
000209 4d41      	.DB  0x20,0x50,0x52,0x4F,0x47,0x52,0x41,0x4D
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1235): warning: .cseg .db misalignment - padding zero byte
00020a 0000      	.DB  0x0
                 _0x2040000:
00020b 4e2d
00020c 4e41
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1237): warning: .cseg .db misalignment - padding zero byte
00020d 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1239): warning: .cseg .db misalignment - padding zero byte
00020e 0001      	.DB  0x1
                 _0x20A0000:
00020f 4e2d
000210 4e41
000211 4900
000212 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\AtM5\Documents\GitHub\Soccerbot\List\AK.asm(1242): warning: .cseg .db misalignment - padding zero byte
000213 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000214 0001      	.DW  0x01
000215 0002      	.DW  0x02
000216 0234      	.DW  __REG_BIT_VARS*2
                 
000217 0005      	.DW  0x05
000218 03c5      	.DW  _TX_ADDRESS
000219 0236      	.DW  _0x3*2
                 
00021a 0005      	.DW  0x05
00021b 03ca      	.DW  _RX_ADDRESS
00021c 023c      	.DW  _0x4*2
                 
00021d 0001      	.DW  0x01
00021e 04dd      	.DW  _id
00021f 0242      	.DW  _0x20006*2
                 
000220 0001      	.DW  0x01
000221 0508      	.DW  _KpR
000222 0244      	.DW  _0x20007*2
                 
000223 0001      	.DW  0x01
000224 050a      	.DW  _KiR
000225 0246      	.DW  _0x20008*2
                 
000226 0001      	.DW  0x01
000227 050c      	.DW  _KpL
000228 0248      	.DW  _0x20009*2
                 
000229 0001      	.DW  0x01
00022a 050e      	.DW  _KiL
00022b 024a      	.DW  _0x2000A*2
                 
00022c 000c      	.DW  0x0C
00022d 0260      	.DW  _0x2008F
00022e 0295      	.DW  _0x20000*2+9
                 
00022f 000b      	.DW  0x0B
000230 026c      	.DW  _0x201B2
000231 02e9      	.DW  _0x20000*2+93
                 
000232 000b      	.DW  0x0B
000233 0277      	.DW  _0x201C7
000234 02f4      	.DW  _0x20000*2+104
                 
000235 0008      	.DW  0x08
000236 0282      	.DW  _0x201C7+11
000237 02ff      	.DW  _0x20000*2+115
                 
000238 000b      	.DW  0x0B
000239 028a      	.DW  _0x201FA
00023a 0307      	.DW  _0x20000*2+123
                 
00023b 0008      	.DW  0x08
00023c 0295      	.DW  _0x201FA+11
00023d 02ff      	.DW  _0x20000*2+115
                 
00023e 000a      	.DW  0x0A
00023f 029d      	.DW  _0x20248
000240 0312      	.DW  _0x20000*2+134
                 
000241 0006      	.DW  0x06
000242 02a7      	.DW  _0x20248+10
000243 031c      	.DW  _0x20000*2+144
                 
000244 000b      	.DW  0x0B
000245 02ad      	.DW  _0x2025F
000246 0322      	.DW  _0x20000*2+150
                 
000247 0007      	.DW  0x07
000248 02b8      	.DW  _0x2025F+11
000249 032d      	.DW  _0x20000*2+161
                 
00024a 0007      	.DW  0x07
00024b 02bf      	.DW  _0x2025F+18
00024c 0334      	.DW  _0x20000*2+168
                 
00024d 000a      	.DW  0x0A
00024e 02c6      	.DW  _0x20264
00024f 033b      	.DW  _0x20000*2+175
                 
000250 0008      	.DW  0x08
000251 02d0      	.DW  _0x20265
000252 0345      	.DW  _0x20000*2+185
                 
000253 0003      	.DW  0x03
000254 02d8      	.DW  _0x20265+8
000255 034d      	.DW  _0x20000*2+193
                 
000256 0003      	.DW  0x03
000257 02db      	.DW  _0x20265+11
000258 0350      	.DW  _0x20000*2+196
                 
000259 0003      	.DW  0x03
00025a 02de      	.DW  _0x20265+14
00025b 0353      	.DW  _0x20000*2+199
                 
00025c 0003      	.DW  0x03
00025d 02e1      	.DW  _0x20265+17
00025e 0356      	.DW  _0x20000*2+202
                 
00025f 0003      	.DW  0x03
000260 02e4      	.DW  _0x20265+20
000261 0359      	.DW  _0x20000*2+205
                 
000262 0003      	.DW  0x03
000263 02e7      	.DW  _0x20265+23
000264 035c      	.DW  _0x20000*2+208
                 
000265 0003      	.DW  0x03
000266 02ea      	.DW  _0x20265+26
000267 035f      	.DW  _0x20000*2+211
                 
000268 0003      	.DW  0x03
000269 02ed      	.DW  _0x20265+29
00026a 0362      	.DW  _0x20000*2+214
                 
00026b 000c      	.DW  0x0C
00026c 02f0      	.DW  _0x20269
00026d 0365      	.DW  _0x20000*2+217
                 
00026e 000d      	.DW  0x0D
00026f 02fc      	.DW  _0x20269+12
000270 0371      	.DW  _0x20000*2+229
                 
000271 0009      	.DW  0x09
000272 0309      	.DW  _0x202D2
000273 037e      	.DW  _0x20000*2+242
                 
000274 000d      	.DW  0x0D
000275 0312      	.DW  _0x202DE
000276 0387      	.DW  _0x20000*2+251
                 
000277 000d      	.DW  0x0D
000278 031f      	.DW  _0x202DE+13
000279 0387      	.DW  _0x20000*2+251
                 
00027a 000d      	.DW  0x0D
00027b 032c      	.DW  _0x202DE+26
00027c 0394      	.DW  _0x20000*2+264
                 
00027d 000d      	.DW  0x0D
00027e 0339      	.DW  _0x202DE+39
00027f 03a1      	.DW  _0x20000*2+277
                 
000280 000d      	.DW  0x0D
000281 0346      	.DW  _0x202DE+52
000282 03ae      	.DW  _0x20000*2+290
                 
000283 000d      	.DW  0x0D
000284 0353      	.DW  _0x202DE+65
000285 03bb      	.DW  _0x20000*2+303
                 
000286 000d      	.DW  0x0D
000287 0360      	.DW  _0x202DE+78
000288 03c8      	.DW  _0x20000*2+316
                 
000289 000d      	.DW  0x0D
00028a 036d      	.DW  _0x202DE+91
00028b 03d5      	.DW  _0x20000*2+329
                 
00028c 000d      	.DW  0x0D
00028d 037a      	.DW  _0x202DE+104
00028e 03e2      	.DW  _0x20000*2+342
                 
00028f 000c      	.DW  0x0C
000290 0387      	.DW  _0x202DE+117
000291 03ef      	.DW  _0x20000*2+355
                 
000292 000d      	.DW  0x0D
000293 0393      	.DW  _0x202DE+129
000294 03fb      	.DW  _0x20000*2+367
                 
000295 000b      	.DW  0x0B
000296 03a0      	.DW  _0x2031F
000297 0296      	.DW  _0x20000*2+10
                 
000298 000d      	.DW  0x0D
000299 03ab      	.DW  _0x2031F+11
00029a 0371      	.DW  _0x20000*2+229
                 
00029b 000d      	.DW  0x0D
00029c 03b8      	.DW  _0x2031F+24
00029d 0408      	.DW  _0x20000*2+380
                 
00029e 0006      	.DW  0x06
00029f 0004      	.DW  0x04
0002a0 0286      	.DW  _0x20348*2
                 
0002a1 0001      	.DW  0x01
0002a2 054e      	.DW  __seed_G105
0002a3 041c      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
0002a4 0000      	.DW  0
                 
                 __RESET:
0002a5 94f8      	CLI
0002a6 27ee      	CLR  R30
0002a7 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002a8 e0f1      	LDI  R31,1
0002a9 bff5      	OUT  MCUCR,R31
0002aa bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0002ab e1f8      	LDI  R31,0x18
0002ac bdf1      	OUT  WDTCR,R31
0002ad bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0002ae e08d      	LDI  R24,(14-2)+1
0002af e0a2      	LDI  R26,2
0002b0 27bb      	CLR  R27
                 __CLEAR_REG:
0002b1 93ed      	ST   X+,R30
0002b2 958a      	DEC  R24
0002b3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002b4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002b5 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002b6 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0002b7 93ed      	ST   X+,R30
0002b8 9701      	SBIW R24,1
0002b9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002ba e2e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002bb e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002bc 9185      	LPM  R24,Z+
0002bd 9195      	LPM  R25,Z+
0002be 9700      	SBIW R24,0
0002bf f061      	BREQ __GLOBAL_INI_END
0002c0 91a5      	LPM  R26,Z+
0002c1 91b5      	LPM  R27,Z+
0002c2 9005      	LPM  R0,Z+
0002c3 9015      	LPM  R1,Z+
0002c4 01bf      	MOVW R22,R30
0002c5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002c6 9005      	LPM  R0,Z+
0002c7 920d      	ST   X+,R0
0002c8 9701      	SBIW R24,1
0002c9 f7e1      	BRNE __GLOBAL_INI_LOOP
0002ca 01fb      	MOVW R30,R22
0002cb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002cc e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002cd bfed      	OUT  SPL,R30
0002ce e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002cf bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002d0 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002d1 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002d2 940c 1283 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <string.h>
                 ;#include <nRF24L01/nRF24L01.h>
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;
                 ;#define CSN    PORTC.2
                 ;#define CE     PORTC.3
                 ;#define SCK    PORTB.7
                 ;#define MISO   PINB.6
                 ;#define MOSI   PORTB.5
                 ;//********************************************************************************
                 ;//unsigned char const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};	//
                 ;//unsigned char const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};	//
                 ;unsigned char const TX_ADDRESS[TX_ADR_WIDTH]= {0xE7,0xE7,0xE7,0xE7,0xE7};	// dia chi phat du lieu
                 
                 	.DSEG
                 ;unsigned char const RX_ADDRESS[RX_ADR_WIDTH]= {0xE7,0xE7,0xE7,0xE7,0xE7};	// dia chi nhan du lieu
                 ;//****************************************************************************************
                 ;//*NRF24L01
                 ;//***************************************************************************************/
                 ;void init_NRF24L01(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _init_NRF24L01:
                 ; 0000 0016     //init SPI
                 ; 0000 0017     SPCR=0x51; //set this to 0x50 for 1 mbits
0002d4 e5e1      	LDI  R30,LOW(81)
0002d5 b9ed      	OUT  0xD,R30
                 ; 0000 0018     SPSR=0x00;
0002d6 e0e0      	LDI  R30,LOW(0)
0002d7 b9ee      	OUT  0xE,R30
                 ; 0000 0019 
                 ; 0000 001A     //inerDelay_us(100);
                 ; 0000 001B     delay_us(100);
                +
0002d8 ec88     +LDI R24 , LOW ( 200 )
0002d9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002da 9701     +SBIW R24 , 1
0002db f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
                 ; 0000 001C  	CE=0;    // chip enable
0002dc 98ab      	CBI  0x15,3
                 ; 0000 001D  	CSN=1;   // Spi disable
0002dd 9aaa      	SBI  0x15,2
                 ; 0000 001E  	//SCK=0;   // Spi clock line init high
                 ; 0000 001F 	SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    //
0002de e3e0      	LDI  R30,LOW(48)
0002df 93ea      	ST   -Y,R30
0002e0 ece5      	LDI  R30,LOW(_TX_ADDRESS)
0002e1 e0f3      	LDI  R31,HIGH(_TX_ADDRESS)
0002e2 940e 18b5 	CALL SUBOPT_0x0
                 ; 0000 0020 	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); //
0002e4 e2ea      	LDI  R30,LOW(42)
0002e5 93ea      	ST   -Y,R30
0002e6 ecea      	LDI  R30,LOW(_RX_ADDRESS)
0002e7 e0f3      	LDI  R31,HIGH(_RX_ADDRESS)
0002e8 940e 18b5 	CALL SUBOPT_0x0
                 ; 0000 0021 	SPI_RW_Reg(WRITE_REG + EN_AA, 0x00);      // EN P0, 2-->P1
0002ea e2e1      	LDI  R30,LOW(33)
0002eb 93ea      	ST   -Y,R30
0002ec e0e0      	LDI  R30,LOW(0)
0002ed 93ea      	ST   -Y,R30
0002ee d02c      	RCALL _SPI_RW_Reg
                 ; 0000 0022 	SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //Enable data P0
0002ef e2e2      	LDI  R30,LOW(34)
0002f0 93ea      	ST   -Y,R30
0002f1 e0e1      	LDI  R30,LOW(1)
0002f2 93ea      	ST   -Y,R30
0002f3 d027      	RCALL _SPI_RW_Reg
                 ; 0000 0023 	SPI_RW_Reg(WRITE_REG + RF_CH, 2);        // Chanel 0 RF = 2400 + RF_CH* (1or 2 M)
0002f4 e2e5      	LDI  R30,LOW(37)
0002f5 93ea      	ST   -Y,R30
0002f6 e0e2      	LDI  R30,LOW(2)
0002f7 93ea      	ST   -Y,R30
0002f8 d022      	RCALL _SPI_RW_Reg
                 ; 0000 0024 	SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); // Do rong data truyen 32 byte
0002f9 e3e1      	LDI  R30,LOW(49)
0002fa 93ea      	ST   -Y,R30
0002fb e2e0      	LDI  R30,LOW(32)
0002fc 93ea      	ST   -Y,R30
0002fd d01d      	RCALL _SPI_RW_Reg
                 ; 0000 0025 	SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   		// 1M, 0dbm
0002fe e2e6      	LDI  R30,LOW(38)
0002ff 93ea      	ST   -Y,R30
000300 e0e7      	LDI  R30,LOW(7)
000301 93ea      	ST   -Y,R30
000302 d018      	RCALL _SPI_RW_Reg
                 ; 0000 0026 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		 // Enable CRC, 2 byte CRC, Send
000303 e2e0      	LDI  R30,LOW(32)
000304 93ea      	ST   -Y,R30
000305 e0ee      	LDI  R30,LOW(14)
000306 93ea      	ST   -Y,R30
000307 d013      	RCALL _SPI_RW_Reg
                 ; 0000 0027 
                 ; 0000 0028 }
000308 9508      	RET
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_RW(unsigned char Buff)
                 ;//NRF24L01
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_RW(unsigned char Buff)
                 ; 0000 002E {
                 _SPI_RW:
                 ; 0000 002F    return spi(Buff);
                 ;	Buff -> Y+0
000309 81e8      	LD   R30,Y
00030a 93ea      	ST   -Y,R30
00030b 940e 132d 	CALL _spi
00030d 940c 056b 	JMP  _0x20C0010
                 ; 0000 0030 }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_Read(unsigned char reg)
                 ;//NRF24L01
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_Read(unsigned char reg)
                 ; 0000 0036 {
                 _SPI_Read:
                 ; 0000 0037 	unsigned char reg_val;
                 ; 0000 0038 
                 ; 0000 0039 	CSN = 0;                // CSN low, initialize SPI communication...
00030f 931a      	ST   -Y,R17
                 ;	reg -> Y+1
                 ;	reg_val -> R17
000310 98aa      	CBI  0x15,2
                 ; 0000 003A 	SPI_RW(reg);            // Select register to read from..
000311 81e9      	LDD  R30,Y+1
000312 93ea      	ST   -Y,R30
000313 dff5      	RCALL _SPI_RW
                 ; 0000 003B 	reg_val = SPI_RW(0);    // ..then read registervalue
000314 e0e0      	LDI  R30,LOW(0)
000315 940e 18bd 	CALL SUBOPT_0x1
                 ; 0000 003C 	CSN = 1;                // CSN high, terminate SPI communication
000317 9aaa      	SBI  0x15,2
                 ; 0000 003D 
                 ; 0000 003E 	return(reg_val);        // return register value
000318 2fe1      	MOV  R30,R17
000319 8118      	LDD  R17,Y+0
00031a c157      	RJMP _0x20C0011
                 ; 0000 003F }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_RW_Reg(unsigned char reg, unsigned char value)
                 ; 0000 0044 {
                 _SPI_RW_Reg:
                 ; 0000 0045 	unsigned char status;
                 ; 0000 0046 
                 ; 0000 0047 	CSN = 0;                   // CSN low, init SPI transaction
00031b 931a      	ST   -Y,R17
                 ;	reg -> Y+2
                 ;	value -> Y+1
                 ;	status -> R17
00031c 98aa      	CBI  0x15,2
                 ; 0000 0048 	status = SPI_RW(reg);      // select register
00031d 81ea      	LDD  R30,Y+2
00031e 940e 18bd 	CALL SUBOPT_0x1
                 ; 0000 0049 	SPI_RW(value);             // ..and write value to it..
000320 81e9      	LDD  R30,Y+1
000321 93ea      	ST   -Y,R30
000322 dfe6      	RCALL _SPI_RW
                 ; 0000 004A 	CSN = 1;                   // CSN high again
000323 9aaa      	SBI  0x15,2
                 ; 0000 004B 
                 ; 0000 004C 	return(status);            // return nRF24L01 status uchar
000324 2fe1      	MOV  R30,R17
000325 8118      	LDD  R17,Y+0
000326 c0c1      	RJMP _0x20C0015
                 ; 0000 004D }
                 ;/****************************************************************************************************/
                 ;//unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
                 ;//
                 ;/****************************************************************************************************/
                 ;unsigned char SPI_Read_Buf(unsigned char reg, unsigned char *pBuf, unsigned char uchars)
                 ; 0000 0053 {
                 _SPI_Read_Buf:
                 ; 0000 0054 	unsigned char status,uchar_ctr;
                 ; 0000 0055 
                 ; 0000 0056 	CSN = 0;                    		// Set CSN low, init SPI tranaction
000327 931a      	ST   -Y,R17
000328 930a      	ST   -Y,R16
                 ;	reg -> Y+5
                 ;	*pBuf -> Y+3
                 ;	uchars -> Y+2
                 ;	status -> R17
                 ;	uchar_ctr -> R16
000329 98aa      	CBI  0x15,2
                 ; 0000 0057 	status = SPI_RW(reg);       		// Select register to write to and read status uchar
00032a 81ed      	LDD  R30,Y+5
00032b 940e 18bd 	CALL SUBOPT_0x1
                 ; 0000 0058 
                 ; 0000 0059 	for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
00032d e000      	LDI  R16,LOW(0)
                 _0x14:
00032e 81ea      	LDD  R30,Y+2
00032f 170e      	CP   R16,R30
000330 f480      	BRSH _0x15
                 ; 0000 005A 		pBuf[uchar_ctr] = SPI_RW(0);    //
000331 2fe0      	MOV  R30,R16
000332 81ab      	LDD  R26,Y+3
000333 81bc      	LDD  R27,Y+3+1
000334 e0f0      	LDI  R31,0
000335 0fea      	ADD  R30,R26
000336 1ffb      	ADC  R31,R27
000337 93ff      	PUSH R31
000338 93ef      	PUSH R30
000339 e0e0      	LDI  R30,LOW(0)
00033a 93ea      	ST   -Y,R30
00033b dfcd      	RCALL _SPI_RW
00033c 91af      	POP  R26
00033d 91bf      	POP  R27
00033e 93ec      	ST   X,R30
00033f 5f0f      	SUBI R16,-1
000340 cfed      	RJMP _0x14
                 _0x15:
                 ; 0000 005C PORTC.2 = 1;
000341 9aaa      	SBI  0x15,2
                 ; 0000 005D 
                 ; 0000 005E 	return(status);                    // return nRF24L01 status uchar
000342 2fe1      	MOV  R30,R17
000343 8119      	LDD  R17,Y+1
000344 8108      	LDD  R16,Y+0
000345 9626      	ADIW R28,6
000346 9508      	RET
                 ; 0000 005F }
                 ;/*********************************************************************************************************/
                 ;//uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
                 ;/*****************************************************************************************************/
                 ;unsigned char SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned uchars)
                 ; 0000 0064 {
                 _SPI_Write_Buf:
                 ; 0000 0065 	unsigned char status,uchar_ctr;
                 ; 0000 0066 	CSN = 0;            //SPI
000347 931a      	ST   -Y,R17
000348 930a      	ST   -Y,R16
                 ;	reg -> Y+6
                 ;	*pBuf -> Y+4
                 ;	uchars -> Y+2
                 ;	status -> R17
                 ;	uchar_ctr -> R16
000349 98aa      	CBI  0x15,2
                 ; 0000 0067 	status = SPI_RW(reg);
00034a 81ee      	LDD  R30,Y+6
00034b 940e 18bd 	CALL SUBOPT_0x1
                 ; 0000 0068 	for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
00034d e000      	LDI  R16,LOW(0)
                 _0x1B:
00034e 81ea      	LDD  R30,Y+2
00034f 81fb      	LDD  R31,Y+2+1
000350 2fa0      	MOV  R26,R16
000351 e0b0      	LDI  R27,0
000352 17ae      	CP   R26,R30
000353 07bf      	CPC  R27,R31
000354 f448      	BRSH _0x1C
                 ; 0000 0069 	SPI_RW(*pBuf++);
000355 81ac      	LDD  R26,Y+4
000356 81bd      	LDD  R27,Y+4+1
000357 91ed      	LD   R30,X+
000358 83ac      	STD  Y+4,R26
000359 83bd      	STD  Y+4+1,R27
00035a 93ea      	ST   -Y,R30
00035b dfad      	RCALL _SPI_RW
00035c 5f0f      	SUBI R16,-1
00035d cff0      	RJMP _0x1B
                 _0x1C:
                 ; 0000 006A PORTC.2 = 1;
00035e 9aaa      	SBI  0x15,2
                 ; 0000 006B 	return(status);    //
00035f 2fe1      	MOV  R30,R17
000360 8119      	LDD  R17,Y+1
000361 8108      	LDD  R16,Y+0
000362 9627      	ADIW R28,7
000363 9508      	RET
                 ; 0000 006C }
                 ;/****************************************************************************************************/
                 ;//void SetRX_Mode(void)
                 ;//
                 ;/****************************************************************************************************/
                 ;void SetRX_Mode(void)
                 ; 0000 0072 {
                 _SetRX_Mode:
                 ; 0000 0073 	CE=0;
000364 98ab      	CBI  0x15,3
                 ; 0000 0074 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x07);   		// enable power up and prx
000365 e2e0      	LDI  R30,LOW(32)
000366 93ea      	ST   -Y,R30
000367 e0e7      	LDI  R30,LOW(7)
000368 93ea      	ST   -Y,R30
000369 dfb1      	RCALL _SPI_RW_Reg
                 ; 0000 0075 	CE = 1;
00036a 9aab      	SBI  0x15,3
                 ; 0000 0076 	delay_us(130);    //
                +
00036b e084     +LDI R24 , LOW ( 260 )
00036c e091     +LDI R25 , HIGH ( 260 )
                +__DELAY_USW_LOOP :
00036d 9701     +SBIW R24 , 1
00036e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 260
                 ; 0000 0077 }
00036f 9508      	RET
                 ;/****************************************************************************************************/
                 ;//void SetTX_Mode(void)
                 ;//
                 ;/****************************************************************************************************/
                 ;void SetTX_Mode(void)
                 ; 0000 007D {
                 ; 0000 007E 	CE=0;
                 ; 0000 007F 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		// Enable CRC, 2 byte CRC, Send
                 ; 0000 0080 	CE = 1;
                 ; 0000 0081 	delay_us(130);    //
                 ; 0000 0082 }
                 ;
                 ;/******************************************************************************************************/
                 ;//unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
                 ;/******************************************************************************************************/
                 ;unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
                 ; 0000 0088 {
                 _nRF24L01_RxPacket:
                 ; 0000 0089     unsigned char revale=0;
                 ; 0000 008A     unsigned char sta;
                 ; 0000 008B 	sta=SPI_Read(STATUS);	// Read Status
000370 931a      	ST   -Y,R17
000371 930a      	ST   -Y,R16
                 ;	*rx_buf -> Y+2
                 ;	revale -> R17
                 ;	sta -> R16
000372 e010      	LDI  R17,0
000373 e0e7      	LDI  R30,LOW(7)
000374 93ea      	ST   -Y,R30
000375 df99      	RCALL _SPI_Read
000376 2f0e      	MOV  R16,R30
                 ; 0000 008C 	//if(RX_DR)				// Data in RX FIFO
                 ; 0000 008D     if((sta&0x40)!=0)		// Data in RX FIFO
000377 ff06      	SBRS R16,6
000378 c00b      	RJMP _0x27
                 ; 0000 008E 	{
                 ; 0000 008F 	    CE = 0; 			//SPI
000379 98ab      	CBI  0x15,3
                 ; 0000 0090 		SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
00037a e6e1      	LDI  R30,LOW(97)
00037b 93ea      	ST   -Y,R30
00037c 81eb      	LDD  R30,Y+3
00037d 81fc      	LDD  R31,Y+3+1
00037e 93fa      	ST   -Y,R31
00037f 93ea      	ST   -Y,R30
000380 e2e0      	LDI  R30,LOW(32)
000381 93ea      	ST   -Y,R30
000382 dfa4      	RCALL _SPI_Read_Buf
                 ; 0000 0091 		revale =1;
000383 e011      	LDI  R17,LOW(1)
                 ; 0000 0092 	}
                 ; 0000 0093 	SPI_RW_Reg(WRITE_REG+STATUS,sta);
                 _0x27:
000384 e2e7      	LDI  R30,LOW(39)
000385 93ea      	ST   -Y,R30
000386 930a      	ST   -Y,R16
000387 df93      	RCALL _SPI_RW_Reg
                 ; 0000 0094     CE = 1; 			//SPI
000388 9aab      	SBI  0x15,3
                 ; 0000 0095 	return revale;
000389 2fe1      	MOV  R30,R17
00038a 8119      	LDD  R17,Y+1
00038b 8108      	LDD  R16,Y+0
00038c 940c 0597 	JMP  _0x20C000E
                 ; 0000 0096 }
                 ;/***********************************************************************************************************/
                 ;//void nRF24L01_TxPacket(unsigned char * tx_buf)
                 ;//
                 ;/**********************************************************************************************************/
                 ;void nRF24L01_TxPacket(unsigned char * tx_buf)
                 ; 0000 009C {
                 ; 0000 009D 	CE=0;
                 ;	*tx_buf -> Y+0
                 ; 0000 009E 	SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Send Address
                 ; 0000 009F 	SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); 			 //send data
                 ; 0000 00A0 	SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);   		 // Send Out
                 ; 0000 00A1 	CE=1;
                 ; 0000 00A2 }
                 ;
                 ;// --------------------END OF FILE------------------------
                 ;// -------------------------------------------------------
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Evaluation
                 ;Automatic Program Generator
                 ;� Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 6/4/2015
                 ;Author  : Freeware, for evaluation and non-commercial use only
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdarg.h>
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include <delay.h>
                 ;#include <spi.h>
                 ;#include <nRF24L01/nRF24L01.h>
                 ;#include <math.h>
                 ;
                 ;/* Debug mode definition */
                 ;#define DEBUG_MODE 1    // USE OUR CODE, ask Phat for more details
                 ;#define DEBUG_EN 1      // Blue tooth mode
                 ;
                 ;/* PIN DEFINITION */
                 ;// PIN LED ROBO KIT
                 ;
                 ;//Hung comment a xamlin thing
                 ;
                 ;#define LEDL	PORTC.4
                 ;#define LEDR	PORTC.5
                 ;#define LEDFL   PORTA.4
                 ;#define LEDFR   PORTA.5
                 ;#define LEDBL   PORTA.6
                 ;#define LEDBR   PORTA.7
                 ;#define keyKT   PINC.0 // Nut ben trai
                 ;#define keyKP   PINC.1 // Nut ben phai
                 ;#define S0  PINA.0
                 ;#define S1  PINA.1
                 ;#define S2  PINA.2
                 ;#define S3  PINA.3
                 ;#define S4  PINA.7
                 ;#define MLdir   PORTC.6
                 ;#define MRdir   PORTC.7
                 ;// PIN NOKIA 5110
                 ;#define RST    PORTB.0
                 ;#define SCE    PORTB.1
                 ;#define DC     PORTB.2
                 ;#define DIN    PORTB.5
                 ;#define SCK    PORTB.7
                 ;#define LCD_C     0
                 ;#define LCD_D     1
                 ;#define LCD_X     84
                 ;#define LCD_Y     48
                 ;#define Black 1
                 ;#define White 0
                 ;#define Filled 1
                 ;#define NotFilled 0
                 ;// VARIABLES FOR ROBOT CONTROL
                 ;#define CtrVelocity    //uncomment de chon chay pid dieu khien van toc, va su dung cac ham vMLtoi,vMLlui,....
                 ;#define ROBOT_ID 5
                 ;#define SAN_ID 1  //CHON HUONG TAN CONG LA X >0;
                 ;#define M_PI    3.14159265358979323846    /* pi */
                 ;
                 ;typedef   signed          char int8_t;
                 ;typedef   signed           int int16_t;
                 ;typedef   signed  long    int int32_t;
                 ;typedef   unsigned         char uint8_t;
                 ;typedef   unsigned        int  uint16_t;
                 ;typedef   unsigned long    int  uint32_t;
                 ;typedef   float            float32_t;
                 ;typedef struct   {
                 ;	float x;
                 ;	float y;
                 ;} Ball;
                 ;typedef struct {
                 ;	int x;
                 ;	int y;
                 ;} IntBall;
                 ;typedef struct   {
                 ;	float id;
                 ;	float x;
                 ;	float y;
                 ;	float ox;
                 ;	float oy;
                 ;	Ball ball;
                 ;} Robot;
                 ;typedef struct {
                 ;	int id;
                 ;	int x;
                 ;	int y;
                 ;	int ox;
                 ;	int oy;
                 ;	IntBall ball;
                 ;} IntRobot;
                 ;
                 ;// Nguyen move here
                 ;
                 ;#ifdef DEBUG_EN
                 ;char debugMsgBuff[32];
                 ;#endif
                 ;void debug_out(char *pMsg, unsigned char len)
                 ; 0001 0073 {
                 
                 	.CSEG
                 _debug_out:
                 ; 0001 0074 #ifdef DEBUG_EN
                 ; 0001 0075 	char i = 0;
                 ; 0001 0076 	for (i = 0; i < len; i++)
00038e 931a      	ST   -Y,R17
                 ;	*pMsg -> Y+2
                 ;	len -> Y+1
                 ;	i -> R17
00038f e010      	LDI  R17,0
000390 e010      	LDI  R17,LOW(0)
                 _0x20004:
000391 81e9      	LDD  R30,Y+1
000392 171e      	CP   R17,R30
000393 f468      	BRSH _0x20005
                 ; 0001 0077 	{
                 ; 0001 0078 		putchar(*pMsg++);
000394 81aa      	LDD  R26,Y+2
000395 81bb      	LDD  R27,Y+2+1
000396 91ed      	LD   R30,X+
000397 83aa      	STD  Y+2,R26
000398 83bb      	STD  Y+2+1,R27
000399 93ea      	ST   -Y,R30
00039a d15c      	RCALL _putchar
                 ; 0001 0079 		delay_us(300);
                +
00039b e588     +LDI R24 , LOW ( 600 )
00039c e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
00039d 9701     +SBIW R24 , 1
00039e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 007A 	}
00039f 5f1f      	SUBI R17,-1
0003a0 cff0      	RJMP _0x20004
                 _0x20005:
                 ; 0001 007B #endif
                 ; 0001 007C 	return;
0003a1 8118      	LDD  R17,Y+0
0003a2 c1f4      	RJMP _0x20C000E
                 ; 0001 007D }
                 ;
                 ;// FUNCTION DECLARATION
                 ;IntRobot convertRobot2IntRobot(Robot robot);
                 ;unsigned char readposition();
                 ;void runEscBlindSpot();
                 ;void ctrrobot();// can phai luon luon chay de dieu khien robot
                 ;void rb_move(float x, float y);
                 ;int rb_wait(unsigned long int time);
                 ;void rb_rotate(int angle);     // goc xoay so voi truc x cua toa do
                 ;void calcvitri(float x, float y);
                 ;int calcVangle(int angle);
                 ;
                 ;// VARIABLES DECLARATION
                 ;Robot rb;
                 ;IntRobot robot11, robot12, robot13, robot21, robot22, robot23, robotctrl;
                 ;float errangle = 0, distance = 0, orientation = 0;
                 ;int flagtancong = 1;
                 ;int offsetphongthu = 0;
                 ;int goctancong = 0;
                 ;unsigned char RxBuf[32];
                 ;float setRobotX = 0;
                 ;float setRobotY = 0;
                 ;float setRobotXmin = 0;
                 ;float setRobotXmax = 0;
                 ;float setRobotAngleX = 0;
                 ;float setRobotAngleY = 0;
                 ;float offestsanco = 0;
                 ;float rbctrlHomeX = 0;
                 ;float rbctrlHomeY = 0;
                 ;float rbctrlPenaltyX = 0;
                 ;float rbctrlPenaltyY = 0;
                 ;float rbctrlPenaltyAngle = 0;
                 ;float rbctrlHomeAngle = 0;
                 ;unsigned int cmdCtrlRobot, idRobot;
                 ;unsigned int cntsethomeRB = 0;
                 ;unsigned int cntstuckRB = 0;
                 ;unsigned int cntunlookRB = 0;
                 ;unsigned int flagunlookRB = 0;
                 ;unsigned int cntunsignalRF = 0;
                 ;unsigned int flagunsignalRF = 0;
                 ;unsigned int flagsethome = 0;
                 ;unsigned int flagselftest = 0;
                 ;unsigned int cntselftest = 0;
                 ;int leftSpeed = 0;
                 ;int rightSpeed = 0;
                 ;
                 ;//======USER VARIABLES=========
                 ;unsigned char id = 1;
                 
                 	.DSEG
                 ;//======IR READER VARIABLES====
                 ;unsigned int IRFL = 0;
                 ;unsigned int IRFR = 0;
                 ;unsigned int IRBL = 0;
                 ;unsigned int IRLINE[5];
                 ;//======MOTOR CONTROL========
                 ;//------VELOCITY CONTROL=====
                 ;unsigned int timerstick = 0, timerstickdis = 0, timerstickang = 0, timerstickctr = 0;
                 ;unsigned int vQEL = 0;  //do (xung/250ms)
                 ;unsigned int vQER = 0;  //do (xung/250ms)
                 ;unsigned int oldQEL = 0;
                 ;unsigned int oldQER = 0;
                 ;unsigned int svQEL = 0;  //dat (xung/250ms) (range: 0-22)
                 ;unsigned int svQER = 0;  //dat (xung/250ms) (range: 0-22)
                 ;static int seRki = 0, seLki = 0;
                 ;int uL = 0;
                 ;int uR = 0;
                 ;int KpR = 10;
                 ;int KiR = 1;
                 ;int KpL = 10;
                 ;int KiL = 1;
                 ;#define LDIVR 1
                 ;
                 ;// Robot Control Algorithm
                 ;// The idea is simple. There are two vectors: robot direction (vrb) and robot to target (vdes).
                 ;// The vector vrb will rotate at an  angle of 'delta' which is equal to the  angle between 2 vectors.
                 ;// So that two vectors will be on a same line and the robot can reach its destination.
                 ;// However, in order to achieve robot's arrival with desired orientation, a new vector (vgoal), which
                 ;// shows the desired orientation, is introduced and added to vrb before the rotation.
                 ;
                 ;// Return the absolute value
                 ;int absolute(int a) {
                 ; 0001 00CD int absolute(int a) {
                 
                 	.CSEG
                 ; 0001 00CE 	if (a > 0) return a;
                 ;	a -> Y+0
                 ; 0001 00CF 	return (-a);
                 ; 0001 00D0 }
                 ;
                 ;float fabsolute(float a) {
                 ; 0001 00D2 float fabsolute(float a) {
                 ; 0001 00D3 	if (a > 0) return a;
                 ;	a -> Y+0
                 ; 0001 00D4 	return (-a);
                 ; 0001 00D5 }
                 ;float min3(float a, float b, float c){
                 ; 0001 00D6 float min3(float a, float b, float c){
                 ; 0001 00D7 	float m = a;
                 ; 0001 00D8 	if (m > b) m = b;
                 ;	a -> Y+12
                 ;	b -> Y+8
                 ;	c -> Y+4
                 ;	m -> Y+0
                 ; 0001 00D9 	if (m > c) m = c;
                 ; 0001 00DA 	return m;
                 ; 0001 00DB }
                 ;float max3(float a, float b, float c){
                 ; 0001 00DC float max3(float a, float b, float c){
                 ; 0001 00DD 	float m = a;
                 ; 0001 00DE 	if (m < b) m = b;
                 ;	a -> Y+12
                 ;	b -> Y+8
                 ;	c -> Y+4
                 ;	m -> Y+0
                 ; 0001 00DF 	if (m < c) m = c;
                 ; 0001 00E0 	return m;
                 ; 0001 00E1 }
                 ;
                 ;void setSpeed(int leftSpeed, int rightSpeed) {
                 ; 0001 00E3 void setSpeed(int leftSpeed, int rightSpeed) {
                 ; 0001 00E4 	// Reset I of both wheel
                 ; 0001 00E5 	seRki = 0;//reset thanh phan I
                 ;	leftSpeed -> Y+2
                 ;	rightSpeed -> Y+0
                 ; 0001 00E6 	seLki = 0;//reset thanh phan I
                 ; 0001 00E7 
                 ; 0001 00E8 	// Left speed control
                 ; 0001 00E9 	if (leftSpeed > 0) { // forward
                 ; 0001 00EA 		MLdir = 1;
                 ; 0001 00EB 	}
                 ; 0001 00EC 	else {
                 ; 0001 00ED 		MLdir = 0;
                 ; 0001 00EE 		leftSpeed = -leftSpeed;
                 ; 0001 00EF 	}
                 ; 0001 00F0 	svQEL = leftSpeed; // Don't know this
                 ; 0001 00F1 
                 ; 0001 00F2 	// Right speed control
                 ; 0001 00F3 	if (rightSpeed > 0) { // forward
                 ; 0001 00F4 		MRdir = 1;
                 ; 0001 00F5 	}
                 ; 0001 00F6 	else {
                 ; 0001 00F7 		MRdir = 0;
                 ; 0001 00F8 		rightSpeed = -rightSpeed;
                 ; 0001 00F9 	}
                 ; 0001 00FA 	svQER = rightSpeed;
                 ; 0001 00FB }
                 ;
                 ;/* For Dat */
                 ;#define VBASE 15
                 ;#define KMOVE 25
                 ;
                 ;int map(int x, int in_min, int in_max, int out_min, int out_max)
                 ; 0001 0102 {
                 ; 0001 0103   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
                 ;	x -> Y+8
                 ;	in_min -> Y+6
                 ;	in_max -> Y+4
                 ;	out_min -> Y+2
                 ;	out_max -> Y+0
                 ; 0001 0104 }
                 ;void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
                 ; 0001 0105 void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
                 ; 0001 0106 
                 ; 0001 0107 	int vx_des, vy_des, vx_goal, vy_goal;                    // vdes & vgoal coordinates
                 ; 0001 0108 	int rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
                 ; 0001 0109 	int rotation_angle;                           // this is needed to calculate motor velocity
                 ; 0001 010A 	int minimum, maximum;                       //  this is needed to check whether vector a is between vector b and c
                 ; 0001 010B 	int wl, wr;
                 ; 0001 010C 	int vx_rb, vy_rb;
                 ; 0001 010D 
                 ; 0001 010E 	vx_des = x_des - robotctrl.x;            // vdes calculation
                 ;	x_des -> Y+37
                 ;	y_des -> Y+35
                 ;	x_goal -> Y+33
                 ;	y_goal -> Y+31
                 ;	mode -> Y+30
                 ;	vx_des -> R16,R17
                 ;	vy_des -> R18,R19
                 ;	vx_goal -> R20,R21
                 ;	vy_goal -> Y+28
                 ;	rb_angle -> Y+26
                 ;	des_angle -> Y+24
                 ;	goal_angle -> Y+22
                 ;	new_angle -> Y+20
                 ;	rotation_angle -> Y+18
                 ;	minimum -> Y+16
                 ;	maximum -> Y+14
                 ;	wl -> Y+12
                 ;	wr -> Y+10
                 ;	vx_rb -> Y+8
                 ;	vy_rb -> Y+6
                 ; 0001 010F 	vy_des = y_des - robotctrl.y;
                 ; 0001 0110 
                 ; 0001 0111 	vx_goal = x_goal - x_des;            //vgoal calculation
                 ; 0001 0112 	vy_goal = y_goal - y_des;
                 ; 0001 0113 
                 ; 0001 0114 	// Conversion to unit vector
                 ; 0001 0115 	if (x_goal == 0)
                 ; 0001 0116 		y_goal = y_goal / absolute(y_goal);
                 ; 0001 0117 	else if (y_goal == 0)
                 ; 0001 0118 		x_goal = x_goal / absolute(x_goal);
                 ; 0001 0119 	else {
                 ; 0001 011A 		y_goal = y_goal / absolute(x_goal);
                 ; 0001 011B 		x_goal = x_goal / absolute(x_goal);
                 ; 0001 011C 	}
                 ; 0001 011D 
                 ; 0001 011E 	// Angle calculation
                 ; 0001 011F 	goal_angle = atan2(vy_goal, vx_goal);
                 ; 0001 0120 	rb_angle = atan2(robotctrl.ox, robotctrl.oy);			// done
                 ; 0001 0121 	des_angle = atan2(vy_des, vx_des);
                 ; 0001 0122 
                 ; 0001 0123 	// Adding vgoal to vrb
                 ; 0001 0124 	// NEED TESTING
                 ; 0001 0125 	vx_rb = robotctrl.ox + vx_goal;
                 ; 0001 0126 	vy_rb = robotctrl.oy + vy_goal;
                 ; 0001 0127 
                 ; 0001 0128 	new_angle = atan2(vx_rb, vy_rb);
                 ; 0001 0129 	rotation_angle = new_angle - des_angle;
                 ; 0001 012A 
                 ; 0001 012B 	//  *rotation_angle > 180* counter-measure
                 ; 0001 012C 	if (rotation_angle < -PI) {
                 ; 0001 012D 		rotation_angle = 2 * PI + rotation_angle;
                 ; 0001 012E 		if (new_angle > des_angle)
                 ; 0001 012F 			rotation_angle = -rotation_angle;
                 ; 0001 0130 	}
                 ; 0001 0131 
                 ; 0001 0132 	if (rotation_angle > PI) {
                 ; 0001 0133 		rotation_angle = 2 * PI - rotation_angle;
                 ; 0001 0134 		if (new_angle > des_angle)
                 ; 0001 0135 			rotation_angle = -rotation_angle;
                 ; 0001 0136 	}
                 ; 0001 0137 
                 ; 0001 0138 	// *Spiral* counter-measure: Spiral happens when vdes is between the new vector and vrb
                 ; 0001 0139 	minimum = min3(rb_angle, des_angle, new_angle);
                 ; 0001 013A 	maximum = max3(rb_angle, des_angle, new_angle);
                 ; 0001 013B 
                 ; 0001 013C 	if (absolute(rb_angle - new_angle) > PI) {
                 ; 0001 013D 		if (des_angle == maximum || des_angle == minimum)
                 ; 0001 013E 			rotation_angle = rotation_angle / 15;
                 ; 0001 013F 		else if (minimum < des_angle && des_angle < maximum)
                 ; 0001 0140 			rotation_angle = rotation_angle / 15;
                 ; 0001 0141 	}
                 ; 0001 0142 
                 ; 0001 0143 	// Motor speed calculation
                 ; 0001 0144 	switch (mode) {
                 ; 0001 0145 	case 'f': // Going forward
                 ; 0001 0146 		wl = 30 + rotation_angle * 50;
                 ; 0001 0147 		wr = 30 - rotation_angle * 50;
                 ; 0001 0148 		break;
                 ; 0001 0149 	case 'b': // Going backward
                 ; 0001 014A 		rotation_angle = -rotation_angle;
                 ; 0001 014B 		wl = 30 - rotation_angle * 50;
                 ; 0001 014C 		wr = 30 + rotation_angle * 50;
                 ; 0001 014D 		break;
                 ; 0001 014E 	}
                 ; 0001 014F 
                 ; 0001 0150 	// Set the speed immediately
                 ; 0001 0151 	leftSpeed = wl;
                 ; 0001 0152 	rightSpeed = wr;
                 ; 0001 0153 }
                 ;//DAT
                 ;int xrb_last=0;
                 ;int yrb_last=0;
                 ;float angle_last = 0;
                 ;
                 ;#define V_THRESHOLD 10
                 ;
                 ;float get_angle(){
                 ; 0001 015B float get_angle(){
                 ; 0001 015C 	int vx, vy;
                 ; 0001 015D 	vx = (robotctrl.x - xrb_last);
                 ;	vx -> R16,R17
                 ;	vy -> R18,R19
                 ; 0001 015E 	vy = (robotctrl.y - yrb_last);
                 ; 0001 015F 	if ((fabsolute(vx) > V_THRESHOLD) || (fabsolute(vy) > V_THRESHOLD)) {
                 ; 0001 0160 		xrb_last = robotctrl.x;
                 ; 0001 0161 		yrb_last = robotctrl.y;
                 ; 0001 0162 		angle_last = atan2(vy, vx);
                 ; 0001 0163 	}
                 ; 0001 0164 	return angle_last;
                 ; 0001 0165 }
                 ;void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
                 ; 0001 0166 void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
                 ; 0001 0167 
                 ; 0001 0168 	int vx_des, vy_des, vx_goal, vy_goal;	                // vdes & vgoal coordinates
                 ; 0001 0169 	float rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
                 ; 0001 016A 	int rotation_angle;
                 ; 0001 016B 	int minimum, maximum;
                 ; 0001 016C 	int wl, wr;
                 ; 0001 016D 	int vx_rb, vy_rb;
                 ; 0001 016E 	int dirx, diry;
                 ; 0001 016F 
                 ; 0001 0170 	vx_des = x_des - rbctrl.x;			// vdes calculation
                 ;	rbctrl -> Y+49
                 ;	x_des -> Y+47
                 ;	y_des -> Y+45
                 ;	angle -> Y+43
                 ;	mode -> Y+42
                 ;	vx_des -> R16,R17
                 ;	vy_des -> R18,R19
                 ;	vx_goal -> R20,R21
                 ;	vy_goal -> Y+40
                 ;	rb_angle -> Y+36
                 ;	des_angle -> Y+32
                 ;	goal_angle -> Y+28
                 ;	new_angle -> Y+24
                 ;	rotation_angle -> Y+22
                 ;	minimum -> Y+20
                 ;	maximum -> Y+18
                 ;	wl -> Y+16
                 ;	wr -> Y+14
                 ;	vx_rb -> Y+12
                 ;	vy_rb -> Y+10
                 ;	dirx -> Y+8
                 ;	diry -> Y+6
                 ; 0001 0171 	vy_des = y_des - rbctrl.y;
                 ; 0001 0172 
                 ; 0001 0173 //	dirx = robotctrl.ox - robotctrl.x;
                 ; 0001 0174 //	diry = robotctrl.oy - robotctrl.y;
                 ; 0001 0175 
                 ; 0001 0176 	switch (angle) { // vgoal calculation
                 ; 0001 0177 	case 0: 	vx_goal = 1; vy_goal = 0; break;
                 ; 0001 0178 	case 90: 	vx_goal = 0; vy_goal = 1; break;
                 ; 0001 0179 	case 180: vx_goal = -1; vy_goal = 0; break;
                 ; 0001 017A 	case -90: vx_goal = 0; vy_goal = -1; break;
                 ; 0001 017B 	default:	vx_goal = 1; vy_goal = vx_goal * tan(angle); break;
                 ; 0001 017C 	}
                 ; 0001 017D 
                 ; 0001 017E 	// Angle calculation
                 ; 0001 017F 	//rb_angle = get_angle();
                 ; 0001 0180 	rb_angle = orientation;
                 ; 0001 0181 	des_angle = atan2(vy_des, vx_des);
                 ; 0001 0182 
                 ; 0001 0183 	// Adding vgoal to vrb
                 ; 0001 0184 	vx_rb = dirx + vx_goal;
                 ; 0001 0185 	vy_rb = diry + vy_goal;
                 ; 0001 0186 
                 ; 0001 0187 	new_angle = atan2(vy_rb, vx_rb);
                 ; 0001 0188 	rotation_angle = new_angle - des_angle;
                 ; 0001 0189 
                 ; 0001 018A 	//  *rotation_angle > 180* counter-measure
                 ; 0001 018B 	if (rotation_angle < -PI) {
                 ; 0001 018C 		rotation_angle = 2 * PI + rotation_angle;
                 ; 0001 018D 		if (new_angle > des_angle)               rotation_angle = -rotation_angle;
                 ; 0001 018E 	}
                 ; 0001 018F 	if (rotation_angle > PI) {
                 ; 0001 0190 		rotation_angle = 2 * PI - rotation_angle;
                 ; 0001 0191 		if (new_angle > des_angle)                rotation_angle = -rotation_angle;
                 ; 0001 0192 	}
                 ; 0001 0193 
                 ; 0001 0194 	// *SPIral* counter-measure: SPIral happens when vdes is between the new vector and vrb
                 ; 0001 0195 	minimum = min3(rb_angle, des_angle, new_angle);
                 ; 0001 0196 	maximum = max3(rb_angle, des_angle, new_angle);
                 ; 0001 0197 
                 ; 0001 0198 	if (absolute(rb_angle - new_angle) > PI) {
                 ; 0001 0199 		if (des_angle == maximum || des_angle == minimum)                rotation_angle = rotation_angle / 15;
                 ; 0001 019A 		else
                 ; 0001 019B 			if (minimum < des_angle && des_angle < maximum)               rotation_angle = rotation_angle / 15;
                 ; 0001 019C 	}
                 ; 0001 019D 
                 ; 0001 019E 	// Motor speed calculation
                 ; 0001 019F 	switch (mode) {
                 ; 0001 01A0 	case 'f': // Going forward
                 ; 0001 01A1 		wl = VBASE + rotation_angle * KMOVE;
                 ; 0001 01A2 		wr = VBASE - rotation_angle * KMOVE;
                 ; 0001 01A3 		break;
                 ; 0001 01A4 	case 'b': // Going backward
                 ; 0001 01A5 		rotation_angle = -rotation_angle;
                 ; 0001 01A6 		wl = VBASE - rotation_angle * KMOVE;
                 ; 0001 01A7 		wr = VBASE + rotation_angle * KMOVE;
                 ; 0001 01A8 		break;
                 ; 0001 01A9 	}
                 ; 0001 01AA 	// Set speed for motor
                 ; 0001 01AB     /*if (wl > 15){
                 ; 0001 01AC         wl = map(wl,0,82,5,22);}
                 ; 0001 01AD     else{
                 ; 0001 01AE         wl = map(-wl,0,82,5,22);
                 ; 0001 01AF         wl = -wl;
                 ; 0001 01B0     }
                 ; 0001 01B1     if (wr > 0){
                 ; 0001 01B2         wr = map(wr,0,82,5,22);}
                 ; 0001 01B3     else{
                 ; 0001 01B4         wr = map(-wr,0,82,5,22);
                 ; 0001 01B5         wr = -wr;
                 ; 0001 01B6     } */
                 ; 0001 01B7 
                 ; 0001 01B8 	if (wl>15){
                 ; 0001 01B9 		wl = map(wl, 15, 82, 5, 22);
                 ; 0001 01BA 	}
                 ; 0001 01BB 	else{
                 ; 0001 01BC 		wl = map(wl, 15, -60, 5, 22);
                 ; 0001 01BD 
                 ; 0001 01BE 	}
                 ; 0001 01BF 	if (wl>15){
                 ; 0001 01C0 		wr = map(wl, 15, 82, 5, 22);
                 ; 0001 01C1 	}
                 ; 0001 01C2 	else{
                 ; 0001 01C3 		wr = map(wl, 15, -60, 5, 22);
                 ; 0001 01C4 	}
                 ; 0001 01C5 
                 ; 0001 01C6 	if (wl == wr){
                 ; 0001 01C7 		wl = 11;
                 ; 0001 01C8 		wr = 11;
                 ; 0001 01C9 	}
                 ; 0001 01CA 
                 ; 0001 01CB 	leftSpeed = wl;
                 ; 0001 01CC 	rightSpeed = wr;
                 ; 0001 01CD 
                 ; 0001 01CE #ifdef DEBUG_EN
                 ; 0001 01CF     {
                 ; 0001 01D0 	    /*char dbgLen;
                 ; 0001 01D1 
                 ; 0001 01D2         dbgLen = sprintf(debugMsgBuff, "ID: %d \n\r", robotctrl.id);
                 ; 0001 01D3 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01D4 
                 ; 0001 01D5         dbgLen = sprintf(debugMsgBuff, "x: %d \n\r", robotctrl.x);
                 ; 0001 01D6 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01D7 
                 ; 0001 01D8         dbgLen = sprintf(debugMsgBuff, "y: %d \n\r", robotctrl.y);
                 ; 0001 01D9 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01DA 
                 ; 0001 01DB         dbgLen = sprintf(debugMsgBuff, "Angles: %d \n\r", rb_angle*180/PI);
                 ; 0001 01DC 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01DD 
                 ; 0001 01DE 		dbgLen = sprintf(debugMsgBuff, "Left Speed: %d \n\r", leftSpeed);
                 ; 0001 01DF 		debug_out(debugMsgBuff, dbgLen);
                 ; 0001 01E0 
                 ; 0001 01E1 		dbgLen = sprintf(debugMsgBuff, "Right Speed: %d \n\n\r", rightSpeed);
                 ; 0001 01E2 		debug_out(debugMsgBuff, dbgLen);*/
                 ; 0001 01E3 	}
                 ; 0001 01E4 #endif
                 ; 0001 01E5 }
                 ;
                 ;int squareDistance(int aX, int aY, int bX, int bY) {
                 ; 0001 01E7 int squareDistance(int aX, int aY, int bX, int bY) {
                 ; 0001 01E8 	return (bX - aX) * (bX - aX) + (bY - bX) * (bY - bX);
                 ;	aX -> Y+6
                 ;	aY -> Y+4
                 ;	bX -> Y+2
                 ;	bY -> Y+0
                 ; 0001 01E9 }
                 ;
                 ;// some function to set speed = 0
                 ;void stop() {
                 ; 0001 01EC void stop() {
                 ; 0001 01ED 
                 ; 0001 01EE }
                 ;
                 ;void rotate(int angle){
                 ; 0001 01F0 void rotate(int angle){
                 ; 0001 01F1 	angle = angle * LDIVR * 0.5;
                 ;	angle -> Y+0
                 ; 0001 01F2 	setSpeed(angle, -angle);
                 ; 0001 01F3 }
                 ;
                 ;// [ PHAT ]
                 ;
                 ;float getOrientation(){
                 ; 0001 01F7 float getOrientation(){
                 ; 0001 01F8 
                 ; 0001 01F9 }
                 ;
                 ;
                 ;//------POSITION CONTROL-----
                 ;unsigned int sd = 0;// dat khoang cach  di chuyen (xung)
                 ;unsigned int oldd = 0;// bien luu gia tri vi tri cu
                 ;unsigned char flagwaitctrRobot = 0;
                 ;//-----ANGLES CONTROL----
                 ;unsigned int sa = 0;// dat goc quay (xung) ( 54 xung/vong quay)
                 ;unsigned int olda = 0;// bien luu gia tri goc cu
                 ;unsigned char  flagwaitctrAngle = 0;
                 ;//-----ROBOT BEHAVIOR CONTROL-----
                 ;unsigned int flagtask = 0;
                 ;unsigned int flagtaskold = 0;
                 ;unsigned int flaghuongtrue = 0;
                 ;int verranglekisum = 0;
                 ;//=====ENCODER======
                 ;unsigned int QEL = 0;
                 ;unsigned int QER = 0;
                 ;//=====LCD=========
                 ;unsigned char menu = 0, test = 0, ok = 0, runing_test = 0, run_robot = 0, ft = 1, timer = 0;
                 
                 	.DSEG
                 ;flash unsigned char ASCII[][5] = {
                 ;	{ 0x00, 0x00, 0x00, 0x00, 0x00 } // 20
                 ;	, { 0x00, 0x00, 0x5f, 0x00, 0x00 } // 21 !
                 ;	, { 0x00, 0x07, 0x00, 0x07, 0x00 } // 22 "
                 ;	, { 0x14, 0x7f, 0x14, 0x7f, 0x14 } // 23 #
                 ;	, { 0x24, 0x2a, 0x7f, 0x2a, 0x12 } // 24 $
                 ;	, { 0x23, 0x13, 0x08, 0x64, 0x62 } // 25 %
                 ;	, { 0x36, 0x49, 0x55, 0x22, 0x50 } // 26 &
                 ;	, { 0x00, 0x05, 0x03, 0x00, 0x00 } // 27 '
                 ;	, { 0x00, 0x1c, 0x22, 0x41, 0x00 } // 28 (
                 ;	, { 0x00, 0x41, 0x22, 0x1c, 0x00 } // 29 )
                 ;	, { 0x14, 0x08, 0x3e, 0x08, 0x14 } // 2a *
                 ;	, { 0x08, 0x08, 0x3e, 0x08, 0x08 } // 2b +
                 ;	, { 0x00, 0x50, 0x30, 0x00, 0x00 } // 2c ,
                 ;	, { 0x08, 0x08, 0x08, 0x08, 0x08 } // 2d -
                 ;	, { 0x00, 0x60, 0x60, 0x00, 0x00 } // 2e .
                 ;	, { 0x20, 0x10, 0x08, 0x04, 0x02 } // 2f /
                 ;	, { 0x3e, 0x51, 0x49, 0x45, 0x3e } // 30 0
                 ;	, { 0x00, 0x42, 0x7f, 0x40, 0x00 } // 31 1
                 ;	, { 0x42, 0x61, 0x51, 0x49, 0x46 } // 32 2
                 ;	, { 0x21, 0x41, 0x45, 0x4b, 0x31 } // 33 3
                 ;	, { 0x18, 0x14, 0x12, 0x7f, 0x10 } // 34 4
                 ;	, { 0x27, 0x45, 0x45, 0x45, 0x39 } // 35 5
                 ;	, { 0x3c, 0x4a, 0x49, 0x49, 0x30 } // 36 6
                 ;	, { 0x01, 0x71, 0x09, 0x05, 0x03 } // 37 7
                 ;	, { 0x36, 0x49, 0x49, 0x49, 0x36 } // 38 8
                 ;	, { 0x06, 0x49, 0x49, 0x29, 0x1e } // 39 9
                 ;	, { 0x00, 0x36, 0x36, 0x00, 0x00 } // 3a :
                 ;	, { 0x00, 0x56, 0x36, 0x00, 0x00 } // 3b ;
                 ;	, { 0x08, 0x14, 0x22, 0x41, 0x00 } // 3c <
                 ;	, { 0x14, 0x14, 0x14, 0x14, 0x14 } // 3d =
                 ;	, { 0x00, 0x41, 0x22, 0x14, 0x08 } // 3e >
                 ;	, { 0x02, 0x01, 0x51, 0x09, 0x06 } // 3f ?
                 ;	, { 0x32, 0x49, 0x79, 0x41, 0x3e } // 40 @
                 ;	, { 0x7e, 0x11, 0x11, 0x11, 0x7e } // 41 A
                 ;	, { 0x7f, 0x49, 0x49, 0x49, 0x36 } // 42 B
                 ;	, { 0x3e, 0x41, 0x41, 0x41, 0x22 } // 43 C
                 ;	, { 0x7f, 0x41, 0x41, 0x22, 0x1c } // 44 D
                 ;	, { 0x7f, 0x49, 0x49, 0x49, 0x41 } // 45 E
                 ;	, { 0x7f, 0x09, 0x09, 0x09, 0x01 } // 46 F
                 ;	, { 0x3e, 0x41, 0x49, 0x49, 0x7a } // 47 G
                 ;	, { 0x7f, 0x08, 0x08, 0x08, 0x7f } // 48 H
                 ;	, { 0x00, 0x41, 0x7f, 0x41, 0x00 } // 49 I
                 ;	, { 0x20, 0x40, 0x41, 0x3f, 0x01 } // 4a J
                 ;	, { 0x7f, 0x08, 0x14, 0x22, 0x41 } // 4b K
                 ;	, { 0x7f, 0x40, 0x40, 0x40, 0x40 } // 4c L
                 ;	, { 0x7f, 0x02, 0x0c, 0x02, 0x7f } // 4d M
                 ;	, { 0x7f, 0x04, 0x08, 0x10, 0x7f } // 4e N
                 ;	, { 0x3e, 0x41, 0x41, 0x41, 0x3e } // 4f O
                 ;	, { 0x7f, 0x09, 0x09, 0x09, 0x06 } // 50 P
                 ;	, { 0x3e, 0x41, 0x51, 0x21, 0x5e } // 51 Q
                 ;	, { 0x7f, 0x09, 0x19, 0x29, 0x46 } // 52 R
                 ;	, { 0x46, 0x49, 0x49, 0x49, 0x31 } // 53 S
                 ;	, { 0x01, 0x01, 0x7f, 0x01, 0x01 } // 54 T
                 ;	, { 0x3f, 0x40, 0x40, 0x40, 0x3f } // 55 U
                 ;	, { 0x1f, 0x20, 0x40, 0x20, 0x1f } // 56 V
                 ;	, { 0x3f, 0x40, 0x38, 0x40, 0x3f } // 57 W
                 ;	, { 0x63, 0x14, 0x08, 0x14, 0x63 } // 58 X
                 ;	, { 0x07, 0x08, 0x70, 0x08, 0x07 } // 59 Y
                 ;	, { 0x61, 0x51, 0x49, 0x45, 0x43 } // 5a Z
                 ;	, { 0x00, 0x7f, 0x41, 0x41, 0x00 } // 5b [
                 ;	, { 0x02, 0x04, 0x08, 0x10, 0x20 } // 5c �
                 ;	, { 0x00, 0x41, 0x41, 0x7f, 0x00 } // 5d ]
                 ;	, { 0x04, 0x02, 0x01, 0x02, 0x04 } // 5e ^
                 ;	, { 0x40, 0x40, 0x40, 0x40, 0x40 } // 5f _
                 ;	, { 0x00, 0x01, 0x02, 0x04, 0x00 } // 60 `
                 ;	, { 0x20, 0x54, 0x54, 0x54, 0x78 } // 61 a
                 ;	, { 0x7f, 0x48, 0x44, 0x44, 0x38 } // 62 b
                 ;	, { 0x38, 0x44, 0x44, 0x44, 0x20 } // 63 c
                 ;	, { 0x38, 0x44, 0x44, 0x48, 0x7f } // 64 d
                 ;	, { 0x38, 0x54, 0x54, 0x54, 0x18 } // 65 e
                 ;	, { 0x08, 0x7e, 0x09, 0x01, 0x02 } // 66 f
                 ;	, { 0x0c, 0x52, 0x52, 0x52, 0x3e } // 67 g
                 ;	, { 0x7f, 0x08, 0x04, 0x04, 0x78 } // 68 h
                 ;	, { 0x00, 0x44, 0x7d, 0x40, 0x00 } // 69 i
                 ;	, { 0x20, 0x40, 0x44, 0x3d, 0x00 } // 6a j
                 ;	, { 0x7f, 0x10, 0x28, 0x44, 0x00 } // 6b k
                 ;	, { 0x00, 0x41, 0x7f, 0x40, 0x00 } // 6c l
                 ;	, { 0x7c, 0x04, 0x18, 0x04, 0x78 } // 6d m
                 ;	, { 0x7c, 0x08, 0x04, 0x04, 0x78 } // 6e n
                 ;	, { 0x38, 0x44, 0x44, 0x44, 0x38 } // 6f o
                 ;	, { 0x7c, 0x14, 0x14, 0x14, 0x08 } // 70 p
                 ;	, { 0x08, 0x14, 0x14, 0x18, 0x7c } // 71 q
                 ;	, { 0x7c, 0x08, 0x04, 0x04, 0x08 } // 72 r
                 ;	, { 0x48, 0x54, 0x54, 0x54, 0x20 } // 73 s
                 ;	, { 0x04, 0x3f, 0x44, 0x40, 0x20 } // 74 t
                 ;	, { 0x3c, 0x40, 0x40, 0x20, 0x7c } // 75 u
                 ;	, { 0x1c, 0x20, 0x40, 0x20, 0x1c } // 76 v
                 ;	, { 0x3c, 0x40, 0x30, 0x40, 0x3c } // 77 w
                 ;	, { 0x44, 0x28, 0x10, 0x28, 0x44 } // 78 x
                 ;	, { 0x0c, 0x50, 0x50, 0x50, 0x3c } // 79 y
                 ;	, { 0x44, 0x64, 0x54, 0x4c, 0x44 } // 7a z
                 ;	, { 0x00, 0x08, 0x36, 0x41, 0x00 } // 7b {
                 ;	, { 0x00, 0x00, 0x7f, 0x00, 0x00 } // 7c |
                 ;	, { 0x00, 0x41, 0x36, 0x08, 0x00 } // 7d }
                 ;	, { 0x10, 0x08, 0x08, 0x10, 0x08 } // 7e ?
                 ;	, { 0x78, 0x46, 0x41, 0x46, 0x78 } // 7f ?
                 ;};
                 ;
                 ;/* LED FUNCTIONS */
                 ;void LEDLtoggle()
                 ; 0001 0273 {
                 
                 	.CSEG
                 _LEDLtoggle:
                 ; 0001 0274 	if (LEDL == 0){ LEDL = 1; }
0003a3 99ac      	SBIC 0x15,4
0003a4 c002      	RJMP _0x20054
0003a5 9aac      	SBI  0x15,4
                 ; 0001 0275 	else{ LEDL = 0; }
0003a6 c001      	RJMP _0x20057
                 _0x20054:
0003a7 98ac      	CBI  0x15,4
                 _0x20057:
                 ; 0001 0276 }
0003a8 9508      	RET
                 ;
                 ;void LEDRtoggle()
                 ; 0001 0279 {
                 _LEDRtoggle:
                 ; 0001 027A 	if (LEDR == 0){ LEDR = 1; }
0003a9 99ad      	SBIC 0x15,5
0003aa c002      	RJMP _0x2005A
0003ab 9aad      	SBI  0x15,5
                 ; 0001 027B 	else{ LEDR = 0; }
0003ac c001      	RJMP _0x2005D
                 _0x2005A:
0003ad 98ad      	CBI  0x15,5
                 _0x2005D:
                 ; 0001 027C }
0003ae 9508      	RET
                 ;
                 ;/* SPI */
                 ;void sPItx(unsigned char temtx)
                 ; 0001 0280 {
                 _sPItx:
                 ; 0001 0281 	// unsigned char transPI;
                 ; 0001 0282 	SPDR = temtx;
                 ;	temtx -> Y+0
0003af 81e8      	LD   R30,Y
0003b0 b9ef      	OUT  0xF,R30
                 ; 0001 0283 	while (!(SPSR & 0x80));
                 _0x20060:
0003b1 9b77      	SBIS 0xE,7
0003b2 cffe      	RJMP _0x20060
                 ; 0001 0284 }
0003b3 c1b7      	RJMP _0x20C0010
                 ;
                 ;/* LCD FUNCTIONS */
                 ;void LcdWrite(unsigned char dc, unsigned char data)
                 ; 0001 0288 {
                 _LcdWrite:
                 ; 0001 0289 	DC = dc;
                 ;	dc -> Y+1
                 ;	data -> Y+0
0003b4 81e9      	LDD  R30,Y+1
0003b5 30e0      	CPI  R30,0
0003b6 f411      	BRNE _0x20063
0003b7 98c2      	CBI  0x18,2
0003b8 c001      	RJMP _0x20064
                 _0x20063:
0003b9 9ac2      	SBI  0x18,2
                 _0x20064:
                 ; 0001 028A 	SCE = 1;
0003ba 9ac1      	SBI  0x18,1
                 ; 0001 028B 	SCE = 0;
0003bb 98c1      	CBI  0x18,1
                 ; 0001 028C 	sPItx(data);
0003bc 81e8      	LD   R30,Y
0003bd 93ea      	ST   -Y,R30
0003be dff0      	RCALL _sPItx
                 ; 0001 028D 	SCE = 1;
0003bf 9ac1      	SBI  0x18,1
                 ; 0001 028E }
0003c0 c0b1      	RJMP _0x20C0011
                 ;//This takes a large array of bits and sends them to the LCD
                 ;void LcdBitmap(char my_array[]){
                 ; 0001 0290 void LcdBitmap(char my_array[]){
                 ; 0001 0291 	int index = 0;
                 ; 0001 0292 	for (index = 0; index < (LCD_X * LCD_Y / 8); index++)
                 ;	my_array -> Y+2
                 ;	index -> R16,R17
                 ; 0001 0293 		LcdWrite(LCD_D, my_array[index]);
                 ; 0001 0294 }
                 ;
                 ;void hc(int x, int y) {
                 ; 0001 0296 void hc(int x, int y) {
                 _hc:
                 ; 0001 0297 	LcdWrite(0, 0x40 | x);  // Row.  ?
                 ;	x -> Y+2
                 ;	y -> Y+0
0003c1 e0e0      	LDI  R30,LOW(0)
0003c2 93ea      	ST   -Y,R30
0003c3 81eb      	LDD  R30,Y+3
0003c4 64e0      	ORI  R30,0x40
0003c5 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 0298 	LcdWrite(0, 0x80 | y);  // Column.
0003c7 81e9      	LDD  R30,Y+1
0003c8 68e0      	ORI  R30,0x80
0003c9 93ea      	ST   -Y,R30
0003ca dfe9      	RCALL _LcdWrite
                 ; 0001 0299 }
0003cb c1cb      	RJMP _0x20C000E
                 ;
                 ;void LcdCharacter(unsigned char character)
                 ; 0001 029C {
                 _LcdCharacter:
                 ; 0001 029D 	int index = 0;
                 ; 0001 029E 	LcdWrite(LCD_D, 0x00);
0003cc 940e 18c8 	CALL SUBOPT_0x3
                 ;	character -> Y+2
                 ;	index -> R16,R17
                 ; 0001 029F 	for (index = 0; index < 5; index++)
                 _0x2006F:
                +
0003ce 3005     +CPI R16 , LOW ( 5 )
0003cf e0e0     +LDI R30 , HIGH ( 5 )
0003d0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0003d1 f42c      	BRGE _0x20070
                 ; 0001 02A0 	{
                 ; 0001 02A1 		LcdWrite(LCD_D, ASCII[character - 0x20][index]);
0003d2 940e 18d5 	CALL SUBOPT_0x4
                 ; 0001 02A2 	}
                +
0003d4 5f0f     +SUBI R16 , LOW ( - 1 )
0003d5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003d6 cff7      	RJMP _0x2006F
                 _0x20070:
                 ; 0001 02A3 	LcdWrite(LCD_D, 0x00);
0003d7 c00b      	RJMP _0x20C0014
                 ; 0001 02A4 }
                 ;
                 ;void wc(unsigned char character)
                 ; 0001 02A7 {
                 _wc:
                 ; 0001 02A8 	int index = 0;
                 ; 0001 02A9 	LcdWrite(LCD_D, 0x00);
0003d8 940e 18c8 	CALL SUBOPT_0x3
                 ;	character -> Y+2
                 ;	index -> R16,R17
                 ; 0001 02AA 	for (index = 0; index < 5; index++)
                 _0x20072:
                +
0003da 3005     +CPI R16 , LOW ( 5 )
0003db e0e0     +LDI R30 , HIGH ( 5 )
0003dc 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0003dd f42c      	BRGE _0x20073
                 ; 0001 02AB 	{
                 ; 0001 02AC 		LcdWrite(LCD_D, ASCII[character - 0x20][index]);
0003de 940e 18d5 	CALL SUBOPT_0x4
                 ; 0001 02AD 	}
                +
0003e0 5f0f     +SUBI R16 , LOW ( - 1 )
0003e1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003e2 cff7      	RJMP _0x20072
                 _0x20073:
                 ; 0001 02AE 	LcdWrite(LCD_D, 0x00);
                 _0x20C0014:
0003e3 e0e1      	LDI  R30,LOW(1)
0003e4 940e 18e6 	CALL SUBOPT_0x5
                 ; 0001 02AF }
0003e6 8119      	LDD  R17,Y+1
0003e7 8108      	LDD  R16,Y+0
                 _0x20C0015:
0003e8 9623      	ADIW R28,3
0003e9 9508      	RET
                 ;
                 ;void ws(unsigned char *characters)
                 ; 0001 02B2 {
                 _ws:
                 ; 0001 02B3 	while (*characters)
                 ;	*characters -> Y+0
                 _0x20074:
0003ea 81a8      	LD   R26,Y
0003eb 81b9      	LDD  R27,Y+1
0003ec 91ec      	LD   R30,X
0003ed 30e0      	CPI  R30,0
0003ee f031      	BREQ _0x20076
                 ; 0001 02B4 	{
                 ; 0001 02B5 		LcdCharacter(*characters++);
0003ef 91ed      	LD   R30,X+
0003f0 83a8      	ST   Y,R26
0003f1 83b9      	STD  Y+1,R27
0003f2 93ea      	ST   -Y,R30
0003f3 dfd8      	RCALL _LcdCharacter
                 ; 0001 02B6 	}
0003f4 cff5      	RJMP _0x20074
                 _0x20076:
                 ; 0001 02B7 }
0003f5 c07c      	RJMP _0x20C0011
                 ;
                 ;void LcdClear(void)
                 ; 0001 02BA {
                 _LcdClear:
                 ; 0001 02BB 	int index = 0;
                 ; 0001 02BC 	for (index = 0; index < LCD_X * LCD_Y / 8; index++)
0003f6 940e 18eb 	CALL SUBOPT_0x6
                 ;	index -> R16,R17
                 _0x20078:
                +
0003f8 3f08     +CPI R16 , LOW ( 504 )
0003f9 e0e1     +LDI R30 , HIGH ( 504 )
0003fa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,504
0003fb f434      	BRGE _0x20079
                 ; 0001 02BD 	{
                 ; 0001 02BE 		LcdWrite(LCD_D, 0);
0003fc e0e1      	LDI  R30,LOW(1)
0003fd 940e 18e6 	CALL SUBOPT_0x5
                 ; 0001 02BF 	}
                +
0003ff 5f0f     +SUBI R16 , LOW ( - 1 )
000400 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000401 cff6      	RJMP _0x20078
                 _0x20079:
                 ; 0001 02C0 	hc(0, 0); //After we clear the display, return to the home position
000402 c00c      	RJMP _0x20C0013
                 ; 0001 02C1 }
                 ;
                 ;void clear(void)
                 ; 0001 02C4 {
                 _clear:
                 ; 0001 02C5 	int index = 0;
                 ; 0001 02C6 	for (index = 0; index < LCD_X * LCD_Y / 8; index++)
000403 940e 18eb 	CALL SUBOPT_0x6
                 ;	index -> R16,R17
                 _0x2007B:
                +
000405 3f08     +CPI R16 , LOW ( 504 )
000406 e0e1     +LDI R30 , HIGH ( 504 )
000407 071e     +CPC R17 , R30
                 	__CPWRN 16,17,504
000408 f434      	BRGE _0x2007C
                 ; 0001 02C7 	{
                 ; 0001 02C8 		LcdWrite(LCD_D, 0);
000409 e0e1      	LDI  R30,LOW(1)
00040a 940e 18e6 	CALL SUBOPT_0x5
                 ; 0001 02C9 	}
                +
00040c 5f0f     +SUBI R16 , LOW ( - 1 )
00040d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00040e cff6      	RJMP _0x2007B
                 _0x2007C:
                 ; 0001 02CA 	hc(0, 0); //After we clear the display, return to the home position
                 _0x20C0013:
00040f e0e0      	LDI  R30,LOW(0)
000410 e0f0      	LDI  R31,HIGH(0)
000411 940e 18f2 	CALL SUBOPT_0x7
                 ; 0001 02CB }
000413 9109      	LD   R16,Y+
000414 9119      	LD   R17,Y+
000415 9508      	RET
                 ;
                 ;void wn164(unsigned int so)
                 ; 0001 02CE {
                 _wn164:
                 ; 0001 02CF 	unsigned char a[5], i;
                 ; 0001 02D0 	for (i = 0; i < 5; i++)
000416 9725      	SBIW R28,5
000417 931a      	ST   -Y,R17
                 ;	so -> Y+6
                 ;	a -> Y+1
                 ;	i -> R17
000418 e010      	LDI  R17,LOW(0)
                 _0x2007E:
000419 3015      	CPI  R17,5
00041a f430      	BRSH _0x2007F
                 ; 0001 02D1 	{
                 ; 0001 02D2 		a[i] = so % 10;        //a[0]= byte thap nhat
00041b 940e 18fa 	CALL SUBOPT_0x8
00041d 940e 18fd 	CALL SUBOPT_0x9
                 ; 0001 02D3 		so = so / 10;
                 ; 0001 02D4 	}
00041f 5f1f      	SUBI R17,-1
000420 cff8      	RJMP _0x2007E
                 _0x2007F:
                 ; 0001 02D5 	for (i = 1; i < 5; i++)
000421 e011      	LDI  R17,LOW(1)
                 _0x20081:
000422 3015      	CPI  R17,5
000423 f438      	BRSH _0x20082
                 ; 0001 02D6 	{
                 ; 0001 02D7 		wc(a[4 - i] + 0x30);
000424 940e 18fa 	CALL SUBOPT_0x8
000426 940e 1913 	CALL SUBOPT_0xA
000428 dfaf      	RCALL _wc
                 ; 0001 02D8 	}
000429 5f1f      	SUBI R17,-1
00042a cff7      	RJMP _0x20081
                 _0x20082:
                 ; 0001 02D9 }
00042b c031      	RJMP _0x20C0012
                 ;
                 ;void LcdInitialise()
                 ; 0001 02DC {
                 _LcdInitialise:
                 ; 0001 02DD 	//reset
                 ; 0001 02DE 	RST = 0;
00042c 98c0      	CBI  0x18,0
                 ; 0001 02DF 	delay_us(10);
                +
00042d e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00042e 958a     +DEC R24
00042f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 02E0 	RST = 1;
000430 9ac0      	SBI  0x18,0
                 ; 0001 02E1 
                 ; 0001 02E2 	delay_ms(1000);
000431 940e 1921 	CALL SUBOPT_0xB
                 ; 0001 02E3 	//khoi dong
                 ; 0001 02E4 	LcdWrite(LCD_C, 0x21);  //Tell LCD that extended commands follow
000433 e0e0      	LDI  R30,LOW(0)
000434 93ea      	ST   -Y,R30
000435 e2e1      	LDI  R30,LOW(33)
000436 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 02E5 	LcdWrite(LCD_C, 0xBF);  //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF = Dam nhat
000438 ebef      	LDI  R30,LOW(191)
000439 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 02E6 	LcdWrite(LCD_C, 0x06);  // Set Temp coefficent. //0x04
00043b e0e6      	LDI  R30,LOW(6)
00043c 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 02E7 	LcdWrite(LCD_C, 0x13);  //LCD bias mode 1:48: Try 0x13 or 0x14
00043e e1e3      	LDI  R30,LOW(19)
00043f 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 02E8 	LcdWrite(LCD_C, 0x20);  //We must send 0x20 before modifying the display control mode
000441 e2e0      	LDI  R30,LOW(32)
000442 940e 18c2 	CALL SUBOPT_0x2
                 ; 0001 02E9 	LcdWrite(LCD_C, 0x0C);  //Set display control, normal mode. 0x0D for inverse, 0x0C normal
000444 e0ec      	LDI  R30,LOW(12)
000445 93ea      	ST   -Y,R30
000446 df6d      	RCALL _LcdWrite
                 ; 0001 02EA }
000447 9508      	RET
                 ;// Hien thi so 16 bits
                 ;void wn16(unsigned int so)
                 ; 0001 02ED {
                 _wn16:
                 ; 0001 02EE 	unsigned char a[5], i;
                 ; 0001 02EF 	for (i = 0; i < 5; i++)
000448 9725      	SBIW R28,5
000449 931a      	ST   -Y,R17
                 ;	so -> Y+6
                 ;	a -> Y+1
                 ;	i -> R17
00044a e010      	LDI  R17,LOW(0)
                 _0x20088:
00044b 3015      	CPI  R17,5
00044c f430      	BRSH _0x20089
                 ; 0001 02F0 	{
                 ; 0001 02F1 		a[i] = so % 10;        //a[0]= byte thap nhat
00044d 940e 18fa 	CALL SUBOPT_0x8
00044f 940e 18fd 	CALL SUBOPT_0x9
                 ; 0001 02F2 		so = so / 10;
                 ; 0001 02F3 	}
000451 5f1f      	SUBI R17,-1
000452 cff8      	RJMP _0x20088
                 _0x20089:
                 ; 0001 02F4 	for (i = 0; i < 5; i++)
000453 e010      	LDI  R17,LOW(0)
                 _0x2008B:
000454 3015      	CPI  R17,5
000455 f438      	BRSH _0x2008C
                 ; 0001 02F5 	{
                 ; 0001 02F6 		LcdCharacter(a[4 - i] + 0x30);
000456 940e 18fa 	CALL SUBOPT_0x8
000458 940e 1913 	CALL SUBOPT_0xA
00045a df71      	RCALL _LcdCharacter
                 ; 0001 02F7 	}
00045b 5f1f      	SUBI R17,-1
00045c cff7      	RJMP _0x2008B
                 _0x2008C:
                 ; 0001 02F8 }
                 _0x20C0012:
00045d 8118      	LDD  R17,Y+0
00045e 9628      	ADIW R28,8
00045f 9508      	RET
                 ;// Hien thi so 16 bits co dau
                 ;void wn16s(int so)
                 ; 0001 02FB {
                 _wn16s:
                 ; 0001 02FC 	if (so < 0){ so = 0 - so; LcdCharacter('-'); }
                 ;	so -> Y+0
000460 81a9      	LDD  R26,Y+1
000461 23aa      	TST  R26
000462 f442      	BRPL _0x2008D
000463 81a8      	LD   R26,Y
000464 81b9      	LDD  R27,Y+1
000465 e0e0      	LDI  R30,LOW(0)
000466 e0f0      	LDI  R31,HIGH(0)
000467 940e 1927 	CALL SUBOPT_0xC
000469 e2ed      	LDI  R30,LOW(45)
00046a c001      	RJMP _0x20330
                 ; 0001 02FD 	else{ LcdCharacter(' '); }
                 _0x2008D:
00046b e2e0      	LDI  R30,LOW(32)
                 _0x20330:
00046c 93ea      	ST   -Y,R30
00046d df5e      	RCALL _LcdCharacter
                 ; 0001 02FE 	wn16(so);
00046e 81e8      	LD   R30,Y
00046f 81f9      	LDD  R31,Y+1
000470 940e 192c 	CALL SUBOPT_0xD
                 ; 0001 02FF }
                 _0x20C0011:
000472 9622      	ADIW R28,2
000473 9508      	RET
                 ;// hien thi so 32bit co dau
                 ;void wn32s(int so)
                 ; 0001 0302 {
                 ; 0001 0303 	char tmp[20];
                 ; 0001 0304 	sprintf(tmp, "%d", so);
                 ;	so -> Y+20
                 ;	tmp -> Y+0
                 ; 0001 0305 	ws(tmp);
                 ; 0001 0306 }
                 ;// Hien thi so 32bit co dau
                 ;void wnf(float so)
                 ; 0001 0309 {
                 ; 0001 030A 	char tmp[30];
                 ; 0001 030B 	sprintf(tmp, "%0.2f", so);
                 ;	so -> Y+30
                 ;	tmp -> Y+0
                 ; 0001 030C 	ws(tmp);
                 ; 0001 030D }
                 ;// Hien thi so 32bit co dau
                 ;void wfmt(float so)
                 ; 0001 0310 {
                 ; 0001 0311 	char tmp[30];
                 ; 0001 0312 	sprintf(tmp, "%0.2f", so);
                 ;	so -> Y+30
                 ;	tmp -> Y+0
                 ; 0001 0313 	ws(tmp);
                 ; 0001 0314 }
                 ;/* SPI & LCD INIT */
                 ;void SPIinit()
                 ; 0001 0317 {
                 _SPIinit:
                 ; 0001 0318 	SPCR |= 1 << SPE | 1 << MSTR;                                         //if sPI is used, uncomment this section out
000474 b1ed      	IN   R30,0xD
000475 65e0      	ORI  R30,LOW(0x50)
000476 b9ed      	OUT  0xD,R30
                 ; 0001 0319 	SPSR |= 1 << SPI2X;
000477 9a70      	SBI  0xE,0
                 ; 0001 031A }
000478 9508      	RET
                 ;void LCDinit()
                 ; 0001 031C {
                 _LCDinit:
                 ; 0001 031D 	LcdInitialise();
000479 dfb2      	RCALL _LcdInitialise
                 ; 0001 031E 	LcdClear();
00047a df7b      	RCALL _LcdClear
                 ; 0001 031F 	ws(" <AKBOTKIT>");
                +
00047b e6e0     +LDI R30 , LOW ( _0x2008F + ( 0 ) )
00047c e0f2     +LDI R31 , HIGH ( _0x2008F + ( 0 ) )
                 	__POINTW1MN _0x2008F,0
00047d 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0320 }
00047f 9508      	RET
                 
                 	.DSEG
                 _0x2008F:
000260           	.BYTE 0xC
                 ;
                 ;
                 ;/* ADC */
                 ;#define ADC_VREF_TYPE 0x40
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0001 0327 {
                 
                 	.CSEG
                 _read_adc:
                 ; 0001 0328 	ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
000480 81e8      	LD   R30,Y
000481 64e0      	ORI  R30,0x40
000482 b9e7      	OUT  0x7,R30
                 ; 0001 0329 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0001 032A 	delay_us(10);
                +
000483 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000484 958a     +DEC R24
000485 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0001 032B 	// Start the AD conversion
                 ; 0001 032C 	ADCSRA |= 0x40;
000486 9a36      	SBI  0x6,6
                 ; 0001 032D 	// Wait for the AD conversion to complete
                 ; 0001 032E 	while ((ADCSRA & 0x10) == 0);
                 _0x20090:
000487 9b34      	SBIS 0x6,4
000488 cffe      	RJMP _0x20090
                 ; 0001 032F 	ADCSRA |= 0x10;
000489 9a34      	SBI  0x6,4
                 ; 0001 0330 	return ADCW;
00048a b1e4      	IN   R30,0x4
00048b b1f5      	IN   R31,0x4+1
00048c c0de      	RJMP _0x20C0010
                 ; 0001 0331 }
                 ;
                 ;/* UART BLUETOOTH */
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index, rx_rd_index, rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index, rx_rd_index, rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt[USART_RXC] void usart_rx_isr(void)
                 ; 0001 0365 {
                 _usart_rx_isr:
00048d 93aa      	ST   -Y,R26
00048e 93ea      	ST   -Y,R30
00048f 93fa      	ST   -Y,R31
000490 b7ef      	IN   R30,SREG
000491 93ea      	ST   -Y,R30
                 ; 0001 0366 	char status, data;
                 ; 0001 0367 	status = UCSRA;
000492 931a      	ST   -Y,R17
000493 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000494 b11b      	IN   R17,11
                 ; 0001 0368 	data = UDR;
000495 b10c      	IN   R16,12
                 ; 0001 0369 	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0)
000496 2fe1      	MOV  R30,R17
000497 71ec      	ANDI R30,LOW(0x1C)
000498 f4d9      	BRNE _0x20093
                 ; 0001 036A 	{
                 ; 0001 036B 		rx_buffer[rx_wr_index++] = data;
000499 91e0 0536 	LDS  R30,_rx_wr_index
00049b 5fef      	SUBI R30,-LOW(1)
00049c 93e0 0536 	STS  _rx_wr_index,R30
00049e 940e 1934 	CALL SUBOPT_0xF
0004a0 8300      	ST   Z,R16
                 ; 0001 036C #if RX_BUFFER_SIZE == 256
                 ; 0001 036D 		// special case for receiver buffer size=256
                 ; 0001 036E 		if (++rx_counter == 0) {
                 ; 0001 036F #else
                 ; 0001 0370 		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index = 0;
0004a1 91a0 0536 	LDS  R26,_rx_wr_index
0004a3 30a8      	CPI  R26,LOW(0x8)
0004a4 f419      	BRNE _0x20094
0004a5 e0e0      	LDI  R30,LOW(0)
0004a6 93e0 0536 	STS  _rx_wr_index,R30
                 ; 0001 0371 		if (++rx_counter == RX_BUFFER_SIZE) {
                 _0x20094:
0004a8 91a0 0538 	LDS  R26,_rx_counter
0004aa 5faf      	SUBI R26,-LOW(1)
0004ab 93a0 0538 	STS  _rx_counter,R26
0004ad 30a8      	CPI  R26,LOW(0x8)
0004ae f429      	BRNE _0x20095
                 ; 0001 0372 			rx_counter = 0;
0004af e0e0      	LDI  R30,LOW(0)
0004b0 93e0 0538 	STS  _rx_counter,R30
                 ; 0001 0373 #endif
                 ; 0001 0374 			rx_buffer_overflow = 1;
0004b2 9468      	SET
0004b3 f820      	BLD  R2,0
                 ; 0001 0375 		}
                 ; 0001 0376 		}
                 _0x20095:
                 ; 0001 0377 	}
                 _0x20093:
0004b4 9109      	LD   R16,Y+
0004b5 9119      	LD   R17,Y+
0004b6 c03a      	RJMP _0x20347
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0001 037E {
                 _getchar:
                 ; 0001 037F 	char data;
                 ; 0001 0380 	while (rx_counter == 0);
0004b7 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x20096:
0004b8 91e0 0538 	LDS  R30,_rx_counter
0004ba 30e0      	CPI  R30,0
0004bb f3e1      	BREQ _0x20096
                 ; 0001 0381 	data = rx_buffer[rx_rd_index++];
0004bc 91e0 0537 	LDS  R30,_rx_rd_index
0004be 5fef      	SUBI R30,-LOW(1)
0004bf 93e0 0537 	STS  _rx_rd_index,R30
0004c1 940e 1934 	CALL SUBOPT_0xF
0004c3 8110      	LD   R17,Z
                 ; 0001 0382 #if RX_BUFFER_SIZE != 256
                 ; 0001 0383 	if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
0004c4 91a0 0537 	LDS  R26,_rx_rd_index
0004c6 30a8      	CPI  R26,LOW(0x8)
0004c7 f419      	BRNE _0x20099
0004c8 e0e0      	LDI  R30,LOW(0)
0004c9 93e0 0537 	STS  _rx_rd_index,R30
                 ; 0001 0384 #endif
                 ; 0001 0385 	#asm("cli")
                 _0x20099:
0004cb 94f8      	cli
                 ; 0001 0386 	--rx_counter;
0004cc 91e0 0538 	LDS  R30,_rx_counter
0004ce 50e1      	SUBI R30,LOW(1)
0004cf 93e0 0538 	STS  _rx_counter,R30
                 ; 0001 0387 	#asm("sei")
0004d1 9478      	sei
                 ; 0001 0388 	return data;
0004d2 2fe1      	MOV  R30,R17
0004d3 9119      	LD   R17,Y+
0004d4 9508      	RET
                 ; 0001 0389 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index, tx_rd_index, tx_counter;
                 ;#else
                 ;unsigned int tx_wr_index, tx_rd_index, tx_counter;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt[USART_TXC] void usart_tx_isr(void)
                 ; 0001 0399 {
                 _usart_tx_isr:
0004d5 93aa      	ST   -Y,R26
0004d6 93ea      	ST   -Y,R30
0004d7 93fa      	ST   -Y,R31
0004d8 b7ef      	IN   R30,SREG
0004d9 93ea      	ST   -Y,R30
                 ; 0001 039A 	if (tx_counter)
0004da 91e0 0543 	LDS  R30,_tx_counter
0004dc 30e0      	CPI  R30,0
0004dd f099      	BREQ _0x2009A
                 ; 0001 039B 	{
                 ; 0001 039C 		--tx_counter;
0004de 50e1      	SUBI R30,LOW(1)
0004df 93e0 0543 	STS  _tx_counter,R30
                 ; 0001 039D 		UDR = tx_buffer[tx_rd_index++];
0004e1 91e0 0542 	LDS  R30,_tx_rd_index
0004e3 5fef      	SUBI R30,-LOW(1)
0004e4 93e0 0542 	STS  _tx_rd_index,R30
0004e6 940e 1939 	CALL SUBOPT_0x10
0004e8 81e0      	LD   R30,Z
0004e9 b9ec      	OUT  0xC,R30
                 ; 0001 039E #if TX_BUFFER_SIZE != 256
                 ; 0001 039F 		if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
0004ea 91a0 0542 	LDS  R26,_tx_rd_index
0004ec 30a8      	CPI  R26,LOW(0x8)
0004ed f419      	BRNE _0x2009B
0004ee e0e0      	LDI  R30,LOW(0)
0004ef 93e0 0542 	STS  _tx_rd_index,R30
                 ; 0001 03A0 #endif
                 ; 0001 03A1 	}
                 _0x2009B:
                 ; 0001 03A2 }
                 _0x2009A:
                 _0x20347:
0004f1 91e9      	LD   R30,Y+
0004f2 bfef      	OUT  SREG,R30
0004f3 91f9      	LD   R31,Y+
0004f4 91e9      	LD   R30,Y+
0004f5 91a9      	LD   R26,Y+
0004f6 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0001 03A9 {
                 _putchar:
                 ; 0001 03AA 	while (tx_counter == TX_BUFFER_SIZE);
                 ;	c -> Y+0
                 _0x2009C:
0004f7 91a0 0543 	LDS  R26,_tx_counter
0004f9 30a8      	CPI  R26,LOW(0x8)
0004fa f3e1      	BREQ _0x2009C
                 ; 0001 03AB 	#asm("cli")
0004fb 94f8      	cli
                 ; 0001 03AC 	if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY) == 0))
0004fc 91e0 0543 	LDS  R30,_tx_counter
0004fe 30e0      	CPI  R30,0
0004ff f411      	BRNE _0x200A0
000500 995d      	SBIC 0xB,5
000501 c016      	RJMP _0x2009F
                 _0x200A0:
                 ; 0001 03AD 	{
                 ; 0001 03AE 		tx_buffer[tx_wr_index++] = c;
000502 91e0 0541 	LDS  R30,_tx_wr_index
000504 5fef      	SUBI R30,-LOW(1)
000505 93e0 0541 	STS  _tx_wr_index,R30
000507 940e 1939 	CALL SUBOPT_0x10
000509 81a8      	LD   R26,Y
00050a 83a0      	STD  Z+0,R26
                 ; 0001 03AF #if TX_BUFFER_SIZE != 256
                 ; 0001 03B0 		if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index = 0;
00050b 91a0 0541 	LDS  R26,_tx_wr_index
00050d 30a8      	CPI  R26,LOW(0x8)
00050e f419      	BRNE _0x200A2
00050f e0e0      	LDI  R30,LOW(0)
000510 93e0 0541 	STS  _tx_wr_index,R30
                 ; 0001 03B1 #endif
                 ; 0001 03B2 		++tx_counter;
                 _0x200A2:
000512 91e0 0543 	LDS  R30,_tx_counter
000514 5fef      	SUBI R30,-LOW(1)
000515 93e0 0543 	STS  _tx_counter,R30
                 ; 0001 03B3 	}
                 ; 0001 03B4 	else
000517 c002      	RJMP _0x200A3
                 _0x2009F:
                 ; 0001 03B5 		UDR = c;
000518 81e8      	LD   R30,Y
000519 b9ec      	OUT  0xC,R30
                 ; 0001 03B6 	#asm("sei")
                 _0x200A3:
00051a 9478      	sei
                 ; 0001 03B7 }
00051b c04f      	RJMP _0x20C0010
                 ;#pragma used-
                 ;#endif
                 ;void inituart()
                 ; 0001 03BB {
                 _inituart:
                 ; 0001 03BC 	// USART initialization
                 ; 0001 03BD 	// Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0001 03BE 	// USART Receiver: On
                 ; 0001 03BF 	// USART Transmitter: On
                 ; 0001 03C0 	// USART Mode: Asynchronous
                 ; 0001 03C1 	// USART Baud Rate: 38400
                 ; 0001 03C2 	UCSRA = 0x00;
00051c e0e0      	LDI  R30,LOW(0)
00051d b9eb      	OUT  0xB,R30
                 ; 0001 03C3 	UCSRB = 0xD8;
00051e ede8      	LDI  R30,LOW(216)
00051f b9ea      	OUT  0xA,R30
                 ; 0001 03C4 	UCSRC = 0x06;
000520 e0e6      	LDI  R30,LOW(6)
000521 bde0      	OUT  0x20,R30
                 ; 0001 03C5 	UBRRH = 0x00;
000522 e0e0      	LDI  R30,LOW(0)
000523 bde0      	OUT  0x20,R30
                 ; 0001 03C6 	UBRRL = 0x0C;
000524 e0ec      	LDI  R30,LOW(12)
000525 b9e9      	OUT  0x9,R30
                 ; 0001 03C7 }
000526 9508      	RET
                 ;
                 ;//========================================================
                 ;// External Interrupt 0 service routine
                 ;interrupt[EXT_INT0] void ext_int0_isr(void)
                 ; 0001 03CC {
                 _ext_int0_isr:
000527 940e 193e 	CALL SUBOPT_0x11
                 ; 0001 03CD 	QEL++;
000529 e2aa      	LDI  R26,LOW(_QEL)
00052a e0b5      	LDI  R27,HIGH(_QEL)
00052b c004      	RJMP _0x20346
                 ; 0001 03CE }
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt[EXT_INT1] void ext_int1_isr(void)
                 ; 0001 03D2 {
                 _ext_int1_isr:
00052c 940e 193e 	CALL SUBOPT_0x11
                 ; 0001 03D3 	QER++;
00052e e2ac      	LDI  R26,LOW(_QER)
00052f e0b5      	LDI  R27,HIGH(_QER)
                 _0x20346:
000530 91ed      	LD   R30,X+
000531 91fd      	LD   R31,X+
000532 9631      	ADIW R30,1
000533 93fe      	ST   -X,R31
000534 93ee      	ST   -X,R30
                 ; 0001 03D4 }
000535 91e9      	LD   R30,Y+
000536 bfef      	OUT  SREG,R30
000537 91f9      	LD   R31,Y+
000538 91e9      	LD   R30,Y+
000539 91b9      	LD   R27,Y+
00053a 91a9      	LD   R26,Y+
00053b 9518      	RETI
                 ;//========================================================
                 ;//khoi tao encoder
                 ;void initencoder()
                 ; 0001 03D8 {
                 _initencoder:
                 ; 0001 03D9 	// Dem 24 xung / 1 vong banh xe
                 ; 0001 03DA 	// External Interrupt(s) initialization
                 ; 0001 03DB 	// INT0: On
                 ; 0001 03DC 	// INT0 Mode: Any change
                 ; 0001 03DD 	// INT1: On
                 ; 0001 03DE 	// INT1 Mode: Any change
                 ; 0001 03DF 	// INT2: Off
                 ; 0001 03E0 	GICR |= 0xC0;
00053c b7eb      	IN   R30,0x3B
00053d 6ce0      	ORI  R30,LOW(0xC0)
00053e bfeb      	OUT  0x3B,R30
                 ; 0001 03E1 	MCUCR = 0x05;
00053f e0e5      	LDI  R30,LOW(5)
000540 bfe5      	OUT  0x35,R30
                 ; 0001 03E2 	MCUCSR = 0x00;
000541 e0e0      	LDI  R30,LOW(0)
000542 bfe4      	OUT  0x34,R30
                 ; 0001 03E3 	GIFR = 0xC0;
000543 ece0      	LDI  R30,LOW(192)
000544 bfea      	OUT  0x3A,R30
                 ; 0001 03E4 	// Global enable interrupts
                 ; 0001 03E5 
                 ; 0001 03E6 	//OCR1A=0-255; MOTOR LEFT
                 ; 0001 03E7 	//OCR1B=0-255; MOTOR RIGHT
                 ; 0001 03E8 }
000545 9508      	RET
                 ;
                 ;//========================================================
                 ;//control velocity motor
                 ;void vMLtoi(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 03ED {
                 _vMLtoi:
                 ; 0001 03EE 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
000546 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 03EF 	seLki = 0;//reset thanh phan I
                 ; 0001 03F0 	//uRold=0;
                 ; 0001 03F1 	MLdir = 1;
000548 9aae      	SBI  0x15,6
                 ; 0001 03F2 	svQEL = v;
000549 940e 194f 	CALL SUBOPT_0x13
                 ; 0001 03F3 }
00054b c01f      	RJMP _0x20C0010
                 ;//========================================================
                 ;void vMLlui(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 03F6 {
                 _vMLlui:
                 ; 0001 03F7 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
00054c 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 03F8 	seLki = 0;//reset thanh phan I
                 ; 0001 03F9 
                 ; 0001 03FA 	//uRold=0;
                 ; 0001 03FB 	MLdir = 0;
00054e 98ae      	CBI  0x15,6
                 ; 0001 03FC 	svQEL = v;
00054f 940e 194f 	CALL SUBOPT_0x13
                 ; 0001 03FD }
000551 c019      	RJMP _0x20C0010
                 ;//========================================================
                 ;void vMLstop()
                 ; 0001 0400 {
                 _vMLstop:
                 ; 0001 0401 	seRki = 0;//reset thanh phan I
000552 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 0402 	seLki = 0;//reset thanh phan I
                 ; 0001 0403 	MLdir = 1;
000554 9aae      	SBI  0x15,6
                 ; 0001 0404 	OCR1A = 0;
000555 e0e0      	LDI  R30,LOW(0)
000556 e0f0      	LDI  R31,HIGH(0)
000557 bdfb      	OUT  0x2A+1,R31
000558 bdea      	OUT  0x2A,R30
                 ; 0001 0405 	svQEL = 0;
000559 93e0 04fc 	STS  _svQEL,R30
00055b 93e0 04fd 	STS  _svQEL+1,R30
                 ; 0001 0406 }
00055d 9508      	RET
                 ;//========================================================
                 ;//========================================================
                 ;void vMRtoi(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 040A {
                 _vMRtoi:
                 ; 0001 040B 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
00055e 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 040C 	seLki = 0;//reset thanh phan I
                 ; 0001 040D 	MRdir = 1;
000560 9aaf      	SBI  0x15,7
                 ; 0001 040E 	svQER = v;
000561 c003      	RJMP _0x20C000F
                 ; 0001 040F }
                 ;//========================================================
                 ;void vMRlui(unsigned char v) //congsuat=0-22 (%)
                 ; 0001 0412 {
                 _vMRlui:
                 ; 0001 0413 	seRki = 0;//reset thanh phan I
                 ;	v -> Y+0
000562 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 0414 	seLki = 0;//reset thanh phan I
                 ; 0001 0415 	MRdir = 0;
000564 98af      	CBI  0x15,7
                 ; 0001 0416 	svQER = v;
                 _0x20C000F:
000565 81e8      	LD   R30,Y
000566 e0f0      	LDI  R31,0
000567 93e0 04fe 	STS  _svQER,R30
000569 93f0 04ff 	STS  _svQER+1,R31
                 ; 0001 0417 }
                 _0x20C0010:
00056b 9621      	ADIW R28,1
00056c 9508      	RET
                 ;//========================================================
                 ;void vMRstop()
                 ; 0001 041A {
                 _vMRstop:
                 ; 0001 041B 	seRki = 0;//reset thanh phan I
00056d 940e 1945 	CALL SUBOPT_0x12
                 ; 0001 041C 	seLki = 0;//reset thanh phan I
                 ; 0001 041D 	MRdir = 1;
00056f 9aaf      	SBI  0x15,7
                 ; 0001 041E 	OCR1B = 0;
000570 e0e0      	LDI  R30,LOW(0)
000571 e0f0      	LDI  R31,HIGH(0)
000572 bdf9      	OUT  0x28+1,R31
000573 bde8      	OUT  0x28,R30
                 ; 0001 041F 	svQER = 0;
000574 93e0 04fe 	STS  _svQER,R30
000576 93e0 04ff 	STS  _svQER+1,R30
                 ; 0001 0420 }
000578 9508      	RET
                 ;//========================================================
                 ;// ham dieu khien vi tri
                 ;void ctrRobottoi(unsigned int d, unsigned int v)  //v:0-22
                 ; 0001 0424 {
                 _ctrRobottoi:
                 ; 0001 0425 	flagwaitctrAngle = 0;
                 ;	d -> Y+2
                 ;	v -> Y+0
000579 e0e0      	LDI  R30,LOW(0)
00057a 93e0 0521 	STS  _flagwaitctrAngle,R30
                 ; 0001 0426 	flagwaitctrRobot = 1;
00057c e0e1      	LDI  R30,LOW(1)
00057d 93e0 051c 	STS  _flagwaitctrRobot,R30
                 ; 0001 0427 	sd = d;// set gia tri khoang cach di chuyen
00057f 81ea      	LDD  R30,Y+2
000580 81fb      	LDD  R31,Y+2+1
000581 93e0 0518 	STS  _sd,R30
000583 93f0 0519 	STS  _sd+1,R31
                 ; 0001 0428 	oldd = (QEL + QER) / 2; // luu gia tri vi tri hien tai
000585 940e 1956 	CALL SUBOPT_0x14
000587 91a0 052a 	LDS  R26,_QEL
000589 91b0 052b 	LDS  R27,_QEL+1
00058b 940e 195b 	CALL SUBOPT_0x15
00058d 93e0 051a 	STS  _oldd,R30
00058f 93f0 051b 	STS  _oldd+1,R31
                 ; 0001 0429 	vMRtoi(v);
000591 81e8      	LD   R30,Y
000592 93ea      	ST   -Y,R30
000593 dfca      	RCALL _vMRtoi
                 ; 0001 042A 	vMLtoi(v);
000594 81e8      	LD   R30,Y
000595 93ea      	ST   -Y,R30
000596 dfaf      	RCALL _vMLtoi
                 ; 0001 042B }
                 _0x20C000E:
000597 9624      	ADIW R28,4
000598 9508      	RET
                 ;// ham dieu khien vi tri
                 ;void ctrRobotlui(unsigned int d, unsigned int v)  //v:0-22
                 ; 0001 042E {
                 ; 0001 042F 	flagwaitctrAngle = 0;
                 ;	d -> Y+2
                 ;	v -> Y+0
                 ; 0001 0430 	flagwaitctrRobot = 1;
                 ; 0001 0431 	sd = d;// set gia tri khoang cach di chuyen
                 ; 0001 0432 	oldd = (QEL + QER) / 2; // luu gia tri vi tri hien tai
                 ; 0001 0433 	vMRlui(v);
                 ; 0001 0434 	vMLlui(v);
                 ; 0001 0435 }
                 ;// ham dieu khien goc quay
                 ;void ctrRobotXoay(int angle, unsigned int v)  //v:0-22
                 ; 0001 0438 {
                 ; 0001 0439 	float fangle = 0;
                 ; 0001 043A 	flagwaitctrRobot = 0;
                 ;	angle -> Y+6
                 ;	v -> Y+4
                 ;	fangle -> Y+0
                 ; 0001 043B 	if (angle > 0)  { //xoay trai
                 ; 0001 043C 		if (angle > 1) vMRtoi(v);
                 ; 0001 043D 		else vMRtoi(0);
                 ; 0001 043E 		if (angle > 1) vMLlui(v);
                 ; 0001 043F 		else vMLlui(0);
                 ; 0001 0440 	}
                 ; 0001 0441 	else  //xoay phai
                 ; 0001 0442 	{
                 ; 0001 0443 		angle = -angle;
                 ; 0001 0444 		if (angle > 1) vMRlui(v);
                 ; 0001 0445 		else vMRlui(0);
                 ; 0001 0446 		if (angle > 1) vMLtoi(v);
                 ; 0001 0447 		else vMLtoi(0);
                 ; 0001 0448 	}
                 ; 0001 0449 	flagwaitctrAngle = 1;
                 ; 0001 044A 	fangle = angle*0.35;// nhan chia so float
                 ; 0001 044B 	sa = fangle;
                 ; 0001 044C 	olda = QEL; // luu gia tri vi tri hien tai
                 ; 0001 044D }
                 ;
                 ;
                 ;//============Phat==============
                 ;IntRobot convertRobot2IntRobot(Robot robot)
                 ; 0001 0452 {
                 _convertRobot2IntRobot:
                 ; 0001 0453 	IntRobot intRb;
                 ; 0001 0454 	intRb.id = (int)robot.id;
000599 976c      	SBIW R28,28
                 ;	robot -> Y+28
                 ;	intRb -> Y+0
                +
00059a 8dec     +LDD R30 , Y + 28
00059b 8dfd     +LDD R31 , Y + 28 + 1
00059c 8d6e     +LDD R22 , Y + 28 + 2
00059d 8d7f     +LDD R23 , Y + 28 + 3
                 	__GETD1S 28
00059e 940e 1dda 	CALL __CFD1
0005a0 83e8      	ST   Y,R30
0005a1 83f9      	STD  Y+1,R31
                 ; 0001 0455 	intRb.x = (int)robot.x;
0005a2 940e 1961 	CALL SUBOPT_0x16
0005a4 940e 1dda 	CALL __CFD1
0005a6 83ea      	STD  Y+2,R30
0005a7 83fb      	STD  Y+2+1,R31
                 ; 0001 0456 	intRb.y = (int)robot.y;
0005a8 940e 1966 	CALL SUBOPT_0x17
0005aa 940e 1dda 	CALL __CFD1
0005ac 83ec      	STD  Y+4,R30
0005ad 83fd      	STD  Y+4+1,R31
                 ; 0001 0457 	intRb.ox = (int)robot.ox;
0005ae 940e 196b 	CALL SUBOPT_0x18
0005b0 940e 1dda 	CALL __CFD1
0005b2 83ee      	STD  Y+6,R30
0005b3 83ff      	STD  Y+6+1,R31
                 ; 0001 0458 	intRb.oy = (int)robot.oy;
                +
0005b4 a5ec     +LDD R30 , Y + 44
0005b5 a5fd     +LDD R31 , Y + 44 + 1
0005b6 a56e     +LDD R22 , Y + 44 + 2
0005b7 a57f     +LDD R23 , Y + 44 + 3
                 	__GETD1S 44
0005b8 940e 1dda 	CALL __CFD1
0005ba 87e8      	STD  Y+8,R30
0005bb 87f9      	STD  Y+8+1,R31
                 ; 0001 0459 	intRb.ball.x = (int)robot.ball.x;
0005bc 940e 1970 	CALL SUBOPT_0x19
0005be 940e 1dda 	CALL __CFD1
0005c0 87ea      	STD  Y+10,R30
0005c1 87fb      	STD  Y+10+1,R31
                 ; 0001 045A 	intRb.ball.y = (int)robot.ball.y;
                +
0005c2 a9ec     +LDD R30 , Y + 52
0005c3 a9fd     +LDD R31 , Y + 52 + 1
0005c4 a96e     +LDD R22 , Y + 52 + 2
0005c5 a97f     +LDD R23 , Y + 52 + 3
                 	__GETD1S 52
0005c6 940e 1dda 	CALL __CFD1
0005c8 87ec      	STD  Y+12,R30
0005c9 87fd      	STD  Y+12+1,R31
                 ; 0001 045B 	return intRb;
0005ca 01fe      	MOVW R30,R28
0005cb 01de      	MOVW R26,R28
0005cc 961e      	ADIW R26,14
0005cd e08e      	LDI  R24,14
0005ce 940e 20ae 	CALL __COPYMML
0005d0 01fe      	MOVW R30,R28
0005d1 963e      	ADIW R30,14
0005d2 e08e      	LDI  R24,14
0005d3 b61f      	IN   R1,SREG
0005d4 94f8      	CLI
0005d5 c171      	RJMP _0x20C000D
                 ; 0001 045C }
                 ;
                 ;//========================================================
                 ;// read  vi tri robot   PHUC
                 ;//========================================================
                 ;/* Comment to return
                 ;unsigned char readposition()
                 ;{
                 ;unsigned char  i=0;
                 ;unsigned flagstatus=0;
                 ;
                 ;if(nRF24L01_RxPacket(RxBuf)==1)         // Neu nhan duoc du lieu
                 ;{
                 ;for( i=0;i<28;i++)
                 ;{
                 ;*(uint8_t *) ((uint8_t *)&rb + i)=RxBuf[i];
                 ;}
                 ;
                 ;idRobot = fmod(rb.id,10); // doc id
                 ;cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
                 ;
                 ;switch (idRobot)
                 ;{
                 ;case 1:
                 ;robot11=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 2:
                 ;robot12=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 3:
                 ;robot13=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 4:
                 ;robot21=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 5:
                 ;robot22=convertRobot2IntRobot(rb);
                 ;break;
                 ;case 6:
                 ;robot23=convertRobot2IntRobot(rb);
                 ;break;
                 ;}
                 ;
                 ;if(idRobot==ROBOT_ID)
                 ;{
                 ;LEDL=!LEDL;
                 ;cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
                 ;flagstatus=1;
                 ;robotctrl=convertRobot2IntRobot(rb);
                 ;}
                 ;}
                 ;return flagstatus;
                 ;}     */
                 ;//========================================================
                 ;// calc  vi tri robot   so voi mot diem (x,y)        PHUC
                 ;// return goclenh va khoang cach, HUONG TAN CONG
                 ;//========================================================
                 ;
                 ;
                 ;#define LP_O_C 0.5
                 ;float oldOrientation = 0;
                 ;
                 ;void calcvitri(float x, float y)
                 ; 0001 049B {
                 _calcvitri:
                 ; 0001 049C 	float ahx, ahy, aox, aoy, dah, dao, ahay, cosgoc, anpla0, anpla1, detaanpla, newOrientation;
                 ; 0001 049D 	ahx = robotctrl.ox - robotctrl.x;
0005d6 97e0      	SBIW R28,48
                 ;	x -> Y+52
                 ;	y -> Y+48
                 ;	ahx -> Y+44
                 ;	ahy -> Y+40
                 ;	aox -> Y+36
                 ;	aoy -> Y+32
                 ;	dah -> Y+28
                 ;	dao -> Y+24
                 ;	ahay -> Y+20
                 ;	cosgoc -> Y+16
                 ;	anpla0 -> Y+12
                 ;	anpla1 -> Y+8
                 ;	detaanpla -> Y+4
                 ;	newOrientation -> Y+0
                +
0005d7 91e0 0465+LDS R30 , _robotctrl + ( 6 )
0005d9 91f0 0466+LDS R31 , _robotctrl + ( 6 ) + 1
                 	__GETW1MN _robotctrl,6
                +
0005db 91a0 0461+LDS R26 , _robotctrl + ( 2 )
0005dd 91b0 0462+LDS R27 , _robotctrl + ( 2 ) + 1
                 	__GETW2MN _robotctrl,2
0005df 940e 1975 	CALL SUBOPT_0x1A
                +
0005e1 a7ec     +STD Y + 44 , R30
0005e2 a7fd     +STD Y + 44 + 1 , R31
0005e3 a76e     +STD Y + 44 + 2 , R22
0005e4 a77f     +STD Y + 44 + 3 , R23
                 	__PUTD1S 44
                 ; 0001 049E 	ahy = robotctrl.oy - robotctrl.y;
                +
0005e5 91e0 0467+LDS R30 , _robotctrl + ( 8 )
0005e7 91f0 0468+LDS R31 , _robotctrl + ( 8 ) + 1
                 	__GETW1MN _robotctrl,8
                +
0005e9 91a0 0463+LDS R26 , _robotctrl + ( 4 )
0005eb 91b0 0464+LDS R27 , _robotctrl + ( 4 ) + 1
                 	__GETW2MN _robotctrl,4
0005ed 940e 1975 	CALL SUBOPT_0x1A
                +
0005ef a7e8     +STD Y + 40 , R30
0005f0 a7f9     +STD Y + 40 + 1 , R31
0005f1 a76a     +STD Y + 40 + 2 , R22
0005f2 a77b     +STD Y + 40 + 3 , R23
                 	__PUTD1S 40
                 ; 0001 049F 	aox = x - robotctrl.x;
0005f3 940e 197c 	CALL SUBOPT_0x1B
                +
0005f5 a9ac     +LDD R26 , Y + 52
0005f6 a9bd     +LDD R27 , Y + 52 + 1
0005f7 a98e     +LDD R24 , Y + 52 + 2
0005f8 a99f     +LDD R25 , Y + 52 + 3
                 	__GETD2S 52
0005f9 940e 1981 	CALL SUBOPT_0x1C
                +
0005fb a3ec     +STD Y + 36 , R30
0005fc a3fd     +STD Y + 36 + 1 , R31
0005fd a36e     +STD Y + 36 + 2 , R22
0005fe a37f     +STD Y + 36 + 3 , R23
                 	__PUTD1S 36
                 ; 0001 04A0 	aoy = y - robotctrl.y;
0005ff 940e 198a 	CALL SUBOPT_0x1D
                +
000601 a9a8     +LDD R26 , Y + 48
000602 a9b9     +LDD R27 , Y + 48 + 1
000603 a98a     +LDD R24 , Y + 48 + 2
000604 a99b     +LDD R25 , Y + 48 + 3
                 	__GETD2S 48
000605 940e 1981 	CALL SUBOPT_0x1C
                +
000607 a3e8     +STD Y + 32 , R30
000608 a3f9     +STD Y + 32 + 1 , R31
000609 a36a     +STD Y + 32 + 2 , R22
00060a a37b     +STD Y + 32 + 3 , R23
                 	__PUTD1S 32
                 ; 0001 04A1 	dah = sqrt(ahx*ahx + ahy*ahy);
                +
00060b a5ec     +LDD R30 , Y + 44
00060c a5fd     +LDD R31 , Y + 44 + 1
00060d a56e     +LDD R22 , Y + 44 + 2
00060e a57f     +LDD R23 , Y + 44 + 3
                 	__GETD1S 44
00060f 940e 198f 	CALL SUBOPT_0x1E
000611 937f      	PUSH R23
000612 936f      	PUSH R22
000613 93ff      	PUSH R31
000614 93ef      	PUSH R30
000615 940e 196b 	CALL SUBOPT_0x18
000617 940e 1996 	CALL SUBOPT_0x1F
000619 91af      	POP  R26
00061a 91bf      	POP  R27
00061b 918f      	POP  R24
00061c 919f      	POP  R25
00061d 940e 199d 	CALL SUBOPT_0x20
                +
00061f 8fec     +STD Y + 28 , R30
000620 8ffd     +STD Y + 28 + 1 , R31
000621 8f6e     +STD Y + 28 + 2 , R22
000622 8f7f     +STD Y + 28 + 3 , R23
                 	__PUTD1S 28
                 ; 0001 04A2 	dao = sqrt(aox*aox + aoy*aoy);
000623 940e 1966 	CALL SUBOPT_0x17
000625 940e 19a3 	CALL SUBOPT_0x21
000627 940e 1e9b 	CALL __MULF12
000629 937f      	PUSH R23
00062a 936f      	PUSH R22
00062b 93ff      	PUSH R31
00062c 93ef      	PUSH R30
00062d 940e 1961 	CALL SUBOPT_0x16
00062f 940e 19a8 	CALL SUBOPT_0x22
000631 940e 1e9b 	CALL __MULF12
000633 91af      	POP  R26
000634 91bf      	POP  R27
000635 918f      	POP  R24
000636 919f      	POP  R25
000637 940e 199d 	CALL SUBOPT_0x20
                +
000639 8fe8     +STD Y + 24 , R30
00063a 8ff9     +STD Y + 24 + 1 , R31
00063b 8f6a     +STD Y + 24 + 2 , R22
00063c 8f7b     +STD Y + 24 + 3 , R23
                 	__PUTD1S 24
                 ; 0001 04A3 	ahay = ahx*aox + ahy*aoy;
00063d 940e 1966 	CALL SUBOPT_0x17
00063f 940e 198f 	CALL SUBOPT_0x1E
000641 937f      	PUSH R23
000642 936f      	PUSH R22
000643 93ff      	PUSH R31
000644 93ef      	PUSH R30
000645 940e 1961 	CALL SUBOPT_0x16
000647 940e 1996 	CALL SUBOPT_0x1F
000649 91af      	POP  R26
00064a 91bf      	POP  R27
00064b 918f      	POP  R24
00064c 919f      	POP  R25
00064d 940e 19ad 	CALL SUBOPT_0x23
                 ; 0001 04A4 	cosgoc = ahay / (dah*dao);
                +
00064f 8de8     +LDD R30 , Y + 24
000650 8df9     +LDD R31 , Y + 24 + 1
000651 8d6a     +LDD R22 , Y + 24 + 2
000652 8d7b     +LDD R23 , Y + 24 + 3
                 	__GETD1S 24
                +
000653 8dac     +LDD R26 , Y + 28
000654 8dbd     +LDD R27 , Y + 28 + 1
000655 8d8e     +LDD R24 , Y + 28 + 2
000656 8d9f     +LDD R25 , Y + 28 + 3
                 	__GETD2S 28
000657 940e 1e9b 	CALL __MULF12
000659 940e 19b4 	CALL SUBOPT_0x24
00065b 940e 1ee9 	CALL __DIVF21
00065d 940e 19b9 	CALL SUBOPT_0x25
                 ; 0001 04A5 
                 ; 0001 04A6 	anpla0 = atan2(ahy, ahx);
00065f 940e 19be 	CALL SUBOPT_0x26
000661 940e 19c2 	CALL SUBOPT_0x27
000663 940e 19c7 	CALL SUBOPT_0x28
                 ; 0001 04A7 	anpla1 = atan2(aoy, aox);
000665 940e 1961 	CALL SUBOPT_0x16
000667 940e 2094 	CALL __PUTPARD1
000669 940e 19be 	CALL SUBOPT_0x26
00066b 940e 17d1 	CALL _atan2
00066d 940e 19cc 	CALL SUBOPT_0x29
                 ; 0001 04A8 	detaanpla = anpla0 - anpla1;
00066f 940e 19d5 	CALL SUBOPT_0x2A
000671 940e 19dc 	CALL SUBOPT_0x2B
                 ; 0001 04A9 
                 ; 0001 04AA 	errangle = acos(cosgoc) * 180 / 3.14;
000673 940e 19e1 	CALL SUBOPT_0x2C
000675 940e 2094 	CALL __PUTPARD1
000677 940e 17b3 	CALL _acos
000679 940e 19e6 	CALL SUBOPT_0x2D
                +
00067b ece3     +LDI R30 , LOW ( 0x4048F5C3 )
00067c eff5     +LDI R31 , HIGH ( 0x4048F5C3 )
00067d e468     +LDI R22 , BYTE3 ( 0x4048F5C3 )
00067e e470     +LDI R23 , BYTE4 ( 0x4048F5C3 )
                 	__GETD1N 0x4048F5C3
00067f 940e 1ee9 	CALL __DIVF21
000681 93e0 046d 	STS  _errangle,R30
000683 93f0 046e 	STS  _errangle+1,R31
000685 9360 046f 	STS  _errangle+2,R22
000687 9370 0470 	STS  _errangle+3,R23
                 ; 0001 04AB 	if (((detaanpla > 0) && (detaanpla < M_PI)) || (detaanpla < -M_PI))  // xet truong hop goc ben phai
000689 940e 19ef 	CALL SUBOPT_0x2E
00068b 940e 20c2 	CALL __CPD02
00068d f44c      	BRGE _0x200BB
00068e 940e 19ef 	CALL SUBOPT_0x2E
                +
000690 edeb     +LDI R30 , LOW ( 0x40490FDB )
000691 e0ff     +LDI R31 , HIGH ( 0x40490FDB )
000692 e469     +LDI R22 , BYTE3 ( 0x40490FDB )
000693 e470     +LDI R23 , BYTE4 ( 0x40490FDB )
                 	__GETD1N 0x40490FDB
000694 940e 1f2e 	CALL __CMPF12
000696 f048      	BRLO _0x200BD
                 _0x200BB:
000697 940e 19ef 	CALL SUBOPT_0x2E
                +
000699 edeb     +LDI R30 , LOW ( 0xC0490FDB )
00069a e0ff     +LDI R31 , HIGH ( 0xC0490FDB )
00069b e469     +LDI R22 , BYTE3 ( 0xC0490FDB )
00069c ec70     +LDI R23 , BYTE4 ( 0xC0490FDB )
                 	__GETD1N 0xC0490FDB
00069d 940e 1f2e 	CALL __CMPF12
00069f f428      	BRSH _0x200BA
                 _0x200BD:
                 ; 0001 04AC 	{
                 ; 0001 04AD 		errangle = -errangle; // ben phai
0006a0 940e 19f4 	CALL SUBOPT_0x2F
0006a2 940e 1da5 	CALL __ANEGF1
0006a4 c002      	RJMP _0x20335
                 ; 0001 04AE 	}
                 ; 0001 04AF 	else
                 _0x200BA:
                 ; 0001 04B0 	{
                 ; 0001 04B1 		errangle = errangle;   // ben trai
0006a5 940e 19f4 	CALL SUBOPT_0x2F
                 _0x20335:
0006a7 93e0 046d 	STS  _errangle,R30
0006a9 93f0 046e 	STS  _errangle+1,R31
0006ab 9360 046f 	STS  _errangle+2,R22
0006ad 9370 0470 	STS  _errangle+3,R23
                 ; 0001 04B2 
                 ; 0001 04B3 	}
                 ; 0001 04B4 	distance = sqrt(aox*3.48*aox*3.48 + aoy*2.89*aoy*2.89); //tinh khoang cach
0006af 940e 19a3 	CALL SUBOPT_0x21
                +
0006b1 e5e2     +LDI R30 , LOW ( 0x405EB852 )
0006b2 ebf8     +LDI R31 , HIGH ( 0x405EB852 )
0006b3 e56e     +LDI R22 , BYTE3 ( 0x405EB852 )
0006b4 e470     +LDI R23 , BYTE4 ( 0x405EB852 )
                 	__GETD1N 0x405EB852
0006b5 940e 1e9b 	CALL __MULF12
0006b7 940e 19a3 	CALL SUBOPT_0x21
0006b9 940e 1e9b 	CALL __MULF12
                +
0006bb e5a2     +LDI R26 , LOW ( 0x405EB852 )
0006bc ebb8     +LDI R27 , HIGH ( 0x405EB852 )
0006bd e58e     +LDI R24 , BYTE3 ( 0x405EB852 )
0006be e490     +LDI R25 , BYTE4 ( 0x405EB852 )
                 	__GETD2N 0x405EB852
0006bf 940e 1e9b 	CALL __MULF12
0006c1 937f      	PUSH R23
0006c2 936f      	PUSH R22
0006c3 93ff      	PUSH R31
0006c4 93ef      	PUSH R30
0006c5 940e 19a8 	CALL SUBOPT_0x22
                +
0006c7 ece3     +LDI R30 , LOW ( 0x4038F5C3 )
0006c8 eff5     +LDI R31 , HIGH ( 0x4038F5C3 )
0006c9 e368     +LDI R22 , BYTE3 ( 0x4038F5C3 )
0006ca e470     +LDI R23 , BYTE4 ( 0x4038F5C3 )
                 	__GETD1N 0x4038F5C3
0006cb 940e 1e9b 	CALL __MULF12
0006cd 940e 19a8 	CALL SUBOPT_0x22
0006cf 940e 1e9b 	CALL __MULF12
                +
0006d1 eca3     +LDI R26 , LOW ( 0x4038F5C3 )
0006d2 efb5     +LDI R27 , HIGH ( 0x4038F5C3 )
0006d3 e388     +LDI R24 , BYTE3 ( 0x4038F5C3 )
0006d4 e490     +LDI R25 , BYTE4 ( 0x4038F5C3 )
                 	__GETD2N 0x4038F5C3
0006d5 940e 1e9b 	CALL __MULF12
0006d7 91af      	POP  R26
0006d8 91bf      	POP  R27
0006d9 918f      	POP  R24
0006da 919f      	POP  R25
0006db 940e 199d 	CALL SUBOPT_0x20
0006dd 93e0 0471 	STS  _distance,R30
0006df 93f0 0472 	STS  _distance+1,R31
0006e1 9360 0473 	STS  _distance+2,R22
0006e3 9370 0474 	STS  _distance+3,R23
                 ; 0001 04B5 	newOrientation = atan2(ahy, ahx) * 180 / M_PI + offestsanco;//tinh huong ra goc
0006e5 940e 19be 	CALL SUBOPT_0x26
0006e7 940e 19c2 	CALL SUBOPT_0x27
0006e9 940e 19e6 	CALL SUBOPT_0x2D
                +
0006eb edeb     +LDI R30 , LOW ( 0x40490FDB )
0006ec e0ff     +LDI R31 , HIGH ( 0x40490FDB )
0006ed e469     +LDI R22 , BYTE3 ( 0x40490FDB )
0006ee e470     +LDI R23 , BYTE4 ( 0x40490FDB )
                 	__GETD1N 0x40490FDB
0006ef 940e 1ee9 	CALL __DIVF21
0006f1 91a0 04b1 	LDS  R26,_offestsanco
0006f3 91b0 04b2 	LDS  R27,_offestsanco+1
0006f5 9180 04b3 	LDS  R24,_offestsanco+2
0006f7 9190 04b4 	LDS  R25,_offestsanco+3
0006f9 940e 1e4b 	CALL __ADDF12
0006fb 940e 19fd 	CALL SUBOPT_0x30
                 ; 0001 04B6 	orientation = newOrientation * LP_O_C + oldOrientation * (1 - LP_O_C);
0006fd 940e 1a00 	CALL SUBOPT_0x31
0006ff 940e 1a03 	CALL SUBOPT_0x32
000701 937f      	PUSH R23
000702 936f      	PUSH R22
000703 93ff      	PUSH R31
000704 93ef      	PUSH R30
000705 91a0 0544 	LDS  R26,_oldOrientation
000707 91b0 0545 	LDS  R27,_oldOrientation+1
000709 9180 0546 	LDS  R24,_oldOrientation+2
00070b 9190 0547 	LDS  R25,_oldOrientation+3
00070d 940e 1a03 	CALL SUBOPT_0x32
00070f 91af      	POP  R26
000710 91bf      	POP  R27
000711 918f      	POP  R24
000712 919f      	POP  R25
000713 940e 1e4b 	CALL __ADDF12
000715 93e0 0475 	STS  _orientation,R30
000717 93f0 0476 	STS  _orientation+1,R31
000719 9360 0477 	STS  _orientation+2,R22
00071b 9370 0478 	STS  _orientation+3,R23
                 ; 0001 04B7 	if ((0 < orientation && orientation < 74) || (0 > orientation && orientation > -80))
00071d 940e 20b8 	CALL __CPD01
00071f f44c      	BRGE _0x200C1
000720 940e 1a0a 	CALL SUBOPT_0x33
                +
000722 e0e0     +LDI R30 , LOW ( 0x42940000 )
000723 e0f0     +LDI R31 , HIGH ( 0x42940000 )
000724 e964     +LDI R22 , BYTE3 ( 0x42940000 )
000725 e472     +LDI R23 , BYTE4 ( 0x42940000 )
                 	__GETD1N 0x42940000
000726 940e 1f2e 	CALL __CMPF12
000728 f090      	BRLO _0x200C3
                 _0x200C1:
000729 91e0 0478 	LDS  R30,_orientation+3
00072b 23ee      	TST  R30
00072c f46a      	BRPL _0x200C4
00072d 940e 1a0a 	CALL SUBOPT_0x33
                +
00072f e0e0     +LDI R30 , LOW ( 0xC2A00000 )
000730 e0f0     +LDI R31 , HIGH ( 0xC2A00000 )
000731 ea60     +LDI R22 , BYTE3 ( 0xC2A00000 )
000732 ec72     +LDI R23 , BYTE4 ( 0xC2A00000 )
                 	__GETD1N 0xC2A00000
000733 940e 1f2e 	CALL __CMPF12
000735 f009      	BREQ PC+2
000736 f410      	BRCC PC+3
000737 940c 073a 	JMP  _0x200C4
000739 c001      	RJMP _0x200C3
                 _0x200C4:
00073a c009      	RJMP _0x200C0
                 _0x200C3:
                 ; 0001 04B8 	{
                 ; 0001 04B9 		if (SAN_ID == 1)// phan san duong
                 ; 0001 04BA 		{
                 ; 0001 04BB 			flagtancong = 0;
00073b 2444      	CLR  R4
00073c 2455      	CLR  R5
                 ; 0001 04BC 			offsetphongthu = 70;
00073d e4e6      	LDI  R30,LOW(70)
00073e e0f0      	LDI  R31,HIGH(70)
00073f 013f      	MOVW R6,R30
                 ; 0001 04BD 			goctancong = 180;
000740 ebe4      	LDI  R30,LOW(180)
000741 e0f0      	LDI  R31,HIGH(180)
000742 014f      	MOVW R8,R30
                 ; 0001 04BE 		}
                 ; 0001 04BF 		else // phan san am
                 ; 0001 04C0 		{
                 ; 0001 04C1 			flagtancong = 1;
                 ; 0001 04C2 
                 ; 0001 04C3 		}
                 ; 0001 04C4 	}
                 ; 0001 04C5 	else
000743 c003      	RJMP _0x200C9
                 _0x200C0:
                 ; 0001 04C6 	{
                 ; 0001 04C7 		if (SAN_ID == 1)
                 ; 0001 04C8 		{
                 ; 0001 04C9 			flagtancong = 1;
000744 e0e1      	LDI  R30,LOW(1)
000745 e0f0      	LDI  R31,HIGH(1)
000746 012f      	MOVW R4,R30
                 ; 0001 04CA 		}
                 ; 0001 04CB 		else
                 ; 0001 04CC 		{
                 ; 0001 04CD 			flagtancong = 0;
                 ; 0001 04CE 			offsetphongthu = -70;
                 ; 0001 04CF 			goctancong = 0;
                 ; 0001 04D0 		}
                 ; 0001 04D1 	}
                 _0x200C9:
                 ; 0001 04D2 }
                 _0x20C000D:
000747 96e8      	ADIW R28,56
000748 9508      	RET
                 ;void runEscStuck()
                 ; 0001 04D4 {
                 ; 0001 04D5 	while (cmdCtrlRobot == 4)
                 ; 0001 04D6 	{
                 ; 0001 04D7 
                 ; 0001 04D8 		DDRA = 0x00;
                 ; 0001 04D9 		PORTA = 0x00;
                 ; 0001 04DA 		IRFL = read_adc(4);
                 ; 0001 04DB 		IRFR = read_adc(5);
                 ; 0001 04DC 
                 ; 0001 04DD 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 04DE 		{
                 ; 0001 04DF 			vMLtoi(22); vMRlui(22);
                 ; 0001 04E0 			delay_ms(100);
                 ; 0001 04E1 		}
                 ; 0001 04E2 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 04E3 		{
                 ; 0001 04E4 			vMLlui(0); vMRlui(25); delay_ms(100);
                 ; 0001 04E5 		}
                 ; 0001 04E6 		if (IRFR>300 && IRFL < 300)
                 ; 0001 04E7 		{
                 ; 0001 04E8 			vMLlui(25); vMRlui(0); delay_ms(100);
                 ; 0001 04E9 		}
                 ; 0001 04EA 		LEDBR = !LEDBR;
                 ; 0001 04EB 		readposition();//doc RF cap nhat ai robot
                 ; 0001 04EC 	}
                 ; 0001 04ED }
                 ;void runEscStucksethome()
                 ; 0001 04EF {
                 ; 0001 04F0 	while (cmdCtrlRobot == 7)
                 ; 0001 04F1 	{
                 ; 0001 04F2 		DDRA = 0x00;
                 ; 0001 04F3 		PORTA = 0x00;
                 ; 0001 04F4 		readposition();//doc RF cap nhat ai robot
                 ; 0001 04F5 		IRFL = read_adc(4);
                 ; 0001 04F6 		IRFR = read_adc(5);
                 ; 0001 04F7 
                 ; 0001 04F8 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 04F9 		{
                 ; 0001 04FA 			vMLtoi(22); vMRlui(22);
                 ; 0001 04FB 			delay_ms(100);
                 ; 0001 04FC 		}
                 ; 0001 04FD 
                 ; 0001 04FE 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 04FF 		{
                 ; 0001 0500 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0501 		}
                 ; 0001 0502 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0503 		{
                 ; 0001 0504 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 0505 		}
                 ; 0001 0506 
                 ; 0001 0507 		LEDBR = !LEDBR;
                 ; 0001 0508 	}
                 ; 0001 0509 }
                 ;void runEscBlindSpot()
                 ; 0001 050B {
                 ; 0001 050C 	while (cmdCtrlRobot == 3)
                 ; 0001 050D 	{
                 ; 0001 050E 		DDRA = 0x00;
                 ; 0001 050F 		PORTA = 0x00;
                 ; 0001 0510 		readposition();//doc RF cap nhat ai robot
                 ; 0001 0511 		IRFL = read_adc(4);
                 ; 0001 0512 		IRFR = read_adc(5);
                 ; 0001 0513 		if (IRFL>300 && IRFR < 300)
                 ; 0001 0514 		{
                 ; 0001 0515 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0516 		}
                 ; 0001 0517 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0518 		{
                 ; 0001 0519 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 051A 		}
                 ; 0001 051B 
                 ; 0001 051C 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 051D 		{
                 ; 0001 051E 			vMLtoi(20); vMRtoi(20);
                 ; 0001 051F 			delay_ms(20);
                 ; 0001 0520 		}
                 ; 0001 0521 
                 ; 0001 0522 		LEDR = !LEDR;
                 ; 0001 0523 	}
                 ; 0001 0524 }
                 ;
                 ;void runEscBlindSpotsethome()
                 ; 0001 0527 {
                 ; 0001 0528 	while (cmdCtrlRobot == 6)
                 ; 0001 0529 	{
                 ; 0001 052A 		DDRA = 0x00;
                 ; 0001 052B 		PORTA = 0x00;
                 ; 0001 052C 		readposition();
                 ; 0001 052D 		IRFL = read_adc(4);
                 ; 0001 052E 		IRFR = read_adc(5);
                 ; 0001 052F 		if (IRFL > 300 && IRFR < 300)
                 ; 0001 0530 		{
                 ; 0001 0531 			vMLlui(0); vMRlui(22); delay_ms(300);
                 ; 0001 0532 		}
                 ; 0001 0533 		if (IRFR>300 && IRFL < 300)
                 ; 0001 0534 		{
                 ; 0001 0535 			vMLlui(22); vMRlui(0); delay_ms(300);
                 ; 0001 0536 		}
                 ; 0001 0537 
                 ; 0001 0538 		if ((IRFL < 300) && (IRFR < 300))
                 ; 0001 0539 		{
                 ; 0001 053A 			vMLtoi(20); vMRtoi(20);
                 ; 0001 053B 			delay_ms(10);
                 ; 0001 053C 		}
                 ; 0001 053D 
                 ; 0001 053E 		LEDR = !LEDR;
                 ; 0001 053F 	}
                 ; 0001 0540 }
                 ;
                 ;//========================================================
                 ;// SET HOME  vi tri robot, de chuan bi cho tran dau       PHUC//
                 ;//========================================================
                 ;int sethomeRB()
                 ; 0001 0546 {
                 ; 0001 0547 	while (flagsethome == 0)
                 ; 0001 0548 	{
                 ; 0001 0549 		LEDL = !LEDL;
                 ; 0001 054A 		//PHUC SH
                 ; 0001 054B 		if (readposition() == 1)//co du lieu moi
                 ; 0001 054C 		{
                 ; 0001 054D 			//hc(3,40);wn16s(cmdCtrlRobot);
                 ; 0001 054E 			if (cmdCtrlRobot == 1)      // dung ma lenh stop chuong trinh
                 ; 0001 054F 			{
                 ; 0001 0550 				flagsethome = 0;
                 ; 0001 0551 				return 0;
                 ; 0001 0552 			}
                 ; 0001 0553 
                 ; 0001 0554 			if (cmdCtrlRobot == 2 || cmdCtrlRobot == 3 || cmdCtrlRobot == 4)      // dung ma lenh stop chuong trinh
                 ; 0001 0555 			{
                 ; 0001 0556 				flagsethome = 0;
                 ; 0001 0557 				return 0;
                 ; 0001 0558 			}
                 ; 0001 0559 
                 ; 0001 055A 			if (cmdCtrlRobot == 5)  //sethome robot
                 ; 0001 055B 			{
                 ; 0001 055C 
                 ; 0001 055D 				calcvitri(rbctrlHomeX, rbctrlHomeY);
                 ; 0001 055E 				if (distance > 100) //chay den vi tri
                 ; 0001 055F 				{
                 ; 0001 0560 					if (errangle > 18 || errangle < -18)
                 ; 0001 0561 					{
                 ; 0001 0562 						int nv = errangle * 27 / 180;
                 ; 0001 0563 						int verrangle = calcVangle(errangle);
                 ; 0001 0564 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0565 						delay_ms(1);
                 ; 0001 0566 					}
                 ; 0001 0567 					else
                 ; 0001 0568 					{
                 ; 0001 0569 						//1xung = 3.14 * 40/24 =5.22
                 ; 0001 056A 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 056B 						// verranglekisum=0;//RESET I.
                 ; 0001 056C 					}
                 ; 0001 056D 				}
                 ; 0001 056E 				else //XOAY DUNG HUONG
                 ; 0001 056F 				{
                 ; 0001 0570 					setRobotAngleX = 10 * cos(rbctrlHomeAngle*M_PI / 180);
                 ; 0001 0571 					setRobotAngleY = 10 * sin(rbctrlHomeAngle*M_PI / 180);;
                 ; 0001 0572 					calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 0573 					if (errangle>90 || errangle < -90)
                 ; 0001 0574 					{
                 ; 0001 0575 
                 ; 0001 0576 						int nv = errangle * 27 / 180;
                 ; 0001 0577 						int verrangle = calcVangle(errangle);
                 ; 0001 0578 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0579 						delay_ms(1);
                 ; 0001 057A 					}
                 ; 0001 057B 					else
                 ; 0001 057C 					{
                 ; 0001 057D 
                 ; 0001 057E 						verranglekisum = 0;//RESET I.
                 ; 0001 057F 						flaghuongtrue = 0;
                 ; 0001 0580 						flagsethome = 1;  // bao da set home khong can set nua
                 ; 0001 0581 						vMRstop();
                 ; 0001 0582 						vMLstop();
                 ; 0001 0583 						return 0;
                 ; 0001 0584 
                 ; 0001 0585 					}
                 ; 0001 0586 				}
                 ; 0001 0587 
                 ; 0001 0588 			}
                 ; 0001 0589 
                 ; 0001 058A 			if (cmdCtrlRobot == 7)  //sethome IS STUCKED
                 ; 0001 058B 			{
                 ; 0001 058C 
                 ; 0001 058D 				cntstuckRB++;
                 ; 0001 058E 				if (cntstuckRB > 2)
                 ; 0001 058F 				{
                 ; 0001 0590 					runEscStucksethome();
                 ; 0001 0591 					cntstuckRB = 0;
                 ; 0001 0592 				}
                 ; 0001 0593 			}
                 ; 0001 0594 
                 ; 0001 0595 			if (cmdCtrlRobot == 6) //sethome IS //roi vao diem mu (blind spot) , mat vi tri hay huong
                 ; 0001 0596 			{
                 ; 0001 0597 				LEDBL = 1;
                 ; 0001 0598 				cntunlookRB++;
                 ; 0001 0599 				if (cntunlookRB > 2)
                 ; 0001 059A 				{
                 ; 0001 059B 					runEscBlindSpotsethome();
                 ; 0001 059C 					cntunlookRB = 0;
                 ; 0001 059D 
                 ; 0001 059E 				}
                 ; 0001 059F 
                 ; 0001 05A0 			}
                 ; 0001 05A1 
                 ; 0001 05A2 
                 ; 0001 05A3 		}
                 ; 0001 05A4 
                 ; 0001 05A5 		LEDR = !LEDR;
                 ; 0001 05A6 
                 ; 0001 05A7 	}
                 ; 0001 05A8 	return 0;
                 ; 0001 05A9 
                 ; 0001 05AA }
                 ;
                 ;int codePenalty()
                 ; 0001 05AD {
                 ; 0001 05AE 	// chay den vi tri duoc dat truoc, sau do da banh 1 lan
                 ; 0001 05AF 	//PHUC SH
                 ; 0001 05B0 	if (readposition() == 1)//co du lieu moi
                 ; 0001 05B1 	{
                 ; 0001 05B2 		if (cmdCtrlRobot == 8)  //set vi tri penalty robot
                 ; 0001 05B3 		{
                 ; 0001 05B4 			calcvitri(rbctrlPenaltyX, rbctrlPenaltyY);
                 ; 0001 05B5 			if (distance > 50) //chay den vi tri
                 ; 0001 05B6 			{
                 ; 0001 05B7 				if (errangle > 18 || errangle < -18)
                 ; 0001 05B8 				{
                 ; 0001 05B9 					int nv = errangle * 27 / 180;
                 ; 0001 05BA 					int verrangle = calcVangle(errangle);
                 ; 0001 05BB 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 05BC 					delay_ms(1);
                 ; 0001 05BD 				}
                 ; 0001 05BE 				else
                 ; 0001 05BF 				{
                 ; 0001 05C0 					//1xung = 3.14 * 40/24 =5.22
                 ; 0001 05C1 					ctrRobottoi(distance / 5.22, 15);
                 ; 0001 05C2 					// verranglekisum=0;//RESET I.
                 ; 0001 05C3 				}
                 ; 0001 05C4 			}
                 ; 0001 05C5 			else //XOAY DUNG HUONG
                 ; 0001 05C6 			{
                 ; 0001 05C7 				setRobotAngleX = 10 * cos(rbctrlPenaltyAngle*M_PI / 180);
                 ; 0001 05C8 				setRobotAngleY = 10 * sin(rbctrlPenaltyAngle*M_PI / 180);;
                 ; 0001 05C9 				calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 05CA 				if (errangle>10 || errangle < -10)
                 ; 0001 05CB 				{
                 ; 0001 05CC 
                 ; 0001 05CD 					int nv = errangle * 27 / 180;
                 ; 0001 05CE 					int verrangle = calcVangle(errangle);
                 ; 0001 05CF 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 05D0 					delay_ms(1);
                 ; 0001 05D1 				}
                 ; 0001 05D2 				else
                 ; 0001 05D3 				{
                 ; 0001 05D4 
                 ; 0001 05D5 					verranglekisum = 0;//RESET I.
                 ; 0001 05D6 					flaghuongtrue = 0;
                 ; 0001 05D7 					flagsethome = 1;  // bao da set vitri penalty
                 ; 0001 05D8 					while (cmdCtrlRobot != 2) //cho nhan nut start
                 ; 0001 05D9 					{
                 ; 0001 05DA 						readposition();
                 ; 0001 05DB 					}
                 ; 0001 05DC 					// da banh
                 ; 0001 05DD 					vMRtoi(22);
                 ; 0001 05DE 					vMLtoi(22);
                 ; 0001 05DF 					delay_ms(1000);
                 ; 0001 05E0 					vMRlui(10);
                 ; 0001 05E1 					vMLlui(10);
                 ; 0001 05E2 					delay_ms(1000);
                 ; 0001 05E3 					vMRstop();
                 ; 0001 05E4 					vMLstop();
                 ; 0001 05E5 					return 0;
                 ; 0001 05E6 
                 ; 0001 05E7 				}
                 ; 0001 05E8 			}
                 ; 0001 05E9 
                 ; 0001 05EA 		}
                 ; 0001 05EB 	}
                 ; 0001 05EC 
                 ; 0001 05ED }
                 ;void settoadoHomRB()
                 ; 0001 05EF {
                 _settoadoHomRB:
                 ; 0001 05F0 	switch (ROBOT_ID)
000749 e0e5      	LDI  R30,LOW(5)
                 ; 0001 05F1 	{
                 ; 0001 05F2 		//PHUC
                 ; 0001 05F3 	case 1:
00074a 30e1      	CPI  R30,LOW(0x1)
00074b f469      	BRNE _0x20133
                 ; 0001 05F4 
                 ; 0001 05F5 
                 ; 0001 05F6 		rbctrlPenaltyX = 0;
00074c 940e 1a13 	CALL SUBOPT_0x34
                 ; 0001 05F7 		rbctrlPenaltyY = 0;
                 ; 0001 05F8 
                 ; 0001 05F9 		if (SAN_ID == 1)
                 ; 0001 05FA 		{
                 ; 0001 05FB 			rbctrlPenaltyAngle = 179;
                 ; 0001 05FC 			rbctrlHomeAngle = 179;
                 ; 0001 05FD 			rbctrlHomeX = 269.7;
00074e 940e 1a39 	CALL SUBOPT_0x35
                 ; 0001 05FE 			rbctrlHomeY = 1.7;
                 ; 0001 05FF 			setRobotXmin = 80;
                 ; 0001 0600 			setRobotXmax = 260;
                 ; 0001 0601 		}
                 ; 0001 0602 		else
                 ; 0001 0603 		{
                 ; 0001 0604 			rbctrlPenaltyAngle = -15;
                 ; 0001 0605 			rbctrlHomeAngle = -15;
                 ; 0001 0606 			rbctrlHomeX = -226.1;
                 ; 0001 0607 			rbctrlHomeY = 1.6;
                 ; 0001 0608 			setRobotXmin = -260;
                 ; 0001 0609 			setRobotXmax = -80;
                 _0x20336:
000750 93e0 04a5 	STS  _setRobotXmax,R30
000752 93f0 04a6 	STS  _setRobotXmax+1,R31
000754 9360 04a7 	STS  _setRobotXmax+2,R22
000756 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 060A 		}
                 ; 0001 060B 		break;
000758 c079      	RJMP _0x20132
                 ; 0001 060C 	case 2:
                 _0x20133:
000759 30e2      	CPI  R30,LOW(0x2)
00075a f489      	BRNE _0x20136
                 ; 0001 060D 
                 ; 0001 060E 
                 ; 0001 060F 		rbctrlPenaltyX = 0;
00075b 940e 1a13 	CALL SUBOPT_0x34
                 ; 0001 0610 		rbctrlPenaltyY = 0;
                 ; 0001 0611 
                 ; 0001 0612 		if (SAN_ID == 1)
                 ; 0001 0613 		{
                 ; 0001 0614 			rbctrlPenaltyAngle = 179;
                 ; 0001 0615 			rbctrlHomeAngle = 179;
                 ; 0001 0616 			rbctrlHomeX = 66.0;
00075d 940e 1a62 	CALL SUBOPT_0x36
                 ; 0001 0617 			rbctrlHomeY = 79.4;
                 ; 0001 0618 			setRobotXmin = -270;
                 ; 0001 0619 			setRobotXmax = 270;
                 ; 0001 061A 		}
                 ; 0001 061B 		else
                 ; 0001 061C 		{
                 ; 0001 061D 			rbctrlPenaltyAngle = -15;
                 ; 0001 061E 			rbctrlHomeAngle = -15;
                 ; 0001 061F 			rbctrlHomeX = -44.3;
                 ; 0001 0620 			rbctrlHomeY = 82.7;
                 _0x20337:
00075f 93e0 04b9 	STS  _rbctrlHomeY,R30
000761 93f0 04ba 	STS  _rbctrlHomeY+1,R31
000763 9360 04bb 	STS  _rbctrlHomeY+2,R22
000765 9370 04bc 	STS  _rbctrlHomeY+3,R23
                 ; 0001 0621 			setRobotXmin = -270;
000767 940e 1a73 	CALL SUBOPT_0x37
                 ; 0001 0622 			setRobotXmax = 270;
000769 940e 1a80 	CALL SUBOPT_0x38
                 ; 0001 0623 		}
                 ; 0001 0624 		break;
00076b c066      	RJMP _0x20132
                 ; 0001 0625 	case 3:
                 _0x20136:
00076c 30e3      	CPI  R30,LOW(0x3)
00076d f581      	BRNE _0x20139
                 ; 0001 0626 
                 ; 0001 0627 
                 ; 0001 0628 		rbctrlPenaltyX = 0;
00076e e0e0      	LDI  R30,LOW(0)
00076f 93e0 04bd 	STS  _rbctrlPenaltyX,R30
000771 93e0 04be 	STS  _rbctrlPenaltyX+1,R30
000773 93e0 04bf 	STS  _rbctrlPenaltyX+2,R30
000775 93e0 04c0 	STS  _rbctrlPenaltyX+3,R30
                 ; 0001 0629 		rbctrlPenaltyY = 0;
000777 93e0 04c1 	STS  _rbctrlPenaltyY,R30
000779 93e0 04c2 	STS  _rbctrlPenaltyY+1,R30
00077b 93e0 04c3 	STS  _rbctrlPenaltyY+2,R30
00077d 93e0 04c4 	STS  _rbctrlPenaltyY+3,R30
                 ; 0001 062A 		rbctrlPenaltyAngle = -15;
                +
00077f e0e0     +LDI R30 , LOW ( 0xC1700000 )
000780 e0f0     +LDI R31 , HIGH ( 0xC1700000 )
000781 e760     +LDI R22 , BYTE3 ( 0xC1700000 )
000782 ec71     +LDI R23 , BYTE4 ( 0xC1700000 )
                 	__GETD1N 0xC1700000
000783 940e 1a8d 	CALL SUBOPT_0x39
                 ; 0001 062B 		if (SAN_ID == 1)
                 ; 0001 062C 		{
                 ; 0001 062D 			rbctrlPenaltyAngle = 179;
000785 940e 1a8d 	CALL SUBOPT_0x39
                 ; 0001 062E 			rbctrlHomeAngle = 179;
000787 93e0 04c9 	STS  _rbctrlHomeAngle,R30
000789 93f0 04ca 	STS  _rbctrlHomeAngle+1,R31
00078b 9360 04cb 	STS  _rbctrlHomeAngle+2,R22
00078d 9370 04cc 	STS  _rbctrlHomeAngle+3,R23
                 ; 0001 062F 			rbctrlHomeX = 54.1;
00078f 940e 1a9a 	CALL SUBOPT_0x3A
                 ; 0001 0630 			rbctrlHomeY = -99.9;
                 ; 0001 0631 			setRobotXmin = -270;
                 ; 0001 0632 			setRobotXmax = 20;
                +
000791 e0e0     +LDI R30 , LOW ( 0x41A00000 )
000792 e0f0     +LDI R31 , HIGH ( 0x41A00000 )
000793 ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
000794 e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
                 ; 0001 0633 		}
                 ; 0001 0634 		else
                 ; 0001 0635 		{
                 ; 0001 0636 			rbctrlPenaltyAngle = -15;
                 ; 0001 0637 			rbctrlHomeAngle = -15;
                 ; 0001 0638 			rbctrlHomeX = -53.5;
                 ; 0001 0639 			rbctrlHomeY = -93.8;
                 ; 0001 063A 			setRobotXmin = -20;
                 ; 0001 063B 			setRobotXmax = 270;
                 _0x20338:
000795 93e0 04a5 	STS  _setRobotXmax,R30
000797 93f0 04a6 	STS  _setRobotXmax+1,R31
000799 9360 04a7 	STS  _setRobotXmax+2,R22
00079b 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 063C 		}
                 ; 0001 063D 		break;
00079d c034      	RJMP _0x20132
                 ; 0001 063E 	case 4:
                 _0x20139:
00079e 30e4      	CPI  R30,LOW(0x4)
00079f f469      	BRNE _0x2013C
                 ; 0001 063F 
                 ; 0001 0640 		rbctrlPenaltyX = 0;
0007a0 940e 1a13 	CALL SUBOPT_0x34
                 ; 0001 0641 		rbctrlPenaltyY = 0;
                 ; 0001 0642 
                 ; 0001 0643 		if (SAN_ID == 1)
                 ; 0001 0644 		{
                 ; 0001 0645 			rbctrlPenaltyAngle = 179;
                 ; 0001 0646 			rbctrlHomeAngle = 179;
                 ; 0001 0647 			rbctrlHomeX = 269.7;
0007a2 940e 1a39 	CALL SUBOPT_0x35
                 ; 0001 0648 			rbctrlHomeY = 1.7;
                 ; 0001 0649 			setRobotXmin = 80;
                 ; 0001 064A 			setRobotXmax = 260;
                 ; 0001 064B 		}
                 ; 0001 064C 		else
                 ; 0001 064D 		{
                 ; 0001 064E 			rbctrlPenaltyAngle = -15;
                 ; 0001 064F 			rbctrlHomeAngle = -15;
                 ; 0001 0650 			rbctrlHomeX = -226.1;
                 ; 0001 0651 			rbctrlHomeY = 1.6;
                 ; 0001 0652 			setRobotXmin = -260;
                 ; 0001 0653 			setRobotXmax = -80;
                 _0x20339:
0007a4 93e0 04a5 	STS  _setRobotXmax,R30
0007a6 93f0 04a6 	STS  _setRobotXmax+1,R31
0007a8 9360 04a7 	STS  _setRobotXmax+2,R22
0007aa 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 0654 		}
                 ; 0001 0655 		break;
0007ac c025      	RJMP _0x20132
                 ; 0001 0656 	case 5:
                 _0x2013C:
0007ad 30e5      	CPI  R30,LOW(0x5)
0007ae f489      	BRNE _0x2013F
                 ; 0001 0657 
                 ; 0001 0658 		rbctrlPenaltyX = 0;
0007af 940e 1a13 	CALL SUBOPT_0x34
                 ; 0001 0659 		rbctrlPenaltyY = 0;
                 ; 0001 065A 		if (SAN_ID == 1)
                 ; 0001 065B 		{
                 ; 0001 065C 			rbctrlPenaltyAngle = 179;
                 ; 0001 065D 			rbctrlHomeAngle = 179;
                 ; 0001 065E 			rbctrlHomeX = 66.0;
0007b1 940e 1a62 	CALL SUBOPT_0x36
                 ; 0001 065F 			rbctrlHomeY = 79.4;
                 ; 0001 0660 			setRobotXmin = -270;
                 ; 0001 0661 			setRobotXmax = 270;
                 ; 0001 0662 		}
                 ; 0001 0663 		else
                 ; 0001 0664 		{
                 ; 0001 0665 			rbctrlPenaltyAngle = -15;
                 ; 0001 0666 			rbctrlHomeAngle = -15;
                 ; 0001 0667 			rbctrlHomeX = -44.3;
                 ; 0001 0668 			rbctrlHomeY = 82.7;
                 _0x2033A:
0007b3 93e0 04b9 	STS  _rbctrlHomeY,R30
0007b5 93f0 04ba 	STS  _rbctrlHomeY+1,R31
0007b7 9360 04bb 	STS  _rbctrlHomeY+2,R22
0007b9 9370 04bc 	STS  _rbctrlHomeY+3,R23
                 ; 0001 0669 			setRobotXmin = -270;
0007bb 940e 1a73 	CALL SUBOPT_0x37
                 ; 0001 066A 			setRobotXmax = 270;
0007bd 940e 1a80 	CALL SUBOPT_0x38
                 ; 0001 066B 		}
                 ; 0001 066C 		break;
0007bf c012      	RJMP _0x20132
                 ; 0001 066D 	case 6:
                 _0x2013F:
0007c0 30e6      	CPI  R30,LOW(0x6)
0007c1 f481      	BRNE _0x20132
                 ; 0001 066E 
                 ; 0001 066F 
                 ; 0001 0670 		rbctrlPenaltyX = 0;
0007c2 940e 1a13 	CALL SUBOPT_0x34
                 ; 0001 0671 		rbctrlPenaltyY = 0;
                 ; 0001 0672 		if (SAN_ID == 1)
                 ; 0001 0673 		{
                 ; 0001 0674 			rbctrlPenaltyAngle = 179;
                 ; 0001 0675 			rbctrlHomeAngle = 179;
                 ; 0001 0676 			rbctrlHomeX = 54.1;
0007c4 940e 1a9a 	CALL SUBOPT_0x3A
                 ; 0001 0677 			rbctrlHomeY = -99.9;
                 ; 0001 0678 			setRobotXmin = -270;
                 ; 0001 0679 			setRobotXmax = 20;
                +
0007c6 e0e0     +LDI R30 , LOW ( 0x41A00000 )
0007c7 e0f0     +LDI R31 , HIGH ( 0x41A00000 )
0007c8 ea60     +LDI R22 , BYTE3 ( 0x41A00000 )
0007c9 e471     +LDI R23 , BYTE4 ( 0x41A00000 )
                 	__GETD1N 0x41A00000
                 ; 0001 067A 		}
                 ; 0001 067B 		else
                 ; 0001 067C 		{
                 ; 0001 067D 			rbctrlPenaltyAngle = -15;
                 ; 0001 067E 			rbctrlHomeAngle = -15;
                 ; 0001 067F 			rbctrlHomeX = -53.5;
                 ; 0001 0680 			rbctrlHomeY = -93.8;
                 ; 0001 0681 			setRobotXmin = -20;
                 ; 0001 0682 			setRobotXmax = 270;
                 _0x2033B:
0007ca 93e0 04a5 	STS  _setRobotXmax,R30
0007cc 93f0 04a6 	STS  _setRobotXmax+1,R31
0007ce 9360 04a7 	STS  _setRobotXmax+2,R22
0007d0 9370 04a8 	STS  _setRobotXmax+3,R23
                 ; 0001 0683 		}
                 ; 0001 0684 		break;
                 ; 0001 0685 
                 ; 0001 0686 
                 ; 0001 0687 	}
                 _0x20132:
                 ; 0001 0688 }
0007d2 9508      	RET
                 ;//=======================================================
                 ;// Tinh luc theo goc quay de dieu khien robot
                 ;int calcVangle(int angle)
                 ; 0001 068C {
                 ; 0001 068D 	int verrangle = 0;
                 ; 0001 068E 	//tinh thanh phan I
                 ; 0001 068F 	verranglekisum = verranglekisum + angle / 20;
                 ;	angle -> Y+2
                 ;	verrangle -> R16,R17
                 ; 0001 0690 	if (verranglekisum > 15)verranglekisum = 15;
                 ; 0001 0691 	if (verranglekisum < -15)verranglekisum = -15;
                 ; 0001 0692 	//tinh thanh phan dieu khien
                 ; 0001 0693 	verrangle = 10 + angle / 12 + verranglekisum;
                 ; 0001 0694 	//gioi han bao hoa
                 ; 0001 0695 	if (verrangle < 0) verrangle = -verrangle;//lay tri tuyet doi cua van toc v dieu khien
                 ; 0001 0696 	if (verrangle > 20) verrangle = 20;
                 ; 0001 0697 	if (verrangle < 8) verrangle = 8;
                 ; 0001 0698 	return  verrangle;
                 ; 0001 0699 }
                 ;//ctrl robot
                 ;void ctrrobot()
                 ; 0001 069C {
                 ; 0001 069D 	if (readposition() == 1)//co du lieu moi
                 ; 0001 069E 	{
                 ; 0001 069F 		//          hc(3,40);wn16s(cmdCtrlRobot);
                 ; 0001 06A0 		//        hc(4,40);wn16s(idRobot);
                 ; 0001 06A1 		//-------------------------------------------------
                 ; 0001 06A2 		if (cmdCtrlRobot == 8)      // dung ma lenh stop chuong trinh
                 ; 0001 06A3 		{
                 ; 0001 06A4 			flagsethome = 0; //cho phep sethome
                 ; 0001 06A5 			while (cmdCtrlRobot == 8)
                 ; 0001 06A6 			{
                 ; 0001 06A7 				codePenalty();
                 ; 0001 06A8 			}
                 ; 0001 06A9 		}
                 ; 0001 06AA 
                 ; 0001 06AB 		if (cmdCtrlRobot == 1)      // dung ma lenh stop chuong trinh
                 ; 0001 06AC 		{
                 ; 0001 06AD 			flagsethome = 0; //cho phep sethome
                 ; 0001 06AE 			while (cmdCtrlRobot == 1)
                 ; 0001 06AF 			{
                 ; 0001 06B0 				readposition();
                 ; 0001 06B1 			}
                 ; 0001 06B2 		}
                 ; 0001 06B3 
                 ; 0001 06B4 		if (cmdCtrlRobot == 5)  //sethome robot
                 ; 0001 06B5 		{
                 ; 0001 06B6 
                 ; 0001 06B7 			cntsethomeRB++;
                 ; 0001 06B8 			if (cntsethomeRB > 2)
                 ; 0001 06B9 			{
                 ; 0001 06BA 				LEDBR = 1;
                 ; 0001 06BB 				if (flagsethome == 0)sethomeRB();
                 ; 0001 06BC 				cntsethomeRB = 0;
                 ; 0001 06BD 			}
                 ; 0001 06BE 
                 ; 0001 06BF 		}
                 ; 0001 06C0 
                 ; 0001 06C1 		if (cmdCtrlRobot == 4)  //sethome robot
                 ; 0001 06C2 		{
                 ; 0001 06C3 			flagsethome = 0; //cho phep sethome
                 ; 0001 06C4 			cntstuckRB++;
                 ; 0001 06C5 			if (cntstuckRB > 2)
                 ; 0001 06C6 			{
                 ; 0001 06C7 				runEscStuck();
                 ; 0001 06C8 				cntstuckRB = 0;
                 ; 0001 06C9 			}
                 ; 0001 06CA 		}
                 ; 0001 06CB 
                 ; 0001 06CC 		if (cmdCtrlRobot == 3)  //roi vao diem mu (blind spot) , mat vi tri hay huong
                 ; 0001 06CD 		{
                 ; 0001 06CE 			flagsethome = 0; //cho phep sethome
                 ; 0001 06CF 			cntunlookRB++;
                 ; 0001 06D0 			if (cntunlookRB > 2)
                 ; 0001 06D1 			{
                 ; 0001 06D2 				runEscBlindSpot();
                 ; 0001 06D3 				cntunlookRB = 0;
                 ; 0001 06D4 			}
                 ; 0001 06D5 
                 ; 0001 06D6 		}
                 ; 0001 06D7 
                 ; 0001 06D8 
                 ; 0001 06D9 		//------------------------------------------------
                 ; 0001 06DA 		if (cmdCtrlRobot == 2) {// run chuong trinh
                 ; 0001 06DB 			flagsethome = 0; //cho phep sethome
                 ; 0001 06DC 			switch (flagtask)
                 ; 0001 06DD 			{
                 ; 0001 06DE 				// chay den vi tri duoc set boi nguoi dieu khien
                 ; 0001 06DF 			case 0:
                 ; 0001 06E0 				if (setRobotX < setRobotXmin)   setRobotX = setRobotXmin;
                 ; 0001 06E1 				if (setRobotX > setRobotXmax)    setRobotX = setRobotXmax;
                 ; 0001 06E2 				calcvitri(setRobotX, setRobotY);
                 ; 0001 06E3 				if (distance > 80) //chay den vi tri
                 ; 0001 06E4 				{
                 ; 0001 06E5 					if (errangle > 18 || errangle < -18)
                 ; 0001 06E6 					{
                 ; 0001 06E7 						int nv = errangle * 27 / 180;
                 ; 0001 06E8 						int verrangle = calcVangle(errangle);
                 ; 0001 06E9 						ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 06EA 						delay_ms(1);
                 ; 0001 06EB 					}
                 ; 0001 06EC 					else
                 ; 0001 06ED 					{
                 ; 0001 06EE 						//1xung = 3.14 * 40/24 =5.22
                 ; 0001 06EF 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 06F0 						// verranglekisum=0;//RESET I.
                 ; 0001 06F1 					}
                 ; 0001 06F2 				}
                 ; 0001 06F3 				else
                 ; 0001 06F4 				{
                 ; 0001 06F5 					flagtask = 10;
                 ; 0001 06F6 				}
                 ; 0001 06F7 				break;
                 ; 0001 06F8 				// quay dung huong duoc set boi nguoi dieu khien
                 ; 0001 06F9 			case 1:
                 ; 0001 06FA 
                 ; 0001 06FB 				calcvitri(robotctrl.x + setRobotAngleX, robotctrl.y + setRobotAngleY);
                 ; 0001 06FC 				if (errangle > 18 || errangle < -18)
                 ; 0001 06FD 				{
                 ; 0001 06FE 
                 ; 0001 06FF 					int nv = errangle * 27 / 180;
                 ; 0001 0700 					int verrangle = calcVangle(errangle);
                 ; 0001 0701 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0702 					// ctrRobotXoay(nv,10);
                 ; 0001 0703 					delay_ms(1);
                 ; 0001 0704 				}
                 ; 0001 0705 				else
                 ; 0001 0706 				{
                 ; 0001 0707 					flaghuongtrue++;
                 ; 0001 0708 					if (flaghuongtrue > 3)
                 ; 0001 0709 					{
                 ; 0001 070A 						//verranglekisum=0;//RESET I.
                 ; 0001 070B 						flaghuongtrue = 0;
                 ; 0001 070C 						flagtask = 10;
                 ; 0001 070D 					}
                 ; 0001 070E 
                 ; 0001 070F 				}
                 ; 0001 0710 				break;
                 ; 0001 0711 				// chay den vi tri bong
                 ; 0001 0712 			case 2:
                 ; 0001 0713 
                 ; 0001 0714 				//PHUC test    rb1 ,s1
                 ; 0001 0715 				if (robotctrl.ball.x < setRobotXmin)   robotctrl.ball.x = setRobotXmin;
                 ; 0001 0716 				if (robotctrl.ball.x > setRobotXmax)    robotctrl.ball.x = setRobotXmax;
                 ; 0001 0717 				calcvitri(robotctrl.ball.x, robotctrl.ball.y);
                 ; 0001 0718 
                 ; 0001 0719 				if (errangle > 18 || errangle < -18)
                 ; 0001 071A 				{
                 ; 0001 071B 					int nv = errangle * 27 / 180;
                 ; 0001 071C 					int verrangle = calcVangle(errangle);
                 ; 0001 071D 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 071E 					delay_ms(1);
                 ; 0001 071F 				}
                 ; 0001 0720 				else
                 ; 0001 0721 				{
                 ; 0001 0722 					//1xung = 3.14 * 40/24 =5.22
                 ; 0001 0723 					if (distance > 10) //chay den vi tri
                 ; 0001 0724 					{
                 ; 0001 0725 						ctrRobottoi(distance / 5.22, 15);
                 ; 0001 0726 						delay_ms(5);
                 ; 0001 0727 					}
                 ; 0001 0728 					else
                 ; 0001 0729 					{
                 ; 0001 072A 						flagtask = 10;
                 ; 0001 072B 					}
                 ; 0001 072C 					// verranglekisum=0;//RESET I.
                 ; 0001 072D 				}
                 ; 0001 072E 
                 ; 0001 072F 				break;
                 ; 0001 0730 				// da bong
                 ; 0001 0731 			case 3:
                 ; 0001 0732 				ctrRobottoi(40, 22);
                 ; 0001 0733 				delay_ms(400);
                 ; 0001 0734 				ctrRobotlui(40, 15);
                 ; 0001 0735 				delay_ms(400);
                 ; 0001 0736 				flagtask = 10;
                 ; 0001 0737 				break;
                 ; 0001 0738 			case 10:
                 ; 0001 0739 				vMRtoi(0);
                 ; 0001 073A 				vMLtoi(0);
                 ; 0001 073B 				break;
                 ; 0001 073C 				//chay theo bong co dinh huong
                 ; 0001 073D 			case 4:
                 ; 0001 073E 				calcvitri(robotctrl.ball.x, robotctrl.ball.y);
                 ; 0001 073F 				if (errangle > 18 || errangle < -18)
                 ; 0001 0740 				{
                 ; 0001 0741 
                 ; 0001 0742 					int nv = errangle * 27 / 180;
                 ; 0001 0743 					int verrangle = calcVangle(errangle);
                 ; 0001 0744 					ctrRobotXoay(nv, verrangle);
                 ;	nv -> Y+2
                 ;	verrangle -> Y+0
                 ; 0001 0745 					// ctrRobotXoay(nv,10);
                 ; 0001 0746 					delay_ms(1);
                 ; 0001 0747 				}
                 ; 0001 0748 				else
                 ; 0001 0749 				{
                 ; 0001 074A 					flaghuongtrue++;
                 ; 0001 074B 					if (flaghuongtrue > 3)
                 ; 0001 074C 					{
                 ; 0001 074D 						//verranglekisum=0;//RESET I.
                 ; 0001 074E 						flaghuongtrue = 0;
                 ; 0001 074F 						flagtask = 10;
                 ; 0001 0750 					}
                 ; 0001 0751 
                 ; 0001 0752 				}
                 ; 0001 0753 				break;
                 ; 0001 0754 			}
                 ; 0001 0755 		}//end if(cmdCtrlRobot==2)
                 ; 0001 0756 	}
                 ; 0001 0757 	else   //khong co tin hieu RF hay khong thay robot
                 ; 0001 0758 	{
                 ; 0001 0759 		//if(flagunlookRB==1) runEscBlindSpot();
                 ; 0001 075A 
                 ; 0001 075B 	}
                 ; 0001 075C 
                 ; 0001 075D 
                 ; 0001 075E }
                 ;
                 ;void rb_move(float x, float y)
                 ; 0001 0761 {
                 ; 0001 0762 	flagtask = 0;
                 ;	x -> Y+4
                 ;	y -> Y+0
                 ; 0001 0763 	flagtaskold = flagtask;
                 ; 0001 0764 	setRobotX = x;
                 ; 0001 0765 	setRobotY = y;
                 ; 0001 0766 }
                 ;void rb_rotate(int angle)     // goc xoay so voi truc x cua toa do
                 ; 0001 0768 {
                 ; 0001 0769 	flagtask = 1;
                 ;	angle -> Y+0
                 ; 0001 076A 	flagtaskold = flagtask;
                 ; 0001 076B 	setRobotAngleX = 10 * cos(angle*M_PI / 180);
                 ; 0001 076C 	setRobotAngleY = 10 * sin(angle*M_PI / 180);;
                 ; 0001 076D }
                 ;
                 ;void rb_goball()
                 ; 0001 0770 {
                 ; 0001 0771 	flagtask = 2;
                 ; 0001 0772 	flagtaskold = flagtask;
                 ; 0001 0773 }
                 ;void rb_kick()
                 ; 0001 0775 {
                 ; 0001 0776 	flagtask = 3;
                 ; 0001 0777 	flagtaskold = flagtask;
                 ; 0001 0778 }
                 ;int rb_wait(unsigned long int time)
                 ; 0001 077A {
                 ; 0001 077B 	time = time * 10;
                 ;	time -> Y+0
                 ; 0001 077C 	while (time--)
                 ; 0001 077D 	{
                 ; 0001 077E 		ctrrobot();
                 ; 0001 077F 		if (flagtask == 10) return 1;// thuc hien xong nhiem vu
                 ; 0001 0780 	}
                 ; 0001 0781 	return 0;
                 ; 0001 0782 }
                 ;//========================================================
                 ;// Timer1 overflow interrupt service routine
                 ;// period =1/2khz= 0.5ms
                 ;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0001 0787 {
                 _timer1_ovf_isr:
0007d3 940e 1ab3 	CALL SUBOPT_0x3B
                 ; 0001 0788 	// Place your code here
                 ; 0001 0789 	timerstick++;
0007d5 eeac      	LDI  R26,LOW(_timerstick)
0007d6 e0b4      	LDI  R27,HIGH(_timerstick)
0007d7 940e 1ac1 	CALL SUBOPT_0x3C
                 ; 0001 078A 	timerstickdis++;
0007d9 eeae      	LDI  R26,LOW(_timerstickdis)
0007da e0b4      	LDI  R27,HIGH(_timerstickdis)
0007db 940e 1ac1 	CALL SUBOPT_0x3C
                 ; 0001 078B 	timerstickang++;
0007dd efa0      	LDI  R26,LOW(_timerstickang)
0007de e0b4      	LDI  R27,HIGH(_timerstickang)
0007df 940e 1ac1 	CALL SUBOPT_0x3C
                 ; 0001 078C 	timerstickctr++;
0007e1 efa2      	LDI  R26,LOW(_timerstickctr)
0007e2 e0b4      	LDI  R27,HIGH(_timerstickctr)
0007e3 940e 1ac1 	CALL SUBOPT_0x3C
                 ; 0001 078D #ifdef CtrVelocity
                 ; 0001 078E 	// dieu khien van toc
                 ; 0001 078F 	if (timerstick > 250)    // 125ms/0.5ms=250 : dung chu ki lay mau = 125 ms
0007e5 91a0 04ec 	LDS  R26,_timerstick
0007e7 91b0 04ed 	LDS  R27,_timerstick+1
0007e9 3fab      	CPI  R26,LOW(0xFB)
0007ea e0e0      	LDI  R30,HIGH(0xFB)
0007eb 07be      	CPC  R27,R30
0007ec f410      	BRSH PC+3
0007ed 940c 08e6 	JMP _0x20185
                 ; 0001 0790 	{
                 ; 0001 0791 		int eR = 0, eL = 0;
                 ; 0001 0792 
                 ; 0001 0793 		//-------------------------------------------
                 ; 0001 0794 		//cap nhat van toc
                 ; 0001 0795 		vQER = (QER - oldQER);     //(xung / 10ms)
0007ef 940e 1ac7 	CALL SUBOPT_0x3D
0007f1 e0e0      	LDI  R30,LOW(0)
0007f2 83ea      	STD  Y+2,R30
0007f3 83eb      	STD  Y+3,R30
                 ;	eR -> Y+2
                 ;	eL -> Y+0
0007f4 91a0 04fa 	LDS  R26,_oldQER
0007f6 91b0 04fb 	LDS  R27,_oldQER+1
0007f8 940e 1956 	CALL SUBOPT_0x14
0007fa 1bea      	SUB  R30,R26
0007fb 0bfb      	SBC  R31,R27
0007fc 93e0 04f6 	STS  _vQER,R30
0007fe 93f0 04f7 	STS  _vQER+1,R31
                 ; 0001 0796 		vQEL = (QEL - oldQEL);     //(xung /10ms)
000800 91a0 04f8 	LDS  R26,_oldQEL
000802 91b0 04f9 	LDS  R27,_oldQEL+1
000804 940e 1acc 	CALL SUBOPT_0x3E
000806 1bea      	SUB  R30,R26
000807 0bfb      	SBC  R31,R27
000808 93e0 04f4 	STS  _vQEL,R30
00080a 93f0 04f5 	STS  _vQEL+1,R31
                 ; 0001 0797 		oldQEL = QEL;
00080c 940e 1acc 	CALL SUBOPT_0x3E
00080e 93e0 04f8 	STS  _oldQEL,R30
000810 93f0 04f9 	STS  _oldQEL+1,R31
                 ; 0001 0798 		oldQER = QER;
000812 940e 1956 	CALL SUBOPT_0x14
000814 93e0 04fa 	STS  _oldQER,R30
000816 93f0 04fb 	STS  _oldQER+1,R31
                 ; 0001 0799 		timerstick = 0;
000818 e0e0      	LDI  R30,LOW(0)
000819 93e0 04ec 	STS  _timerstick,R30
00081b 93e0 04ed 	STS  _timerstick+1,R30
                 ; 0001 079A 
                 ; 0001 079B 		//--------------------------------------------
                 ; 0001 079C 		//tinh PID van toc
                 ; 0001 079D 		//--------------------------------------------
                 ; 0001 079E 		eR = svQER - vQER;
00081d 91a0 04f6 	LDS  R26,_vQER
00081f 91b0 04f7 	LDS  R27,_vQER+1
000821 91e0 04fe 	LDS  R30,_svQER
000823 91f0 04ff 	LDS  R31,_svQER+1
000825 1bea      	SUB  R30,R26
000826 0bfb      	SBC  R31,R27
000827 83ea      	STD  Y+2,R30
000828 83fb      	STD  Y+2+1,R31
                 ; 0001 079F 		//tinh thanh phan I
                 ; 0001 07A0 		seRki = seRki + KiR*eR;
000829 91a0 050a 	LDS  R26,_KiR
00082b 91b0 050b 	LDS  R27,_KiR+1
00082d 940e 1fdc 	CALL __MULW12
00082f 940e 1ad1 	CALL SUBOPT_0x3F
000831 0fea      	ADD  R30,R26
000832 1ffb      	ADC  R31,R27
000833 940e 1ad6 	CALL SUBOPT_0x40
                 ; 0001 07A1 		if (seRki > 100) seRki = 100;
000835 940e 1ad1 	CALL SUBOPT_0x3F
000837 36a5      	CPI  R26,LOW(0x65)
000838 e0e0      	LDI  R30,HIGH(0x65)
000839 07be      	CPC  R27,R30
00083a f024      	BRLT _0x20186
00083b e6e4      	LDI  R30,LOW(100)
00083c e0f0      	LDI  R31,HIGH(100)
00083d 940e 1ad6 	CALL SUBOPT_0x40
                 ; 0001 07A2 		if (seRki < -100) seRki = -100;
                 _0x20186:
00083f 940e 1ad1 	CALL SUBOPT_0x3F
000841 39ac      	CPI  R26,LOW(0xFF9C)
000842 efef      	LDI  R30,HIGH(0xFF9C)
000843 07be      	CPC  R27,R30
000844 f424      	BRGE _0x20187
000845 e9ec      	LDI  R30,LOW(65436)
000846 efff      	LDI  R31,HIGH(65436)
000847 940e 1ad6 	CALL SUBOPT_0x40
                 ; 0001 07A3 		//tinh them thanh phan P
                 ; 0001 07A4 		uR = 100 + KpR*eR + seRki;
                 _0x20187:
000849 81ea      	LDD  R30,Y+2
00084a 81fb      	LDD  R31,Y+2+1
00084b 91a0 0508 	LDS  R26,_KpR
00084d 91b0 0509 	LDS  R27,_KpR+1
00084f 940e 1fdc 	CALL __MULW12
000851 59ec      	SUBI R30,LOW(-100)
000852 4fff      	SBCI R31,HIGH(-100)
000853 940e 1ad1 	CALL SUBOPT_0x3F
000855 0fea      	ADD  R30,R26
000856 1ffb      	ADC  R31,R27
000857 93e0 0506 	STS  _uR,R30
000859 93f0 0507 	STS  _uR+1,R31
                 ; 0001 07A5 		if (uR > 255) uR = 255;
00085b 91a0 0506 	LDS  R26,_uR
00085d 91b0 0507 	LDS  R27,_uR+1
00085f 30a0      	CPI  R26,LOW(0x100)
000860 e0e1      	LDI  R30,HIGH(0x100)
000861 07be      	CPC  R27,R30
000862 f034      	BRLT _0x20188
000863 efef      	LDI  R30,LOW(255)
000864 e0f0      	LDI  R31,HIGH(255)
000865 93e0 0506 	STS  _uR,R30
000867 93f0 0507 	STS  _uR+1,R31
                 ; 0001 07A6 		if (uR < 0) uR = 0;
                 _0x20188:
000869 91a0 0507 	LDS  R26,_uR+1
00086b 23aa      	TST  R26
00086c f42a      	BRPL _0x20189
00086d e0e0      	LDI  R30,LOW(0)
00086e 93e0 0506 	STS  _uR,R30
000870 93e0 0507 	STS  _uR+1,R30
                 ; 0001 07A7 
                 ; 0001 07A8 		eL = svQEL - vQEL;
                 _0x20189:
000872 91a0 04f4 	LDS  R26,_vQEL
000874 91b0 04f5 	LDS  R27,_vQEL+1
000876 91e0 04fc 	LDS  R30,_svQEL
000878 91f0 04fd 	LDS  R31,_svQEL+1
00087a 940e 1927 	CALL SUBOPT_0xC
                 ; 0001 07A9 		//tinh thanh phan I
                 ; 0001 07AA 		seLki = seLki + KiL*eL;
00087c 81e8      	LD   R30,Y
00087d 81f9      	LDD  R31,Y+1
00087e 91a0 050e 	LDS  R26,_KiL
000880 91b0 050f 	LDS  R27,_KiL+1
000882 940e 1fdc 	CALL __MULW12
000884 940e 1adb 	CALL SUBOPT_0x41
000886 0fea      	ADD  R30,R26
000887 1ffb      	ADC  R31,R27
000888 940e 1ae0 	CALL SUBOPT_0x42
                 ; 0001 07AB 		if (seLki > 100) seLki = 100;
00088a 940e 1adb 	CALL SUBOPT_0x41
00088c 36a5      	CPI  R26,LOW(0x65)
00088d e0e0      	LDI  R30,HIGH(0x65)
00088e 07be      	CPC  R27,R30
00088f f024      	BRLT _0x2018A
000890 e6e4      	LDI  R30,LOW(100)
000891 e0f0      	LDI  R31,HIGH(100)
000892 940e 1ae0 	CALL SUBOPT_0x42
                 ; 0001 07AC 		if (seLki < -100) seLki = -100;
                 _0x2018A:
000894 940e 1adb 	CALL SUBOPT_0x41
000896 39ac      	CPI  R26,LOW(0xFF9C)
000897 efef      	LDI  R30,HIGH(0xFF9C)
000898 07be      	CPC  R27,R30
000899 f424      	BRGE _0x2018B
00089a e9ec      	LDI  R30,LOW(65436)
00089b efff      	LDI  R31,HIGH(65436)
00089c 940e 1ae0 	CALL SUBOPT_0x42
                 ; 0001 07AD 		//tinh them thanh phan P
                 ; 0001 07AE 		uL = 100 + KpL*eL + seLki;
                 _0x2018B:
00089e 81e8      	LD   R30,Y
00089f 81f9      	LDD  R31,Y+1
0008a0 91a0 050c 	LDS  R26,_KpL
0008a2 91b0 050d 	LDS  R27,_KpL+1
0008a4 940e 1fdc 	CALL __MULW12
0008a6 59ec      	SUBI R30,LOW(-100)
0008a7 4fff      	SBCI R31,HIGH(-100)
0008a8 940e 1adb 	CALL SUBOPT_0x41
0008aa 0fea      	ADD  R30,R26
0008ab 1ffb      	ADC  R31,R27
0008ac 93e0 0504 	STS  _uL,R30
0008ae 93f0 0505 	STS  _uL+1,R31
                 ; 0001 07AF 		if (uL > 255) uL = 255;
0008b0 91a0 0504 	LDS  R26,_uL
0008b2 91b0 0505 	LDS  R27,_uL+1
0008b4 30a0      	CPI  R26,LOW(0x100)
0008b5 e0e1      	LDI  R30,HIGH(0x100)
0008b6 07be      	CPC  R27,R30
0008b7 f034      	BRLT _0x2018C
0008b8 efef      	LDI  R30,LOW(255)
0008b9 e0f0      	LDI  R31,HIGH(255)
0008ba 93e0 0504 	STS  _uL,R30
0008bc 93f0 0505 	STS  _uL+1,R31
                 ; 0001 07B0 		if (uL < 0) uL = 0;
                 _0x2018C:
0008be 91a0 0505 	LDS  R26,_uL+1
0008c0 23aa      	TST  R26
0008c1 f42a      	BRPL _0x2018D
0008c2 e0e0      	LDI  R30,LOW(0)
0008c3 93e0 0504 	STS  _uL,R30
0008c5 93e0 0505 	STS  _uL+1,R30
                 ; 0001 07B1 
                 ; 0001 07B2 		if (svQER != 0)OCR1B = uR;
                 _0x2018D:
0008c7 91e0 04fe 	LDS  R30,_svQER
0008c9 91f0 04ff 	LDS  R31,_svQER+1
0008cb 9730      	SBIW R30,0
0008cc f029      	BREQ _0x2018E
0008cd 91e0 0506 	LDS  R30,_uR
0008cf 91f0 0507 	LDS  R31,_uR+1
0008d1 c002      	RJMP _0x2033D
                 ; 0001 07B3 		else  OCR1B = 0;
                 _0x2018E:
0008d2 e0e0      	LDI  R30,LOW(0)
0008d3 e0f0      	LDI  R31,HIGH(0)
                 _0x2033D:
0008d4 bdf9      	OUT  0x28+1,R31
0008d5 bde8      	OUT  0x28,R30
                 ; 0001 07B4 
                 ; 0001 07B5 		if (svQEL != 0) OCR1A = uL;
0008d6 91e0 04fc 	LDS  R30,_svQEL
0008d8 91f0 04fd 	LDS  R31,_svQEL+1
0008da 9730      	SBIW R30,0
0008db f029      	BREQ _0x20190
0008dc 91e0 0504 	LDS  R30,_uL
0008de 91f0 0505 	LDS  R31,_uL+1
0008e0 c002      	RJMP _0x2033E
                 ; 0001 07B6 		else  OCR1A = 0;
                 _0x20190:
0008e1 e0e0      	LDI  R30,LOW(0)
0008e2 e0f0      	LDI  R31,HIGH(0)
                 _0x2033E:
0008e3 bdfb      	OUT  0x2A+1,R31
0008e4 bdea      	OUT  0x2A,R30
                 ; 0001 07B7 
                 ; 0001 07B8 	}
0008e5 9624      	ADIW R28,4
                 ; 0001 07B9 	// dieu khien khoang cach
                 ; 0001 07BA 	if (timerstickdis > 10 && (flagwaitctrRobot == 1))
                 _0x20185:
0008e6 91a0 04ee 	LDS  R26,_timerstickdis
0008e8 91b0 04ef 	LDS  R27,_timerstickdis+1
0008ea 971b      	SBIW R26,11
0008eb f020      	BRLO _0x20193
0008ec 91a0 051c 	LDS  R26,_flagwaitctrRobot
0008ee 30a1      	CPI  R26,LOW(0x1)
0008ef f009      	BREQ _0x20194
                 _0x20193:
0008f0 c025      	RJMP _0x20192
                 _0x20194:
                 ; 0001 07BB 	{
                 ; 0001 07BC 		unsigned int deltad1 = 0;
                 ; 0001 07BD 		deltad1 = (QER + QEL) / 2 - oldd;
0008f1 9722      	SBIW R28,2
0008f2 940e 1ae5 	CALL SUBOPT_0x43
                 ;	deltad1 -> Y+0
0008f4 940e 1ae9 	CALL SUBOPT_0x44
0008f6 91a0 051a 	LDS  R26,_oldd
0008f8 91b0 051b 	LDS  R27,_oldd+1
0008fa 940e 1927 	CALL SUBOPT_0xC
                 ; 0001 07BE 		//if(deltad1<0) deltad1=0;// co the am do kieu so
                 ; 0001 07BF 		//hc(3,0);ws("            ");
                 ; 0001 07C0 		//hc(3,0);wn16s(deltad1);
                 ; 0001 07C1 		if (deltad1 > sd)
0008fc 91e0 0518 	LDS  R30,_sd
0008fe 91f0 0519 	LDS  R31,_sd+1
000900 81a8      	LD   R26,Y
000901 81b9      	LDD  R27,Y+1
000902 17ea      	CP   R30,R26
000903 07fb      	CPC  R31,R27
000904 f458      	BRSH _0x20195
                 ; 0001 07C2 		{
                 ; 0001 07C3 
                 ; 0001 07C4 			vMLstop();
000905 dc4c      	RCALL _vMLstop
                 ; 0001 07C5 			vMRstop();
000906 dc66      	RCALL _vMRstop
                 ; 0001 07C6 			flagwaitctrRobot = 0;
000907 e0e0      	LDI  R30,LOW(0)
000908 93e0 051c 	STS  _flagwaitctrRobot,R30
                 ; 0001 07C7 			oldd = (QER + QEL) / 2;
00090a 940e 1ae9 	CALL SUBOPT_0x44
00090c 93e0 051a 	STS  _oldd,R30
00090e 93f0 051b 	STS  _oldd+1,R31
                 ; 0001 07C8 
                 ; 0001 07C9 		}
                 ; 0001 07CA 		timerstickdis = 0;
                 _0x20195:
000910 e0e0      	LDI  R30,LOW(0)
000911 93e0 04ee 	STS  _timerstickdis,R30
000913 93e0 04ef 	STS  _timerstickdis+1,R30
                 ; 0001 07CB 
                 ; 0001 07CC 	}
000915 9622      	ADIW R28,2
                 ; 0001 07CD 	// dieu khien  vi tri goc quay
                 ; 0001 07CE 	if (timerstickang > 10 && (flagwaitctrAngle == 1))
                 _0x20192:
000916 91a0 04f0 	LDS  R26,_timerstickang
000918 91b0 04f1 	LDS  R27,_timerstickang+1
00091a 971b      	SBIW R26,11
00091b f020      	BRLO _0x20197
00091c 91a0 0521 	LDS  R26,_flagwaitctrAngle
00091e 30a1      	CPI  R26,LOW(0x1)
00091f f009      	BREQ _0x20198
                 _0x20197:
000920 c025      	RJMP _0x20196
                 _0x20198:
                 ; 0001 07CF 	{
                 ; 0001 07D0 		unsigned int deltaa = 0;
                 ; 0001 07D1 		deltaa = (QEL)-olda;
000921 9722      	SBIW R28,2
000922 940e 1ae5 	CALL SUBOPT_0x43
                 ;	deltaa -> Y+0
000924 91a0 051f 	LDS  R26,_olda
000926 91b0 0520 	LDS  R27,_olda+1
000928 940e 1acc 	CALL SUBOPT_0x3E
00092a 940e 1927 	CALL SUBOPT_0xC
                 ; 0001 07D2 		//    hc(4,0);ws("            ");
                 ; 0001 07D3 		//    hc(4,0);wn16s(deltaa);
                 ; 0001 07D4 		if (deltaa > sa)
00092c 91e0 051d 	LDS  R30,_sa
00092e 91f0 051e 	LDS  R31,_sa+1
000930 81a8      	LD   R26,Y
000931 81b9      	LDD  R27,Y+1
000932 17ea      	CP   R30,R26
000933 07fb      	CPC  R31,R27
000934 f458      	BRSH _0x20199
                 ; 0001 07D5 		{
                 ; 0001 07D6 			vMLstop();
000935 dc1c      	RCALL _vMLstop
                 ; 0001 07D7 			vMRstop();
000936 dc36      	RCALL _vMRstop
                 ; 0001 07D8 			flagwaitctrAngle = 0;
000937 e0e0      	LDI  R30,LOW(0)
000938 93e0 0521 	STS  _flagwaitctrAngle,R30
                 ; 0001 07D9 			olda = QEL;
00093a 940e 1acc 	CALL SUBOPT_0x3E
00093c 93e0 051f 	STS  _olda,R30
00093e 93f0 0520 	STS  _olda+1,R31
                 ; 0001 07DA 		}
                 ; 0001 07DB 		timerstickang = 0;
                 _0x20199:
000940 e0e0      	LDI  R30,LOW(0)
000941 93e0 04f0 	STS  _timerstickang,R30
000943 93e0 04f1 	STS  _timerstickang+1,R30
                 ; 0001 07DC 	}
000945 9622      	ADIW R28,2
                 ; 0001 07DD 	// dieu khien robot robot
                 ; 0001 07DE 	if (timerstickctr > 1)
                 _0x20196:
000946 91a0 04f2 	LDS  R26,_timerstickctr
000948 91b0 04f3 	LDS  R27,_timerstickctr+1
00094a 9712      	SBIW R26,2
00094b f028      	BRLO _0x2019A
                 ; 0001 07DF 	{
                 ; 0001 07E0 		timerstickctr = 0;
00094c e0e0      	LDI  R30,LOW(0)
00094d 93e0 04f2 	STS  _timerstickctr,R30
00094f 93e0 04f3 	STS  _timerstickctr+1,R30
                 ; 0001 07E1 	}
                 ; 0001 07E2 #endif
                 ; 0001 07E3 }
                 _0x2019A:
000951 940e 1aef 	CALL SUBOPT_0x45
000953 9518      	RETI
                 ;
                 ;// vl and vr is the speed of the encoder
                 ;void Velocity(int vl, int vr) {
                 ; 0001 07E6 void Velocity(int vl, int vr) {
                 ; 0001 07E7 	if (vl > 0) {
                 ;	vl -> Y+2
                 ;	vr -> Y+0
                 ; 0001 07E8 		vMLtoi(vl);
                 ; 0001 07E9 	}
                 ; 0001 07EA 	else if (vl < 0) {
                 ; 0001 07EB 		vMLlui(-vl);
                 ; 0001 07EC 	}
                 ; 0001 07ED 	else {
                 ; 0001 07EE 		vMLstop();
                 ; 0001 07EF 	}
                 ; 0001 07F0 
                 ; 0001 07F1 	if (vr > 0) {
                 ; 0001 07F2 		vMRtoi(vr);
                 ; 0001 07F3 	}
                 ; 0001 07F4 	else if (vr < 0) {
                 ; 0001 07F5 		vMLlui(-vr);
                 ; 0001 07F6 	}
                 ; 0001 07F7 	else {
                 ; 0001 07F8 		vMRstop();
                 ; 0001 07F9 	}
                 ; 0001 07FA }
                 ;
                 ;void Angle(int theta_d)
                 ; 0001 07FD {
                 ; 0001 07FE 	int theta_e, vl, vr;
                 ; 0001 07FF 
                 ; 0001 0800 	theta_e = theta_d - (int)orientation;
                 ;	theta_d -> Y+6
                 ;	theta_e -> R16,R17
                 ;	vl -> R18,R19
                 ;	vr -> R20,R21
                 ; 0001 0801 
                 ; 0001 0802 	while (theta_e > 180) theta_e -= 360;
                 ; 0001 0803 while (theta_e <= -180) theta_e += 360;
                 ; 0001 0805 if (theta_e < -90) {
                 ; 0001 0806 		theta_e += 180;
                 ; 0001 0807 	} if (theta_e > 90) {
                 ; 0001 0808 		theta_e -= 180;
                 ; 0001 0809 	}
                 ; 0001 080A 
                 ; 0001 080B 	if (absolute(theta_e) > 50) {
                 ; 0001 080C 
                 ; 0001 080D 	}
                 ; 0001 080E }
                 ;
                 ;void MoveToOrigin() {
                 ; 0001 0810 void MoveToOrigin() {
                 _MoveToOrigin:
                 ; 0001 0811 	float dist, newX, newY;
                 ; 0001 0812 
                 ; 0001 0813 	newX = robotctrl.x * 0.0333;
000954 972c      	SBIW R28,12
                 ;	dist -> Y+8
                 ;	newX -> Y+4
                 ;	newY -> Y+0
000955 940e 197c 	CALL SUBOPT_0x1B
000957 940e 1afd 	CALL SUBOPT_0x46
000959 940e 19dc 	CALL SUBOPT_0x2B
                 ; 0001 0814 	newY = robotctrl.y * 0.0333;
00095b 940e 198a 	CALL SUBOPT_0x1D
00095d 940e 1afd 	CALL SUBOPT_0x46
00095f 940e 19fd 	CALL SUBOPT_0x30
                 ; 0001 0815 
                 ; 0001 0816 
                 ; 0001 0817 	dist = sqrt((newX + 1) * (newX + 1) + (newY - 1) * (newY - 1));
000961 940e 1b08 	CALL SUBOPT_0x47
000963 940e 1b0d 	CALL SUBOPT_0x48
000965 940e 1e4b 	CALL __ADDF12
000967 01df      	MOVW R26,R30
000968 01cb      	MOVW R24,R22
000969 940e 1e9b 	CALL __MULF12
00096b 937f      	PUSH R23
00096c 936f      	PUSH R22
00096d 93ff      	PUSH R31
00096e 93ef      	PUSH R30
00096f 940e 1b12 	CALL SUBOPT_0x49
000971 937f      	PUSH R23
000972 936f      	PUSH R22
000973 93ff      	PUSH R31
000974 93ef      	PUSH R30
000975 940e 1b12 	CALL SUBOPT_0x49
000977 91af      	POP  R26
000978 91bf      	POP  R27
000979 918f      	POP  R24
00097a 919f      	POP  R25
00097b 940e 1e9b 	CALL __MULF12
00097d 91af      	POP  R26
00097e 91bf      	POP  R27
00097f 918f      	POP  R24
000980 919f      	POP  R25
000981 940e 199d 	CALL SUBOPT_0x20
000983 940e 19cc 	CALL SUBOPT_0x29
                 ; 0001 0818 
                 ; 0001 0819 	if (dist < 2) {
                +
000985 e0e0     +LDI R30 , LOW ( 0x40000000 )
000986 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000987 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000988 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000989 940e 1f2e 	CALL __CMPF12
00098b f418      	BRSH _0x201AC
                 ; 0001 081A 		vMRstop();
00098c dbe0      	RCALL _vMRstop
                 ; 0001 081B 		vMLstop();
00098d dbc4      	RCALL _vMLstop
                 ; 0001 081C 	}
                 ; 0001 081D 	else {
00098e c013      	RJMP _0x201AD
                 _0x201AC:
                 ; 0001 081E 		ctrRobottoi((int)(dist * 12 * 2), 20);
00098f 940e 1b18 	CALL SUBOPT_0x4A
                +
000991 e0e0     +LDI R30 , LOW ( 0x41400000 )
000992 e0f0     +LDI R31 , HIGH ( 0x41400000 )
000993 e460     +LDI R22 , BYTE3 ( 0x41400000 )
000994 e471     +LDI R23 , BYTE4 ( 0x41400000 )
                 	__GETD1N 0x41400000
000995 940e 1e9b 	CALL __MULF12
                +
000997 e0a0     +LDI R26 , LOW ( 0x40000000 )
000998 e0b0     +LDI R27 , HIGH ( 0x40000000 )
000999 e080     +LDI R24 , BYTE3 ( 0x40000000 )
00099a e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
00099b 940e 1e9b 	CALL __MULF12
00099d 940e 1dda 	CALL __CFD1
00099f 940e 1b1d 	CALL SUBOPT_0x4B
0009a1 dbd7      	RCALL _ctrRobottoi
                 ; 0001 081F 	}
                 _0x201AD:
                 ; 0001 0820 
                 ; 0001 0821 #ifdef DEBUG_EN
                 ; 0001 0822 	{
                 ; 0001 0823 		char dbgLen;
                 ; 0001 0824 
                 ; 0001 0825 		dbgLen = sprintf(debugMsgBuff, "Distance Square: %f \n\r", dist);
0009a2 9721      	SBIW R28,1
                 ;	dist -> Y+9
                 ;	newX -> Y+5
                 ;	newY -> Y+1
                 ;	dbgLen -> Y+0
0009a3 940e 1b24 	CALL SUBOPT_0x4C
                +
0009a5 eae1     +LDI R30 , LOW ( 2 * _0x20000 + ( 21 ) )
0009a6 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 21 ) )
                 	__POINTW1FN _0x20000,21
0009a7 93fa      	ST   -Y,R31
0009a8 93ea      	ST   -Y,R30
                +
0009a9 85ed     +LDD R30 , Y + 13
0009aa 85fe     +LDD R31 , Y + 13 + 1
0009ab 856f     +LDD R22 , Y + 13 + 2
0009ac 8978     +LDD R23 , Y + 13 + 3
                 	__GETD1S 13
0009ad 940e 1b29 	CALL SUBOPT_0x4D
                 ; 0001 0826 		debug_out(debugMsgBuff, dbgLen);
0009af 940e 1b31 	CALL SUBOPT_0x4E
                 ; 0001 0827 
                 ; 0001 0828 		dbgLen = sprintf(debugMsgBuff, "Robot.x: %d \n\r", robotctrl.x);
                +
0009b1 ebe8     +LDI R30 , LOW ( 2 * _0x20000 + ( 44 ) )
0009b2 e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 44 ) )
                 	__POINTW1FN _0x20000,44
0009b3 93fa      	ST   -Y,R31
0009b4 93ea      	ST   -Y,R30
0009b5 940e 197c 	CALL SUBOPT_0x1B
0009b7 940e 1fa4 	CALL __CWD1
0009b9 940e 1b29 	CALL SUBOPT_0x4D
                 ; 0001 0829 		debug_out(debugMsgBuff, dbgLen);
0009bb 940e 1b31 	CALL SUBOPT_0x4E
                 ; 0001 082A 
                 ; 0001 082B 		dbgLen = sprintf(debugMsgBuff, "Robot.y: %d \n\r", robotctrl.y);
                +
0009bd ece7     +LDI R30 , LOW ( 2 * _0x20000 + ( 59 ) )
0009be e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 59 ) )
                 	__POINTW1FN _0x20000,59
0009bf 93fa      	ST   -Y,R31
0009c0 93ea      	ST   -Y,R30
0009c1 940e 198a 	CALL SUBOPT_0x1D
0009c3 940e 1fa4 	CALL __CWD1
0009c5 940e 1b29 	CALL SUBOPT_0x4D
                 ; 0001 082C 		debug_out(debugMsgBuff, dbgLen);
0009c7 940e 1b31 	CALL SUBOPT_0x4E
                 ; 0001 082D 
                 ; 0001 082E 		dbgLen = sprintf(debugMsgBuff, "--------------- \n\r");
                +
0009c9 ede6     +LDI R30 , LOW ( 2 * _0x20000 + ( 74 ) )
0009ca e0f2     +LDI R31 , HIGH ( 2 * _0x20000 + ( 74 ) )
                 	__POINTW1FN _0x20000,74
0009cb 93fa      	ST   -Y,R31
0009cc 93ea      	ST   -Y,R30
0009cd e080      	LDI  R24,0
0009ce 940e 1644 	CALL _sprintf
0009d0 9624      	ADIW R28,4
0009d1 83e8      	ST   Y,R30
                 ; 0001 082F 		debug_out(debugMsgBuff, dbgLen);
0009d2 940e 1b24 	CALL SUBOPT_0x4C
0009d4 81ea      	LDD  R30,Y+2
0009d5 93ea      	ST   -Y,R30
0009d6 d9b7      	RCALL _debug_out
                 ; 0001 0830 	}
0009d7 9621      	ADIW R28,1
                 ; 0001 0831 #endif
                 ; 0001 0832 }
0009d8 c231      	RJMP _0x20C000C
                 ;
                 ;//========================================================
                 ;// read  vi tri robot   PHUC
                 ;//========================================================
                 ;unsigned char testposition()
                 ; 0001 0838 {
                 _testposition:
                 ; 0001 0839 	unsigned char  i = 0;
                 ; 0001 083A 	unsigned flagstatus = 0;
                 ; 0001 083B 
                 ; 0001 083C 	while (keyKT != 0)
0009d9 940e 20ca 	CALL __SAVELOCR4
                 ;	i -> R17
                 ;	flagstatus -> R18,R19
0009db e010      	LDI  R17,0
                +
0009dc e020     +LDI R18 , LOW ( 0 )
0009dd e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x201AE:
0009de 9b98      	SBIS 0x13,0
0009df c044      	RJMP _0x201B0
                 ; 0001 083D 	{
                 ; 0001 083E 		readposition();
0009e0 940e 1281 	CALL _readposition
                 ; 0001 083F 
                 ; 0001 0840 		if (idRobot == ROBOT_ID)
0009e2 e0e5      	LDI  R30,LOW(5)
0009e3 e0f0      	LDI  R31,HIGH(5)
0009e4 15ec      	CP   R30,R12
0009e5 05fd      	CPC  R31,R13
0009e6 f5e1      	BRNE _0x201B1
                 ; 0001 0841 		{
                 ; 0001 0842 			hc(5, 40); wn16s(robotctrl.ball.y);
0009e7 940e 1b36 	CALL SUBOPT_0x4F
                +
0009e9 91e0 046b+LDS R30 , _robotctrl + ( 12 )
0009eb 91f0 046c+LDS R31 , _robotctrl + ( 12 ) + 1
                 	__GETW1MN _robotctrl,12
0009ed 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0843 			hc(4, 40); wn16s(robotctrl.ball.x);
0009ef e0e4      	LDI  R30,LOW(4)
0009f0 e0f0      	LDI  R31,HIGH(4)
0009f1 940e 1b36 	CALL SUBOPT_0x4F
                +
0009f3 91e0 0469+LDS R30 , _robotctrl + ( 10 )
0009f5 91f0 046a+LDS R31 , _robotctrl + ( 10 ) + 1
                 	__GETW1MN _robotctrl,10
0009f7 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0844 			hc(3, 20); wn16s(robotctrl.x);
0009f9 e0e3      	LDI  R30,LOW(3)
0009fa e0f0      	LDI  R31,HIGH(3)
0009fb 940e 1b1d 	CALL SUBOPT_0x4B
0009fd d9c3      	RCALL _hc
0009fe 940e 197c 	CALL SUBOPT_0x1B
000a00 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0845 			hc(2, 20); wn16s(robotctrl.y);
000a02 e0e2      	LDI  R30,LOW(2)
000a03 e0f0      	LDI  R31,HIGH(2)
000a04 940e 1b1d 	CALL SUBOPT_0x4B
000a06 d9ba      	RCALL _hc
000a07 940e 198a 	CALL SUBOPT_0x1D
000a09 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0846 			hc(1, 1); wn16s(robotctrl.ox);
000a0b 940e 1b42 	CALL SUBOPT_0x51
000a0d 940e 1b42 	CALL SUBOPT_0x51
000a0f d9b1      	RCALL _hc
                +
000a10 91e0 0465+LDS R30 , _robotctrl + ( 6 )
000a12 91f0 0466+LDS R31 , _robotctrl + ( 6 ) + 1
                 	__GETW1MN _robotctrl,6
000a14 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0847 			hc(0, 1); wn16s(robotctrl.oy);
000a16 940e 1b47 	CALL SUBOPT_0x52
000a18 940e 1b42 	CALL SUBOPT_0x51
000a1a d9a6      	RCALL _hc
                +
000a1b 91e0 0467+LDS R30 , _robotctrl + ( 8 )
000a1d 91f0 0468+LDS R31 , _robotctrl + ( 8 ) + 1
                 	__GETW1MN _robotctrl,8
000a1f 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0848 			delay_ms(200);
000a21 940e 1b4c 	CALL SUBOPT_0x53
                 ; 0001 0849 		}
                 ; 0001 084A 
                 ; 0001 084B 	}
                 _0x201B1:
000a23 cfba      	RJMP _0x201AE
                 _0x201B0:
                 ; 0001 084C 	return flagstatus;
000a24 2fe2      	MOV  R30,R18
000a25 c4e4      	RJMP _0x20C000B
                 ; 0001 084D }
                 ;//========================================================
                 ;void robotwall()
                 ; 0001 0850 {
                 _robotwall:
                 ; 0001 0851 	unsigned int demled;
                 ; 0001 0852 	DDRA = 0x00;
000a26 931a      	ST   -Y,R17
000a27 930a      	ST   -Y,R16
                 ;	demled -> R16,R17
000a28 940e 1b52 	CALL SUBOPT_0x54
                 ; 0001 0853 	PORTA = 0x00;
                 ; 0001 0854 
                 ; 0001 0855 	LcdClear();
                 ; 0001 0856 	hc(0, 10);
000a2a 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 0857 	ws("ROBOT WALL");
                +
000a2c e6ec     +LDI R30 , LOW ( _0x201B2 + ( 0 ) )
000a2d e0f2     +LDI R31 , HIGH ( _0x201B2 + ( 0 ) )
                 	__POINTW1MN _0x201B2,0
000a2e 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0858 	LEDL = 1; LEDR = 1;
000a30 9aac      	SBI  0x15,4
000a31 9aad      	SBI  0x15,5
                 ; 0001 0859 
                 ; 0001 085A 	while (keyKT != 0)
                 _0x201B7:
000a32 9b98      	SBIS 0x13,0
000a33 c060      	RJMP _0x201B9
                 ; 0001 085B 	{
                 ; 0001 085C 		IRFL = read_adc(4);
000a34 e0e4      	LDI  R30,LOW(4)
000a35 93ea      	ST   -Y,R30
000a36 da49      	RCALL _read_adc
000a37 93e0 04de 	STS  _IRFL,R30
000a39 93f0 04df 	STS  _IRFL+1,R31
                 ; 0001 085D 		IRFR = read_adc(5);
000a3b e0e5      	LDI  R30,LOW(5)
000a3c 93ea      	ST   -Y,R30
000a3d da42      	RCALL _read_adc
000a3e 93e0 04e0 	STS  _IRFR,R30
000a40 93f0 04e1 	STS  _IRFR+1,R31
                 ; 0001 085E 		hc(1, 0); wn16(IRFL);
000a42 940e 1b5e 	CALL SUBOPT_0x56
000a44 91e0 04de 	LDS  R30,_IRFL
000a46 91f0 04df 	LDS  R31,_IRFL+1
000a48 940e 192c 	CALL SUBOPT_0xD
                 ; 0001 085F 		hc(1, 42); wn16(IRFR);
000a4a 940e 1b42 	CALL SUBOPT_0x51
000a4c 940e 1b61 	CALL SUBOPT_0x57
000a4e 91e0 04e0 	LDS  R30,_IRFR
000a50 91f0 04e1 	LDS  R31,_IRFR+1
000a52 940e 192c 	CALL SUBOPT_0xD
                 ; 0001 0860 
                 ; 0001 0861 		if (IRFL > 250)
000a54 91a0 04de 	LDS  R26,_IRFL
000a56 91b0 04df 	LDS  R27,_IRFL+1
000a58 3fab      	CPI  R26,LOW(0xFB)
000a59 e0e0      	LDI  R30,HIGH(0xFB)
000a5a 07be      	CPC  R27,R30
000a5b f030      	BRLO _0x201BA
                 ; 0001 0862 		{
                 ; 0001 0863 			vMLlui(22); vMRlui(10); delay_ms(600);
000a5c e1e6      	LDI  R30,LOW(22)
000a5d 93ea      	ST   -Y,R30
000a5e daed      	RCALL _vMLlui
000a5f e0ea      	LDI  R30,LOW(10)
000a60 940e 1b67 	CALL SUBOPT_0x58
                 ; 0001 0864 		}
                 ; 0001 0865 		if (IRFR > 250)
                 _0x201BA:
000a62 91a0 04e0 	LDS  R26,_IRFR
000a64 91b0 04e1 	LDS  R27,_IRFR+1
000a66 3fab      	CPI  R26,LOW(0xFB)
000a67 e0e0      	LDI  R30,HIGH(0xFB)
000a68 07be      	CPC  R27,R30
000a69 f030      	BRLO _0x201BB
                 ; 0001 0866 		{
                 ; 0001 0867 			vMLlui(10); vMRlui(22); delay_ms(600);
000a6a e0ea      	LDI  R30,LOW(10)
000a6b 93ea      	ST   -Y,R30
000a6c dadf      	RCALL _vMLlui
000a6d e1e6      	LDI  R30,LOW(22)
000a6e 940e 1b67 	CALL SUBOPT_0x58
                 ; 0001 0868 		}
                 ; 0001 0869 		if ((IRFL < 300)&(IRFR < 300))
                 _0x201BB:
000a70 91a0 04de 	LDS  R26,_IRFL
000a72 91b0 04df 	LDS  R27,_IRFL+1
000a74 e2ec      	LDI  R30,LOW(300)
000a75 e0f1      	LDI  R31,HIGH(300)
000a76 940e 1fae 	CALL __LTW12U
000a78 2e0e      	MOV  R0,R30
000a79 91a0 04e0 	LDS  R26,_IRFR
000a7b 91b0 04e1 	LDS  R27,_IRFR+1
000a7d e2ec      	LDI  R30,LOW(300)
000a7e e0f1      	LDI  R31,HIGH(300)
000a7f 940e 1fae 	CALL __LTW12U
000a81 21e0      	AND  R30,R0
000a82 f031      	BREQ _0x201BC
                 ; 0001 086A 		{
                 ; 0001 086B 			vMLtoi(22); vMRtoi(22);
000a83 e1e6      	LDI  R30,LOW(22)
000a84 93ea      	ST   -Y,R30
000a85 dac0      	RCALL _vMLtoi
000a86 e1e6      	LDI  R30,LOW(22)
000a87 93ea      	ST   -Y,R30
000a88 dad5      	RCALL _vMRtoi
                 ; 0001 086C 		}
                 ; 0001 086D 
                 ; 0001 086E 		demled++;
                 _0x201BC:
                +
000a89 5f0f     +SUBI R16 , LOW ( - 1 )
000a8a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0001 086F 		if (demled > 50){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
                +
000a8b 3303     +CPI R16 , LOW ( 51 )
000a8c e0e0     +LDI R30 , HIGH ( 51 )
000a8d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,51
000a8e f020      	BRLO _0x201BD
                +
000a8f e000     +LDI R16 , LOW ( 0 )
000a90 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000a91 940e 1b70 	CALL SUBOPT_0x59
                 ; 0001 0870 	}
                 _0x201BD:
000a93 cf9e      	RJMP _0x201B7
                 _0x201B9:
                 ; 0001 0871 
                 ; 0001 0872 }
000a94 9109      	LD   R16,Y+
000a95 9119      	LD   R17,Y+
000a96 9508      	RET
                 
                 	.DSEG
                 _0x201B2:
00026c           	.BYTE 0xB
                 ;////========================================================
                 ;//void robotline() //DIGITAL I/O
                 ;//{
                 ;//    unsigned char status=2;
                 ;//    unsigned char prestatus=2;
                 ;//
                 ;//    DDRA =0x00;
                 ;//    PORTA=0xFF;
                 ;////#define S0  PINA.0 status 0
                 ;////#define S1  PINA.1 status 1
                 ;////#define S2  PINA.2 status 2
                 ;////#define S3  PINA.3 status 3
                 ;////#define S4  PINA.7 status 4
                 ;//        LcdClear();
                 ;//        hc(0,1);
                 ;//        ws ("LINE FOLOWER");
                 ;//        hc(1,20);
                 ;//        ws (" ROBOT");
                 ;//        LEDL=1;LEDR=1;
                 ;//
                 ;//   while(keyKT!=0)
                 ;//   {
                 ;//      if (S2==0)
                 ;//      {
                 ;//          status=2;
                 ;//          vMLtoi(80);vMRtoi(80);
                 ;//      }
                 ;//      //===========================
                 ;//      if ((prestatus==2)&(S1==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(80);vMRtoi(50);
                 ;//      }
                 ;//      if ((prestatus==2)&(S0==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(80);vMRtoi(30);
                 ;//      }
                 ;//       //===========================
                 ;//      if ((prestatus==2)&(S3==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(50);vMRtoi(80);
                 ;//      }
                 ;//      if ((prestatus==2)&(S4==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(30);vMRtoi(80);
                 ;//      }
                 ;//       //===========================
                 ;//      if ((prestatus==1)&(S0==0))
                 ;//      {
                 ;//          status=1;
                 ;//          vMLtoi(80);vMRtoi(40);
                 ;//      }
                 ;//      if ((prestatus==3)&(S4==0))
                 ;//      {
                 ;//          status=0;
                 ;//          vMLtoi(40);vMRtoi(80);
                 ;//      }
                 ;//
                 ;//      prestatus=status;
                 ;//      delay_ms(200);LEDLtoggle();LEDRtoggle();
                 ;//
                 ;//  }
                 ;// }
                 ;
                 ;
                 ;//========================================================
                 ;void readline()
                 ; 0001 08B9 {
                 
                 	.CSEG
                 _readline:
                 ; 0001 08BA 	int i = 0, j = 0;
                 ; 0001 08BB 	// reset the values
                 ; 0001 08BC 	for (i = 0; i < 5; i++)
000a97 940e 20ca 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                +
000a99 e000     +LDI R16 , LOW ( 0 )
000a9a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000a9b e020     +LDI R18 , LOW ( 0 )
000a9c e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000a9d e000     +LDI R16 , LOW ( 0 )
000a9e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x201BF:
                +
000a9f 3005     +CPI R16 , LOW ( 5 )
000aa0 e0e0     +LDI R30 , HIGH ( 5 )
000aa1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000aa2 f45c      	BRGE _0x201C0
                 ; 0001 08BD 		IRLINE[i] = 0;
000aa3 940e 1b74 	CALL SUBOPT_0x5A
000aa5 0fae      	ADD  R26,R30
000aa6 1fbf      	ADC  R27,R31
000aa7 e0e0      	LDI  R30,LOW(0)
000aa8 e0f0      	LDI  R31,HIGH(0)
000aa9 93ed      	ST   X+,R30
000aaa 93fc      	ST   X,R31
                +
000aab 5f0f     +SUBI R16 , LOW ( - 1 )
000aac 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000aad cff1      	RJMP _0x201BF
                 _0x201C0:
                 ; 0001 08BF for (j = 0; j < 50; j++)
                +
000aae e020     +LDI R18 , LOW ( 0 )
000aaf e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x201C2:
                +
000ab0 3322     +CPI R18 , LOW ( 50 )
000ab1 e0e0     +LDI R30 , HIGH ( 50 )
000ab2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,50
000ab3 f014      	BRLT PC+3
000ab4 940c 0af9 	JMP _0x201C3
                 ; 0001 08C0 	{
                 ; 0001 08C1 		IRLINE[0] = IRLINE[0] + read_adc(0);
000ab6 e0e0      	LDI  R30,LOW(0)
000ab7 93ea      	ST   -Y,R30
000ab8 d9c7      	RCALL _read_adc
000ab9 91a0 04e2 	LDS  R26,_IRLINE
000abb 91b0 04e3 	LDS  R27,_IRLINE+1
000abd 0fea      	ADD  R30,R26
000abe 1ffb      	ADC  R31,R27
000abf 93e0 04e2 	STS  _IRLINE,R30
000ac1 93f0 04e3 	STS  _IRLINE+1,R31
                 ; 0001 08C2 		IRLINE[1] = IRLINE[1] + read_adc(1);
000ac3 e0e1      	LDI  R30,LOW(1)
000ac4 93ea      	ST   -Y,R30
000ac5 d9ba      	RCALL _read_adc
                +
000ac6 91a0 04e4+LDS R26 , _IRLINE + ( 2 )
000ac8 91b0 04e5+LDS R27 , _IRLINE + ( 2 ) + 1
                 	__GETW2MN _IRLINE,2
000aca 0fea      	ADD  R30,R26
000acb 1ffb      	ADC  R31,R27
                +
000acc 93e0 04e4+STS _IRLINE + ( 2 ) , R30
000ace 93f0 04e5+STS _IRLINE + ( 2 ) + 1 , R31
                 	__PUTW1MN _IRLINE,2
                 ; 0001 08C3 		IRLINE[2] = IRLINE[2] + read_adc(2);
000ad0 e0e2      	LDI  R30,LOW(2)
000ad1 93ea      	ST   -Y,R30
000ad2 d9ad      	RCALL _read_adc
000ad3 940e 1b7a 	CALL SUBOPT_0x5B
000ad5 0fea      	ADD  R30,R26
000ad6 1ffb      	ADC  R31,R27
                +
000ad7 93e0 04e6+STS _IRLINE + ( 4 ) , R30
000ad9 93f0 04e7+STS _IRLINE + ( 4 ) + 1 , R31
                 	__PUTW1MN _IRLINE,4
                 ; 0001 08C4 		IRLINE[3] = IRLINE[3] + read_adc(3);
000adb e0e3      	LDI  R30,LOW(3)
000adc 93ea      	ST   -Y,R30
000add d9a2      	RCALL _read_adc
                +
000ade 91a0 04e8+LDS R26 , _IRLINE + ( 6 )
000ae0 91b0 04e9+LDS R27 , _IRLINE + ( 6 ) + 1
                 	__GETW2MN _IRLINE,6
000ae2 0fea      	ADD  R30,R26
000ae3 1ffb      	ADC  R31,R27
                +
000ae4 93e0 04e8+STS _IRLINE + ( 6 ) , R30
000ae6 93f0 04e9+STS _IRLINE + ( 6 ) + 1 , R31
                 	__PUTW1MN _IRLINE,6
                 ; 0001 08C5 		IRLINE[4] = IRLINE[4] + read_adc(7);
000ae8 e0e7      	LDI  R30,LOW(7)
000ae9 93ea      	ST   -Y,R30
000aea 940e 0480 	CALL _read_adc
                +
000aec 91a0 04ea+LDS R26 , _IRLINE + ( 8 )
000aee 91b0 04eb+LDS R27 , _IRLINE + ( 8 ) + 1
                 	__GETW2MN _IRLINE,8
000af0 0fea      	ADD  R30,R26
000af1 1ffb      	ADC  R31,R27
                +
000af2 93e0 04ea+STS _IRLINE + ( 8 ) , R30
000af4 93f0 04eb+STS _IRLINE + ( 8 ) + 1 , R31
                 	__PUTW1MN _IRLINE,8
                 ; 0001 08C6 	}
                +
000af6 5f2f     +SUBI R18 , LOW ( - 1 )
000af7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000af8 cfb7      	RJMP _0x201C2
                 _0x201C3:
                 ; 0001 08C7 	// get the rounded average of the readings for each sensor
                 ; 0001 08C8 	for (i = 0; i < 5; i++)
                +
000af9 e000     +LDI R16 , LOW ( 0 )
000afa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x201C5:
                +
000afb 3005     +CPI R16 , LOW ( 5 )
000afc e0e0     +LDI R30 , HIGH ( 5 )
000afd 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000afe f4ac      	BRGE _0x201C6
                 ; 0001 08C9 		IRLINE[i] = (IRLINE[i] + (50 >> 1)) / 50;
000aff 940e 1b74 	CALL SUBOPT_0x5A
000b01 0fea      	ADD  R30,R26
000b02 1ffb      	ADC  R31,R27
000b03 01bf      	MOVW R22,R30
000b04 940e 1b74 	CALL SUBOPT_0x5A
000b06 940e 1b7f 	CALL SUBOPT_0x5C
000b08 9679      	ADIW R30,25
000b09 01df      	MOVW R26,R30
000b0a e3e2      	LDI  R30,LOW(50)
000b0b e0f0      	LDI  R31,HIGH(50)
000b0c 940e 1ff9 	CALL __DIVW21U
000b0e 01db      	MOVW R26,R22
000b0f 93ed      	ST   X+,R30
000b10 93fc      	ST   X,R31
                +
000b11 5f0f     +SUBI R16 , LOW ( - 1 )
000b12 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000b13 cfe7      	RJMP _0x201C5
                 _0x201C6:
                 ; 0001 08CA }
000b14 c3f5      	RJMP _0x20C000B
                 ;//========================================================
                 ;void robotwhiteline() //ANALOG OK
                 ; 0001 08CD {
                 _robotwhiteline:
                 ; 0001 08CE 	unsigned char i = 0, imax;
                 ; 0001 08CF 	int imaxlast = 0;
                 ; 0001 08D0 	unsigned int  admax;
                 ; 0001 08D1 	unsigned int  demled = 0;
                 ; 0001 08D2 	unsigned int flagblindT = 0;
                 ; 0001 08D3 	unsigned int flagblindP = 0;
                 ; 0001 08D4 	DDRA = 0x00;
000b15 9726      	SBIW R28,6
000b16 940e 1ae5 	CALL SUBOPT_0x43
000b18 e0e0      	LDI  R30,LOW(0)
000b19 83ea      	STD  Y+2,R30
000b1a 83eb      	STD  Y+3,R30
000b1b 83ec      	STD  Y+4,R30
000b1c 83ed      	STD  Y+5,R30
000b1d 940e 20c8 	CALL __SAVELOCR6
                 ;	i -> R17
                 ;	imax -> R16
                 ;	imaxlast -> R18,R19
                 ;	admax -> R20,R21
                 ;	demled -> Y+10
                 ;	flagblindT -> Y+8
                 ;	flagblindP -> Y+6
000b1f e010      	LDI  R17,0
                +
000b20 e020     +LDI R18 , LOW ( 0 )
000b21 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000b22 940e 1b52 	CALL SUBOPT_0x54
                 ; 0001 08D5 	PORTA = 0x00;
                 ; 0001 08D6 
                 ; 0001 08D7 	LcdClear();
                 ; 0001 08D8 	hc(0, 1);
000b24 940e 1b42 	CALL SUBOPT_0x51
000b26 940e 03c1 	CALL _hc
                 ; 0001 08D9 	ws("WHITE LINE");
                +
000b28 e7e7     +LDI R30 , LOW ( _0x201C7 + ( 0 ) )
000b29 e0f2     +LDI R31 , HIGH ( _0x201C7 + ( 0 ) )
                 	__POINTW1MN _0x201C7,0
000b2a 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 08DA 	hc(1, 10);
000b2c 940e 1b42 	CALL SUBOPT_0x51
000b2e 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 08DB 	ws("FOLOWER");
                +
000b30 e8e2     +LDI R30 , LOW ( _0x201C7 + ( 11 ) )
000b31 e0f2     +LDI R31 , HIGH ( _0x201C7 + ( 11 ) )
                 	__POINTW1MN _0x201C7,11
000b32 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 08DC 	LEDL = 1; LEDR = 1;
000b34 9aac      	SBI  0x15,4
000b35 9aad      	SBI  0x15,5
                 ; 0001 08DD 	//doc va khoi dong gia tri cho imaxlast
                 ; 0001 08DE 	readline();
000b36 940e 1b84 	CALL SUBOPT_0x5D
                 ; 0001 08DF 	admax = IRLINE[0]; imax = 0;
                 ; 0001 08E0 	for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201CD:
000b38 3015      	CPI  R17,5
000b39 f468      	BRSH _0x201CE
000b3a 940e 1b8d 	CALL SUBOPT_0x5E
000b3c 940e 1b7f 	CALL SUBOPT_0x5C
000b3e 174e      	CP   R20,R30
000b3f 075f      	CPC  R21,R31
000b40 f420      	BRSH _0x201CF
000b41 940e 1b8d 	CALL SUBOPT_0x5E
000b43 940e 1b94 	CALL SUBOPT_0x5F
                 _0x201CF:
000b45 5f1f      	SUBI R17,-1
000b46 cff1      	RJMP _0x201CD
                 _0x201CE:
                 ; 0001 08E1 	imaxlast = imax;
000b47 2f20      	MOV  R18,R16
000b48 2733      	CLR  R19
                 ; 0001 08E2 	while (keyKT != 0)
                 _0x201D0:
000b49 9b98      	SBIS 0x13,0
000b4a c0bd      	RJMP _0x201D2
                 ; 0001 08E3 	{
                 ; 0001 08E4 		//doc gia tri cam bien
                 ; 0001 08E5 		readline();
000b4b 940e 1b84 	CALL SUBOPT_0x5D
                 ; 0001 08E6 		admax = IRLINE[0]; imax = 0;
                 ; 0001 08E7 		for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201D4:
000b4d 3015      	CPI  R17,5
000b4e f468      	BRSH _0x201D5
000b4f 940e 1b8d 	CALL SUBOPT_0x5E
000b51 940e 1b7f 	CALL SUBOPT_0x5C
000b53 174e      	CP   R20,R30
000b54 075f      	CPC  R21,R31
000b55 f420      	BRSH _0x201D6
000b56 940e 1b8d 	CALL SUBOPT_0x5E
000b58 940e 1b94 	CALL SUBOPT_0x5F
                 _0x201D6:
000b5a 5f1f      	SUBI R17,-1
000b5b cff1      	RJMP _0x201D4
                 _0x201D5:
                 ; 0001 08E8 		//imax=2;
                 ; 0001 08E9 		if ((imax - imaxlast > 1) || (imax - imaxlast < -1))  //tranh truong hop nhay bo trang thai
000b5c 940e 1b9a 	CALL SUBOPT_0x60
000b5e 1be2      	SUB  R30,R18
000b5f 0bf3      	SBC  R31,R19
000b60 01df      	MOVW R26,R30
000b61 9732      	SBIW R30,2
000b62 f42c      	BRGE _0x201D8
000b63 01fd      	MOVW R30,R26
000b64 3fef      	CPI  R30,LOW(0xFFFF)
000b65 efaf      	LDI  R26,HIGH(0xFFFF)
000b66 07fa      	CPC  R31,R26
000b67 f40c      	BRGE _0x201D7
                 _0x201D8:
                 ; 0001 08EA 		{
                 ; 0001 08EB 		}
                 ; 0001 08EC 		else
000b68 c034      	RJMP _0x201DA
                 _0x201D7:
                 ; 0001 08ED 		{
                 ; 0001 08EE 			switch (imax)
000b69 940e 1b9a 	CALL SUBOPT_0x60
                 ; 0001 08EF 			{
                 ; 0001 08F0 			case 0:
000b6b 9730      	SBIW R30,0
000b6c f449      	BRNE _0x201DE
                 ; 0001 08F1 				vMLtoi(1); vMRtoi(20);
000b6d 940e 1b9d 	CALL SUBOPT_0x61
000b6f 940e 1ba1 	CALL SUBOPT_0x62
                 ; 0001 08F2 				//flagblindT = 0;
                 ; 0001 08F3 				flagblindP = 1;
000b71 e0e1      	LDI  R30,LOW(1)
000b72 e0f0      	LDI  R31,HIGH(1)
000b73 83ee      	STD  Y+6,R30
000b74 83ff      	STD  Y+6+1,R31
                 ; 0001 08F4 				break;
000b75 c025      	RJMP _0x201DD
                 ; 0001 08F5 			case 1:
                 _0x201DE:
000b76 30e1      	CPI  R30,LOW(0x1)
000b77 e0a0      	LDI  R26,HIGH(0x1)
000b78 07fa      	CPC  R31,R26
000b79 f429      	BRNE _0x201DF
                 ; 0001 08F6 				vMLtoi(1); vMRtoi(15);
000b7a 940e 1b9d 	CALL SUBOPT_0x61
000b7c 940e 1ba5 	CALL SUBOPT_0x63
                 ; 0001 08F7 				break;
000b7e c01c      	RJMP _0x201DD
                 ; 0001 08F8 			case 2:
                 _0x201DF:
000b7f 30e2      	CPI  R30,LOW(0x2)
000b80 e0a0      	LDI  R26,HIGH(0x2)
000b81 07fa      	CPC  R31,R26
000b82 f429      	BRNE _0x201E0
                 ; 0001 08F9 				vMLtoi(15); vMRtoi(15);
000b83 940e 1ba9 	CALL SUBOPT_0x64
000b85 940e 1ba5 	CALL SUBOPT_0x63
                 ; 0001 08FA 				break;
000b87 c013      	RJMP _0x201DD
                 ; 0001 08FB 			case 3:
                 _0x201E0:
000b88 30e3      	CPI  R30,LOW(0x3)
000b89 e0a0      	LDI  R26,HIGH(0x3)
000b8a 07fa      	CPC  R31,R26
000b8b f429      	BRNE _0x201E1
                 ; 0001 08FC 				vMLtoi(15); vMRtoi(1);
000b8c 940e 1ba9 	CALL SUBOPT_0x64
000b8e 940e 1bad 	CALL SUBOPT_0x65
                 ; 0001 08FD 				break;
000b90 c00a      	RJMP _0x201DD
                 ; 0001 08FE 			case 4:
                 _0x201E1:
000b91 30e4      	CPI  R30,LOW(0x4)
000b92 e0a0      	LDI  R26,HIGH(0x4)
000b93 07fa      	CPC  R31,R26
000b94 f431      	BRNE _0x201E3
                 ; 0001 08FF 				vMLtoi(20); vMRtoi(1);
000b95 940e 1bb1 	CALL SUBOPT_0x66
                 ; 0001 0900 				flagblindT = 1;
000b97 e0e1      	LDI  R30,LOW(1)
000b98 e0f0      	LDI  R31,HIGH(1)
000b99 87e8      	STD  Y+8,R30
000b9a 87f9      	STD  Y+8+1,R31
                 ; 0001 0901 				//flagblindP = 0;
                 ; 0001 0902 				break;
                 ; 0001 0903 			default:
                 _0x201E3:
                 ; 0001 0904 				// vMLtoi(5); vMRtoi(5) ;
                 ; 0001 0905 				break;
                 ; 0001 0906 			}
                 _0x201DD:
                 ; 0001 0907 			imaxlast = imax;
000b9b 2f20      	MOV  R18,R16
000b9c 2733      	CLR  R19
                 ; 0001 0908 		}
                 _0x201DA:
                 ; 0001 0909 
                 ; 0001 090A 		while (flagblindT == 1 && keyKT != 0) //lac duong ben trai
                 _0x201E4:
000b9d 85a8      	LDD  R26,Y+8
000b9e 85b9      	LDD  R27,Y+8+1
000b9f 9711      	SBIW R26,1
000ba0 f419      	BRNE _0x201E7
000ba1 940e 1bb6 	CALL SUBOPT_0x67
000ba3 f409      	BRNE _0x201E8
                 _0x201E7:
000ba4 c01f      	RJMP _0x201E6
                 _0x201E8:
                 ; 0001 090B 		{
                 ; 0001 090C 			vMLtoi(20); vMRtoi(1);
000ba5 940e 1bb1 	CALL SUBOPT_0x66
                 ; 0001 090D 			readline();
000ba7 940e 1b84 	CALL SUBOPT_0x5D
                 ; 0001 090E 			admax = IRLINE[0]; imax = 0;
                 ; 0001 090F 			for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201EA:
000ba9 3015      	CPI  R17,5
000baa f468      	BRSH _0x201EB
000bab 940e 1b8d 	CALL SUBOPT_0x5E
000bad 940e 1b7f 	CALL SUBOPT_0x5C
000baf 174e      	CP   R20,R30
000bb0 075f      	CPC  R21,R31
000bb1 f420      	BRSH _0x201EC
000bb2 940e 1b8d 	CALL SUBOPT_0x5E
000bb4 940e 1b94 	CALL SUBOPT_0x5F
                 _0x201EC:
000bb6 5f1f      	SUBI R17,-1
000bb7 cff1      	RJMP _0x201EA
                 _0x201EB:
                 ; 0001 0910 			imaxlast = imax;
000bb8 2f20      	MOV  R18,R16
000bb9 2733      	CLR  R19
                 ; 0001 0911 			if (IRLINE[2] > 500)  flagblindT = 0;
000bba 940e 1b7a 	CALL SUBOPT_0x5B
000bbc 3fa5      	CPI  R26,LOW(0x1F5)
000bbd e0e1      	LDI  R30,HIGH(0x1F5)
000bbe 07be      	CPC  R27,R30
000bbf f018      	BRLO _0x201ED
000bc0 e0e0      	LDI  R30,LOW(0)
000bc1 87e8      	STD  Y+8,R30
000bc2 87e9      	STD  Y+8+1,R30
                 ; 0001 0912 
                 ; 0001 0913 
                 ; 0001 0914 		}
                 _0x201ED:
000bc3 cfd9      	RJMP _0x201E4
                 _0x201E6:
                 ; 0001 0915 		while (flagblindP == 1 && keyKT != 0) //lac duong ben phai
                 _0x201EE:
000bc4 81ae      	LDD  R26,Y+6
000bc5 81bf      	LDD  R27,Y+6+1
000bc6 9711      	SBIW R26,1
000bc7 f419      	BRNE _0x201F1
000bc8 940e 1bb6 	CALL SUBOPT_0x67
000bca f409      	BRNE _0x201F2
                 _0x201F1:
000bcb c021      	RJMP _0x201F0
                 _0x201F2:
                 ; 0001 0916 		{
                 ; 0001 0917 			vMLtoi(1); vMRtoi(20);
000bcc 940e 1b9d 	CALL SUBOPT_0x61
000bce 940e 1ba1 	CALL SUBOPT_0x62
                 ; 0001 0918 			readline();
000bd0 940e 1b84 	CALL SUBOPT_0x5D
                 ; 0001 0919 			admax = IRLINE[0]; imax = 0;
                 ; 0001 091A 			for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                 _0x201F4:
000bd2 3015      	CPI  R17,5
000bd3 f468      	BRSH _0x201F5
000bd4 940e 1b8d 	CALL SUBOPT_0x5E
000bd6 940e 1b7f 	CALL SUBOPT_0x5C
000bd8 174e      	CP   R20,R30
000bd9 075f      	CPC  R21,R31
000bda f420      	BRSH _0x201F6
000bdb 940e 1b8d 	CALL SUBOPT_0x5E
000bdd 940e 1b94 	CALL SUBOPT_0x5F
                 _0x201F6:
000bdf 5f1f      	SUBI R17,-1
000be0 cff1      	RJMP _0x201F4
                 _0x201F5:
                 ; 0001 091B 			imaxlast = imax;
000be1 2f20      	MOV  R18,R16
000be2 2733      	CLR  R19
                 ; 0001 091C 			if (IRLINE[2] > 500)  flagblindP = 0;
000be3 940e 1b7a 	CALL SUBOPT_0x5B
000be5 3fa5      	CPI  R26,LOW(0x1F5)
000be6 e0e1      	LDI  R30,HIGH(0x1F5)
000be7 07be      	CPC  R27,R30
000be8 f018      	BRLO _0x201F7
000be9 e0e0      	LDI  R30,LOW(0)
000bea 83ee      	STD  Y+6,R30
000beb 83ef      	STD  Y+6+1,R30
                 ; 0001 091D 
                 ; 0001 091E 		}
                 _0x201F7:
000bec cfd7      	RJMP _0x201EE
                 _0x201F0:
                 ; 0001 091F 		hc(3, 10); wn16s(imax);
000bed 940e 1bbb 	CALL SUBOPT_0x68
000bef 940e 1b9a 	CALL SUBOPT_0x60
000bf1 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0920 		hc(4, 10); wn16s(admax);
000bf3 940e 1bc0 	CALL SUBOPT_0x69
000bf5 935a      	ST   -Y,R21
000bf6 934a      	ST   -Y,R20
000bf7 940e 0460 	CALL _wn16s
                 ; 0001 0921 
                 ; 0001 0922 		demled++;
000bf9 85ea      	LDD  R30,Y+10
000bfa 85fb      	LDD  R31,Y+10+1
000bfb 9631      	ADIW R30,1
000bfc 87ea      	STD  Y+10,R30
000bfd 87fb      	STD  Y+10+1,R31
                 ; 0001 0923 		if (demled > 30){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
000bfe 85aa      	LDD  R26,Y+10
000bff 85bb      	LDD  R27,Y+10+1
000c00 975f      	SBIW R26,31
000c01 f028      	BRLO _0x201F8
000c02 e0e0      	LDI  R30,LOW(0)
000c03 87ea      	STD  Y+10,R30
000c04 87eb      	STD  Y+10+1,R30
000c05 940e 1b70 	CALL SUBOPT_0x59
                 ; 0001 0924 	}
                 _0x201F8:
000c07 cf41      	RJMP _0x201D0
                 _0x201D2:
                 ; 0001 0925 }
000c08 940e 20cf 	CALL __LOADLOCR6
                 _0x20C000C:
000c0a 962c      	ADIW R28,12
000c0b 9508      	RET
                 
                 	.DSEG
                 _0x201C7:
000277           	.BYTE 0x13
                 ;
                 ;//========================================================
                 ;void robotblackline() //ANALOG OK
                 ; 0001 0929 {
                 
                 	.CSEG
                 _robotblackline:
                 ; 0001 092A 	long int lastvalueline = 0, valueline = 0, value = 0, online = 0;
                 ; 0001 092B 	int i = 0, j = 0
                 ; 0001 092C 		, imin = 0;
                 ; 0001 092D 	long int avrg = 0, sum = 0;
                 ; 0001 092E 	unsigned int admin;
                 ; 0001 092F 	unsigned char imax;
                 ; 0001 0930 	int imaxlast = 0;
                 ; 0001 0931 	unsigned int  admax;
                 ; 0001 0932 	unsigned int demled = 0;
                 ; 0001 0933 	unsigned int flagblindT = 0;
                 ; 0001 0934 	unsigned int flagblindP = 0;
                 ; 0001 0935 	float udk, sumi = 0, err, lasterr;
                 ; 0001 0936 
                 ; 0001 0937 	int iminlast = 0;
                 ; 0001 0938 	DDRA = 0x00;
000c0c 97e7      	SBIW R28,55
000c0d e387      	LDI  R24,55
000c0e e0a0      	LDI  R26,LOW(0)
000c0f e0b0      	LDI  R27,HIGH(0)
000c10 e4ee      	LDI  R30,LOW(_0x201F9*2)
000c11 e0f2      	LDI  R31,HIGH(_0x201F9*2)
000c12 940e 20d6 	CALL __INITLOCB
000c14 940e 20c8 	CALL __SAVELOCR6
                 ;	lastvalueline -> Y+57
                 ;	valueline -> Y+53
                 ;	value -> Y+49
                 ;	online -> Y+45
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	imin -> R20,R21
                 ;	avrg -> Y+41
                 ;	sum -> Y+37
                 ;	admin -> Y+35
                 ;	imax -> Y+34
                 ;	imaxlast -> Y+32
                 ;	admax -> Y+30
                 ;	demled -> Y+28
                 ;	flagblindT -> Y+26
                 ;	flagblindP -> Y+24
                 ;	udk -> Y+20
                 ;	sumi -> Y+16
                 ;	err -> Y+12
                 ;	lasterr -> Y+8
                 ;	iminlast -> Y+6
                +
000c16 e000     +LDI R16 , LOW ( 0 )
000c17 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000c18 e020     +LDI R18 , LOW ( 0 )
000c19 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000c1a e040     +LDI R20 , LOW ( 0 )
000c1b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000c1c 940e 1b52 	CALL SUBOPT_0x54
                 ; 0001 0939 	PORTA = 0x00;
                 ; 0001 093A 
                 ; 0001 093B 	LcdClear();
                 ; 0001 093C 	hc(0, 1);
000c1e 940e 1b42 	CALL SUBOPT_0x51
000c20 940e 03c1 	CALL _hc
                 ; 0001 093D 	ws("BLACK LINE");
                +
000c22 e8ea     +LDI R30 , LOW ( _0x201FA + ( 0 ) )
000c23 e0f2     +LDI R31 , HIGH ( _0x201FA + ( 0 ) )
                 	__POINTW1MN _0x201FA,0
000c24 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 093E 	hc(1, 10);
000c26 940e 1b42 	CALL SUBOPT_0x51
000c28 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 093F 	ws("FOLOWER");
                +
000c2a e9e5     +LDI R30 , LOW ( _0x201FA + ( 11 ) )
000c2b e0f2     +LDI R31 , HIGH ( _0x201FA + ( 11 ) )
                 	__POINTW1MN _0x201FA,11
000c2c 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0940 	LEDL = 1; LEDR = 1;
000c2e 9aac      	SBI  0x15,4
000c2f 9aad      	SBI  0x15,5
                 ; 0001 0941 
                 ; 0001 0942 	//doc lan dau tien  de khoi dong gia tri iminlast;
                 ; 0001 0943 	readline();
000c30 940e 1bc5 	CALL SUBOPT_0x6A
                 ; 0001 0944 	admin = IRLINE[0]; imin = 0;
                 ; 0001 0945 	for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20200:
                +
000c32 3005     +CPI R16 , LOW ( 5 )
000c33 e0e0     +LDI R30 , HIGH ( 5 )
000c34 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000c35 f48c      	BRGE _0x20201
000c36 940e 1b74 	CALL SUBOPT_0x5A
000c38 940e 1b7f 	CALL SUBOPT_0x5C
000c3a 940e 1bd2 	CALL SUBOPT_0x6B
000c3c f438      	BRSH _0x20202
000c3d 940e 1b74 	CALL SUBOPT_0x5A
000c3f 940e 1b7f 	CALL SUBOPT_0x5C
000c41 a3eb      	STD  Y+35,R30
000c42 a3fc      	STD  Y+35+1,R31
000c43 01a8      	MOVW R20,R16
                 _0x20202:
                +
000c44 5f0f     +SUBI R16 , LOW ( - 1 )
000c45 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c46 cfeb      	RJMP _0x20200
                 _0x20201:
                 ; 0001 0946 	iminlast = imin;
                +
000c47 834e     +STD Y + 6 , R20
000c48 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 0947 	admin = 1024;
000c49 e0e0      	LDI  R30,LOW(1024)
000c4a e0f4      	LDI  R31,HIGH(1024)
000c4b a3eb      	STD  Y+35,R30
000c4c a3fc      	STD  Y+35+1,R31
                 ; 0001 0948 	admax = 0;
000c4d 8fee      	STD  Y+30,R30
000c4e 8fef      	STD  Y+30+1,R30
                 ; 0001 0949 	//calib
                 ; 0001 094A 	while (keyKT != 0)
                 _0x20203:
000c4f 9b98      	SBIS 0x13,0
000c50 c03e      	RJMP _0x20205
                 ; 0001 094B 	{
                 ; 0001 094C 		//doc gia tri cam bien
                 ; 0001 094D 		readline();
000c51 de45      	RCALL _readline
                 ; 0001 094E 
                 ; 0001 094F 		for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                +
000c52 e001     +LDI R16 , LOW ( 1 )
000c53 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x20207:
                +
000c54 3005     +CPI R16 , LOW ( 5 )
000c55 e0e0     +LDI R30 , HIGH ( 5 )
000c56 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000c57 f48c      	BRGE _0x20208
000c58 940e 1b74 	CALL SUBOPT_0x5A
000c5a 940e 1b7f 	CALL SUBOPT_0x5C
000c5c 940e 1bd2 	CALL SUBOPT_0x6B
000c5e f438      	BRSH _0x20209
000c5f 940e 1b74 	CALL SUBOPT_0x5A
000c61 940e 1b7f 	CALL SUBOPT_0x5C
000c63 a3eb      	STD  Y+35,R30
000c64 a3fc      	STD  Y+35+1,R31
000c65 01a8      	MOVW R20,R16
                 _0x20209:
                +
000c66 5f0f     +SUBI R16 , LOW ( - 1 )
000c67 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c68 cfeb      	RJMP _0x20207
                 _0x20208:
                 ; 0001 0950 		//hc(3,10);wn16s(admin);
                 ; 0001 0951 		hc(3, 10); wn16s(admin);
000c69 940e 1bbb 	CALL SUBOPT_0x68
000c6b a1eb      	LDD  R30,Y+35
000c6c a1fc      	LDD  R31,Y+35+1
000c6d 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0952 
                 ; 0001 0953 		for (i = 1; i < 5; i++){ if (admax < IRLINE[i]){ admax = IRLINE[i]; imax = i; } }
                +
000c6f e001     +LDI R16 , LOW ( 1 )
000c70 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 _0x2020B:
                +
000c71 3005     +CPI R16 , LOW ( 5 )
000c72 e0e0     +LDI R30 , HIGH ( 5 )
000c73 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000c74 f49c      	BRGE _0x2020C
000c75 940e 1b74 	CALL SUBOPT_0x5A
000c77 940e 1b7f 	CALL SUBOPT_0x5C
000c79 8dae      	LDD  R26,Y+30
000c7a 8dbf      	LDD  R27,Y+30+1
000c7b 17ae      	CP   R26,R30
000c7c 07bf      	CPC  R27,R31
000c7d f438      	BRSH _0x2020D
000c7e 940e 1b74 	CALL SUBOPT_0x5A
000c80 940e 1b7f 	CALL SUBOPT_0x5C
000c82 8fee      	STD  Y+30,R30
000c83 8fff      	STD  Y+30+1,R31
                +
000c84 a30a     +STD Y + 34 , R16
                 	__PUTBSR 16,34
                 _0x2020D:
                +
000c85 5f0f     +SUBI R16 , LOW ( - 1 )
000c86 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c87 cfe9      	RJMP _0x2020B
                 _0x2020C:
                 ; 0001 0954 		hc(4, 10); wn16s(admax);
000c88 940e 1bc0 	CALL SUBOPT_0x69
000c8a 8dee      	LDD  R30,Y+30
000c8b 8dff      	LDD  R31,Y+30+1
000c8c 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 0955 	}
000c8e cfc0      	RJMP _0x20203
                 _0x20205:
                 ; 0001 0956 	//test gia tri doc line
                 ; 0001 0957 	online = 0;
000c8f e0e0      	LDI  R30,LOW(0)
                +
000c90 a7ed     +STD Y + 45 , R30
000c91 a7ee     +STD Y + 45 + 1 , R30
000c92 a7ef     +STD Y + 45 + 2 , R30
000c93 abe8     +STD Y + 45 + 3 , R30
                 	__CLRD1S 45
                 ; 0001 0958 	while (1)
                 _0x2020E:
                 ; 0001 0959 	{
                 ; 0001 095A 		//doc gia tri cam bien
                 ; 0001 095B 		readline();
000c94 de02      	RCALL _readline
                 ; 0001 095C 		for (i = 0; i < 5; i++)
                +
000c95 e000     +LDI R16 , LOW ( 0 )
000c96 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20212:
                +
000c97 3005     +CPI R16 , LOW ( 5 )
000c98 e0e0     +LDI R30 , HIGH ( 5 )
000c99 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000c9a f014      	BRLT PC+3
000c9b 940c 0ce4 	JMP _0x20213
                 ; 0001 095D 		{
                 ; 0001 095E 			value = IRLINE[i];
000c9d 940e 1b74 	CALL SUBOPT_0x5A
000c9f 940e 1b7f 	CALL SUBOPT_0x5C
000ca1 2766      	CLR  R22
000ca2 2777      	CLR  R23
                +
000ca3 abe9     +STD Y + 49 , R30
000ca4 abfa     +STD Y + 49 + 1 , R31
000ca5 ab6b     +STD Y + 49 + 2 , R22
000ca6 ab7c     +STD Y + 49 + 3 , R23
                 	__PUTD1S 49
                 ; 0001 095F 			if (value < 280) online = 1;
                +
000ca7 a9a9     +LDD R26 , Y + 49
000ca8 a9ba     +LDD R27 , Y + 49 + 1
000ca9 a98b     +LDD R24 , Y + 49 + 2
000caa a99c     +LDD R25 , Y + 49 + 3
                 	__GETD2S 49
                +
000cab 31a8     +CPI R26 , LOW ( 0x118 )
000cac e0e1     +LDI R30 , HIGH ( 0x118 )
000cad 07be     +CPC R27 , R30
000cae e0e0     +LDI R30 , BYTE3 ( 0x118 )
000caf 078e     +CPC R24 , R30
000cb0 e0e0     +LDI R30 , BYTE4 ( 0x118 )
000cb1 079e     +CPC R25 , R30
                 	__CPD2N 0x118
000cb2 f444      	BRGE _0x20214
                +
000cb3 e0e1     +LDI R30 , LOW ( 0x1 )
000cb4 e0f0     +LDI R31 , HIGH ( 0x1 )
000cb5 e060     +LDI R22 , BYTE3 ( 0x1 )
000cb6 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
                +
000cb7 a7ed     +STD Y + 45 , R30
000cb8 a7fe     +STD Y + 45 + 1 , R31
000cb9 a76f     +STD Y + 45 + 2 , R22
000cba ab78     +STD Y + 45 + 3 , R23
                 	__PUTD1S 45
                 ; 0001 0960 			avrg = avrg + i * 1000 * value;
                 _0x20214:
000cbb 01f8      	MOVW R30,R16
000cbc eea8      	LDI  R26,LOW(1000)
000cbd e0b3      	LDI  R27,HIGH(1000)
000cbe 940e 1fdc 	CALL __MULW12
000cc0 01df      	MOVW R26,R30
                +
000cc1 a9e9     +LDD R30 , Y + 49
000cc2 a9fa     +LDD R31 , Y + 49 + 1
000cc3 a96b     +LDD R22 , Y + 49 + 2
000cc4 a97c     +LDD R23 , Y + 49 + 3
                 	__GETD1S 49
000cc5 940e 1fa9 	CALL __CWD2
000cc7 940e 1fe1 	CALL __MULD12
                +
000cc9 a5a9     +LDD R26 , Y + 41
000cca a5ba     +LDD R27 , Y + 41 + 1
000ccb a58b     +LDD R24 , Y + 41 + 2
000ccc a59c     +LDD R25 , Y + 41 + 3
                 	__GETD2S 41
000ccd 940e 1f88 	CALL __ADDD12
                +
000ccf a7e9     +STD Y + 41 , R30
000cd0 a7fa     +STD Y + 41 + 1 , R31
000cd1 a76b     +STD Y + 41 + 2 , R22
000cd2 a77c     +STD Y + 41 + 3 , R23
                 	__PUTD1S 41
                 ; 0001 0961 			sum = sum + value;
                +
000cd3 a9e9     +LDD R30 , Y + 49
000cd4 a9fa     +LDD R31 , Y + 49 + 1
000cd5 a96b     +LDD R22 , Y + 49 + 2
000cd6 a97c     +LDD R23 , Y + 49 + 3
                 	__GETD1S 49
                +
000cd7 a1ad     +LDD R26 , Y + 37
000cd8 a1be     +LDD R27 , Y + 37 + 1
000cd9 a18f     +LDD R24 , Y + 37 + 2
000cda a598     +LDD R25 , Y + 37 + 3
                 	__GETD2S 37
000cdb 940e 1f88 	CALL __ADDD12
                +
000cdd a3ed     +STD Y + 37 , R30
000cde a3fe     +STD Y + 37 + 1 , R31
000cdf a36f     +STD Y + 37 + 2 , R22
000ce0 a778     +STD Y + 37 + 3 , R23
                 	__PUTD1S 37
                 ; 0001 0962 		}
                +
000ce1 5f0f     +SUBI R16 , LOW ( - 1 )
000ce2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ce3 cfb3      	RJMP _0x20212
                 _0x20213:
                 ; 0001 0963 		//hc(1,10);wn16s(online);
                 ; 0001 0964 		if (online == 1)
                +
000ce4 a5ad     +LDD R26 , Y + 45
000ce5 a5be     +LDD R27 , Y + 45 + 1
000ce6 a58f     +LDD R24 , Y + 45 + 2
000ce7 a998     +LDD R25 , Y + 45 + 3
                 	__GETD2S 45
000ce8 940e 1bd7 	CALL SUBOPT_0x6C
000cea f501      	BRNE _0x20215
                 ; 0001 0965 		{
                 ; 0001 0966 			valueline = (int)(avrg / sum);
                +
000ceb a1ed     +LDD R30 , Y + 37
000cec a1fe     +LDD R31 , Y + 37 + 1
000ced a16f     +LDD R22 , Y + 37 + 2
000cee a578     +LDD R23 , Y + 37 + 3
                 	__GETD1S 37
                +
000cef a5a9     +LDD R26 , Y + 41
000cf0 a5ba     +LDD R27 , Y + 41 + 1
000cf1 a58b     +LDD R24 , Y + 41 + 2
000cf2 a59c     +LDD R25 , Y + 41 + 3
                 	__GETD2S 41
000cf3 940e 2036 	CALL __DIVD21
000cf5 2766      	CLR  R22
000cf6 2777      	CLR  R23
000cf7 940e 1fa4 	CALL __CWD1
                +
000cf9 abed     +STD Y + 53 , R30
000cfa abfe     +STD Y + 53 + 1 , R31
000cfb ab6f     +STD Y + 53 + 2 , R22
000cfc af78     +STD Y + 53 + 3 , R23
                 	__PUTD1S 53
                 ; 0001 0967 			// hc(2,10);wn16s(valueline);
                 ; 0001 0968 			online = 0;
000cfd e0e0      	LDI  R30,LOW(0)
                +
000cfe a7ed     +STD Y + 45 , R30
000cff a7ee     +STD Y + 45 + 1 , R30
000d00 a7ef     +STD Y + 45 + 2 , R30
000d01 abe8     +STD Y + 45 + 3 , R30
                 	__CLRD1S 45
                 ; 0001 0969 			avrg = 0;
                +
000d02 a7e9     +STD Y + 41 , R30
000d03 a7ea     +STD Y + 41 + 1 , R30
000d04 a7eb     +STD Y + 41 + 2 , R30
000d05 a7ec     +STD Y + 41 + 3 , R30
                 	__CLRD1S 41
                 ; 0001 096A 			sum = 0;
                +
000d06 a3ed     +STD Y + 37 , R30
000d07 a3ee     +STD Y + 37 + 1 , R30
000d08 a3ef     +STD Y + 37 + 2 , R30
000d09 a7e8     +STD Y + 37 + 3 , R30
                 	__CLRD1S 37
                 ; 0001 096B 		}
                 ; 0001 096C 		else
000d0a c019      	RJMP _0x20216
                 _0x20215:
                 ; 0001 096D 		{
                 ; 0001 096E 			if (lastvalueline > 1935)
                +
000d0b ada9     +LDD R26 , Y + 57
000d0c adba     +LDD R27 , Y + 57 + 1
000d0d ad8b     +LDD R24 , Y + 57 + 2
000d0e ad9c     +LDD R25 , Y + 57 + 3
                 	__GETD2S 57
                +
000d0f 39a0     +CPI R26 , LOW ( 0x790 )
000d10 e0e7     +LDI R30 , HIGH ( 0x790 )
000d11 07be     +CPC R27 , R30
000d12 e0e0     +LDI R30 , BYTE3 ( 0x790 )
000d13 078e     +CPC R24 , R30
000d14 e0e0     +LDI R30 , BYTE4 ( 0x790 )
000d15 079e     +CPC R25 , R30
                 	__CPD2N 0x790
000d16 f02c      	BRLT _0x20217
                 ; 0001 096F 				valueline = 2000;
                +
000d17 ede0     +LDI R30 , LOW ( 0x7D0 )
000d18 e0f7     +LDI R31 , HIGH ( 0x7D0 )
000d19 e060     +LDI R22 , BYTE3 ( 0x7D0 )
000d1a e070     +LDI R23 , BYTE4 ( 0x7D0 )
                 	__GETD1N 0x7D0
000d1b c004      	RJMP _0x2033F
                 ; 0001 0970 			else
                 _0x20217:
                 ; 0001 0971 				valueline = 1800;
                +
000d1c e0e8     +LDI R30 , LOW ( 0x708 )
000d1d e0f7     +LDI R31 , HIGH ( 0x708 )
000d1e e060     +LDI R22 , BYTE3 ( 0x708 )
000d1f e070     +LDI R23 , BYTE4 ( 0x708 )
                 	__GETD1N 0x708
                 _0x2033F:
                +
000d20 abed     +STD Y + 53 , R30
000d21 abfe     +STD Y + 53 + 1 , R31
000d22 ab6f     +STD Y + 53 + 2 , R22
000d23 af78     +STD Y + 53 + 3 , R23
                 	__PUTD1S 53
                 ; 0001 0972 		}
                 _0x20216:
                 ; 0001 0973 		err = 1935 - valueline;
                +
000d24 a9ad     +LDD R26 , Y + 53
000d25 a9be     +LDD R27 , Y + 53 + 1
000d26 a98f     +LDD R24 , Y + 53 + 2
000d27 ad98     +LDD R25 , Y + 53 + 3
                 	__GETD2S 53
                +
000d28 e8ef     +LDI R30 , LOW ( 0x78F )
000d29 e0f7     +LDI R31 , HIGH ( 0x78F )
000d2a e060     +LDI R22 , BYTE3 ( 0x78F )
000d2b e070     +LDI R23 , BYTE4 ( 0x78F )
                 	__GETD1N 0x78F
000d2c 940e 1f8d 	CALL __SUBD12
000d2e 940e 1e11 	CALL __CDF1
000d30 940e 19c7 	CALL SUBOPT_0x28
                 ; 0001 0974 		if (err > 100) err = 100;
000d32 940e 1bdf 	CALL SUBOPT_0x6D
                +
000d34 e0e0     +LDI R30 , LOW ( 0x42C80000 )
000d35 e0f0     +LDI R31 , HIGH ( 0x42C80000 )
000d36 ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
000d37 e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000d38 940e 1f2e 	CALL __CMPF12
000d3a f009      	BREQ PC+2
000d3b f410      	BRCC PC+3
000d3c 940c 0d40 	JMP  _0x20219
000d3e 940e 19c7 	CALL SUBOPT_0x28
                 ; 0001 0975 		if (err < -100) err = -100;
                 _0x20219:
000d40 940e 1bdf 	CALL SUBOPT_0x6D
                +
000d42 e0e0     +LDI R30 , LOW ( 0xC2C80000 )
000d43 e0f0     +LDI R31 , HIGH ( 0xC2C80000 )
000d44 ec68     +LDI R22 , BYTE3 ( 0xC2C80000 )
000d45 ec72     +LDI R23 , BYTE4 ( 0xC2C80000 )
                 	__GETD1N 0xC2C80000
000d46 940e 1f2e 	CALL __CMPF12
000d48 f410      	BRSH _0x2021A
000d49 940e 19c7 	CALL SUBOPT_0x28
                 ; 0001 0976 		sumi = sumi + err / 35;
                 _0x2021A:
000d4b 940e 1bdf 	CALL SUBOPT_0x6D
                +
000d4d e0e0     +LDI R30 , LOW ( 0x420C0000 )
000d4e e0f0     +LDI R31 , HIGH ( 0x420C0000 )
000d4f e06c     +LDI R22 , BYTE3 ( 0x420C0000 )
000d50 e472     +LDI R23 , BYTE4 ( 0x420C0000 )
                 	__GETD1N 0x420C0000
000d51 940e 1be4 	CALL SUBOPT_0x6E
000d53 940e 19b9 	CALL SUBOPT_0x25
                 ; 0001 0977 		if (sumi > 6) sumi = 6;
000d55 940e 1bed 	CALL SUBOPT_0x6F
                +
000d57 e0e0     +LDI R30 , LOW ( 0x40C00000 )
000d58 e0f0     +LDI R31 , HIGH ( 0x40C00000 )
000d59 ec60     +LDI R22 , BYTE3 ( 0x40C00000 )
000d5a e470     +LDI R23 , BYTE4 ( 0x40C00000 )
                 	__GETD1N 0x40C00000
000d5b 940e 1f2e 	CALL __CMPF12
000d5d f009      	BREQ PC+2
000d5e f410      	BRCC PC+3
000d5f 940c 0d63 	JMP  _0x2021B
000d61 940e 19b9 	CALL SUBOPT_0x25
                 ; 0001 0978 		if (sumi < -6) sumi = -6;
                 _0x2021B:
000d63 940e 1bed 	CALL SUBOPT_0x6F
                +
000d65 e0e0     +LDI R30 , LOW ( 0xC0C00000 )
000d66 e0f0     +LDI R31 , HIGH ( 0xC0C00000 )
000d67 ec60     +LDI R22 , BYTE3 ( 0xC0C00000 )
000d68 ec70     +LDI R23 , BYTE4 ( 0xC0C00000 )
                 	__GETD1N 0xC0C00000
000d69 940e 1f2e 	CALL __CMPF12
000d6b f410      	BRSH _0x2021C
000d6c 940e 19b9 	CALL SUBOPT_0x25
                 ; 0001 0979 		udk = err / 7 + sumi + (err - lasterr) / 30;
                 _0x2021C:
000d6e 940e 1bdf 	CALL SUBOPT_0x6D
                +
000d70 e0e0     +LDI R30 , LOW ( 0x40E00000 )
000d71 e0f0     +LDI R31 , HIGH ( 0x40E00000 )
000d72 ee60     +LDI R22 , BYTE3 ( 0x40E00000 )
000d73 e470     +LDI R23 , BYTE4 ( 0x40E00000 )
                 	__GETD1N 0x40E00000
000d74 940e 1be4 	CALL SUBOPT_0x6E
000d76 937f      	PUSH R23
000d77 936f      	PUSH R22
000d78 93ff      	PUSH R31
000d79 93ef      	PUSH R30
000d7a 940e 1b18 	CALL SUBOPT_0x4A
000d7c 940e 19d5 	CALL SUBOPT_0x2A
000d7e 01df      	MOVW R26,R30
000d7f 01cb      	MOVW R24,R22
                +
000d80 e0e0     +LDI R30 , LOW ( 0x41F00000 )
000d81 e0f0     +LDI R31 , HIGH ( 0x41F00000 )
000d82 ef60     +LDI R22 , BYTE3 ( 0x41F00000 )
000d83 e471     +LDI R23 , BYTE4 ( 0x41F00000 )
                 	__GETD1N 0x41F00000
000d84 940e 1ee9 	CALL __DIVF21
000d86 91af      	POP  R26
000d87 91bf      	POP  R27
000d88 918f      	POP  R24
000d89 919f      	POP  R25
000d8a 940e 19ad 	CALL SUBOPT_0x23
                 ; 0001 097A 		if (udk > 10) { udk = 9; sumi = 0; }
000d8c 940e 1bf2 	CALL SUBOPT_0x70
000d8e 940e 1f2e 	CALL __CMPF12
000d90 f009      	BREQ PC+2
000d91 f410      	BRCC PC+3
000d92 940c 0d9a 	JMP  _0x2021D
                +
000d94 e0e0     +LDI R30 , LOW ( 0x41100000 )
000d95 e0f0     +LDI R31 , HIGH ( 0x41100000 )
000d96 e160     +LDI R22 , BYTE3 ( 0x41100000 )
000d97 e471     +LDI R23 , BYTE4 ( 0x41100000 )
                 	__GETD1N 0x41100000
000d98 940e 1bf8 	CALL SUBOPT_0x71
                 ; 0001 097B 		if (udk < -10){ udk = -9; sumi = 0; }
                 _0x2021D:
000d9a 940e 19b4 	CALL SUBOPT_0x24
                +
000d9c e0e0     +LDI R30 , LOW ( 0xC1200000 )
000d9d e0f0     +LDI R31 , HIGH ( 0xC1200000 )
000d9e e260     +LDI R22 , BYTE3 ( 0xC1200000 )
000d9f ec71     +LDI R23 , BYTE4 ( 0xC1200000 )
                 	__GETD1N 0xC1200000
000da0 940e 1f2e 	CALL __CMPF12
000da2 f430      	BRSH _0x2021E
                +
000da3 e0e0     +LDI R30 , LOW ( 0xC1100000 )
000da4 e0f0     +LDI R31 , HIGH ( 0xC1100000 )
000da5 e160     +LDI R22 , BYTE3 ( 0xC1100000 )
000da6 ec71     +LDI R23 , BYTE4 ( 0xC1100000 )
                 	__GETD1N 0xC1100000
000da7 940e 1bf8 	CALL SUBOPT_0x71
                 ; 0001 097C 		//hc(5,10);wn16s(udk);
                 ; 0001 097D 		vMLtoi(10 + udk); vMRtoi(10 - udk);
                 _0x2021E:
                +
000da9 89ec     +LDD R30 , Y + 20
000daa 89fd     +LDD R31 , Y + 20 + 1
000dab 896e     +LDD R22 , Y + 20 + 2
000dac 897f     +LDD R23 , Y + 20 + 3
                 	__GETD1S 20
                +
000dad e0a0     +LDI R26 , LOW ( 0x41200000 )
000dae e0b0     +LDI R27 , HIGH ( 0x41200000 )
000daf e280     +LDI R24 , BYTE3 ( 0x41200000 )
000db0 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
000db1 940e 1e4b 	CALL __ADDF12
000db3 940e 1dd8 	CALL __CFD1U
000db5 93ea      	ST   -Y,R30
000db6 940e 0546 	CALL _vMLtoi
000db8 940e 1bf2 	CALL SUBOPT_0x70
000dba 940e 1e44 	CALL __SUBF12
000dbc 940e 1dd8 	CALL __CFD1U
000dbe 93ea      	ST   -Y,R30
000dbf 940e 055e 	CALL _vMRtoi
                 ; 0001 097E 
                 ; 0001 097F 		lastvalueline = valueline;
                +
000dc1 a9ed     +LDD R30 , Y + 53
000dc2 a9fe     +LDD R31 , Y + 53 + 1
000dc3 a96f     +LDD R22 , Y + 53 + 2
000dc4 ad78     +LDD R23 , Y + 53 + 3
                 	__GETD1S 53
                +
000dc5 afe9     +STD Y + 57 , R30
000dc6 affa     +STD Y + 57 + 1 , R31
000dc7 af6b     +STD Y + 57 + 2 , R22
000dc8 af7c     +STD Y + 57 + 3 , R23
                 	__PUTD1S 57
                 ; 0001 0980 		lasterr = err;
000dc9 940e 1c02 	CALL SUBOPT_0x72
                +
000dcb 87e8     +STD Y + 8 , R30
000dcc 87f9     +STD Y + 8 + 1 , R31
000dcd 876a     +STD Y + 8 + 2 , R22
000dce 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ; 0001 0981 	}
000dcf cec4      	RJMP _0x2020E
                 ; 0001 0982 
                 ; 0001 0983 	while (keyKT != 0)
                 _0x2021F:
000dd0 9b98      	SBIS 0x13,0
000dd1 c0e3      	RJMP _0x20221
                 ; 0001 0984 	{
                 ; 0001 0985 		//doc gia tri cam bien
                 ; 0001 0986 		readline();
000dd2 940e 1bc5 	CALL SUBOPT_0x6A
                 ; 0001 0987 		admin = IRLINE[0]; imin = 0;
                 ; 0001 0988 		for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20223:
                +
000dd4 3005     +CPI R16 , LOW ( 5 )
000dd5 e0e0     +LDI R30 , HIGH ( 5 )
000dd6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000dd7 f48c      	BRGE _0x20224
000dd8 940e 1b74 	CALL SUBOPT_0x5A
000dda 940e 1b7f 	CALL SUBOPT_0x5C
000ddc 940e 1bd2 	CALL SUBOPT_0x6B
000dde f438      	BRSH _0x20225
000ddf 940e 1b74 	CALL SUBOPT_0x5A
000de1 940e 1b7f 	CALL SUBOPT_0x5C
000de3 a3eb      	STD  Y+35,R30
000de4 a3fc      	STD  Y+35+1,R31
000de5 01a8      	MOVW R20,R16
                 _0x20225:
                +
000de6 5f0f     +SUBI R16 , LOW ( - 1 )
000de7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000de8 cfeb      	RJMP _0x20223
                 _0x20224:
                 ; 0001 0989 		hc(2, 10); wn16s(iminlast);
000de9 940e 1c07 	CALL SUBOPT_0x73
000deb 940e 1b58 	CALL SUBOPT_0x55
000ded 81ee      	LDD  R30,Y+6
000dee 81ff      	LDD  R31,Y+6+1
000def 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 098A 		hc(3, 10); wn16s(imin);
000df1 940e 1bbb 	CALL SUBOPT_0x68
000df3 935a      	ST   -Y,R21
000df4 934a      	ST   -Y,R20
000df5 940e 0460 	CALL _wn16s
                 ; 0001 098B 		hc(4, 10); wn16s(admin);
000df7 940e 1bc0 	CALL SUBOPT_0x69
000df9 a1eb      	LDD  R30,Y+35
000dfa a1fc      	LDD  R31,Y+35+1
000dfb 940e 1b3e 	CALL SUBOPT_0x50
                 ; 0001 098C 
                 ; 0001 098D 		if ((imin - iminlast > 1) || (imin - iminlast < -1))  //tranh truong hop nhay bo trang thai
000dfd 81ae      	LDD  R26,Y+6
000dfe 81bf      	LDD  R27,Y+6+1
000dff 01fa      	MOVW R30,R20
000e00 1bea      	SUB  R30,R26
000e01 0bfb      	SBC  R31,R27
000e02 01df      	MOVW R26,R30
000e03 9732      	SBIW R30,2
000e04 f42c      	BRGE _0x20227
000e05 01fd      	MOVW R30,R26
000e06 3fef      	CPI  R30,LOW(0xFFFF)
000e07 efaf      	LDI  R26,HIGH(0xFFFF)
000e08 07fa      	CPC  R31,R26
000e09 f40c      	BRGE _0x20226
                 _0x20227:
                 ; 0001 098E 		{
                 ; 0001 098F 		}
                 ; 0001 0990 		else
000e0a c03c      	RJMP _0x20229
                 _0x20226:
                 ; 0001 0991 		{
                 ; 0001 0992 			switch (imin)
000e0b 01fa      	MOVW R30,R20
                 ; 0001 0993 			{
                 ; 0001 0994 			case 0:
000e0c 9730      	SBIW R30,0
000e0d f449      	BRNE _0x2022D
                 ; 0001 0995 				vMLtoi(1); vMRtoi(15);
000e0e 940e 1b9d 	CALL SUBOPT_0x61
000e10 940e 1ba5 	CALL SUBOPT_0x63
                 ; 0001 0996 				//flagblindT = 0;
                 ; 0001 0997 				flagblindP = 1;
000e12 e0e1      	LDI  R30,LOW(1)
000e13 e0f0      	LDI  R31,HIGH(1)
000e14 8fe8      	STD  Y+24,R30
000e15 8ff9      	STD  Y+24+1,R31
                 ; 0001 0998 				break;
000e16 c02e      	RJMP _0x2022C
                 ; 0001 0999 			case 1:
                 _0x2022D:
000e17 30e1      	CPI  R30,LOW(0x1)
000e18 e0a0      	LDI  R26,HIGH(0x1)
000e19 07fa      	CPC  R31,R26
000e1a f449      	BRNE _0x2022E
                 ; 0001 099A 				vMLtoi(2); vMRtoi(8);
000e1b e0e2      	LDI  R30,LOW(2)
000e1c 93ea      	ST   -Y,R30
000e1d 940e 0546 	CALL _vMLtoi
000e1f e0e8      	LDI  R30,LOW(8)
000e20 93ea      	ST   -Y,R30
000e21 940e 055e 	CALL _vMRtoi
                 ; 0001 099B 				break;
000e23 c021      	RJMP _0x2022C
                 ; 0001 099C 			case 2:
                 _0x2022E:
000e24 30e2      	CPI  R30,LOW(0x2)
000e25 e0a0      	LDI  R26,HIGH(0x2)
000e26 07fa      	CPC  R31,R26
000e27 f449      	BRNE _0x2022F
                 ; 0001 099D 				vMLtoi(10); vMRtoi(10);
000e28 e0ea      	LDI  R30,LOW(10)
000e29 93ea      	ST   -Y,R30
000e2a 940e 0546 	CALL _vMLtoi
000e2c e0ea      	LDI  R30,LOW(10)
000e2d 93ea      	ST   -Y,R30
000e2e 940e 055e 	CALL _vMRtoi
                 ; 0001 099E 				break;
000e30 c014      	RJMP _0x2022C
                 ; 0001 099F 			case 3:
                 _0x2022F:
000e31 30e3      	CPI  R30,LOW(0x3)
000e32 e0a0      	LDI  R26,HIGH(0x3)
000e33 07fa      	CPC  R31,R26
000e34 f421      	BRNE _0x20230
                 ; 0001 09A0 				vMLtoi(8); vMRtoi(2);
000e35 e0e8      	LDI  R30,LOW(8)
000e36 940e 1c0c 	CALL SUBOPT_0x74
                 ; 0001 09A1 				break;
000e38 c00c      	RJMP _0x2022C
                 ; 0001 09A2 			case 4:
                 _0x20230:
000e39 30e4      	CPI  R30,LOW(0x4)
000e3a e0a0      	LDI  R26,HIGH(0x4)
000e3b 07fa      	CPC  R31,R26
000e3c f441      	BRNE _0x20232
                 ; 0001 09A3 				vMLtoi(15); vMRtoi(1);
000e3d 940e 1ba9 	CALL SUBOPT_0x64
000e3f 940e 1bad 	CALL SUBOPT_0x65
                 ; 0001 09A4 				flagblindT = 1;
000e41 e0e1      	LDI  R30,LOW(1)
000e42 e0f0      	LDI  R31,HIGH(1)
000e43 8fea      	STD  Y+26,R30
000e44 8ffb      	STD  Y+26+1,R31
                 ; 0001 09A5 				//flagblindP = 0;
                 ; 0001 09A6 				break;
                 ; 0001 09A7 			default:
                 _0x20232:
                 ; 0001 09A8 				// vMLtoi(5); vMRtoi(5) ;
                 ; 0001 09A9 				break;
                 ; 0001 09AA 			}
                 _0x2022C:
                 ; 0001 09AB 
                 ; 0001 09AC 			iminlast = imin;
                +
000e45 834e     +STD Y + 6 , R20
000e46 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 09AD 		}
                 _0x20229:
                 ; 0001 09AE 
                 ; 0001 09AF 
                 ; 0001 09B0 		while (flagblindT == 1 && keyKT != 0) //lac duong ben trai
                 _0x20233:
000e47 8daa      	LDD  R26,Y+26
000e48 8dbb      	LDD  R27,Y+26+1
000e49 9711      	SBIW R26,1
000e4a f419      	BRNE _0x20236
000e4b 940e 1bb6 	CALL SUBOPT_0x67
000e4d f409      	BRNE _0x20237
                 _0x20236:
000e4e c026      	RJMP _0x20235
                 _0x20237:
                 ; 0001 09B1 		{
                 ; 0001 09B2 			vMLtoi(20); vMRtoi(2);
000e4f e1e4      	LDI  R30,LOW(20)
000e50 940e 1c0c 	CALL SUBOPT_0x74
                 ; 0001 09B3 			readline();
000e52 940e 1bc5 	CALL SUBOPT_0x6A
                 ; 0001 09B4 			admin = IRLINE[0]; imin = 0;
                 ; 0001 09B5 			for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20239:
                +
000e54 3005     +CPI R16 , LOW ( 5 )
000e55 e0e0     +LDI R30 , HIGH ( 5 )
000e56 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000e57 f48c      	BRGE _0x2023A
000e58 940e 1b74 	CALL SUBOPT_0x5A
000e5a 940e 1b7f 	CALL SUBOPT_0x5C
000e5c 940e 1bd2 	CALL SUBOPT_0x6B
000e5e f438      	BRSH _0x2023B
000e5f 940e 1b74 	CALL SUBOPT_0x5A
000e61 940e 1b7f 	CALL SUBOPT_0x5C
000e63 a3eb      	STD  Y+35,R30
000e64 a3fc      	STD  Y+35+1,R31
000e65 01a8      	MOVW R20,R16
                 _0x2023B:
                +
000e66 5f0f     +SUBI R16 , LOW ( - 1 )
000e67 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000e68 cfeb      	RJMP _0x20239
                 _0x2023A:
                 ; 0001 09B6 			iminlast = imin;
                +
000e69 834e     +STD Y + 6 , R20
000e6a 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 09B7 			if (IRLINE[2] < 310)  flagblindT = 0;
000e6b 940e 1b7a 	CALL SUBOPT_0x5B
000e6d 33a6      	CPI  R26,LOW(0x136)
000e6e e0e1      	LDI  R30,HIGH(0x136)
000e6f 07be      	CPC  R27,R30
000e70 f418      	BRSH _0x2023C
000e71 e0e0      	LDI  R30,LOW(0)
000e72 8fea      	STD  Y+26,R30
000e73 8feb      	STD  Y+26+1,R30
                 ; 0001 09B8 
                 ; 0001 09B9 		}
                 _0x2023C:
000e74 cfd2      	RJMP _0x20233
                 _0x20235:
                 ; 0001 09BA 		while (flagblindP == 1 && keyKT != 0) //lac duong ben phai
                 _0x2023D:
000e75 8da8      	LDD  R26,Y+24
000e76 8db9      	LDD  R27,Y+24+1
000e77 9711      	SBIW R26,1
000e78 f419      	BRNE _0x20240
000e79 940e 1bb6 	CALL SUBOPT_0x67
000e7b f409      	BRNE _0x20241
                 _0x20240:
000e7c c029      	RJMP _0x2023F
                 _0x20241:
                 ; 0001 09BB 		{
                 ; 0001 09BC 			vMLtoi(2); vMRtoi(20);
000e7d e0e2      	LDI  R30,LOW(2)
000e7e 93ea      	ST   -Y,R30
000e7f 940e 0546 	CALL _vMLtoi
000e81 940e 1ba1 	CALL SUBOPT_0x62
                 ; 0001 09BD 			readline();
000e83 940e 1bc5 	CALL SUBOPT_0x6A
                 ; 0001 09BE 			admin = IRLINE[0]; imin = 0;
                 ; 0001 09BF 			for (i = 1; i<5; i++){ if (admin>IRLINE[i]){ admin = IRLINE[i]; imin = i; } }
                 _0x20243:
                +
000e85 3005     +CPI R16 , LOW ( 5 )
000e86 e0e0     +LDI R30 , HIGH ( 5 )
000e87 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000e88 f48c      	BRGE _0x20244
000e89 940e 1b74 	CALL SUBOPT_0x5A
000e8b 940e 1b7f 	CALL SUBOPT_0x5C
000e8d 940e 1bd2 	CALL SUBOPT_0x6B
000e8f f438      	BRSH _0x20245
000e90 940e 1b74 	CALL SUBOPT_0x5A
000e92 940e 1b7f 	CALL SUBOPT_0x5C
000e94 a3eb      	STD  Y+35,R30
000e95 a3fc      	STD  Y+35+1,R31
000e96 01a8      	MOVW R20,R16
                 _0x20245:
                +
000e97 5f0f     +SUBI R16 , LOW ( - 1 )
000e98 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000e99 cfeb      	RJMP _0x20243
                 _0x20244:
                 ; 0001 09C0 			iminlast = imin;
                +
000e9a 834e     +STD Y + 6 , R20
000e9b 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0001 09C1 			if (IRLINE[2] < 310)  flagblindP = 0;
000e9c 940e 1b7a 	CALL SUBOPT_0x5B
000e9e 33a6      	CPI  R26,LOW(0x136)
000e9f e0e1      	LDI  R30,HIGH(0x136)
000ea0 07be      	CPC  R27,R30
000ea1 f418      	BRSH _0x20246
000ea2 e0e0      	LDI  R30,LOW(0)
000ea3 8fe8      	STD  Y+24,R30
000ea4 8fe9      	STD  Y+24+1,R30
                 ; 0001 09C2 
                 ; 0001 09C3 		}
                 _0x20246:
000ea5 cfcf      	RJMP _0x2023D
                 _0x2023F:
                 ; 0001 09C4 
                 ; 0001 09C5 
                 ; 0001 09C6 		demled++;
000ea6 8dec      	LDD  R30,Y+28
000ea7 8dfd      	LDD  R31,Y+28+1
000ea8 9631      	ADIW R30,1
000ea9 8fec      	STD  Y+28,R30
000eaa 8ffd      	STD  Y+28+1,R31
                 ; 0001 09C7 		if (demled > 30){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
000eab 8dac      	LDD  R26,Y+28
000eac 8dbd      	LDD  R27,Y+28+1
000ead 975f      	SBIW R26,31
000eae f028      	BRLO _0x20247
000eaf e0e0      	LDI  R30,LOW(0)
000eb0 8fec      	STD  Y+28,R30
000eb1 8fed      	STD  Y+28+1,R30
000eb2 940e 1b70 	CALL SUBOPT_0x59
                 ; 0001 09C8 	}
                 _0x20247:
000eb4 cf1b      	RJMP _0x2021F
                 _0x20221:
                 ; 0001 09C9 }
000eb5 940e 20cf 	CALL __LOADLOCR6
000eb7 96ed      	ADIW R28,61
000eb8 9508      	RET
                 
                 	.DSEG
                 _0x201FA:
00028a           	.BYTE 0x13
                 ;//========================================================
                 ;void bluetooth()
                 ; 0001 09CC {
                 
                 	.CSEG
                 _bluetooth:
                 ; 0001 09CD 	unsigned char kytu;
                 ; 0001 09CE 	unsigned int demled;
                 ; 0001 09CF 
                 ; 0001 09D0 	LcdClear();
000eb9 940e 20ca 	CALL __SAVELOCR4
                 ;	kytu -> R17
                 ;	demled -> R18,R19
000ebb 940e 1c13 	CALL SUBOPT_0x75
                 ; 0001 09D1 	hc(0, 10);
000ebd 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 09D2 	ws("BLUETOOTH");
                +
000ebf e9ed     +LDI R30 , LOW ( _0x20248 + ( 0 ) )
000ec0 e0f2     +LDI R31 , HIGH ( _0x20248 + ( 0 ) )
                 	__POINTW1MN _0x20248,0
000ec1 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 09D3 	hc(1, 25);
000ec3 940e 1b42 	CALL SUBOPT_0x51
000ec5 e1e9      	LDI  R30,LOW(25)
000ec6 e0f0      	LDI  R31,HIGH(25)
000ec7 940e 1c16 	CALL SUBOPT_0x76
                 ; 0001 09D4 	ws("DRIVE");
                +
000ec9 eae7     +LDI R30 , LOW ( _0x20248 + ( 10 ) )
000eca e0f2     +LDI R31 , HIGH ( _0x20248 + ( 10 ) )
                 	__POINTW1MN _0x20248,10
000ecb 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 09D5 
                 ; 0001 09D6 	LEDL = 1; LEDR = 1;
000ecd 9aac      	SBI  0x15,4
000ece 9aad      	SBI  0x15,5
                 ; 0001 09D7 
                 ; 0001 09D8 	while (keyKT != 0)
                 _0x2024D:
000ecf 9b98      	SBIS 0x13,0
000ed0 c039      	RJMP _0x2024F
                 ; 0001 09D9 	{
                 ; 0001 09DA 		LEDL = 1; LEDR = 1;
000ed1 940e 1c1a 	CALL SUBOPT_0x77
                 ; 0001 09DB 		delay_ms(100);
                 ; 0001 09DC 		LEDL = 0; LEDR = 0;
                 ; 0001 09DD 		delay_ms(100);
                 ; 0001 09DE 
                 ; 0001 09DF 		if (rx_counter)
000ed3 91e0 0538 	LDS  R30,_rx_counter
000ed5 30e0      	CPI  R30,0
000ed6 f191      	BREQ _0x20258
                 ; 0001 09E0 		{
                 ; 0001 09E1 			//LcdClear();
                 ; 0001 09E2 			hc(2, 42);
000ed7 940e 1c07 	CALL SUBOPT_0x73
000ed9 940e 1b61 	CALL SUBOPT_0x57
                 ; 0001 09E3 			kytu = getchar();
000edb 940e 04b7 	CALL _getchar
000edd 2f1e      	MOV  R17,R30
                 ; 0001 09E4 			LcdCharacter(kytu);
000ede 931a      	ST   -Y,R17
000edf 940e 03cc 	CALL _LcdCharacter
                 ; 0001 09E5 			//putchar(getchar());
                 ; 0001 09E6 			if (kytu == 'S'){ vMLtoi(0); vMRtoi(0); }
000ee1 3513      	CPI  R17,83
000ee2 f419      	BRNE _0x20259
000ee3 e0e0      	LDI  R30,LOW(0)
000ee4 940e 1c2a 	CALL SUBOPT_0x78
                 ; 0001 09E7 			if (kytu == 'F'){ vMLtoi(100); vMRtoi(100); }
                 _0x20259:
000ee6 3416      	CPI  R17,70
000ee7 f419      	BRNE _0x2025A
000ee8 e6e4      	LDI  R30,LOW(100)
000ee9 940e 1c31 	CALL SUBOPT_0x79
                 ; 0001 09E8 			if (kytu == 'B'){ vMLlui(100); vMRlui(100); }
                 _0x2025A:
000eeb 3412      	CPI  R17,66
000eec f441      	BRNE _0x2025B
000eed e6e4      	LDI  R30,LOW(100)
000eee 93ea      	ST   -Y,R30
000eef 940e 054c 	CALL _vMLlui
000ef1 e6e4      	LDI  R30,LOW(100)
000ef2 93ea      	ST   -Y,R30
000ef3 940e 0562 	CALL _vMRlui
                 ; 0001 09E9 			if (kytu == 'R'){ vMLtoi(100); vMRtoi(0); }
                 _0x2025B:
000ef5 3512      	CPI  R17,82
000ef6 f419      	BRNE _0x2025C
000ef7 e6e4      	LDI  R30,LOW(100)
000ef8 940e 1c2a 	CALL SUBOPT_0x78
                 ; 0001 09EA 			if (kytu == 'L'){ vMLtoi(0); vMRtoi(100); }
                 _0x2025C:
000efa 341c      	CPI  R17,76
000efb f419      	BRNE _0x2025D
000efc e0e0      	LDI  R30,LOW(0)
000efd 940e 1c31 	CALL SUBOPT_0x79
                 ; 0001 09EB 
                 ; 0001 09EC 			demled++;
                 _0x2025D:
                +
000eff 5f2f     +SUBI R18 , LOW ( - 1 )
000f00 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0001 09ED 			if (demled > 1000){ demled = 0; LEDLtoggle(); LEDRtoggle(); }
                +
000f01 3e29     +CPI R18 , LOW ( 1001 )
000f02 e0e3     +LDI R30 , HIGH ( 1001 )
000f03 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1001
000f04 f020      	BRLO _0x2025E
                +
000f05 e020     +LDI R18 , LOW ( 0 )
000f06 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000f07 940e 1b70 	CALL SUBOPT_0x59
                 ; 0001 09EE 		}
                 _0x2025E:
                 ; 0001 09EF 	}
                 _0x20258:
000f09 cfc5      	RJMP _0x2024D
                 _0x2024F:
                 ; 0001 09F0 }
                 _0x20C000B:
000f0a 940e 20d1 	CALL __LOADLOCR4
000f0c 9624      	ADIW R28,4
000f0d 9508      	RET
                 
                 	.DSEG
                 _0x20248:
00029d           	.BYTE 0x10
                 ;//========================================================
                 ;
                 ;//Chuong trinh test robot
                 ;void testmotor()
                 ; 0001 09F5 {
                 
                 	.CSEG
                 _testmotor:
                 ; 0001 09F6 	LcdClear();
000f0e 940e 1c13 	CALL SUBOPT_0x75
                 ; 0001 09F7 	hc(0, 10);
000f10 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 09F8 	ws("TEST MOTOR");
                +
000f12 eaed     +LDI R30 , LOW ( _0x2025F + ( 0 ) )
000f13 e0f2     +LDI R31 , HIGH ( _0x2025F + ( 0 ) )
                 	__POINTW1MN _0x2025F,0
000f14 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 09F9 
                 ; 0001 09FA 	vMRtoi(20);
000f16 940e 1ba1 	CALL SUBOPT_0x62
                 ; 0001 09FB 	vMLtoi(20);
000f18 e1e4      	LDI  R30,LOW(20)
000f19 93ea      	ST   -Y,R30
000f1a 940e 0546 	CALL _vMLtoi
                 ; 0001 09FC 	while (keyKT != 0)
                 _0x20260:
000f1c 9b98      	SBIS 0x13,0
000f1d c027      	RJMP _0x20262
                 ; 0001 09FD 	{
                 ; 0001 09FE 		hc(2, 0);
000f1e 940e 1c38 	CALL SUBOPT_0x7A
                 ; 0001 09FF 		ws("MotorL");
                +
000f20 ebe8     +LDI R30 , LOW ( _0x2025F + ( 11 ) )
000f21 e0f2     +LDI R31 , HIGH ( _0x2025F + ( 11 ) )
                 	__POINTW1MN _0x2025F,11
000f22 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A00 		hc(2, 45);
000f24 940e 1c07 	CALL SUBOPT_0x73
000f26 e2ed      	LDI  R30,LOW(45)
000f27 e0f0      	LDI  R31,HIGH(45)
000f28 940e 1c16 	CALL SUBOPT_0x76
                 ; 0001 0A01 		wn16(QEL);
000f2a 940e 1acc 	CALL SUBOPT_0x3E
000f2c 940e 192c 	CALL SUBOPT_0xD
                 ; 0001 0A02 		hc(3, 0);
000f2e e0e3      	LDI  R30,LOW(3)
000f2f e0f0      	LDI  R31,HIGH(3)
000f30 940e 18f2 	CALL SUBOPT_0x7
                 ; 0001 0A03 		ws("MotorR");
                +
000f32 ebef     +LDI R30 , LOW ( _0x2025F + ( 18 ) )
000f33 e0f2     +LDI R31 , HIGH ( _0x2025F + ( 18 ) )
                 	__POINTW1MN _0x2025F,18
000f34 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A04 		hc(3, 45);
000f36 e0e3      	LDI  R30,LOW(3)
000f37 e0f0      	LDI  R31,HIGH(3)
000f38 93fa      	ST   -Y,R31
000f39 93ea      	ST   -Y,R30
000f3a e2ed      	LDI  R30,LOW(45)
000f3b e0f0      	LDI  R31,HIGH(45)
000f3c 940e 1c16 	CALL SUBOPT_0x76
                 ; 0001 0A05 		wn16(QER);
000f3e 940e 1956 	CALL SUBOPT_0x14
000f40 940e 192c 	CALL SUBOPT_0xD
                 ; 0001 0A06 		delay_ms(10);
000f42 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A07 	}
000f44 cfd7      	RJMP _0x20260
                 _0x20262:
                 ; 0001 0A08 
                 ; 0001 0A09 	vMRstop();
000f45 940e 056d 	CALL _vMRstop
                 ; 0001 0A0A 	vMLstop();
000f47 940e 0552 	CALL _vMLstop
                 ; 0001 0A0B }
000f49 9508      	RET
                 
                 	.DSEG
                 _0x2025F:
0002ad           	.BYTE 0x19
                 ;//========================================================
                 ;// UART TEST
                 ;void testuart()
                 ; 0001 0A0F {
                 
                 	.CSEG
                 _testuart:
                 ; 0001 0A10 	if (rx_counter)
000f4a 91e0 0538 	LDS  R30,_rx_counter
000f4c 30e0      	CPI  R30,0
000f4d f069      	BREQ _0x20263
                 ; 0001 0A11 	{
                 ; 0001 0A12 		LcdClear();
000f4e 940e 1c13 	CALL SUBOPT_0x75
                 ; 0001 0A13 		hc(0, 10);
000f50 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 0A14 		ws("TEST UART");
                +
000f52 ece6     +LDI R30 , LOW ( _0x20264 + ( 0 ) )
000f53 e0f2     +LDI R31 , HIGH ( _0x20264 + ( 0 ) )
                 	__POINTW1MN _0x20264,0
000f54 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A15 		putchar(getchar());
000f56 940e 04b7 	CALL _getchar
000f58 93ea      	ST   -Y,R30
000f59 940e 04f7 	CALL _putchar
                 ; 0001 0A16 	}
                 ; 0001 0A17 
                 ; 0001 0A18 }
                 _0x20263:
000f5b 9508      	RET
                 
                 	.DSEG
                 _0x20264:
0002c6           	.BYTE 0xA
                 ;//========================================================
                 ;// UART TEST
                 ;void testrf()
                 ; 0001 0A1C {
                 
                 	.CSEG
                 _testrf:
                 ; 0001 0A1D 
                 ; 0001 0A1E 
                 ; 0001 0A1F }
000f5c 9508      	RET
                 ;
                 ;//========================================================
                 ;void testir()
                 ; 0001 0A23 {
                 _testir:
                 ; 0001 0A24 	unsigned int AD[8];
                 ; 0001 0A25 
                 ; 0001 0A26 	DDRA = 0x00;
000f5d 9760      	SBIW R28,16
                 ;	AD -> Y+0
000f5e e0e0      	LDI  R30,LOW(0)
000f5f bbea      	OUT  0x1A,R30
                 ; 0001 0A27 	PORTA = 0x00;
000f60 bbeb      	OUT  0x1B,R30
                 ; 0001 0A28 
                 ; 0001 0A29 	clear();
000f61 940e 0403 	CALL _clear
                 ; 0001 0A2A 	hc(0, 10);
000f63 940e 1b47 	CALL SUBOPT_0x52
000f65 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 0A2B 	ws("TEST IR");
                +
000f67 ede0     +LDI R30 , LOW ( _0x20265 + ( 0 ) )
000f68 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 0 ) )
                 	__POINTW1MN _0x20265,0
000f69 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A2C 
                 ; 0001 0A2D 	while (keyKT != 0)
                 _0x20266:
000f6b 9b98      	SBIS 0x13,0
000f6c c093      	RJMP _0x20268
                 ; 0001 0A2E 	{
                 ; 0001 0A2F 
                 ; 0001 0A30 		AD[0] = read_adc(0);
000f6d e0e0      	LDI  R30,LOW(0)
000f6e 93ea      	ST   -Y,R30
000f6f 940e 0480 	CALL _read_adc
000f71 83e8      	ST   Y,R30
000f72 83f9      	STD  Y+1,R31
                 ; 0001 0A31 		AD[1] = read_adc(1);
000f73 e0e1      	LDI  R30,LOW(1)
000f74 93ea      	ST   -Y,R30
000f75 940e 0480 	CALL _read_adc
000f77 83ea      	STD  Y+2,R30
000f78 83fb      	STD  Y+2+1,R31
                 ; 0001 0A32 		AD[2] = read_adc(2);
000f79 e0e2      	LDI  R30,LOW(2)
000f7a 93ea      	ST   -Y,R30
000f7b 940e 0480 	CALL _read_adc
000f7d 83ec      	STD  Y+4,R30
000f7e 83fd      	STD  Y+4+1,R31
                 ; 0001 0A33 		AD[3] = read_adc(3);
000f7f e0e3      	LDI  R30,LOW(3)
000f80 93ea      	ST   -Y,R30
000f81 940e 0480 	CALL _read_adc
000f83 83ee      	STD  Y+6,R30
000f84 83ff      	STD  Y+6+1,R31
                 ; 0001 0A34 		AD[4] = read_adc(4);
000f85 e0e4      	LDI  R30,LOW(4)
000f86 93ea      	ST   -Y,R30
000f87 940e 0480 	CALL _read_adc
000f89 87e8      	STD  Y+8,R30
000f8a 87f9      	STD  Y+8+1,R31
                 ; 0001 0A35 		AD[5] = read_adc(5);
000f8b e0e5      	LDI  R30,LOW(5)
000f8c 93ea      	ST   -Y,R30
000f8d 940e 0480 	CALL _read_adc
000f8f 87ea      	STD  Y+10,R30
000f90 87fb      	STD  Y+10+1,R31
                 ; 0001 0A36 		AD[6] = read_adc(6);
000f91 e0e6      	LDI  R30,LOW(6)
000f92 93ea      	ST   -Y,R30
000f93 940e 0480 	CALL _read_adc
000f95 87ec      	STD  Y+12,R30
000f96 87fd      	STD  Y+12+1,R31
                 ; 0001 0A37 		AD[7] = read_adc(7);
000f97 e0e7      	LDI  R30,LOW(7)
000f98 93ea      	ST   -Y,R30
000f99 940e 0480 	CALL _read_adc
000f9b 87ee      	STD  Y+14,R30
000f9c 87ff      	STD  Y+14+1,R31
                 ; 0001 0A38 
                 ; 0001 0A39 		hc(1, 0); ws("0."); wn164(AD[0]);
000f9d 940e 1b5e 	CALL SUBOPT_0x56
                +
000f9f ede8     +LDI R30 , LOW ( _0x20265 + ( 8 ) )
000fa0 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 8 ) )
                 	__POINTW1MN _0x20265,8
000fa1 940e 1930 	CALL SUBOPT_0xE
000fa3 81e8      	LD   R30,Y
000fa4 81f9      	LDD  R31,Y+1
000fa5 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3A 		hc(1, 43); ws("1."); wn164(AD[1]);
000fa7 940e 1b42 	CALL SUBOPT_0x51
000fa9 940e 1c45 	CALL SUBOPT_0x7D
                +
000fab edeb     +LDI R30 , LOW ( _0x20265 + ( 11 ) )
000fac e0f2     +LDI R31 , HIGH ( _0x20265 + ( 11 ) )
                 	__POINTW1MN _0x20265,11
000fad 940e 1930 	CALL SUBOPT_0xE
000faf 81ea      	LDD  R30,Y+2
000fb0 81fb      	LDD  R31,Y+2+1
000fb1 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3B 		hc(2, 0); ws("2."); wn164(AD[2]);
000fb3 940e 1c38 	CALL SUBOPT_0x7A
                +
000fb5 edee     +LDI R30 , LOW ( _0x20265 + ( 14 ) )
000fb6 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 14 ) )
                 	__POINTW1MN _0x20265,14
000fb7 940e 1930 	CALL SUBOPT_0xE
000fb9 81ec      	LDD  R30,Y+4
000fba 81fd      	LDD  R31,Y+4+1
000fbb 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3C 		hc(2, 43); ws("3."); wn164(AD[3]);
000fbd 940e 1c07 	CALL SUBOPT_0x73
000fbf 940e 1c45 	CALL SUBOPT_0x7D
                +
000fc1 eee1     +LDI R30 , LOW ( _0x20265 + ( 17 ) )
000fc2 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 17 ) )
                 	__POINTW1MN _0x20265,17
000fc3 940e 1930 	CALL SUBOPT_0xE
000fc5 81ee      	LDD  R30,Y+6
000fc6 81ff      	LDD  R31,Y+6+1
000fc7 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3D 		hc(3, 0); ws("4."); wn164(AD[4]);
000fc9 e0e3      	LDI  R30,LOW(3)
000fca e0f0      	LDI  R31,HIGH(3)
000fcb 940e 18f2 	CALL SUBOPT_0x7
                +
000fcd eee4     +LDI R30 , LOW ( _0x20265 + ( 20 ) )
000fce e0f2     +LDI R31 , HIGH ( _0x20265 + ( 20 ) )
                 	__POINTW1MN _0x20265,20
000fcf 940e 1930 	CALL SUBOPT_0xE
000fd1 85e8      	LDD  R30,Y+8
000fd2 85f9      	LDD  R31,Y+8+1
000fd3 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3E 		hc(3, 43); ws("5."); wn164(AD[5]);
000fd5 e0e3      	LDI  R30,LOW(3)
000fd6 e0f0      	LDI  R31,HIGH(3)
000fd7 93fa      	ST   -Y,R31
000fd8 93ea      	ST   -Y,R30
000fd9 940e 1c45 	CALL SUBOPT_0x7D
                +
000fdb eee7     +LDI R30 , LOW ( _0x20265 + ( 23 ) )
000fdc e0f2     +LDI R31 , HIGH ( _0x20265 + ( 23 ) )
                 	__POINTW1MN _0x20265,23
000fdd 940e 1930 	CALL SUBOPT_0xE
000fdf 85ea      	LDD  R30,Y+10
000fe0 85fb      	LDD  R31,Y+10+1
000fe1 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A3F 		hc(4, 0); ws("6."); wn164(AD[6]);
000fe3 e0e4      	LDI  R30,LOW(4)
000fe4 e0f0      	LDI  R31,HIGH(4)
000fe5 940e 18f2 	CALL SUBOPT_0x7
                +
000fe7 eeea     +LDI R30 , LOW ( _0x20265 + ( 26 ) )
000fe8 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 26 ) )
                 	__POINTW1MN _0x20265,26
000fe9 940e 1930 	CALL SUBOPT_0xE
000feb 85ec      	LDD  R30,Y+12
000fec 85fd      	LDD  R31,Y+12+1
000fed 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A40 		hc(4, 43); ws("7."); wn164(AD[7]);
000fef e0e4      	LDI  R30,LOW(4)
000ff0 e0f0      	LDI  R31,HIGH(4)
000ff1 93fa      	ST   -Y,R31
000ff2 93ea      	ST   -Y,R30
000ff3 940e 1c45 	CALL SUBOPT_0x7D
                +
000ff5 eeed     +LDI R30 , LOW ( _0x20265 + ( 29 ) )
000ff6 e0f2     +LDI R31 , HIGH ( _0x20265 + ( 29 ) )
                 	__POINTW1MN _0x20265,29
000ff7 940e 1930 	CALL SUBOPT_0xE
000ff9 85ee      	LDD  R30,Y+14
000ffa 85ff      	LDD  R31,Y+14+1
000ffb 940e 1c41 	CALL SUBOPT_0x7C
                 ; 0001 0A41 
                 ; 0001 0A42 		delay_ms(1000);
000ffd 940e 1921 	CALL SUBOPT_0xB
                 ; 0001 0A43 	}
000fff cf6b      	RJMP _0x20266
                 _0x20268:
                 ; 0001 0A44 
                 ; 0001 0A45 }
001000 940c 142f 	JMP  _0x20C000A
                 
                 	.DSEG
                 _0x20265:
0002d0           	.BYTE 0x20
                 ;
                 ;//========================================================
                 ;void outlcd1()
                 ; 0001 0A49 {
                 
                 	.CSEG
                 _outlcd1:
                 ; 0001 0A4A 	LcdClear();
001002 940e 1c13 	CALL SUBOPT_0x75
                 ; 0001 0A4B 	hc(0, 5);
001004 e0e5      	LDI  R30,LOW(5)
001005 e0f0      	LDI  R31,HIGH(5)
001006 940e 1c16 	CALL SUBOPT_0x76
                 ; 0001 0A4C 	ws("<SELF TEST>");
                +
001008 efe0     +LDI R30 , LOW ( _0x20269 + ( 0 ) )
001009 e0f2     +LDI R31 , HIGH ( _0x20269 + ( 0 ) )
                 	__POINTW1MN _0x20269,0
00100a 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A4D 	hc(1, 0);
00100c 940e 1b5e 	CALL SUBOPT_0x56
                 ; 0001 0A4E 	ws("************");
                +
00100e efec     +LDI R30 , LOW ( _0x20269 + ( 12 ) )
00100f e0f2     +LDI R31 , HIGH ( _0x20269 + ( 12 ) )
                 	__POINTW1MN _0x20269,12
001010 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A4F }
001012 9508      	RET
                 
                 	.DSEG
                 _0x20269:
0002f0           	.BYTE 0x19
                 ;//========================================================
                 ;void chopledtheoid()
                 ; 0001 0A52 {
                 
                 	.CSEG
                 _chopledtheoid:
                 ; 0001 0A53 	unsigned char i;
                 ; 0001 0A54 	DDRA = 0xFF;
001013 931a      	ST   -Y,R17
                 ;	i -> R17
001014 efef      	LDI  R30,LOW(255)
001015 bbea      	OUT  0x1A,R30
                 ; 0001 0A55 
                 ; 0001 0A56 	switch (id)
001016 940e 1c48 	CALL SUBOPT_0x7E
                 ; 0001 0A57 	{
                 ; 0001 0A58 	case 1:
001018 f439      	BRNE _0x2026D
                 ; 0001 0A59 		LEDR = 1;
001019 9aad      	SBI  0x15,5
                 ; 0001 0A5A 		LEDL = 1; PORTA.4 = 1; delay_ms(10);
00101a 9aac      	SBI  0x15,4
00101b 9adc      	SBI  0x1B,4
00101c 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A5B 		LEDL = 0; PORTA.4 = 0; delay_ms(30);
00101e 98ac      	CBI  0x15,4
00101f c05d      	RJMP _0x20340
                 ; 0001 0A5C 		break;
                 ; 0001 0A5D 	case 2:
                 _0x2026D:
001020 30e2      	CPI  R30,LOW(0x2)
001021 e0a0      	LDI  R26,HIGH(0x2)
001022 07fa      	CPC  R31,R26
001023 f441      	BRNE _0x20278
                 ; 0001 0A5E 		LEDR = 1;
001024 9aad      	SBI  0x15,5
                 ; 0001 0A5F 		LEDL = 1; PORTA.6 = 1; delay_ms(10);
001025 9aac      	SBI  0x15,4
001026 9ade      	SBI  0x1B,6
001027 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A60 		LEDL = 0; PORTA.6 = 0; delay_ms(30);
001029 98ac      	CBI  0x15,4
00102a 98de      	CBI  0x1B,6
00102b c052      	RJMP _0x20341
                 ; 0001 0A61 		break;
                 ; 0001 0A62 	case 3:
                 _0x20278:
00102c 30e3      	CPI  R30,LOW(0x3)
00102d e0a0      	LDI  R26,HIGH(0x3)
00102e 07fa      	CPC  R31,R26
00102f f441      	BRNE _0x20283
                 ; 0001 0A63 		LEDR = 1;
001030 9aad      	SBI  0x15,5
                 ; 0001 0A64 		LEDL = 1; PORTA.7 = 1; delay_ms(10);
001031 9aac      	SBI  0x15,4
001032 9adf      	SBI  0x1B,7
001033 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A65 		LEDL = 0; PORTA.7 = 0; delay_ms(30);
001035 98ac      	CBI  0x15,4
001036 98df      	CBI  0x1B,7
001037 c046      	RJMP _0x20341
                 ; 0001 0A66 		break;
                 ; 0001 0A67 	case 4:
                 _0x20283:
001038 30e4      	CPI  R30,LOW(0x4)
001039 e0a0      	LDI  R26,HIGH(0x4)
00103a 07fa      	CPC  R31,R26
00103b f441      	BRNE _0x2028E
                 ; 0001 0A68 		LEDR = 1;
00103c 9aad      	SBI  0x15,5
                 ; 0001 0A69 		LEDL = 1; PORTA.5 = 1; delay_ms(10);
00103d 9aac      	SBI  0x15,4
00103e 9add      	SBI  0x1B,5
00103f 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A6A 		LEDL = 0; PORTA.5 = 0; delay_ms(30);
001041 98ac      	CBI  0x15,4
001042 98dd      	CBI  0x1B,5
001043 c03a      	RJMP _0x20341
                 ; 0001 0A6B 		break;
                 ; 0001 0A6C 	case 5:
                 _0x2028E:
001044 30e5      	CPI  R30,LOW(0x5)
001045 e0a0      	LDI  R26,HIGH(0x5)
001046 07fa      	CPC  R31,R26
001047 f431      	BRNE _0x20299
                 ; 0001 0A6D 		LEDL = 1;
001048 9aac      	SBI  0x15,4
                 ; 0001 0A6E 		LEDR = 1; PORTA.4 = 1; delay_ms(10);
001049 9aad      	SBI  0x15,5
00104a 9adc      	SBI  0x1B,4
00104b 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A6F 		LEDR = 0; PORTA.4 = 0; delay_ms(30);
00104d c02e      	RJMP _0x20342
                 ; 0001 0A70 		break;
                 ; 0001 0A71 	case 6:
                 _0x20299:
00104e 30e6      	CPI  R30,LOW(0x6)
00104f e0a0      	LDI  R26,HIGH(0x6)
001050 07fa      	CPC  R31,R26
001051 f441      	BRNE _0x202A4
                 ; 0001 0A72 		LEDL = 1;
001052 9aac      	SBI  0x15,4
                 ; 0001 0A73 		LEDR = 1; PORTA.6 = 1; delay_ms(10);
001053 9aad      	SBI  0x15,5
001054 9ade      	SBI  0x1B,6
001055 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A74 		LEDR = 0; PORTA.6 = 0; delay_ms(30);
001057 98ad      	CBI  0x15,5
001058 98de      	CBI  0x1B,6
001059 c024      	RJMP _0x20341
                 ; 0001 0A75 		break;
                 ; 0001 0A76 	case 7:
                 _0x202A4:
00105a 30e7      	CPI  R30,LOW(0x7)
00105b e0a0      	LDI  R26,HIGH(0x7)
00105c 07fa      	CPC  R31,R26
00105d f441      	BRNE _0x202AF
                 ; 0001 0A77 		LEDL = 1;
00105e 9aac      	SBI  0x15,4
                 ; 0001 0A78 		LEDR = 1; PORTA.7 = 1; delay_ms(10);
00105f 9aad      	SBI  0x15,5
001060 9adf      	SBI  0x1B,7
001061 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A79 		LEDR = 0; PORTA.7 = 0; delay_ms(30);
001063 98ad      	CBI  0x15,5
001064 98df      	CBI  0x1B,7
001065 c018      	RJMP _0x20341
                 ; 0001 0A7A 		break;
                 ; 0001 0A7B 	case 8:
                 _0x202AF:
001066 30e8      	CPI  R30,LOW(0x8)
001067 e0a0      	LDI  R26,HIGH(0x8)
001068 07fa      	CPC  R31,R26
001069 f441      	BRNE _0x202BA
                 ; 0001 0A7C 		LEDL = 1;
00106a 9aac      	SBI  0x15,4
                 ; 0001 0A7D 		LEDR = 1; PORTA.5 = 1; delay_ms(10);
00106b 9aad      	SBI  0x15,5
00106c 9add      	SBI  0x1B,5
00106d 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A7E 		LEDR = 0; PORTA.5 = 0; delay_ms(30);
00106f 98ad      	CBI  0x15,5
001070 98dd      	CBI  0x1B,5
001071 c00c      	RJMP _0x20341
                 ; 0001 0A7F 		break;
                 ; 0001 0A80 	case 9:
                 _0x202BA:
001072 30e9      	CPI  R30,LOW(0x9)
001073 e0a0      	LDI  R26,HIGH(0x9)
001074 07fa      	CPC  R31,R26
001075 f461      	BRNE _0x2026C
                 ; 0001 0A81 		LEDL = 1; LEDR = 1; PORTA.4 = 1; delay_ms(10);
001076 9aac      	SBI  0x15,4
001077 9aad      	SBI  0x15,5
001078 9adc      	SBI  0x1B,4
001079 940e 1c3b 	CALL SUBOPT_0x7B
                 ; 0001 0A82 		LEDL = 0; LEDR = 0; PORTA.4 = 0; delay_ms(30);
00107b 98ac      	CBI  0x15,4
                 _0x20342:
00107c 98ad      	CBI  0x15,5
                 _0x20340:
00107d 98dc      	CBI  0x1B,4
                 _0x20341:
00107e e1ee      	LDI  R30,LOW(30)
00107f e0f0      	LDI  R31,HIGH(30)
001080 940e 1c4f 	CALL SUBOPT_0x7F
                 ; 0001 0A83 		break;
                 ; 0001 0A84 	};
                 _0x2026C:
                 ; 0001 0A85 	//LEDL=1;delay_ms(100);
                 ; 0001 0A86 	//LEDL=0;delay_ms(100);
                 ; 0001 0A87 	//for(i=0;i<id;i++)
                 ; 0001 0A88 	//{
                 ; 0001 0A89 	//    LEDR=1;delay_ms(150);
                 ; 0001 0A8A 	//    LEDR=0;delay_ms(150);
                 ; 0001 0A8B 	//}
                 ; 0001 0A8C }
001082 9119      	LD   R17,Y+
001083 9508      	RET
                 ;//========================================================
                 ;//========================================================
                 ;void testRCservo()
                 ; 0001 0A90 {
                 _testRCservo:
                 ; 0001 0A91 	clear();
001084 940e 0403 	CALL _clear
                 ; 0001 0A92 	hc(0, 10);
001086 940e 1b47 	CALL SUBOPT_0x52
001088 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 0A93 	ws("RC SERVO");
                +
00108a e0e9     +LDI R30 , LOW ( _0x202D2 + ( 0 ) )
00108b e0f3     +LDI R31 , HIGH ( _0x202D2 + ( 0 ) )
                 	__POINTW1MN _0x202D2,0
00108c 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0A94 	// Timer/Counter 0 initialization
                 ; 0001 0A95 	// Clock source: System Clock
                 ; 0001 0A96 	// Clock value: 7.813 kHz
                 ; 0001 0A97 	// Mode: Phase correct PWM top=0xFF
                 ; 0001 0A98 	// OC0 output: Non-Inverted PWM
                 ; 0001 0A99 	TCCR0 = 0x65;     //15.32Hz
00108e e6e5      	LDI  R30,LOW(101)
00108f 940e 1c53 	CALL SUBOPT_0x80
                 ; 0001 0A9A 	TCNT0 = 0x00;
                 ; 0001 0A9B 	OCR0 = 0x00;
                 ; 0001 0A9C 
                 ; 0001 0A9D 	// Timer/Counter 2 initialization
                 ; 0001 0A9E 	// Clock source: System Clock
                 ; 0001 0A9F 	// Clock value: 7.813 kHz
                 ; 0001 0AA0 	// Mode: Phase correct PWM top=0xFF
                 ; 0001 0AA1 	// OC2 output: Non-Inverted PWM
                 ; 0001 0AA2 	ASSR = 0x00;      //15.32Hz
                 ; 0001 0AA3 	TCCR2 = 0x67;
001091 e6e7      	LDI  R30,LOW(103)
001092 bde5      	OUT  0x25,R30
                 ; 0001 0AA4 	TCNT2 = 0x00;
001093 e0e0      	LDI  R30,LOW(0)
001094 bde4      	OUT  0x24,R30
                 ; 0001 0AA5 	OCR2 = 0x00;
001095 bde3      	OUT  0x23,R30
                 ; 0001 0AA6 
                 ; 0001 0AA7 	while (keyKT != 0)
                 _0x202D3:
001096 9b98      	SBIS 0x13,0
001097 c013      	RJMP _0x202D5
                 ; 0001 0AA8 	{
                 ; 0001 0AA9 		LEDL = 1; LEDR = 1;//PORTB.3=1;
001098 9aac      	SBI  0x15,4
001099 9aad      	SBI  0x15,5
                 ; 0001 0AAA 		OCR0 = 2; OCR2 = 2;
00109a e0e2      	LDI  R30,LOW(2)
00109b bfec      	OUT  0x3C,R30
00109c bde3      	OUT  0x23,R30
                 ; 0001 0AAB 		delay_ms(2000);
00109d ede0      	LDI  R30,LOW(2000)
00109e e0f7      	LDI  R31,HIGH(2000)
00109f 940e 1c4f 	CALL SUBOPT_0x7F
                 ; 0001 0AAC 
                 ; 0001 0AAD 		LEDL = 0; LEDR = 0;//PORTB.3=1;
0010a1 98ac      	CBI  0x15,4
0010a2 98ad      	CBI  0x15,5
                 ; 0001 0AAE 		OCR0 = 10; OCR2 = 10;
0010a3 e0ea      	LDI  R30,LOW(10)
0010a4 bfec      	OUT  0x3C,R30
0010a5 bde3      	OUT  0x23,R30
                 ; 0001 0AAF 		delay_ms(2000);
0010a6 ede0      	LDI  R30,LOW(2000)
0010a7 e0f7      	LDI  R31,HIGH(2000)
0010a8 940e 1c4f 	CALL SUBOPT_0x7F
                 ; 0001 0AB0 	}
0010aa cfeb      	RJMP _0x202D3
                 _0x202D5:
                 ; 0001 0AB1 	// Timer/Counter 0 initialization
                 ; 0001 0AB2 	// Clock source: System Clock
                 ; 0001 0AB3 	// Clock value: Timer 0 Stopped
                 ; 0001 0AB4 	// Mode: Normal top=0xFF
                 ; 0001 0AB5 	// OC0 output: Disconnected
                 ; 0001 0AB6 	TCCR0 = 0x00;
0010ab e0e0      	LDI  R30,LOW(0)
0010ac 940e 1c53 	CALL SUBOPT_0x80
                 ; 0001 0AB7 	TCNT0 = 0x00;
                 ; 0001 0AB8 	OCR0 = 0x00;
                 ; 0001 0AB9 
                 ; 0001 0ABA 	// Timer/Counter 2 initialization
                 ; 0001 0ABB 	// Clock source: System Clock
                 ; 0001 0ABC 	// Clock value: Timer2 Stopped
                 ; 0001 0ABD 	// Mode: Normal top=0xFF
                 ; 0001 0ABE 	// OC2 output: Disconnected
                 ; 0001 0ABF 	ASSR = 0x00;
                 ; 0001 0AC0 	TCCR2 = 0x00;
0010ae e0e0      	LDI  R30,LOW(0)
0010af bde5      	OUT  0x25,R30
                 ; 0001 0AC1 	TCNT2 = 0x00;
0010b0 bde4      	OUT  0x24,R30
                 ; 0001 0AC2 	OCR2 = 0x00;
0010b1 bde3      	OUT  0x23,R30
                 ; 0001 0AC3 
                 ; 0001 0AC4 }
0010b2 9508      	RET
                 
                 	.DSEG
                 _0x202D2:
000309           	.BYTE 0x9
                 ;
                 ;void selftest()
                 ; 0001 0AC7 {
                 
                 	.CSEG
                 _selftest:
                 ; 0001 0AC8 	outlcd1();
0010b3 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AC9 	hc(2, 0);
                 ; 0001 0ACA 	ws("1.ROBOT WALL"); delay_ms(200);
                +
0010b5 e1e2     +LDI R30 , LOW ( _0x202DE + ( 0 ) )
0010b6 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 0 ) )
                 	__POINTW1MN _0x202DE,0
0010b7 940e 1930 	CALL SUBOPT_0xE
0010b9 940e 1b4c 	CALL SUBOPT_0x53
                 ; 0001 0ACB 	while (flagselftest == 1)
                 _0x202DF:
0010bb 91a0 04d5 	LDS  R26,_flagselftest
0010bd 91b0 04d6 	LDS  R27,_flagselftest+1
0010bf 9711      	SBIW R26,1
0010c0 f011      	BREQ PC+3
0010c1 940c 116d 	JMP _0x202E1
                 ; 0001 0ACC 	{
                 ; 0001 0ACD 		//------------------------------------------------------------------------
                 ; 0001 0ACE 		//test menu kiem tra  robot
                 ; 0001 0ACF 		chopledtheoid();
0010c3 df4f      	RCALL _chopledtheoid
                 ; 0001 0AD0 		if (keyKT == 0)
0010c4 9998      	SBIC 0x13,0
0010c5 c06a      	RJMP _0x202E2
                 ; 0001 0AD1 		{
                 ; 0001 0AD2 			id++;
0010c6 91e0 04dd 	LDS  R30,_id
0010c8 5fef      	SUBI R30,-LOW(1)
0010c9 93e0 04dd 	STS  _id,R30
                 ; 0001 0AD3 			if (id > 11){ id = 1; }
0010cb 91a0 04dd 	LDS  R26,_id
0010cd 30ac      	CPI  R26,LOW(0xC)
0010ce f018      	BRLO _0x202E3
0010cf e0e1      	LDI  R30,LOW(1)
0010d0 93e0 04dd 	STS  _id,R30
                 ; 0001 0AD4 			switch (id)
                 _0x202E3:
0010d2 940e 1c48 	CALL SUBOPT_0x7E
                 ; 0001 0AD5 			{
                 ; 0001 0AD6 
                 ; 0001 0AD7 			case 1:
0010d4 f429      	BRNE _0x202E7
                 ; 0001 0AD8 				outlcd1();
0010d5 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AD9 				hc(2, 0);
                 ; 0001 0ADA 				ws("1.ROBOT WALL"); delay_ms(200);
                +
0010d7 e1ef     +LDI R30 , LOW ( _0x202DE + ( 13 ) )
0010d8 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 13 ) )
                 	__POINTW1MN _0x202DE,13
0010d9 c050      	RJMP _0x20343
                 ; 0001 0ADB 				break;
                 ; 0001 0ADC 			case 2:
                 _0x202E7:
0010da 30e2      	CPI  R30,LOW(0x2)
0010db e0a0      	LDI  R26,HIGH(0x2)
0010dc 07fa      	CPC  R31,R26
0010dd f429      	BRNE _0x202E8
                 ; 0001 0ADD 				outlcd1();
0010de 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0ADE 				hc(2, 0);
                 ; 0001 0ADF 				ws("2.BLUETOOTH "); delay_ms(200);
                +
0010e0 e2ec     +LDI R30 , LOW ( _0x202DE + ( 26 ) )
0010e1 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 26 ) )
                 	__POINTW1MN _0x202DE,26
0010e2 c047      	RJMP _0x20343
                 ; 0001 0AE0 				break;
                 ; 0001 0AE1 			case 3:
                 _0x202E8:
0010e3 30e3      	CPI  R30,LOW(0x3)
0010e4 e0a0      	LDI  R26,HIGH(0x3)
0010e5 07fa      	CPC  R31,R26
0010e6 f429      	BRNE _0x202E9
                 ; 0001 0AE2 				outlcd1();
0010e7 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AE3 				hc(2, 0);
                 ; 0001 0AE4 				ws("3.WHITE LINE"); delay_ms(200);
                +
0010e9 e3e9     +LDI R30 , LOW ( _0x202DE + ( 39 ) )
0010ea e0f3     +LDI R31 , HIGH ( _0x202DE + ( 39 ) )
                 	__POINTW1MN _0x202DE,39
0010eb c03e      	RJMP _0x20343
                 ; 0001 0AE5 				break;
                 ; 0001 0AE6 			case 4:
                 _0x202E9:
0010ec 30e4      	CPI  R30,LOW(0x4)
0010ed e0a0      	LDI  R26,HIGH(0x4)
0010ee 07fa      	CPC  R31,R26
0010ef f429      	BRNE _0x202EA
                 ; 0001 0AE7 				outlcd1();
0010f0 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AE8 				hc(2, 0);
                 ; 0001 0AE9 				ws("4.BLACK LINE"); delay_ms(200);
                +
0010f2 e4e6     +LDI R30 , LOW ( _0x202DE + ( 52 ) )
0010f3 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 52 ) )
                 	__POINTW1MN _0x202DE,52
0010f4 c035      	RJMP _0x20343
                 ; 0001 0AEA 				break;
                 ; 0001 0AEB 			case 5:
                 _0x202EA:
0010f5 30e5      	CPI  R30,LOW(0x5)
0010f6 e0a0      	LDI  R26,HIGH(0x5)
0010f7 07fa      	CPC  R31,R26
0010f8 f429      	BRNE _0x202EB
                 ; 0001 0AEC 				outlcd1();
0010f9 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AED 				hc(2, 0);
                 ; 0001 0AEE 				ws("5.TEST MOTOR"); delay_ms(200);
                +
0010fb e5e3     +LDI R30 , LOW ( _0x202DE + ( 65 ) )
0010fc e0f3     +LDI R31 , HIGH ( _0x202DE + ( 65 ) )
                 	__POINTW1MN _0x202DE,65
0010fd c02c      	RJMP _0x20343
                 ; 0001 0AEF 				break;
                 ; 0001 0AF0 			case 6:
                 _0x202EB:
0010fe 30e6      	CPI  R30,LOW(0x6)
0010ff e0a0      	LDI  R26,HIGH(0x6)
001100 07fa      	CPC  R31,R26
001101 f429      	BRNE _0x202EC
                 ; 0001 0AF1 				outlcd1();
001102 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AF2 				hc(2, 0);
                 ; 0001 0AF3 				ws("6.TEST IR   "); delay_ms(200);
                +
001104 e6e0     +LDI R30 , LOW ( _0x202DE + ( 78 ) )
001105 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 78 ) )
                 	__POINTW1MN _0x202DE,78
001106 c023      	RJMP _0x20343
                 ; 0001 0AF4 				break;
                 ; 0001 0AF5 			case 7:
                 _0x202EC:
001107 30e7      	CPI  R30,LOW(0x7)
001108 e0a0      	LDI  R26,HIGH(0x7)
001109 07fa      	CPC  R31,R26
00110a f429      	BRNE _0x202ED
                 ; 0001 0AF6 				outlcd1();
00110b 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AF7 				hc(2, 0);
                 ; 0001 0AF8 				ws("7.TEST RF   "); delay_ms(200);
                +
00110d e6ed     +LDI R30 , LOW ( _0x202DE + ( 91 ) )
00110e e0f3     +LDI R31 , HIGH ( _0x202DE + ( 91 ) )
                 	__POINTW1MN _0x202DE,91
00110f c01a      	RJMP _0x20343
                 ; 0001 0AF9 				break;
                 ; 0001 0AFA 			case 8:
                 _0x202ED:
001110 30e8      	CPI  R30,LOW(0x8)
001111 e0a0      	LDI  R26,HIGH(0x8)
001112 07fa      	CPC  R31,R26
001113 f429      	BRNE _0x202EE
                 ; 0001 0AFB 				outlcd1();
001114 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0AFC 				hc(2, 0);
                 ; 0001 0AFD 				ws("8.TEST UART "); delay_ms(200);
                +
001116 e7ea     +LDI R30 , LOW ( _0x202DE + ( 104 ) )
001117 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 104 ) )
                 	__POINTW1MN _0x202DE,104
001118 c011      	RJMP _0x20343
                 ; 0001 0AFE 				break;
                 ; 0001 0AFF 			case 9:
                 _0x202EE:
001119 30e9      	CPI  R30,LOW(0x9)
00111a e0a0      	LDI  R26,HIGH(0x9)
00111b 07fa      	CPC  R31,R26
00111c f429      	BRNE _0x202EF
                 ; 0001 0B00 				outlcd1();
00111d 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0B01 				hc(2, 0);
                 ; 0001 0B02 				ws("9.RC SERVO "); delay_ms(200);
                +
00111f e8e7     +LDI R30 , LOW ( _0x202DE + ( 117 ) )
001120 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 117 ) )
                 	__POINTW1MN _0x202DE,117
001121 c008      	RJMP _0x20343
                 ; 0001 0B03 				break;
                 ; 0001 0B04 			case 10:
                 _0x202EF:
001122 30ea      	CPI  R30,LOW(0xA)
001123 e0a0      	LDI  R26,HIGH(0xA)
001124 07fa      	CPC  R31,R26
001125 f451      	BRNE _0x202E6
                 ; 0001 0B05 				outlcd1();
001126 940e 1c59 	CALL SUBOPT_0x81
                 ; 0001 0B06 				hc(2, 0);
                 ; 0001 0B07 				ws("10.UPDATE RB"); delay_ms(200);
                +
001128 e9e3     +LDI R30 , LOW ( _0x202DE + ( 129 ) )
001129 e0f3     +LDI R31 , HIGH ( _0x202DE + ( 129 ) )
                 	__POINTW1MN _0x202DE,129
                 _0x20343:
00112a 93fa      	ST   -Y,R31
00112b 93ea      	ST   -Y,R30
00112c 940e 03ea 	CALL _ws
00112e 940e 1b4c 	CALL SUBOPT_0x53
                 ; 0001 0B08 				break;
                 ; 0001 0B09 			};
                 _0x202E6:
                 ; 0001 0B0A 		}
                 ; 0001 0B0B 		if (keyKP == 0)
                 _0x202E2:
001130 9999      	SBIC 0x13,1
001131 c03a      	RJMP _0x202F1
                 ; 0001 0B0C 		{
                 ; 0001 0B0D 			switch (id)
001132 940e 1c48 	CALL SUBOPT_0x7E
                 ; 0001 0B0E 			{
                 ; 0001 0B0F 			case 1:
001134 f411      	BRNE _0x202F5
                 ; 0001 0B10 				robotwall();
001135 d8f0      	RCALL _robotwall
                 ; 0001 0B11 				break;
001136 c035      	RJMP _0x202F4
                 ; 0001 0B12 			case 2:
                 _0x202F5:
001137 30e2      	CPI  R30,LOW(0x2)
001138 e0a0      	LDI  R26,HIGH(0x2)
001139 07fa      	CPC  R31,R26
00113a f411      	BRNE _0x202F6
                 ; 0001 0B13 				bluetooth();
00113b dd7d      	RCALL _bluetooth
                 ; 0001 0B14 				break;
00113c c02f      	RJMP _0x202F4
                 ; 0001 0B15 			case 3:
                 _0x202F6:
00113d 30e3      	CPI  R30,LOW(0x3)
00113e e0a0      	LDI  R26,HIGH(0x3)
00113f 07fa      	CPC  R31,R26
001140 f411      	BRNE _0x202F7
                 ; 0001 0B16 				robotwhiteline();
001141 d9d3      	RCALL _robotwhiteline
                 ; 0001 0B17 				break;
001142 c029      	RJMP _0x202F4
                 ; 0001 0B18 			case 4:
                 _0x202F7:
001143 30e4      	CPI  R30,LOW(0x4)
001144 e0a0      	LDI  R26,HIGH(0x4)
001145 07fa      	CPC  R31,R26
001146 f411      	BRNE _0x202F8
                 ; 0001 0B19 				robotblackline();
001147 dac4      	RCALL _robotblackline
                 ; 0001 0B1A 				break;
001148 c023      	RJMP _0x202F4
                 ; 0001 0B1B 			case 5:
                 _0x202F8:
001149 30e5      	CPI  R30,LOW(0x5)
00114a e0a0      	LDI  R26,HIGH(0x5)
00114b 07fa      	CPC  R31,R26
00114c f411      	BRNE _0x202F9
                 ; 0001 0B1C 				testmotor();
00114d ddc0      	RCALL _testmotor
                 ; 0001 0B1D 				break;
00114e c01d      	RJMP _0x202F4
                 ; 0001 0B1E 			case 6:
                 _0x202F9:
00114f 30e6      	CPI  R30,LOW(0x6)
001150 e0a0      	LDI  R26,HIGH(0x6)
001151 07fa      	CPC  R31,R26
001152 f411      	BRNE _0x202FA
                 ; 0001 0B1F 				testir();
001153 de09      	RCALL _testir
                 ; 0001 0B20 				break;
001154 c017      	RJMP _0x202F4
                 ; 0001 0B21 			case 7:
                 _0x202FA:
001155 30e7      	CPI  R30,LOW(0x7)
001156 e0a0      	LDI  R26,HIGH(0x7)
001157 07fa      	CPC  R31,R26
001158 f411      	BRNE _0x202FB
                 ; 0001 0B22 				testrf();
001159 de02      	RCALL _testrf
                 ; 0001 0B23 				break;
00115a c011      	RJMP _0x202F4
                 ; 0001 0B24 			case 8:
                 _0x202FB:
00115b 30e8      	CPI  R30,LOW(0x8)
00115c e0a0      	LDI  R26,HIGH(0x8)
00115d 07fa      	CPC  R31,R26
00115e f411      	BRNE _0x202FC
                 ; 0001 0B25 				testuart();
00115f ddea      	RCALL _testuart
                 ; 0001 0B26 				break;
001160 c00b      	RJMP _0x202F4
                 ; 0001 0B27 			case 9:
                 _0x202FC:
001161 30e9      	CPI  R30,LOW(0x9)
001162 e0a0      	LDI  R26,HIGH(0x9)
001163 07fa      	CPC  R31,R26
001164 f411      	BRNE _0x202FD
                 ; 0001 0B28 				testRCservo();
001165 df1e      	RCALL _testRCservo
                 ; 0001 0B29 				break;
001166 c005      	RJMP _0x202F4
                 ; 0001 0B2A 			case 10:
                 _0x202FD:
001167 30ea      	CPI  R30,LOW(0xA)
001168 e0a0      	LDI  R26,HIGH(0xA)
001169 07fa      	CPC  R31,R26
00116a f409      	BRNE _0x202F4
                 ; 0001 0B2B 				testposition();
00116b d86d      	RCALL _testposition
                 ; 0001 0B2C 				break;
                 ; 0001 0B2D 
                 ; 0001 0B2E 			};
                 _0x202F4:
                 ; 0001 0B2F 
                 ; 0001 0B30 		}
                 ; 0001 0B31 
                 ; 0001 0B32 
                 ; 0001 0B33 	}//end while(1)
                 _0x202F1:
00116c cf4e      	RJMP _0x202DF
                 _0x202E1:
                 ; 0001 0B34 }
00116d 9508      	RET
                 
                 	.DSEG
                 _0x202DE:
000312           	.BYTE 0x8E
                 ;//[NGUYEN]Set bit and clear bit
                 ;#define setBit(p,n) ((p) |= (1 << (n)))
                 ;#define clrBit(p,n) ((p) &= (~(1) << (n)))
                 ;
                 ;//[NGUYEN] Update position. 64ms/frame
                 ;//call setUpdateRate() in MAIN to init.
                 ;char timer2Count = 0;
                 ;char posUpdateFlag = 0;
                 ;#define distThresh 100
                 ;
                 ;IntBall oldPos;
                 ;void initPos()
                 ; 0001 0B41 {
                 
                 	.CSEG
                 _initPos:
                 ; 0001 0B42 	oldPos.x = rbctrlHomeX;
00116e 91e0 04b5 	LDS  R30,_rbctrlHomeX
001170 91f0 04b6 	LDS  R31,_rbctrlHomeX+1
001172 9160 04b7 	LDS  R22,_rbctrlHomeX+2
001174 9170 04b8 	LDS  R23,_rbctrlHomeX+3
001176 e4aa      	LDI  R26,LOW(_oldPos)
001177 e0b5      	LDI  R27,HIGH(_oldPos)
001178 940e 1dda 	CALL __CFD1
00117a 93ed      	ST   X+,R30
00117b 93fc      	ST   X,R31
                 ; 0001 0B43 	oldPos.y = rbctrlHomeY;
                +
00117c e4ac     +LDI R26 , LOW ( _oldPos + ( 2 ) )
00117d e0b5     +LDI R27 , HIGH ( _oldPos + ( 2 ) )
                 	__POINTW2MN _oldPos,2
00117e 91e0 04b9 	LDS  R30,_rbctrlHomeY
001180 91f0 04ba 	LDS  R31,_rbctrlHomeY+1
001182 9160 04bb 	LDS  R22,_rbctrlHomeY+2
001184 9170 04bc 	LDS  R23,_rbctrlHomeY+3
001186 940e 1dda 	CALL __CFD1
001188 93ed      	ST   X+,R30
001189 93fc      	ST   X,R31
                 ; 0001 0B44 }
00118a 9508      	RET
                 ;
                 ;IntBall estimatePos(IntBall curPos)
                 ; 0001 0B47 {
                 _estimatePos:
                 ; 0001 0B48 	return curPos;
00118b 9724      	SBIW R28,4
                 ;	curPos -> Y+4
00118c 01fe      	MOVW R30,R28
00118d 9634      	ADIW R30,4
00118e 01de      	MOVW R26,R28
00118f e084      	LDI  R24,4
001190 940e 20ae 	CALL __COPYMML
001192 01fe      	MOVW R30,R28
001193 e084      	LDI  R24,4
001194 b61f      	IN   R1,SREG
001195 94f8      	CLI
001196 9628      	ADIW R28,8
001197 9508      	RET
                 ; 0001 0B49 }
                 ;
                 ;void updatePosInit()
                 ; 0001 0B4C {
                 _updatePosInit:
                 ; 0001 0B4D 	// Timer/Counter 2 initialization
                 ; 0001 0B4E 	// Clock source: System Clock
                 ; 0001 0B4F 	// Clock value: 7.813 kHz
                 ; 0001 0B50 	// Mode: CTC top=OCR2
                 ; 0001 0B51 	// OC2 output: Disconnected
                 ; 0001 0B52 	ASSR = 0x00;
001198 e0e0      	LDI  R30,LOW(0)
001199 bde2      	OUT  0x22,R30
                 ; 0001 0B53 	TCCR2 = 0x0F;
00119a e0ef      	LDI  R30,LOW(15)
00119b bde5      	OUT  0x25,R30
                 ; 0001 0B54 	TCNT2 = 0x12;
00119c e1e2      	LDI  R30,LOW(18)
00119d bde4      	OUT  0x24,R30
                 ; 0001 0B55 	OCR2 = 254;
00119e efee      	LDI  R30,LOW(254)
00119f bde3      	OUT  0x23,R30
                 ; 0001 0B56 	// Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0B57 	setBit(TIMSK, OCIE2);
0011a0 b7e9      	IN   R30,0x39
0011a1 68e0      	ORI  R30,0x80
0011a2 bfe9      	OUT  0x39,R30
                 ; 0001 0B58 }
0011a3 9508      	RET
                 ;//[NGUYEN]
                 ;
                 ;interrupt[TIM2_COMP] void timer2_comp_isr(void)
                 ; 0001 0B5C {
                 _timer2_comp_isr:
0011a4 940e 1ab3 	CALL SUBOPT_0x3B
                 ; 0001 0B5D 	unsigned char i = 0;
                 ; 0001 0B5E 	LEDRtoggle();
0011a6 931a      	ST   -Y,R17
                 ;	i -> R17
0011a7 e010      	LDI  R17,0
0011a8 940e 03a9 	CALL _LEDRtoggle
                 ; 0001 0B5F 	if (timer2Count++ < 2)
0011aa 91a0 0548 	LDS  R26,_timer2Count
0011ac 5faf      	SUBI R26,-LOW(1)
0011ad 93a0 0548 	STS  _timer2Count,R26
0011af 50a1      	SUBI R26,LOW(1)
0011b0 30a2      	CPI  R26,LOW(0x2)
0011b1 f408      	BRSH _0x202FF
                 ; 0001 0B60 		return;
0011b2 c0ca      	RJMP _0x20345
                 ; 0001 0B61 	else
                 _0x202FF:
                 ; 0001 0B62 	{
                 ; 0001 0B63 		timer2Count = 0;
0011b3 e0e0      	LDI  R30,LOW(0)
0011b4 93e0 0548 	STS  _timer2Count,R30
                 ; 0001 0B64 	}
                 ; 0001 0B65 
                 ; 0001 0B66 
                 ; 0001 0B67 	if (nRF24L01_RxPacket(RxBuf) == 1)         // Neu nhan duoc du lieu
0011b6 e7e9      	LDI  R30,LOW(_RxBuf)
0011b7 e0f4      	LDI  R31,HIGH(_RxBuf)
0011b8 93fa      	ST   -Y,R31
0011b9 93ea      	ST   -Y,R30
0011ba 940e 0370 	CALL _nRF24L01_RxPacket
0011bc 30e1      	CPI  R30,LOW(0x1)
0011bd f011      	BREQ PC+3
0011be 940c 127d 	JMP _0x20301
                 ; 0001 0B68 	{
                 ; 0001 0B69 		IntRobot intRb;
                 ; 0001 0B6A 		for (i = 0; i < 28; i++)
0011c0 972e      	SBIW R28,14
                 ;	intRb -> Y+0
0011c1 e010      	LDI  R17,LOW(0)
                 _0x20303:
0011c2 311c      	CPI  R17,28
0011c3 f460      	BRSH _0x20304
                 ; 0001 0B6B 		{
                 ; 0001 0B6C 			*(uint8_t *)((uint8_t *)&rb + i) = RxBuf[i];
0011c4 2fa1      	MOV  R26,R17
0011c5 e0b0      	LDI  R27,0
0011c6 51a1      	SUBI R26,LOW(-_rb)
0011c7 4fbc      	SBCI R27,HIGH(-_rb)
0011c8 940e 18fa 	CALL SUBOPT_0x8
0011ca 58e7      	SUBI R30,LOW(-_RxBuf)
0011cb 4ffb      	SBCI R31,HIGH(-_RxBuf)
0011cc 81e0      	LD   R30,Z
0011cd 93ec      	ST   X,R30
                 ; 0001 0B6D 		}
0011ce 5f1f      	SUBI R17,-1
0011cf cff2      	RJMP _0x20303
                 _0x20304:
                 ; 0001 0B6E 
                 ; 0001 0B6F 
                 ; 0001 0B70 		idRobot = fmod(rb.id, 10); // doc id
0011d0 940e 1c5c 	CALL SUBOPT_0x82
0011d2 940e 2094 	CALL __PUTPARD1
0011d4 940e 1c65 	CALL SUBOPT_0x83
0011d6 940e 2094 	CALL __PUTPARD1
0011d8 940e 16c3 	CALL _fmod
0011da 940e 1dd8 	CALL __CFD1U
0011dc 016f      	MOVW R12,R30
                 ; 0001 0B71 		cmdCtrlRobot = (int)rb.id / 10; // doc ma lenh
0011dd 940e 1c6a 	CALL SUBOPT_0x84
                 ; 0001 0B72 
                 ; 0001 0B73 		intRb = convertRobot2IntRobot(rb);
0011df eeef      	LDI  R30,LOW(_rb)
0011e0 e0f3      	LDI  R31,HIGH(_rb)
0011e1 e1ac      	LDI  R26,28
0011e2 940e 2099 	CALL __PUTPARL
0011e4 940e 0599 	CALL _convertRobot2IntRobot
0011e6 01de      	MOVW R26,R28
0011e7 940e 20ae 	CALL __COPYMML
0011e9 be1f      	OUT  SREG,R1
                 ; 0001 0B74 
                 ; 0001 0B75 		switch (idRobot)
0011ea 01f6      	MOVW R30,R12
                 ; 0001 0B76 		{
                 ; 0001 0B77 		case 1:
0011eb 30e1      	CPI  R30,LOW(0x1)
0011ec e0a0      	LDI  R26,HIGH(0x1)
0011ed 07fa      	CPC  R31,R26
0011ee f421      	BRNE _0x20308
                 ; 0001 0B78 			robot11 = intRb;
0011ef 01fe      	MOVW R30,R28
0011f0 e0ab      	LDI  R26,LOW(_robot11)
0011f1 e0b4      	LDI  R27,HIGH(_robot11)
0011f2 c027      	RJMP _0x20344
                 ; 0001 0B79 			break;
                 ; 0001 0B7A 		case 2:
                 _0x20308:
0011f3 30e2      	CPI  R30,LOW(0x2)
0011f4 e0a0      	LDI  R26,HIGH(0x2)
0011f5 07fa      	CPC  R31,R26
0011f6 f421      	BRNE _0x20309
                 ; 0001 0B7B 			robot12 = intRb;
0011f7 01fe      	MOVW R30,R28
0011f8 e1a9      	LDI  R26,LOW(_robot12)
0011f9 e0b4      	LDI  R27,HIGH(_robot12)
0011fa c01f      	RJMP _0x20344
                 ; 0001 0B7C 			break;
                 ; 0001 0B7D 		case 3:
                 _0x20309:
0011fb 30e3      	CPI  R30,LOW(0x3)
0011fc e0a0      	LDI  R26,HIGH(0x3)
0011fd 07fa      	CPC  R31,R26
0011fe f421      	BRNE _0x2030A
                 ; 0001 0B7E 			robot13 = intRb;
0011ff 01fe      	MOVW R30,R28
001200 e2a7      	LDI  R26,LOW(_robot13)
001201 e0b4      	LDI  R27,HIGH(_robot13)
001202 c017      	RJMP _0x20344
                 ; 0001 0B7F 			break;
                 ; 0001 0B80 		case 4:
                 _0x2030A:
001203 30e4      	CPI  R30,LOW(0x4)
001204 e0a0      	LDI  R26,HIGH(0x4)
001205 07fa      	CPC  R31,R26
001206 f421      	BRNE _0x2030B
                 ; 0001 0B81 			robot21 = intRb;
001207 01fe      	MOVW R30,R28
001208 e3a5      	LDI  R26,LOW(_robot21)
001209 e0b4      	LDI  R27,HIGH(_robot21)
00120a c00f      	RJMP _0x20344
                 ; 0001 0B82 			break;
                 ; 0001 0B83 		case 5:
                 _0x2030B:
00120b 30e5      	CPI  R30,LOW(0x5)
00120c e0a0      	LDI  R26,HIGH(0x5)
00120d 07fa      	CPC  R31,R26
00120e f421      	BRNE _0x2030C
                 ; 0001 0B84 			robot22 = intRb;
00120f 01fe      	MOVW R30,R28
001210 e4a3      	LDI  R26,LOW(_robot22)
001211 e0b4      	LDI  R27,HIGH(_robot22)
001212 c007      	RJMP _0x20344
                 ; 0001 0B85 			break;
                 ; 0001 0B86 		case 6:
                 _0x2030C:
001213 30e6      	CPI  R30,LOW(0x6)
001214 e0a0      	LDI  R26,HIGH(0x6)
001215 07fa      	CPC  R31,R26
001216 f431      	BRNE _0x20307
                 ; 0001 0B87 			robot23 = intRb;
001217 01fe      	MOVW R30,R28
001218 e5a1      	LDI  R26,LOW(_robot23)
001219 e0b4      	LDI  R27,HIGH(_robot23)
                 _0x20344:
00121a e08e      	LDI  R24,14
00121b 940e 20ae 	CALL __COPYMML
                 ; 0001 0B88 			break;
                 ; 0001 0B89 
                 ; 0001 0B8A 		}
                 _0x20307:
                 ; 0001 0B8B 		if (idRobot == ROBOT_ID)
00121d e0e5      	LDI  R30,LOW(5)
00121e e0f0      	LDI  R31,HIGH(5)
00121f 15ec      	CP   R30,R12
001220 05fd      	CPC  R31,R13
001221 f011      	BREQ PC+3
001222 940c 127c 	JMP _0x2030E
                 ; 0001 0B8C 		{
                 ; 0001 0B8D 			LEDL = !LEDL;
001224 9bac      	SBIS 0x15,4
001225 c002      	RJMP _0x2030F
001226 98ac      	CBI  0x15,4
001227 c001      	RJMP _0x20310
                 _0x2030F:
001228 9aac      	SBI  0x15,4
                 _0x20310:
                 ; 0001 0B8E 			cmdCtrlRobot = (int)rb.id / 10; // doc ma lenh
001229 940e 1c6a 	CALL SUBOPT_0x84
                 ; 0001 0B8F 			posUpdateFlag = 1;
00122b e0e1      	LDI  R30,LOW(1)
00122c 93e0 0549 	STS  _posUpdateFlag,R30
                 ; 0001 0B90 			robotctrl = intRb;
00122e 01fe      	MOVW R30,R28
00122f e5af      	LDI  R26,LOW(_robotctrl)
001230 e0b4      	LDI  R27,HIGH(_robotctrl)
001231 e08e      	LDI  R24,14
001232 940e 20ae 	CALL __COPYMML
                 ; 0001 0B91 			if ((robotctrl.x - oldPos.x >= distThresh) || (robotctrl.y - oldPos.y >= distThresh))
                +
001234 91a0 0461+LDS R26 , _robotctrl + ( 2 )
001236 91b0 0462+LDS R27 , _robotctrl + ( 2 ) + 1
                 	__GETW2MN _robotctrl,2
001238 91e0 054a 	LDS  R30,_oldPos
00123a 91f0 054b 	LDS  R31,_oldPos+1
00123c 1bae      	SUB  R26,R30
00123d 0bbf      	SBC  R27,R31
00123e 36a4      	CPI  R26,LOW(0x64)
00123f e0e0      	LDI  R30,HIGH(0x64)
001240 07be      	CPC  R27,R30
001241 f474      	BRGE _0x20312
                +
001242 91a0 0463+LDS R26 , _robotctrl + ( 4 )
001244 91b0 0464+LDS R27 , _robotctrl + ( 4 ) + 1
                 	__GETW2MN _robotctrl,4
                +
001246 91e0 054c+LDS R30 , _oldPos + ( 2 )
001248 91f0 054d+LDS R31 , _oldPos + ( 2 ) + 1
                 	__GETW1MN _oldPos,2
00124a 1bae      	SUB  R26,R30
00124b 0bbf      	SBC  R27,R31
00124c 36a4      	CPI  R26,LOW(0x64)
00124d e0e0      	LDI  R30,HIGH(0x64)
00124e 07be      	CPC  R27,R30
00124f f104      	BRLT _0x20311
                 _0x20312:
                 ; 0001 0B92 			{
                 ; 0001 0B93 				IntBall estPos;
                 ; 0001 0B94 				IntBall curPos;
                 ; 0001 0B95 				curPos.x = robotctrl.x;
001250 9728      	SBIW R28,8
                 ;	intRb -> Y+8
                 ;	estPos -> Y+4
                 ;	curPos -> Y+0
001251 940e 197c 	CALL SUBOPT_0x1B
001253 83e8      	ST   Y,R30
001254 83f9      	STD  Y+1,R31
                 ; 0001 0B96 				curPos.y = robotctrl.y;
001255 940e 198a 	CALL SUBOPT_0x1D
001257 83ea      	STD  Y+2,R30
001258 83fb      	STD  Y+2+1,R31
                 ; 0001 0B97 				estPos = estimatePos(curPos);
001259 01fe      	MOVW R30,R28
00125a e0a4      	LDI  R26,4
00125b 940e 2099 	CALL __PUTPARL
00125d df2d      	RCALL _estimatePos
00125e 01de      	MOVW R26,R28
00125f 9614      	ADIW R26,4
001260 940e 20ae 	CALL __COPYMML
001262 be1f      	OUT  SREG,R1
                 ; 0001 0B98 				robotctrl.x = estPos.x;
001263 81ec      	LDD  R30,Y+4
001264 81fd      	LDD  R31,Y+4+1
                +
001265 93e0 0461+STS _robotctrl + ( 2 ) , R30
001267 93f0 0462+STS _robotctrl + ( 2 ) + 1 , R31
                 	__PUTW1MN _robotctrl,2
                 ; 0001 0B99 				robotctrl.y = estPos.y;
001269 81ee      	LDD  R30,Y+6
00126a 81ff      	LDD  R31,Y+6+1
                +
00126b 93e0 0463+STS _robotctrl + ( 4 ) , R30
00126d 93f0 0464+STS _robotctrl + ( 4 ) + 1 , R31
                 	__PUTW1MN _robotctrl,4
                 ; 0001 0B9A 
                 ; 0001 0B9B 			}
00126f 9628      	ADIW R28,8
                 ; 0001 0B9C 			oldPos.x = robotctrl.x;
                 _0x20311:
001270 940e 197c 	CALL SUBOPT_0x1B
001272 93e0 054a 	STS  _oldPos,R30
001274 93f0 054b 	STS  _oldPos+1,R31
                 ; 0001 0B9D 			oldPos.y = robotctrl.y;
001276 940e 198a 	CALL SUBOPT_0x1D
                +
001278 93e0 054c+STS _oldPos + ( 2 ) , R30
00127a 93f0 054d+STS _oldPos + ( 2 ) + 1 , R31
                 	__PUTW1MN _oldPos,2
                 ; 0001 0B9E 		}
                 ; 0001 0B9F 
                 ; 0001 0BA0 	}
                 _0x2030E:
00127c 962e      	ADIW R28,14
                 ; 0001 0BA1 }
                 _0x20301:
                 _0x20345:
00127d 9119      	LD   R17,Y+
00127e 940e 1aef 	CALL SUBOPT_0x45
001280 9518      	RETI
                 ;unsigned char readposition()
                 ; 0001 0BA3 {
                 _readposition:
                 ; 0001 0BA4 	return;
001281 e0e0      	LDI  R30,LOW(0)
001282 9508      	RET
                 ; 0001 0BA5 }
                 ;
                 ;//========================================================
                 ;//          HAM MAIN
                 ;//========================================================
                 ;void main(void)
                 ; 0001 0BAB {
                 _main:
                 ; 0001 0BAC 	// For Testing purpose only, creating a fake robot
                 ; 0001 0BAD 	IntRobot rbFake;
                 ; 0001 0BAE 	unsigned char flagreadrb;
                 ; 0001 0BAF 	unsigned int adctest;
                 ; 0001 0BB0 	unsigned char i;
                 ; 0001 0BB1 	float PIdl, PIdr, pl, il, pr, ir, ur, ul;
                 ; 0001 0BB2 
                 ; 0001 0BB3 	// Testing robot declaration
                 ; 0001 0BB4 	rbFake.id = 4;
001283 97ae      	SBIW R28,46
                 ;	rbFake -> Y+32
                 ;	flagreadrb -> R17
                 ;	adctest -> R18,R19
                 ;	i -> R16
                 ;	PIdl -> Y+28
                 ;	PIdr -> Y+24
                 ;	pl -> Y+20
                 ;	il -> Y+16
                 ;	pr -> Y+12
                 ;	ir -> Y+8
                 ;	ur -> Y+4
                 ;	ul -> Y+0
001284 e0e4      	LDI  R30,LOW(4)
001285 e0f0      	LDI  R31,HIGH(4)
001286 a3e8      	STD  Y+32,R30
001287 a3f9      	STD  Y+32+1,R31
                 ; 0001 0BB5 	rbFake.x = -42;
001288 ede6      	LDI  R30,LOW(65494)
001289 efff      	LDI  R31,HIGH(65494)
00128a a3ea      	STD  Y+34,R30
00128b a3fb      	STD  Y+34+1,R31
                 ; 0001 0BB6 	rbFake.y = 48;
00128c e3e0      	LDI  R30,LOW(48)
00128d e0f0      	LDI  R31,HIGH(48)
00128e a3ec      	STD  Y+36,R30
00128f a3fd      	STD  Y+36+1,R31
                 ; 0001 0BB7 	rbFake.ox = -35;
001290 eded      	LDI  R30,LOW(65501)
001291 efff      	LDI  R31,HIGH(65501)
001292 a3ee      	STD  Y+38,R30
001293 a3ff      	STD  Y+38+1,R31
                 ; 0001 0BB8 	rbFake.oy = -50;
001294 ecee      	LDI  R30,LOW(65486)
001295 efff      	LDI  R31,HIGH(65486)
001296 a7e8      	STD  Y+40,R30
001297 a7f9      	STD  Y+40+1,R31
                 ; 0001 0BB9 	rbFake.ball.x = 0;
001298 e0e0      	LDI  R30,LOW(0)
001299 a7ea      	STD  Y+42,R30
00129a a7eb      	STD  Y+42+1,R30
                 ; 0001 0BBA 	rbFake.ball.y = 0;
00129b a7ec      	STD  Y+44,R30
00129c a7ed      	STD  Y+44+1,R30
                 ; 0001 0BBB 
                 ; 0001 0BBC 	//------------- khai  bao chuc nang in out cua cac port
                 ; 0001 0BBD 	DDRA = 0xFF;
00129d efef      	LDI  R30,LOW(255)
00129e bbea      	OUT  0x1A,R30
                 ; 0001 0BBE 	DDRB = 0b10111111;
00129f ebef      	LDI  R30,LOW(191)
0012a0 bbe7      	OUT  0x17,R30
                 ; 0001 0BBF 	DDRC = 0b11111100;
0012a1 efec      	LDI  R30,LOW(252)
0012a2 bbe4      	OUT  0x14,R30
                 ; 0001 0BC0 	DDRD = 0b11110010;
0012a3 efe2      	LDI  R30,LOW(242)
0012a4 bbe1      	OUT  0x11,R30
                 ; 0001 0BC1 
                 ; 0001 0BC2 	//------------- khai  bao chuc nang cua adc
                 ; 0001 0BC3 	// ADC initialization
                 ; 0001 0BC4 	// ADC Clock frequency: 1000.000 kHz
                 ; 0001 0BC5 	// ADC Voltage Reference: AVCC pin
                 ; 0001 0BC6 	ADMUX = ADC_VREF_TYPE & 0xff;
0012a5 e4e0      	LDI  R30,LOW(64)
0012a6 b9e7      	OUT  0x7,R30
                 ; 0001 0BC7 	ADCSRA = 0x83;
0012a7 e8e3      	LDI  R30,LOW(131)
0012a8 b9e6      	OUT  0x6,R30
                 ; 0001 0BC8 	//---------------------------------------------------------------------
                 ; 0001 0BC9 	//------------- khai  bao chuc nang cua bo timer dung lam PWM cho 2 dong co
                 ; 0001 0BCA 	// Timer/Counter 1 initialization
                 ; 0001 0BCB 	// Clock source: System Clock
                 ; 0001 0BCC 	// Clock value: 1000.000 kHz   //PWM 2KHz
                 ; 0001 0BCD 	// Mode: Ph. correct PWM top=0x00FF
                 ; 0001 0BCE 	// OC1A output: Non-Inv.
                 ; 0001 0BCF 	// OC1B output: Non-Inv.
                 ; 0001 0BD0 	// Noise Canceler: Off
                 ; 0001 0BD1 	// Input Capture on Falling Edge
                 ; 0001 0BD2 	// Timer1 Overflow Interrupt: On  // voi period =1/2khz= 0.5ms
                 ; 0001 0BD3 	// Input Capture Interrupt: Off
                 ; 0001 0BD4 	// Compare A Match Interrupt: Off
                 ; 0001 0BD5 	// Compare B Match Interrupt: Off
                 ; 0001 0BD6 	TCCR1A = 0xA1;
0012a9 eae1      	LDI  R30,LOW(161)
0012aa bdef      	OUT  0x2F,R30
                 ; 0001 0BD7 	TCCR1B = 0x02;
0012ab e0e2      	LDI  R30,LOW(2)
0012ac bdee      	OUT  0x2E,R30
                 ; 0001 0BD8 	TCNT1H = 0x00;
0012ad e0e0      	LDI  R30,LOW(0)
0012ae bded      	OUT  0x2D,R30
                 ; 0001 0BD9 	TCNT1L = 0x00;
0012af bdec      	OUT  0x2C,R30
                 ; 0001 0BDA 	ICR1H = 0x00;
0012b0 bde7      	OUT  0x27,R30
                 ; 0001 0BDB 	ICR1L = 0x00;
0012b1 bde6      	OUT  0x26,R30
                 ; 0001 0BDC 	OCR1AH = 0x00;
0012b2 bdeb      	OUT  0x2B,R30
                 ; 0001 0BDD 	OCR1AL = 0x00;
0012b3 bdea      	OUT  0x2A,R30
                 ; 0001 0BDE 	OCR1BH = 0x00;
0012b4 bde9      	OUT  0x29,R30
                 ; 0001 0BDF 	OCR1BL = 0x00;
0012b5 bde8      	OUT  0x28,R30
                 ; 0001 0BE0 	// Timer(s)/Counter(s) Interrupt(s) initialization  timer0
                 ; 0001 0BE1 	TIMSK = 0x04;
0012b6 e0e4      	LDI  R30,LOW(4)
0012b7 bfe9      	OUT  0x39,R30
                 ; 0001 0BE2 
                 ; 0001 0BE3 	//OCR1A=0-255; MOTOR LEFT
                 ; 0001 0BE4 	//OCR1B=0-255; MOTOR RIGHT
                 ; 0001 0BE5 	for (i = 0; i < 1; i++)
0012b8 e000      	LDI  R16,LOW(0)
                 _0x20315:
0012b9 3001      	CPI  R16,1
0012ba f420      	BRSH _0x20316
                 ; 0001 0BE6 	{
                 ; 0001 0BE7 		LEDL = 1; LEDR = 1;
0012bb 940e 1c1a 	CALL SUBOPT_0x77
                 ; 0001 0BE8 		delay_ms(100);
                 ; 0001 0BE9 		LEDL = 0; LEDR = 0;
                 ; 0001 0BEA 		delay_ms(100);
                 ; 0001 0BEB 	}
0012bd 5f0f      	SUBI R16,-1
0012be cffa      	RJMP _0x20315
                 _0x20316:
                 ; 0001 0BEC 
                 ; 0001 0BED 	//khai  bao su dung cua glcd
                 ; 0001 0BEE 	SPIinit();
0012bf 940e 0474 	CALL _SPIinit
                 ; 0001 0BEF 	LCDinit();
0012c1 940e 0479 	CALL _LCDinit
                 ; 0001 0BF0 
                 ; 0001 0BF1 	// khai  bao su dung rf dung de cap nhat gia tri vi tri cua robot
                 ; 0001 0BF2 	init_NRF24L01();
0012c3 940e 02d4 	CALL _init_NRF24L01
                 ; 0001 0BF3 	SetRX_Mode();  // chon kenh tan so phat, va dia chi phat trong file nRF14l01.c
0012c5 940e 0364 	CALL _SetRX_Mode
                 ; 0001 0BF4 	// khai bao su dung encoder
                 ; 0001 0BF5 	initencoder(); //lay 2 canh len  xuong
0012c7 940e 053c 	CALL _initencoder
                 ; 0001 0BF6 	// khai bao su dung uart
                 ; 0001 0BF7 	inituart();
0012c9 940e 051c 	CALL _inituart
                 ; 0001 0BF8 
                 ; 0001 0BF9 	// Set interrupt timer 2
                 ; 0001 0BFA 	updatePosInit();
0012cb decc      	RCALL _updatePosInit
                 ; 0001 0BFB 	// Set for oldPos variable
                 ; 0001 0BFC 	initPos();
0012cc dea1      	RCALL _initPos
                 ; 0001 0BFD 
                 ; 0001 0BFE 	#asm("sei")
0012cd 9478      	sei
                 ; 0001 0BFF 
                 ; 0001 0C00 	//man hinh khoi dong robokit
                 ; 0001 0C01 	hc(0, 10);
0012ce 940e 1b47 	CALL SUBOPT_0x52
0012d0 940e 1b58 	CALL SUBOPT_0x55
                 ; 0001 0C02 	ws("<AKBOTKIT>");
                +
0012d2 eae0     +LDI R30 , LOW ( _0x2031F + ( 0 ) )
0012d3 e0f3     +LDI R31 , HIGH ( _0x2031F + ( 0 ) )
                 	__POINTW1MN _0x2031F,0
0012d4 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0C03 	hc(1, 0);
0012d6 940e 1b5e 	CALL SUBOPT_0x56
                 ; 0001 0C04 	ws("************");
                +
0012d8 eaeb     +LDI R30 , LOW ( _0x2031F + ( 11 ) )
0012d9 e0f3     +LDI R31 , HIGH ( _0x2031F + ( 11 ) )
                 	__POINTW1MN _0x2031F,11
0012da 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0C05 
                 ; 0001 0C06 	//robotwhiteline();
                 ; 0001 0C07 	//robotblackline();
                 ; 0001 0C08 	//kiem tra neu nhan va giu nut trai se vao chuong trinh selftest (kiem tra hoat dong cua robot)
                 ; 0001 0C09 	while (keyKT == 0)
                 _0x20320:
0012dc 9998      	SBIC 0x13,0
0012dd c01d      	RJMP _0x20322
                 ; 0001 0C0A 	{
                 ; 0001 0C0B 		cntselftest++;
0012de eda7      	LDI  R26,LOW(_cntselftest)
0012df e0b4      	LDI  R27,HIGH(_cntselftest)
0012e0 940e 1ac1 	CALL SUBOPT_0x3C
                 ; 0001 0C0C 		if (cntselftest > 10)
0012e2 91a0 04d7 	LDS  R26,_cntselftest
0012e4 91b0 04d8 	LDS  R27,_cntselftest+1
0012e6 971b      	SBIW R26,11
0012e7 f070      	BRLO _0x20323
                 ; 0001 0C0D 		{
                 ; 0001 0C0E 			while (keyKT == 0);//CHO NHA NUT AN
                 _0x20324:
0012e8 9b98      	SBIS 0x13,0
0012e9 cffe      	RJMP _0x20324
                 ; 0001 0C0F 			cntselftest = 0;
0012ea e0e0      	LDI  R30,LOW(0)
0012eb 93e0 04d7 	STS  _cntselftest,R30
0012ed 93e0 04d8 	STS  _cntselftest+1,R30
                 ; 0001 0C10 			flagselftest = 1;
0012ef e0e1      	LDI  R30,LOW(1)
0012f0 e0f0      	LDI  R31,HIGH(1)
0012f1 93e0 04d5 	STS  _flagselftest,R30
0012f3 93f0 04d6 	STS  _flagselftest+1,R31
                 ; 0001 0C11 			selftest();
0012f5 ddbd      	RCALL _selftest
                 ; 0001 0C12 		}
                 ; 0001 0C13 		delay_ms(100);
                 _0x20323:
0012f6 e6e4      	LDI  R30,LOW(100)
0012f7 e0f0      	LDI  R31,HIGH(100)
0012f8 940e 1c4f 	CALL SUBOPT_0x7F
                 ; 0001 0C14 	}
0012fa cfe1      	RJMP _0x20320
                 _0x20322:
                 ; 0001 0C15 
                 ; 0001 0C16 	// vao chuong trinh chinh sau khi bo qua phan selftest
                 ; 0001 0C17 	hc(2, 0);
0012fb 940e 1c38 	CALL SUBOPT_0x7A
                 ; 0001 0C18 	ws("MAIN PROGRAM");
                +
0012fd ebe8     +LDI R30 , LOW ( _0x2031F + ( 24 ) )
0012fe e0f3     +LDI R31 , HIGH ( _0x2031F + ( 24 ) )
                 	__POINTW1MN _0x2031F,24
0012ff 940e 1930 	CALL SUBOPT_0xE
                 ; 0001 0C19 	settoadoHomRB();
001301 940e 0749 	CALL _settoadoHomRB
                 ; 0001 0C1A 
                 ; 0001 0C1B 
                 ; 0001 0C1C 	//ctrRobottoi(1000, 22);
                 ; 0001 0C1D 	//MoveToOrigin();
                 ; 0001 0C1E 	// code you here
                 ; 0001 0C1F 
                 ; 0001 0C20 	while (1)
                 _0x20327:
                 ; 0001 0C21 	{
                 ; 0001 0C22 #ifdef !DEBUG_MODE
                 ; 0001 0C23 		{
                 ; 0001 0C24 			//LEDR=!LEDR;
                 ; 0001 0C25 			//PHUC
                 ; 0001 0C26 			////     //=========================================================   PHUC ID
                 ; 0001 0C27 			//         chay theo banh co dinh huong tan cong
                 ; 0001 0C28 			readposition();
                 ; 0001 0C29 			calcvitri(0, 0);    // de xac dinh huong tan cong
                 ; 0001 0C2A 
                 ; 0001 0C2B 			//flagtancong=1;
                 ; 0001 0C2C 			if (flagtancong == 1)
                 ; 0001 0C2D 			{
                 ; 0001 0C2E 				flagtask = 2;
                 ; 0001 0C2F 				rb_wait(50);
                 ; 0001 0C30 
                 ; 0001 0C31 			}
                 ; 0001 0C32 			else
                 ; 0001 0C33 			{
                 ; 0001 0C34 				if (offsetphongthu < 0)    offsetphongthu = -offsetphongthu;//lay do lon
                 ; 0001 0C35 				if (robotctrl.ball.y <= 0)
                 ; 0001 0C36 				{
                 ; 0001 0C37 					setRobotX = robotctrl.ball.x;
                 ; 0001 0C38 					setRobotY = robotctrl.ball.y + offsetphongthu;
                 ; 0001 0C39 
                 ; 0001 0C3A 					flagtask = 0;
                 ; 0001 0C3B 					rb_wait(200);
                 ; 0001 0C3C 
                 ; 0001 0C3D 				}
                 ; 0001 0C3E 				else
                 ; 0001 0C3F 				{
                 ; 0001 0C40 					setRobotX = robotctrl.ball.x;
                 ; 0001 0C41 					setRobotY = robotctrl.ball.y - offsetphongthu;
                 ; 0001 0C42 
                 ; 0001 0C43 					flagtask = 0;
                 ; 0001 0C44 					rb_wait(200);
                 ; 0001 0C45 
                 ; 0001 0C46 				}
                 ; 0001 0C47 
                 ; 0001 0C48 				setRobotX = robotctrl.ball.x + offsetphongthu;
                 ; 0001 0C49 				setRobotY = robotctrl.ball.y;
                 ; 0001 0C4A 				rb_wait(200);
                 ; 0001 0C4B 				rb_goball();
                 ; 0001 0C4C 				rb_wait(200);
                 ; 0001 0C4D 			}
                 ; 0001 0C4E 			ctrrobot();// can phai luon luon chay de dieu khien robot
                 ; 0001 0C4F 		}
                 ; 0001 0C50 #else
                 ; 0001 0C51 		{
                 ; 0001 0C52 			calcvitri(0, 0);
001303 940e 1c74 	CALL SUBOPT_0x85
001305 940e 1c74 	CALL SUBOPT_0x85
001307 940e 05d6 	CALL _calcvitri
                 ; 0001 0C53 #ifdef DEBUG_EN
                 ; 0001 0C54 			{
                 ; 0001 0C55 			}
                 ; 0001 0C56 #endif
                 ; 0001 0C57 			MoveToOrigin();
001309 940e 0954 	CALL _MoveToOrigin
                 ; 0001 0C58 			//movePoint(robotctrl, 0, 0, 0, 'f');
                 ; 0001 0C59 			//setSpeed(leftSpeed, rightSpeed);
                 ; 0001 0C5A 
                 ; 0001 0C5B 		}
                 ; 0001 0C5C #endif
                 ; 0001 0C5D 	} //end while(1)
00130b cff7      	RJMP _0x20327
                 ; 0001 0C5E }
                 _0x2032A:
00130c cfff      	RJMP _0x2032A
                 
                 	.DSEG
                 _0x2031F:
0003a0           	.BYTE 0x25
                 ;
                 
                 	.CSEG
                 _strcpyf:
00130d 91e9          ld   r30,y+
00130e 91f9          ld   r31,y+
00130f 91a9          ld   r26,y+
001310 91b9          ld   r27,y+
001311 01cd          movw r24,r26
                 strcpyf0:
001312 9005      	lpm  r0,z+
001313 920d          st   x+,r0
001314 2000          tst  r0
001315 f7e1          brne strcpyf0
001316 01fc          movw r30,r24
001317 9508          ret
                 _strlen:
001318 91a9          ld   r26,y+
001319 91b9          ld   r27,y+
00131a 27ee          clr  r30
00131b 27ff          clr  r31
                 strlen0:
00131c 916d          ld   r22,x+
00131d 2366          tst  r22
00131e f011          breq strlen1
00131f 9631          adiw r30,1
001320 cffb          rjmp strlen0
                 strlen1:
001321 9508          ret
                 _strlenf:
001322 27aa          clr  r26
001323 27bb          clr  r27
001324 91e9          ld   r30,y+
001325 91f9          ld   r31,y+
                 strlenf0:
001326 9005      	lpm  r0,z+
001327 2000          tst  r0
001328 f011          breq strlenf1
001329 9611          adiw r26,1
00132a cffb          rjmp strlenf0
                 strlenf1:
00132b 01fd          movw r30,r26
00132c 9508          ret
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _spi:
00132d 81e8      	LD   R30,Y
00132e b9ef      	OUT  0xF,R30
                 _0x2020003:
00132f 9b77      	SBIS 0xE,7
001330 cffe      	RJMP _0x2020003
001331 b1ef      	IN   R30,0xF
001332 9621      	ADIW R28,1
001333 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
001334 931a      	ST   -Y,R17
001335 930a      	ST   -Y,R16
001336 81aa      	LDD  R26,Y+2
001337 81bb      	LDD  R27,Y+2+1
001338 9612      	ADIW R26,2
001339 940e 207b 	CALL __GETW1P
00133b 9730      	SBIW R30,0
00133c f129      	BREQ _0x2040010
00133d 81aa      	LDD  R26,Y+2
00133e 81bb      	LDD  R27,Y+2+1
00133f 9614      	ADIW R26,4
001340 940e 207b 	CALL __GETW1P
001342 018f      	MOVW R16,R30
001343 9730      	SBIW R30,0
001344 f061      	BREQ _0x2040012
                +
001345 3002     +CPI R16 , LOW ( 2 )
001346 e0e0     +LDI R30 , HIGH ( 2 )
001347 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
001348 f0c0      	BRLO _0x2040013
001349 01f8      	MOVW R30,R16
00134a 9731      	SBIW R30,1
00134b 018f      	MOVW R16,R30
                +
00134c 81aa     +LDD R26 , Y + 2
00134d 81bb     +LDD R27 , Y + 2 + 1
00134e 9614     +ADIW R26 , 4
00134f 93ed     +ST X + , R30
001350 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
001351 81aa      	LDD  R26,Y+2
001352 81bb      	LDD  R27,Y+2+1
001353 9612      	ADIW R26,2
001354 940e 1ac1 	CALL SUBOPT_0x3C
001356 9731      	SBIW R30,1
001357 81ac      	LDD  R26,Y+4
001358 83a0      	STD  Z+0,R26
001359 81aa      	LDD  R26,Y+2
00135a 81bb      	LDD  R27,Y+2+1
00135b 940e 207b 	CALL __GETW1P
00135d 23ff      	TST  R31
00135e f012      	BRMI _0x2040014
00135f 940e 1ac1 	CALL SUBOPT_0x3C
                 _0x2040014:
                 _0x2040013:
001361 c006      	RJMP _0x2040015
                 _0x2040010:
001362 81aa      	LDD  R26,Y+2
001363 81bb      	LDD  R27,Y+2+1
001364 efef      	LDI  R30,LOW(65535)
001365 efff      	LDI  R31,HIGH(65535)
001366 93ed      	ST   X+,R30
001367 93fc      	ST   X,R31
                 _0x2040015:
001368 8119      	LDD  R17,Y+1
001369 8108      	LDD  R16,Y+0
00136a 9625      	ADIW R28,5
00136b 9508      	RET
                 __ftoe_G102:
00136c 940e 1ac7 	CALL SUBOPT_0x3D
00136e e8e0      	LDI  R30,LOW(128)
00136f 83ea      	STD  Y+2,R30
001370 e3ef      	LDI  R30,LOW(63)
001371 83eb      	STD  Y+3,R30
001372 940e 20ca 	CALL __SAVELOCR4
001374 85ee      	LDD  R30,Y+14
001375 85ff      	LDD  R31,Y+14+1
001376 3fef      	CPI  R30,LOW(0xFFFF)
001377 efaf      	LDI  R26,HIGH(0xFFFF)
001378 07fa      	CPC  R31,R26
001379 f449      	BRNE _0x2040019
00137a 85e8      	LDD  R30,Y+8
00137b 85f9      	LDD  R31,Y+8+1
00137c 93fa      	ST   -Y,R31
00137d 93ea      	ST   -Y,R30
                +
00137e e1e6     +LDI R30 , LOW ( 2 * _0x2040000 + ( 0 ) )
00137f e0f4     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW1FN _0x2040000,0
001380 940e 1c7b 	CALL SUBOPT_0x86
001382 c0aa      	RJMP _0x20C0009
                 _0x2040019:
001383 3fef      	CPI  R30,LOW(0x7FFF)
001384 e7af      	LDI  R26,HIGH(0x7FFF)
001385 07fa      	CPC  R31,R26
001386 f449      	BRNE _0x2040018
001387 85e8      	LDD  R30,Y+8
001388 85f9      	LDD  R31,Y+8+1
001389 93fa      	ST   -Y,R31
00138a 93ea      	ST   -Y,R30
                +
00138b e1e7     +LDI R30 , LOW ( 2 * _0x2040000 + ( 1 ) )
00138c e0f4     +LDI R31 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW1FN _0x2040000,1
00138d 940e 1c7b 	CALL SUBOPT_0x86
00138f c09d      	RJMP _0x20C0009
                 _0x2040018:
001390 85ab      	LDD  R26,Y+11
001391 30a7      	CPI  R26,LOW(0x7)
001392 f010      	BRLO _0x204001B
001393 e0e6      	LDI  R30,LOW(6)
001394 87eb      	STD  Y+11,R30
                 _0x204001B:
001395 851b      	LDD  R17,Y+11
                 _0x204001C:
001396 2fe1      	MOV  R30,R17
001397 5011      	SUBI R17,1
001398 30e0      	CPI  R30,0
001399 f019      	BREQ _0x204001E
00139a 940e 1c7f 	CALL SUBOPT_0x87
00139c cff9      	RJMP _0x204001C
                 _0x204001E:
00139d 940e 1c02 	CALL SUBOPT_0x72
00139f 940e 20be 	CALL __CPD10
0013a1 f421      	BRNE _0x204001F
0013a2 e030      	LDI  R19,LOW(0)
0013a3 940e 1c7f 	CALL SUBOPT_0x87
0013a5 c028      	RJMP _0x2040020
                 _0x204001F:
0013a6 853b      	LDD  R19,Y+11
0013a7 940e 1c84 	CALL SUBOPT_0x88
0013a9 f009      	BREQ PC+2
0013aa f410      	BRCC PC+3
0013ab 940c 13b6 	JMP  _0x2040021
0013ad 940e 1c7f 	CALL SUBOPT_0x87
                 _0x2040022:
0013af 940e 1c84 	CALL SUBOPT_0x88
0013b1 f018      	BRLO _0x2040024
0013b2 940e 1c89 	CALL SUBOPT_0x89
0013b4 cffa      	RJMP _0x2040022
                 _0x2040024:
0013b5 c00d      	RJMP _0x2040025
                 _0x2040021:
                 _0x2040026:
0013b6 940e 1c84 	CALL SUBOPT_0x88
0013b8 f440      	BRSH _0x2040028
0013b9 940e 1bdf 	CALL SUBOPT_0x6D
0013bb 940e 1c93 	CALL SUBOPT_0x8A
0013bd 940e 19c7 	CALL SUBOPT_0x28
0013bf 5031      	SUBI R19,LOW(1)
0013c0 cff5      	RJMP _0x2040026
                 _0x2040028:
0013c1 940e 1c7f 	CALL SUBOPT_0x87
                 _0x2040025:
0013c3 940e 1c02 	CALL SUBOPT_0x72
0013c5 940e 1c97 	CALL SUBOPT_0x8B
0013c7 940e 19c7 	CALL SUBOPT_0x28
0013c9 940e 1c84 	CALL SUBOPT_0x88
0013cb f010      	BRLO _0x2040029
0013cc 940e 1c89 	CALL SUBOPT_0x89
                 _0x2040029:
                 _0x2040020:
0013ce e010      	LDI  R17,LOW(0)
                 _0x204002A:
0013cf 85eb      	LDD  R30,Y+11
0013d0 17e1      	CP   R30,R17
0013d1 f178      	BRLO _0x204002C
0013d2 940e 19ef 	CALL SUBOPT_0x2E
0013d4 940e 1c9e 	CALL SUBOPT_0x8C
0013d6 940e 1c97 	CALL SUBOPT_0x8B
0013d8 940e 1ca5 	CALL SUBOPT_0x8D
0013da 940e 19dc 	CALL SUBOPT_0x2B
0013dc 940e 1b08 	CALL SUBOPT_0x47
0013de 940e 1bdf 	CALL SUBOPT_0x6D
0013e0 940e 1ee9 	CALL __DIVF21
0013e2 940e 1dd8 	CALL __CFD1U
0013e4 2f0e      	MOV  R16,R30
0013e5 940e 1ca9 	CALL SUBOPT_0x8E
0013e7 2fe0      	MOV  R30,R16
0013e8 5de0      	SUBI R30,-LOW(48)
0013e9 93ec      	ST   X,R30
0013ea 2fe0      	MOV  R30,R16
0013eb 27ff      	CLR  R31
0013ec 2766      	CLR  R22
0013ed 2777      	CLR  R23
0013ee 940e 1e11 	CALL __CDF1
0013f0 940e 1cb0 	CALL SUBOPT_0x8F
0013f2 940e 1bdf 	CALL SUBOPT_0x6D
0013f4 940e 1cb4 	CALL SUBOPT_0x90
0013f6 940e 19c7 	CALL SUBOPT_0x28
0013f8 2fe1      	MOV  R30,R17
0013f9 5f1f      	SUBI R17,-1
0013fa 30e0      	CPI  R30,0
0013fb f699      	BRNE _0x204002A
0013fc 940e 1ca9 	CALL SUBOPT_0x8E
0013fe e2ee      	LDI  R30,LOW(46)
0013ff 93ec      	ST   X,R30
001400 cfce      	RJMP _0x204002A
                 _0x204002C:
001401 940e 1cb9 	CALL SUBOPT_0x91
001403 9731      	SBIW R30,1
001404 85aa      	LDD  R26,Y+10
001405 83a0      	STD  Z+0,R26
001406 3030      	CPI  R19,0
001407 f42c      	BRGE _0x204002E
001408 9531      	NEG  R19
001409 85a8      	LDD  R26,Y+8
00140a 85b9      	LDD  R27,Y+8+1
00140b e2ed      	LDI  R30,LOW(45)
00140c c003      	RJMP _0x204010E
                 _0x204002E:
00140d 85a8      	LDD  R26,Y+8
00140e 85b9      	LDD  R27,Y+8+1
00140f e2eb      	LDI  R30,LOW(43)
                 _0x204010E:
001410 93ec      	ST   X,R30
001411 940e 1cb9 	CALL SUBOPT_0x91
001413 940e 1cb9 	CALL SUBOPT_0x91
001415 9731      	SBIW R30,1
001416 01bf      	MOVW R22,R30
001417 2fa3      	MOV  R26,R19
001418 e0ea      	LDI  R30,LOW(10)
001419 940e 1ff4 	CALL __DIVB21
00141b 5de0      	SUBI R30,-LOW(48)
00141c 01db      	MOVW R26,R22
00141d 93ec      	ST   X,R30
00141e 940e 1cb9 	CALL SUBOPT_0x91
001420 9731      	SBIW R30,1
001421 01bf      	MOVW R22,R30
001422 2fa3      	MOV  R26,R19
001423 e0ea      	LDI  R30,LOW(10)
001424 940e 203b 	CALL __MODB21
001426 5de0      	SUBI R30,-LOW(48)
001427 01db      	MOVW R26,R22
001428 93ec      	ST   X,R30
001429 85a8      	LDD  R26,Y+8
00142a 85b9      	LDD  R27,Y+8+1
00142b e0e0      	LDI  R30,LOW(0)
00142c 93ec      	ST   X,R30
                 _0x20C0009:
00142d 940e 20d1 	CALL __LOADLOCR4
                 _0x20C000A:
00142f 9660      	ADIW R28,16
001430 9508      	RET
                 __print_G102:
001431 97ef      	SBIW R28,63
001432 9761      	SBIW R28,17
001433 940e 20c8 	CALL __SAVELOCR6
001435 e010      	LDI  R17,0
                +
001436 01fe     +MOVW R30 , R28
001437 5ae8     +SUBI R30 , LOW ( - 88 )
001438 4fff     +SBCI R31 , HIGH ( - 88 )
001439 9001     +LD R0 , Z +
00143a 81f0     +LD R31 , Z
00143b 2de0     +MOV R30 , R0
                 	__GETW1SX 88
00143c 87e8      	STD  Y+8,R30
00143d 87f9      	STD  Y+8+1,R31
                +
00143e 01fe     +MOVW R30 , R28
00143f 5aea     +SUBI R30 , LOW ( - 86 )
001440 4fff     +SBCI R31 , HIGH ( - 86 )
001441 9001     +LD R0 , Z +
001442 81f0     +LD R31 , Z
001443 2de0     +MOV R30 , R0
                 	__GETW1SX 86
001444 83ee      	STD  Y+6,R30
001445 83ff      	STD  Y+6+1,R31
001446 81ae      	LDD  R26,Y+6
001447 81bf      	LDD  R27,Y+6+1
001448 e0e0      	LDI  R30,LOW(0)
001449 e0f0      	LDI  R31,HIGH(0)
00144a 93ed      	ST   X+,R30
00144b 93fc      	ST   X,R31
                 _0x2040030:
00144c 01de      	MOVW R26,R28
00144d 5aa4      	SUBI R26,LOW(-(92))
00144e 4fbf      	SBCI R27,HIGH(-(92))
00144f 940e 1ac1 	CALL SUBOPT_0x3C
001451 9731      	SBIW R30,1
001452 91e4      	LPM  R30,Z
001453 2f2e      	MOV  R18,R30
001454 30e0      	CPI  R30,0
001455 f411      	BRNE PC+3
001456 940c 163b 	JMP _0x2040032
001458 2fe1      	MOV  R30,R17
001459 30e0      	CPI  R30,0
00145a f439      	BRNE _0x2040036
00145b 3225      	CPI  R18,37
00145c f411      	BRNE _0x2040037
00145d e011      	LDI  R17,LOW(1)
00145e c002      	RJMP _0x2040038
                 _0x2040037:
00145f 940e 1cbf 	CALL SUBOPT_0x92
                 _0x2040038:
001461 c1d8      	RJMP _0x2040035
                 _0x2040036:
001462 30e1      	CPI  R30,LOW(0x1)
001463 f4c1      	BRNE _0x2040039
001464 3225      	CPI  R18,37
001465 f419      	BRNE _0x204003A
001466 940e 1cbf 	CALL SUBOPT_0x92
001468 c1d0      	RJMP _0x204010F
                 _0x204003A:
001469 e012      	LDI  R17,LOW(2)
00146a e0e0      	LDI  R30,LOW(0)
00146b 8bed      	STD  Y+21,R30
00146c e000      	LDI  R16,LOW(0)
00146d 322d      	CPI  R18,45
00146e f411      	BRNE _0x204003B
00146f e001      	LDI  R16,LOW(1)
001470 c1c9      	RJMP _0x2040035
                 _0x204003B:
001471 322b      	CPI  R18,43
001472 f419      	BRNE _0x204003C
001473 e2eb      	LDI  R30,LOW(43)
001474 8bed      	STD  Y+21,R30
001475 c1c4      	RJMP _0x2040035
                 _0x204003C:
001476 3220      	CPI  R18,32
001477 f419      	BRNE _0x204003D
001478 e2e0      	LDI  R30,LOW(32)
001479 8bed      	STD  Y+21,R30
00147a c1bf      	RJMP _0x2040035
                 _0x204003D:
00147b c002      	RJMP _0x204003E
                 _0x2040039:
00147c 30e2      	CPI  R30,LOW(0x2)
00147d f439      	BRNE _0x204003F
                 _0x204003E:
00147e e050      	LDI  R21,LOW(0)
00147f e013      	LDI  R17,LOW(3)
001480 3320      	CPI  R18,48
001481 f411      	BRNE _0x2040040
001482 6800      	ORI  R16,LOW(128)
001483 c1b6      	RJMP _0x2040035
                 _0x2040040:
001484 c002      	RJMP _0x2040041
                 _0x204003F:
001485 30e3      	CPI  R30,LOW(0x3)
001486 f491      	BRNE _0x2040042
                 _0x2040041:
001487 3320      	CPI  R18,48
001488 f010      	BRLO _0x2040044
001489 332a      	CPI  R18,58
00148a f008      	BRLO _0x2040045
                 _0x2040044:
00148b c007      	RJMP _0x2040043
                 _0x2040045:
00148c e0aa      	LDI  R26,LOW(10)
00148d 9f5a      	MUL  R21,R26
00148e 2d50      	MOV  R21,R0
00148f 2fe2      	MOV  R30,R18
001490 53e0      	SUBI R30,LOW(48)
001491 0f5e      	ADD  R21,R30
001492 c1a7      	RJMP _0x2040035
                 _0x2040043:
001493 e040      	LDI  R20,LOW(0)
001494 322e      	CPI  R18,46
001495 f411      	BRNE _0x2040046
001496 e014      	LDI  R17,LOW(4)
001497 c1a2      	RJMP _0x2040035
                 _0x2040046:
001498 c00f      	RJMP _0x2040047
                 _0x2040042:
001499 30e4      	CPI  R30,LOW(0x4)
00149a f499      	BRNE _0x2040049
00149b 3320      	CPI  R18,48
00149c f010      	BRLO _0x204004B
00149d 332a      	CPI  R18,58
00149e f008      	BRLO _0x204004C
                 _0x204004B:
00149f c008      	RJMP _0x204004A
                 _0x204004C:
0014a0 6200      	ORI  R16,LOW(32)
0014a1 e0aa      	LDI  R26,LOW(10)
0014a2 9f4a      	MUL  R20,R26
0014a3 2d40      	MOV  R20,R0
0014a4 2fe2      	MOV  R30,R18
0014a5 53e0      	SUBI R30,LOW(48)
0014a6 0f4e      	ADD  R20,R30
0014a7 c192      	RJMP _0x2040035
                 _0x204004A:
                 _0x2040047:
0014a8 362c      	CPI  R18,108
0014a9 f419      	BRNE _0x204004D
0014aa 6002      	ORI  R16,LOW(2)
0014ab e015      	LDI  R17,LOW(5)
0014ac c18d      	RJMP _0x2040035
                 _0x204004D:
0014ad c004      	RJMP _0x204004E
                 _0x2040049:
0014ae 30e5      	CPI  R30,LOW(0x5)
0014af f011      	BREQ PC+3
0014b0 940c 163a 	JMP _0x2040035
                 _0x204004E:
0014b2 2fe2      	MOV  R30,R18
0014b3 36e3      	CPI  R30,LOW(0x63)
0014b4 f459      	BRNE _0x2040053
0014b5 940e 1cc8 	CALL SUBOPT_0x93
0014b7 940e 1ccf 	CALL SUBOPT_0x94
0014b9 940e 1cc8 	CALL SUBOPT_0x93
0014bb 81a4      	LDD  R26,Z+4
0014bc 93aa      	ST   -Y,R26
0014bd 940e 1cd6 	CALL SUBOPT_0x95
0014bf c179      	RJMP _0x2040054
                 _0x2040053:
0014c0 34e5      	CPI  R30,LOW(0x45)
0014c1 f011      	BREQ _0x2040057
0014c2 36e5      	CPI  R30,LOW(0x65)
0014c3 f409      	BRNE _0x2040058
                 _0x2040057:
0014c4 c004      	RJMP _0x2040059
                 _0x2040058:
0014c5 36e6      	CPI  R30,LOW(0x66)
0014c6 f011      	BREQ PC+3
0014c7 940c 1513 	JMP _0x204005A
                 _0x2040059:
0014c9 01fe      	MOVW R30,R28
0014ca 9676      	ADIW R30,22
0014cb 87ee      	STD  Y+14,R30
0014cc 87ff      	STD  Y+14+1,R31
0014cd 940e 1cde 	CALL SUBOPT_0x96
0014cf 940e 207f 	CALL __GETD1P
0014d1 940e 1ce5 	CALL SUBOPT_0x97
0014d3 940e 1cea 	CALL SUBOPT_0x98
0014d5 85ad      	LDD  R26,Y+13
0014d6 23aa      	TST  R26
0014d7 f022      	BRMI _0x204005B
0014d8 89ad      	LDD  R26,Y+21
0014d9 32ab      	CPI  R26,LOW(0x2B)
0014da f049      	BREQ _0x204005D
0014db c017      	RJMP _0x204005E
                 _0x204005B:
0014dc 940e 1cec 	CALL SUBOPT_0x99
0014de 940e 1da5 	CALL __ANEGF1
0014e0 940e 1ce5 	CALL SUBOPT_0x97
0014e2 e2ed      	LDI  R30,LOW(45)
0014e3 8bed      	STD  Y+21,R30
                 _0x204005D:
0014e4 ff07      	SBRS R16,7
0014e5 c005      	RJMP _0x204005F
0014e6 89ed      	LDD  R30,Y+21
0014e7 93ea      	ST   -Y,R30
0014e8 940e 1cd6 	CALL SUBOPT_0x95
0014ea c008      	RJMP _0x2040060
                 _0x204005F:
0014eb 85ee      	LDD  R30,Y+14
0014ec 85ff      	LDD  R31,Y+14+1
0014ed 9631      	ADIW R30,1
0014ee 87ee      	STD  Y+14,R30
0014ef 87ff      	STD  Y+14+1,R31
0014f0 9731      	SBIW R30,1
0014f1 89ad      	LDD  R26,Y+21
0014f2 83a0      	STD  Z+0,R26
                 _0x2040060:
                 _0x204005E:
0014f3 ff05      	SBRS R16,5
0014f4 e046      	LDI  R20,LOW(6)
0014f5 3626      	CPI  R18,102
0014f6 f461      	BRNE _0x2040062
0014f7 940e 1cec 	CALL SUBOPT_0x99
0014f9 940e 2094 	CALL __PUTPARD1
0014fb 934a      	ST   -Y,R20
0014fc 89eb      	LDD  R30,Y+19
0014fd 89fc      	LDD  R31,Y+19+1
0014fe 93fa      	ST   -Y,R31
0014ff 93ea      	ST   -Y,R30
001500 940e 181a 	CALL _ftoa
001502 c00b      	RJMP _0x2040063
                 _0x2040062:
001503 940e 1cec 	CALL SUBOPT_0x99
001505 940e 2094 	CALL __PUTPARD1
001507 934a      	ST   -Y,R20
001508 932a      	ST   -Y,R18
001509 89ec      	LDD  R30,Y+20
00150a 89fd      	LDD  R31,Y+20+1
00150b 93fa      	ST   -Y,R31
00150c 93ea      	ST   -Y,R30
00150d de5e      	RCALL __ftoe_G102
                 _0x2040063:
00150e 01fe      	MOVW R30,R28
00150f 9676      	ADIW R30,22
001510 940e 1cf1 	CALL SUBOPT_0x9A
001512 c01e      	RJMP _0x2040064
                 _0x204005A:
001513 37e3      	CPI  R30,LOW(0x73)
001514 f439      	BRNE _0x2040066
001515 940e 1cea 	CALL SUBOPT_0x98
001517 940e 1cf9 	CALL SUBOPT_0x9B
001519 940e 1cf1 	CALL SUBOPT_0x9A
00151b c00e      	RJMP _0x2040067
                 _0x2040066:
00151c 37e0      	CPI  R30,LOW(0x70)
00151d f4c1      	BRNE _0x2040069
00151e 940e 1cea 	CALL SUBOPT_0x98
001520 940e 1cf9 	CALL SUBOPT_0x9B
001522 87ee      	STD  Y+14,R30
001523 87ff      	STD  Y+14+1,R31
001524 93fa      	ST   -Y,R31
001525 93ea      	ST   -Y,R30
001526 940e 1322 	CALL _strlenf
001528 2f1e      	MOV  R17,R30
001529 6008      	ORI  R16,LOW(8)
                 _0x2040067:
00152a 770f      	ANDI R16,LOW(127)
00152b 3040      	CPI  R20,0
00152c f011      	BREQ _0x204006B
00152d 1741      	CP   R20,R17
00152e f008      	BRLO _0x204006C
                 _0x204006B:
00152f c001      	RJMP _0x204006A
                 _0x204006C:
001530 2f14      	MOV  R17,R20
                 _0x204006A:
                 _0x2040064:
001531 e040      	LDI  R20,LOW(0)
001532 e0e0      	LDI  R30,LOW(0)
001533 8bec      	STD  Y+20,R30
001534 e030      	LDI  R19,LOW(0)
001535 c06e      	RJMP _0x204006D
                 _0x2040069:
001536 36e4      	CPI  R30,LOW(0x64)
001537 f011      	BREQ _0x2040070
001538 36e9      	CPI  R30,LOW(0x69)
001539 f411      	BRNE _0x2040071
                 _0x2040070:
00153a 6004      	ORI  R16,LOW(4)
00153b c002      	RJMP _0x2040072
                 _0x2040071:
00153c 37e5      	CPI  R30,LOW(0x75)
00153d f4a1      	BRNE _0x2040073
                 _0x2040072:
00153e e0ea      	LDI  R30,LOW(10)
00153f 8bec      	STD  Y+20,R30
001540 ff01      	SBRS R16,1
001541 c008      	RJMP _0x2040074
                +
001542 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
001543 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
001544 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
001545 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
001546 940e 19b9 	CALL SUBOPT_0x25
001548 e01a      	LDI  R17,LOW(10)
001549 c023      	RJMP _0x2040075
                 _0x2040074:
                +
00154a e1e0     +LDI R30 , LOW ( 0x2710 )
00154b e2f7     +LDI R31 , HIGH ( 0x2710 )
00154c e060     +LDI R22 , BYTE3 ( 0x2710 )
00154d e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
00154e 940e 19b9 	CALL SUBOPT_0x25
001550 e015      	LDI  R17,LOW(5)
001551 c01b      	RJMP _0x2040075
                 _0x2040073:
001552 35e8      	CPI  R30,LOW(0x58)
001553 f411      	BRNE _0x2040077
001554 6008      	ORI  R16,LOW(8)
001555 c004      	RJMP _0x2040078
                 _0x2040077:
001556 37e8      	CPI  R30,LOW(0x78)
001557 f011      	BREQ PC+3
001558 940c 1639 	JMP _0x20400B6
                 _0x2040078:
00155a e1e0      	LDI  R30,LOW(16)
00155b 8bec      	STD  Y+20,R30
00155c ff01      	SBRS R16,1
00155d c008      	RJMP _0x204007A
                +
00155e e0e0     +LDI R30 , LOW ( 0x10000000 )
00155f e0f0     +LDI R31 , HIGH ( 0x10000000 )
001560 e060     +LDI R22 , BYTE3 ( 0x10000000 )
001561 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
001562 940e 19b9 	CALL SUBOPT_0x25
001564 e018      	LDI  R17,LOW(8)
001565 c007      	RJMP _0x2040075
                 _0x204007A:
                +
001566 e0e0     +LDI R30 , LOW ( 0x1000 )
001567 e1f0     +LDI R31 , HIGH ( 0x1000 )
001568 e060     +LDI R22 , BYTE3 ( 0x1000 )
001569 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
00156a 940e 19b9 	CALL SUBOPT_0x25
00156c e014      	LDI  R17,LOW(4)
                 _0x2040075:
00156d 3040      	CPI  R20,0
00156e f011      	BREQ _0x204007B
00156f 770f      	ANDI R16,LOW(127)
001570 c001      	RJMP _0x204007C
                 _0x204007B:
001571 e041      	LDI  R20,LOW(1)
                 _0x204007C:
001572 ff01      	SBRS R16,1
001573 c008      	RJMP _0x204007D
001574 940e 1cea 	CALL SUBOPT_0x98
001576 940e 1cde 	CALL SUBOPT_0x96
001578 9614      	ADIW R26,4
001579 940e 207f 	CALL __GETD1P
00157b c00f      	RJMP _0x2040110
                 _0x204007D:
00157c ff02      	SBRS R16,2
00157d c007      	RJMP _0x204007F
00157e 940e 1cea 	CALL SUBOPT_0x98
001580 940e 1cf9 	CALL SUBOPT_0x9B
001582 940e 1fa4 	CALL __CWD1
001584 c006      	RJMP _0x2040110
                 _0x204007F:
001585 940e 1cea 	CALL SUBOPT_0x98
001587 940e 1cf9 	CALL SUBOPT_0x9B
001589 2766      	CLR  R22
00158a 2777      	CLR  R23
                 _0x2040110:
                +
00158b 87ea     +STD Y + 10 , R30
00158c 87fb     +STD Y + 10 + 1 , R31
00158d 876c     +STD Y + 10 + 2 , R22
00158e 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00158f ff02      	SBRS R16,2
001590 c012      	RJMP _0x2040081
001591 85ad      	LDD  R26,Y+13
001592 23aa      	TST  R26
001593 f442      	BRPL _0x2040082
001594 940e 1cec 	CALL SUBOPT_0x99
001596 940e 1f96 	CALL __ANEGD1
001598 940e 1ce5 	CALL SUBOPT_0x97
00159a e2ed      	LDI  R30,LOW(45)
00159b 8bed      	STD  Y+21,R30
                 _0x2040082:
00159c 89ed      	LDD  R30,Y+21
00159d 30e0      	CPI  R30,0
00159e f019      	BREQ _0x2040083
00159f 5f1f      	SUBI R17,-LOW(1)
0015a0 5f4f      	SUBI R20,-LOW(1)
0015a1 c001      	RJMP _0x2040084
                 _0x2040083:
0015a2 7f0b      	ANDI R16,LOW(251)
                 _0x2040084:
                 _0x2040081:
0015a3 2f34      	MOV  R19,R20
                 _0x204006D:
0015a4 fd00      	SBRC R16,0
0015a5 c014      	RJMP _0x2040085
                 _0x2040086:
0015a6 1715      	CP   R17,R21
0015a7 f410      	BRSH _0x2040089
0015a8 1735      	CP   R19,R21
0015a9 f008      	BRLO _0x204008A
                 _0x2040089:
0015aa c00f      	RJMP _0x2040088
                 _0x204008A:
0015ab ff07      	SBRS R16,7
0015ac c008      	RJMP _0x204008B
0015ad ff02      	SBRS R16,2
0015ae c004      	RJMP _0x204008C
0015af 7f0b      	ANDI R16,LOW(251)
0015b0 892d      	LDD  R18,Y+21
0015b1 5011      	SUBI R17,LOW(1)
0015b2 c001      	RJMP _0x204008D
                 _0x204008C:
0015b3 e320      	LDI  R18,LOW(48)
                 _0x204008D:
0015b4 c001      	RJMP _0x204008E
                 _0x204008B:
0015b5 e220      	LDI  R18,LOW(32)
                 _0x204008E:
0015b6 940e 1cbf 	CALL SUBOPT_0x92
0015b8 5051      	SUBI R21,LOW(1)
0015b9 cfec      	RJMP _0x2040086
                 _0x2040088:
                 _0x2040085:
                 _0x204008F:
0015ba 1714      	CP   R17,R20
0015bb f490      	BRSH _0x2040091
0015bc 6100      	ORI  R16,LOW(16)
0015bd ff02      	SBRS R16,2
0015be c006      	RJMP _0x2040092
0015bf 940e 1cfe 	CALL SUBOPT_0x9C
0015c1 f009      	BREQ _0x2040093
0015c2 5051      	SUBI R21,LOW(1)
                 _0x2040093:
0015c3 5011      	SUBI R17,LOW(1)
0015c4 5041      	SUBI R20,LOW(1)
                 _0x2040092:
0015c5 e3e0      	LDI  R30,LOW(48)
0015c6 93ea      	ST   -Y,R30
0015c7 940e 1cd6 	CALL SUBOPT_0x95
0015c9 3050      	CPI  R21,0
0015ca f009      	BREQ _0x2040094
0015cb 5051      	SUBI R21,LOW(1)
                 _0x2040094:
0015cc 5041      	SUBI R20,LOW(1)
0015cd cfec      	RJMP _0x204008F
                 _0x2040091:
0015ce 2f31      	MOV  R19,R17
0015cf 89ec      	LDD  R30,Y+20
0015d0 30e0      	CPI  R30,0
0015d1 f4b9      	BRNE _0x2040095
                 _0x2040096:
0015d2 3030      	CPI  R19,0
0015d3 f0a1      	BREQ _0x2040098
0015d4 ff03      	SBRS R16,3
0015d5 c006      	RJMP _0x2040099
0015d6 85ee      	LDD  R30,Y+14
0015d7 85ff      	LDD  R31,Y+14+1
0015d8 9125      	LPM  R18,Z+
0015d9 87ee      	STD  Y+14,R30
0015da 87ff      	STD  Y+14+1,R31
0015db c005      	RJMP _0x204009A
                 _0x2040099:
0015dc 85ae      	LDD  R26,Y+14
0015dd 85bf      	LDD  R27,Y+14+1
0015de 912d      	LD   R18,X+
0015df 87ae      	STD  Y+14,R26
0015e0 87bf      	STD  Y+14+1,R27
                 _0x204009A:
0015e1 940e 1cbf 	CALL SUBOPT_0x92
0015e3 3050      	CPI  R21,0
0015e4 f009      	BREQ _0x204009B
0015e5 5051      	SUBI R21,LOW(1)
                 _0x204009B:
0015e6 5031      	SUBI R19,LOW(1)
0015e7 cfea      	RJMP _0x2040096
                 _0x2040098:
0015e8 c046      	RJMP _0x204009C
                 _0x2040095:
                 _0x204009E:
0015e9 940e 1d12 	CALL SUBOPT_0x9D
0015eb 940e 2011 	CALL __DIVD21U
0015ed 2f2e      	MOV  R18,R30
0015ee 302a      	CPI  R18,10
0015ef f030      	BRLO _0x20400A0
0015f0 ff03      	SBRS R16,3
0015f1 c002      	RJMP _0x20400A1
0015f2 5c29      	SUBI R18,-LOW(55)
0015f3 c001      	RJMP _0x20400A2
                 _0x20400A1:
0015f4 5a29      	SUBI R18,-LOW(87)
                 _0x20400A2:
0015f5 c001      	RJMP _0x20400A3
                 _0x20400A0:
0015f6 5d20      	SUBI R18,-LOW(48)
                 _0x20400A3:
0015f7 fd04      	SBRC R16,4
0015f8 c01a      	RJMP _0x20400A5
0015f9 3321      	CPI  R18,49
0015fa f428      	BRSH _0x20400A7
0015fb 940e 1bed 	CALL SUBOPT_0x6F
0015fd 940e 1bd7 	CALL SUBOPT_0x6C
0015ff f409      	BRNE _0x20400A6
                 _0x20400A7:
001600 c00b      	RJMP _0x20400A9
                 _0x20400A6:
001601 1743      	CP   R20,R19
001602 f440      	BRSH _0x2040111
001603 1753      	CP   R21,R19
001604 f010      	BRLO _0x20400AC
001605 ff00      	SBRS R16,0
001606 c001      	RJMP _0x20400AD
                 _0x20400AC:
001607 c010      	RJMP _0x20400AB
                 _0x20400AD:
001608 e220      	LDI  R18,LOW(32)
001609 ff07      	SBRS R16,7
00160a c008      	RJMP _0x20400AE
                 _0x2040111:
00160b e320      	LDI  R18,LOW(48)
                 _0x20400A9:
00160c 6100      	ORI  R16,LOW(16)
00160d ff02      	SBRS R16,2
00160e c004      	RJMP _0x20400AF
00160f 940e 1cfe 	CALL SUBOPT_0x9C
001611 f009      	BREQ _0x20400B0
001612 5051      	SUBI R21,LOW(1)
                 _0x20400B0:
                 _0x20400AF:
                 _0x20400AE:
                 _0x20400A5:
001613 940e 1cbf 	CALL SUBOPT_0x92
001615 3050      	CPI  R21,0
001616 f009      	BREQ _0x20400B1
001617 5051      	SUBI R21,LOW(1)
                 _0x20400B1:
                 _0x20400AB:
001618 5031      	SUBI R19,LOW(1)
001619 940e 1d12 	CALL SUBOPT_0x9D
00161b 940e 204a 	CALL __MODD21U
00161d 940e 1ce5 	CALL SUBOPT_0x97
00161f 89ec      	LDD  R30,Y+20
001620 940e 1bed 	CALL SUBOPT_0x6F
001622 27ff      	CLR  R31
001623 2766      	CLR  R22
001624 2777      	CLR  R23
001625 940e 2011 	CALL __DIVD21U
001627 940e 19b9 	CALL SUBOPT_0x25
001629 940e 19e1 	CALL SUBOPT_0x2C
00162b 940e 20be 	CALL __CPD10
00162d f009      	BREQ _0x204009F
00162e cfba      	RJMP _0x204009E
                 _0x204009F:
                 _0x204009C:
00162f ff00      	SBRS R16,0
001630 c008      	RJMP _0x20400B2
                 _0x20400B3:
001631 3050      	CPI  R21,0
001632 f031      	BREQ _0x20400B5
001633 5051      	SUBI R21,LOW(1)
001634 e2e0      	LDI  R30,LOW(32)
001635 93ea      	ST   -Y,R30
001636 940e 1cd6 	CALL SUBOPT_0x95
001638 cff8      	RJMP _0x20400B3
                 _0x20400B5:
                 _0x20400B2:
                 _0x20400B6:
                 _0x2040054:
                 _0x204010F:
001639 e010      	LDI  R17,LOW(0)
                 _0x2040035:
00163a ce11      	RJMP _0x2040030
                 _0x2040032:
00163b 81ae      	LDD  R26,Y+6
00163c 81bf      	LDD  R27,Y+6+1
00163d 940e 207b 	CALL __GETW1P
00163f 940e 20cf 	CALL __LOADLOCR6
001641 96ef      	ADIW R28,63
001642 966f      	ADIW R28,31
001643 9508      	RET
                 _sprintf:
001644 92ff      	PUSH R15
001645 2ef8      	MOV  R15,R24
001646 9726      	SBIW R28,6
001647 940e 20ca 	CALL __SAVELOCR4
001649 940e 1d18 	CALL SUBOPT_0x9E
00164b 9730      	SBIW R30,0
00164c f419      	BRNE _0x20400B7
00164d efef      	LDI  R30,LOW(65535)
00164e efff      	LDI  R31,HIGH(65535)
00164f c025      	RJMP _0x20C0008
                 _0x20400B7:
001650 01de      	MOVW R26,R28
001651 9616      	ADIW R26,6
001652 940e 1f84 	CALL __ADDW2R15
001654 018d      	MOVW R16,R26
001655 940e 1d18 	CALL SUBOPT_0x9E
001657 83ee      	STD  Y+6,R30
001658 83ff      	STD  Y+6+1,R31
001659 e0e0      	LDI  R30,LOW(0)
00165a 87e8      	STD  Y+8,R30
00165b 87e9      	STD  Y+8+1,R30
00165c 01de      	MOVW R26,R28
00165d 961a      	ADIW R26,10
00165e 940e 1f84 	CALL __ADDW2R15
001660 940e 207b 	CALL __GETW1P
001662 93fa      	ST   -Y,R31
001663 93ea      	ST   -Y,R30
001664 931a      	ST   -Y,R17
001665 930a      	ST   -Y,R16
001666 e3e4      	LDI  R30,LOW(_put_buff_G102)
001667 e1f3      	LDI  R31,HIGH(_put_buff_G102)
001668 93fa      	ST   -Y,R31
001669 93ea      	ST   -Y,R30
00166a 01fe      	MOVW R30,R28
00166b 963a      	ADIW R30,10
00166c 93fa      	ST   -Y,R31
00166d 93ea      	ST   -Y,R30
00166e ddc2      	RCALL __print_G102
00166f 019f      	MOVW R18,R30
001670 81ae      	LDD  R26,Y+6
001671 81bf      	LDD  R27,Y+6+1
001672 e0e0      	LDI  R30,LOW(0)
001673 93ec      	ST   X,R30
001674 01f9      	MOVW R30,R18
                 _0x20C0008:
001675 940e 20d1 	CALL __LOADLOCR4
001677 962a      	ADIW R28,10
001678 90ff      	POP  R15
001679 9508      	RET
                 
                 	.CSEG
                 _ftrunc:
00167a 817b         ldd  r23,y+3
00167b 816a         ldd  r22,y+2
00167c 81f9         ldd  r31,y+1
00167d 81e8         ld   r30,y
00167e fb77         bst  r23,7
00167f 0f77         lsl  r23
001680 fd67         sbrc r22,7
001681 6071         sbr  r23,1
001682 2f97         mov  r25,r23
001683 579e         subi r25,0x7e
001684 f081         breq __ftrunc0
001685 f078         brcs __ftrunc0
001686 3198         cpi  r25,24
001687 f490         brsh __ftrunc1
001688 27aa         clr  r26
001689 27bb         clr  r27
00168a 2788         clr  r24
                 __ftrunc2:
00168b 9408         sec
00168c 9587         ror  r24
00168d 95b7         ror  r27
00168e 95a7         ror  r26
00168f 959a         dec  r25
001690 f7d1         brne __ftrunc2
001691 23ea         and  r30,r26
001692 23fb         and  r31,r27
001693 2368         and  r22,r24
001694 c005         rjmp __ftrunc1
                 __ftrunc0:
001695 94e8         clt
001696 2777         clr  r23
001697 27ee         clr  r30
001698 27ff         clr  r31
001699 2766         clr  r22
                 __ftrunc1:
00169a 776f         cbr  r22,0x80
00169b 9576         lsr  r23
00169c f408         brcc __ftrunc3
00169d 6860         sbr  r22,0x80
                 __ftrunc3:
00169e f977         bld  r23,7
00169f 91a9         ld   r26,y+
0016a0 91b9         ld   r27,y+
0016a1 9189         ld   r24,y+
0016a2 9199         ld   r25,y+
0016a3 17ea         cp   r30,r26
0016a4 07fb         cpc  r31,r27
0016a5 0768         cpc  r22,r24
0016a6 0779         cpc  r23,r25
0016a7 fb97         bst  r25,7
0016a8 9508         ret
                 _floor:
0016a9 940e 1d1f 	CALL SUBOPT_0x9F
0016ab 940e 1d22 	CALL SUBOPT_0xA0
0016ad f419          brne __floor1
                 __floor0:
0016ae 940e 1d1f 	CALL SUBOPT_0x9F
0016b0 c11e      	RJMP _0x20C0004
                 __floor1:
0016b1 f7e6          brtc __floor0
0016b2 940e 1d27 	CALL SUBOPT_0xA1
0016b4 c118      	RJMP _0x20C0006
                 _ceil:
0016b5 940e 1d1f 	CALL SUBOPT_0x9F
0016b7 940e 1d22 	CALL SUBOPT_0xA0
0016b9 f419          brne __ceil1
                 __ceil0:
0016ba 940e 1d1f 	CALL SUBOPT_0x9F
0016bc c112      	RJMP _0x20C0004
                 __ceil1:
0016bd f3e6          brts __ceil0
0016be 940e 1d27 	CALL SUBOPT_0xA1
0016c0 940e 1e4b 	CALL __ADDF12
0016c2 c10c      	RJMP _0x20C0004
                 _fmod:
0016c3 9724      	SBIW R28,4
0016c4 940e 1b08 	CALL SUBOPT_0x47
0016c6 940e 20be 	CALL __CPD10
0016c8 f429      	BRNE _0x2060005
                +
0016c9 e0e0     +LDI R30 , LOW ( 0x0 )
0016ca e0f0     +LDI R31 , HIGH ( 0x0 )
0016cb e060     +LDI R22 , BYTE3 ( 0x0 )
0016cc e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0016cd c14a      	RJMP _0x20C0003
                 _0x2060005:
0016ce 940e 1d29 	CALL SUBOPT_0xA2
0016d0 940e 1d1f 	CALL SUBOPT_0x9F
0016d2 940e 20be 	CALL __CPD10
0016d4 f429      	BRNE _0x2060006
                +
0016d5 e0e0     +LDI R30 , LOW ( 0x0 )
0016d6 e0f0     +LDI R31 , HIGH ( 0x0 )
0016d7 e060     +LDI R22 , BYTE3 ( 0x0 )
0016d8 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0016d9 c13e      	RJMP _0x20C0003
                 _0x2060006:
0016da 940e 1a00 	CALL SUBOPT_0x31
0016dc 940e 20c2 	CALL __CPD02
0016de f42c      	BRGE _0x2060007
0016df 940e 1d1f 	CALL SUBOPT_0x9F
0016e1 940e 1ca5 	CALL SUBOPT_0x8D
0016e3 c003      	RJMP _0x2060033
                 _0x2060007:
0016e4 940e 1d2e 	CALL SUBOPT_0xA3
0016e6 dfce      	RCALL _ceil
                 _0x2060033:
0016e7 940e 208f 	CALL __PUTD1S0
0016e9 940e 1d1f 	CALL SUBOPT_0x9F
0016eb 940e 1cb0 	CALL SUBOPT_0x8F
0016ed 940e 1b18 	CALL SUBOPT_0x4A
0016ef 940e 1cb4 	CALL SUBOPT_0x90
0016f1 c126      	RJMP _0x20C0003
                 _xatan:
0016f2 9724      	SBIW R28,4
0016f3 940e 1b08 	CALL SUBOPT_0x47
0016f5 940e 1cb0 	CALL SUBOPT_0x8F
0016f7 940e 19fd 	CALL SUBOPT_0x30
0016f9 940e 1d1f 	CALL SUBOPT_0x9F
                +
0016fb e6a5     +LDI R26 , LOW ( 0x40CBD065 )
0016fc edb0     +LDI R27 , HIGH ( 0x40CBD065 )
0016fd ec8b     +LDI R24 , BYTE3 ( 0x40CBD065 )
0016fe e490     +LDI R25 , BYTE4 ( 0x40CBD065 )
                 	__GETD2N 0x40CBD065
0016ff 940e 1d32 	CALL SUBOPT_0xA4
001701 940e 1cb0 	CALL SUBOPT_0x8F
001703 937f      	PUSH R23
001704 936f      	PUSH R22
001705 93ff      	PUSH R31
001706 93ef      	PUSH R30
001707 940e 1d1f 	CALL SUBOPT_0x9F
                +
001709 e0a0     +LDI R26 , LOW ( 0x41296D00 )
00170a e6bd     +LDI R27 , HIGH ( 0x41296D00 )
00170b e289     +LDI R24 , BYTE3 ( 0x41296D00 )
00170c e491     +LDI R25 , BYTE4 ( 0x41296D00 )
                 	__GETD2N 0x41296D00
00170d 940e 1e4b 	CALL __ADDF12
00170f 940e 1a00 	CALL SUBOPT_0x31
001711 940e 1d32 	CALL SUBOPT_0xA4
001713 91af      	POP  R26
001714 91bf      	POP  R27
001715 918f      	POP  R24
001716 919f      	POP  R25
001717 940e 1ee9 	CALL __DIVF21
001719 9628      	ADIW R28,8
00171a 9508      	RET
                 _yatan:
00171b 940e 1a00 	CALL SUBOPT_0x31
                +
00171d eced     +LDI R30 , LOW ( 0x3ED413CD )
00171e e1f3     +LDI R31 , HIGH ( 0x3ED413CD )
00171f ed64     +LDI R22 , BYTE3 ( 0x3ED413CD )
001720 e37e     +LDI R23 , BYTE4 ( 0x3ED413CD )
                 	__GETD1N 0x3ED413CD
001721 940e 1f2e 	CALL __CMPF12
001723 f420      	BRSH _0x2060020
001724 940e 1d2e 	CALL SUBOPT_0xA3
001726 dfcb      	RCALL _xatan
001727 c0a7      	RJMP _0x20C0004
                 _0x2060020:
001728 940e 1a00 	CALL SUBOPT_0x31
                +
00172a e7ea     +LDI R30 , LOW ( 0x401A827A )
00172b e8f2     +LDI R31 , HIGH ( 0x401A827A )
00172c e16a     +LDI R22 , BYTE3 ( 0x401A827A )
00172d e470     +LDI R23 , BYTE4 ( 0x401A827A )
                 	__GETD1N 0x401A827A
00172e 940e 1f2e 	CALL __CMPF12
001730 f009      	BREQ PC+2
001731 f410      	BRCC PC+3
001732 940c 1739 	JMP  _0x2060021
001734 940e 1d27 	CALL SUBOPT_0xA1
001736 940e 1d3b 	CALL SUBOPT_0xA5
001738 c08e      	RJMP _0x20C0005
                 _0x2060021:
001739 940e 1b12 	CALL SUBOPT_0x49
00173b 937f      	PUSH R23
00173c 936f      	PUSH R22
00173d 93ff      	PUSH R31
00173e 93ef      	PUSH R30
00173f 940e 1d27 	CALL SUBOPT_0xA1
001741 940e 1e4b 	CALL __ADDF12
001743 91af      	POP  R26
001744 91bf      	POP  R27
001745 918f      	POP  R24
001746 919f      	POP  R25
001747 940e 1d3b 	CALL SUBOPT_0xA5
                +
001749 edab     +LDI R26 , LOW ( 0x3F490FDB )
00174a e0bf     +LDI R27 , HIGH ( 0x3F490FDB )
00174b e489     +LDI R24 , BYTE3 ( 0x3F490FDB )
00174c e39f     +LDI R25 , BYTE4 ( 0x3F490FDB )
                 	__GETD2N 0x3F490FDB
00174d 940e 1e4b 	CALL __ADDF12
00174f c07f      	RJMP _0x20C0004
                 _asin:
001750 9724      	SBIW R28,4
001751 931a      	ST   -Y,R17
001752 e010      	LDI  R17,0
001753 940e 1d41 	CALL SUBOPT_0xA6
001755 940e 1d46 	CALL SUBOPT_0xA7
001757 f048      	BRLO _0x2060023
001758 940e 1d41 	CALL SUBOPT_0xA6
00175a 940e 1d4d 	CALL SUBOPT_0xA8
00175c f019      	BREQ PC+4
00175d f010      	BRCS PC+3
00175e 940c 1761 	JMP  _0x2060023
001760 c003      	RJMP _0x2060022
                 _0x2060023:
001761 940e 1d54 	CALL SUBOPT_0xA9
001763 c04c      	RJMP _0x20C0007
                 _0x2060022:
001764 85a8      	LDD  R26,Y+8
001765 23aa      	TST  R26
001766 f44a      	BRPL _0x2060025
001767 940e 1d59 	CALL SUBOPT_0xAA
001769 940e 1da5 	CALL __ANEGF1
                +
00176b 83ed     +STD Y + 5 , R30
00176c 83fe     +STD Y + 5 + 1 , R31
00176d 836f     +STD Y + 5 + 2 , R22
00176e 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
00176f e011      	LDI  R17,LOW(1)
                 _0x2060025:
001770 940e 1d59 	CALL SUBOPT_0xAA
001772 940e 1d41 	CALL SUBOPT_0xA6
001774 940e 1e9b 	CALL __MULF12
001776 940e 1b0d 	CALL SUBOPT_0x48
001778 940e 1cb4 	CALL SUBOPT_0x90
00177a 940e 2094 	CALL __PUTPARD1
00177c 940e 1f4e 	CALL _sqrt
                +
00177e 83e9     +STD Y + 1 , R30
00177f 83fa     +STD Y + 1 + 1 , R31
001780 836b     +STD Y + 1 + 2 , R22
001781 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
001782 940e 1d41 	CALL SUBOPT_0xA6
                +
001784 efe3     +LDI R30 , LOW ( 0x3F3504F3 )
001785 e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
001786 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
001787 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
001788 940e 1f2e 	CALL __CMPF12
00178a f009      	BREQ PC+2
00178b f410      	BRCC PC+3
00178c 940c 179d 	JMP  _0x2060026
00178e 940e 1d59 	CALL SUBOPT_0xAA
                +
001790 81a9     +LDD R26 , Y + 1
001791 81ba     +LDD R27 , Y + 1 + 1
001792 818b     +LDD R24 , Y + 1 + 2
001793 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
001794 940e 1d5e 	CALL SUBOPT_0xAB
                +
001796 edab     +LDI R26 , LOW ( 0x3FC90FDB )
001797 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
001798 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
001799 e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
00179a 940e 1cb4 	CALL SUBOPT_0x90
00179c c006      	RJMP _0x2060035
                 _0x2060026:
00179d 940e 1d64 	CALL SUBOPT_0xAC
00179f 940e 1d41 	CALL SUBOPT_0xA6
0017a1 940e 1d5e 	CALL SUBOPT_0xAB
                 _0x2060035:
                +
0017a3 83e9     +STD Y + 1 , R30
0017a4 83fa     +STD Y + 1 + 1 , R31
0017a5 836b     +STD Y + 1 + 2 , R22
0017a6 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0017a7 3010      	CPI  R17,0
0017a8 f029      	BREQ _0x2060028
0017a9 940e 1d64 	CALL SUBOPT_0xAC
0017ab 940e 1da5 	CALL __ANEGF1
0017ad c002      	RJMP _0x20C0007
                 _0x2060028:
0017ae 940e 1d64 	CALL SUBOPT_0xAC
                 _0x20C0007:
0017b0 8118      	LDD  R17,Y+0
0017b1 9629      	ADIW R28,9
0017b2 9508      	RET
                 _acos:
0017b3 940e 1a00 	CALL SUBOPT_0x31
0017b5 940e 1d46 	CALL SUBOPT_0xA7
0017b7 f048      	BRLO _0x206002A
0017b8 940e 1a00 	CALL SUBOPT_0x31
0017ba 940e 1d4d 	CALL SUBOPT_0xA8
0017bc f019      	BREQ PC+4
0017bd f010      	BRCS PC+3
0017be 940c 17c1 	JMP  _0x206002A
0017c0 c003      	RJMP _0x2060029
                 _0x206002A:
0017c1 940e 1d54 	CALL SUBOPT_0xA9
0017c3 c00b      	RJMP _0x20C0004
                 _0x2060029:
0017c4 940e 1d2e 	CALL SUBOPT_0xA3
0017c6 df89      	RCALL _asin
                 _0x20C0005:
                +
0017c7 edab     +LDI R26 , LOW ( 0x3FC90FDB )
0017c8 e0bf     +LDI R27 , HIGH ( 0x3FC90FDB )
0017c9 ec89     +LDI R24 , BYTE3 ( 0x3FC90FDB )
0017ca e39f     +LDI R25 , BYTE4 ( 0x3FC90FDB )
                 	__GETD2N 0x3FC90FDB
0017cb 940e 20a1 	CALL __SWAPD12
                 _0x20C0006:
0017cd 940e 1e44 	CALL __SUBF12
                 _0x20C0004:
0017cf 9624      	ADIW R28,4
0017d0 9508      	RET
                 _atan2:
0017d1 9724      	SBIW R28,4
0017d2 940e 1b08 	CALL SUBOPT_0x47
0017d4 940e 20be 	CALL __CPD10
0017d6 f4c9      	BRNE _0x206002D
                +
0017d7 85e8     +LDD R30 , Y + 8
0017d8 85f9     +LDD R31 , Y + 8 + 1
0017d9 856a     +LDD R22 , Y + 8 + 2
0017da 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0017db 940e 20be 	CALL __CPD10
0017dd f419      	BRNE _0x206002E
0017de 940e 1d54 	CALL SUBOPT_0xA9
0017e0 c037      	RJMP _0x20C0003
                 _0x206002E:
0017e1 940e 1b18 	CALL SUBOPT_0x4A
0017e3 940e 20c2 	CALL __CPD02
0017e5 f42c      	BRGE _0x206002F
                +
0017e6 edeb     +LDI R30 , LOW ( 0x3FC90FDB )
0017e7 e0ff     +LDI R31 , HIGH ( 0x3FC90FDB )
0017e8 ec69     +LDI R22 , BYTE3 ( 0x3FC90FDB )
0017e9 e37f     +LDI R23 , BYTE4 ( 0x3FC90FDB )
                 	__GETD1N 0x3FC90FDB
0017ea c02d      	RJMP _0x20C0003
                 _0x206002F:
                +
0017eb edeb     +LDI R30 , LOW ( 0xBFC90FDB )
0017ec e0ff     +LDI R31 , HIGH ( 0xBFC90FDB )
0017ed ec69     +LDI R22 , BYTE3 ( 0xBFC90FDB )
0017ee eb7f     +LDI R23 , BYTE4 ( 0xBFC90FDB )
                 	__GETD1N 0xBFC90FDB
0017ef c028      	RJMP _0x20C0003
                 _0x206002D:
0017f0 940e 1d29 	CALL SUBOPT_0xA2
0017f2 940e 19ef 	CALL SUBOPT_0x2E
0017f4 940e 20c2 	CALL __CPD02
0017f6 f464      	BRGE _0x2060030
0017f7 85ab      	LDD  R26,Y+11
0017f8 23aa      	TST  R26
0017f9 f022      	BRMI _0x2060031
0017fa 940e 1d2e 	CALL SUBOPT_0xA3
0017fc df1e      	RCALL _yatan
0017fd c01a      	RJMP _0x20C0003
                 _0x2060031:
0017fe 940e 1d69 	CALL SUBOPT_0xAD
001800 940e 1da5 	CALL __ANEGF1
001802 c015      	RJMP _0x20C0003
                 _0x2060030:
001803 85ab      	LDD  R26,Y+11
001804 23aa      	TST  R26
001805 f04a      	BRMI _0x2060032
001806 940e 1d69 	CALL SUBOPT_0xAD
                +
001808 edab     +LDI R26 , LOW ( 0x40490FDB )
001809 e0bf     +LDI R27 , HIGH ( 0x40490FDB )
00180a e489     +LDI R24 , BYTE3 ( 0x40490FDB )
00180b e490     +LDI R25 , BYTE4 ( 0x40490FDB )
                 	__GETD2N 0x40490FDB
00180c 940e 1cb4 	CALL SUBOPT_0x90
00180e c009      	RJMP _0x20C0003
                 _0x2060032:
00180f 940e 1d2e 	CALL SUBOPT_0xA3
001811 df09      	RCALL _yatan
                +
001812 edab     +LDI R26 , LOW ( 0xC0490FDB )
001813 e0bf     +LDI R27 , HIGH ( 0xC0490FDB )
001814 e489     +LDI R24 , BYTE3 ( 0xC0490FDB )
001815 ec90     +LDI R25 , BYTE4 ( 0xC0490FDB )
                 	__GETD2N 0xC0490FDB
001816 940e 1e4b 	CALL __ADDF12
                 _0x20C0003:
001818 962c      	ADIW R28,12
001819 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftoa:
00181a d2ac      	RCALL SUBOPT_0x3D
00181b e0e0      	LDI  R30,LOW(0)
00181c 83ea      	STD  Y+2,R30
00181d e3ef      	LDI  R30,LOW(63)
00181e 83eb      	STD  Y+3,R30
00181f 931a      	ST   -Y,R17
001820 930a      	ST   -Y,R16
001821 85eb      	LDD  R30,Y+11
001822 85fc      	LDD  R31,Y+11+1
001823 3fef      	CPI  R30,LOW(0xFFFF)
001824 efaf      	LDI  R26,HIGH(0xFFFF)
001825 07fa      	CPC  R31,R26
001826 f429      	BRNE _0x20A000D
001827 d548      	RCALL SUBOPT_0xAE
                +
001828 e1ee     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 0 ) )
001829 e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 0 ) )
                 	__POINTW1FN _0x20A0000,0
00182a d450      	RCALL SUBOPT_0x86
00182b c085      	RJMP _0x20C0002
                 _0x20A000D:
00182c 3fef      	CPI  R30,LOW(0x7FFF)
00182d e7af      	LDI  R26,HIGH(0x7FFF)
00182e 07fa      	CPC  R31,R26
00182f f429      	BRNE _0x20A000C
001830 d53f      	RCALL SUBOPT_0xAE
                +
001831 e1ef     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 1 ) )
001832 e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 1 ) )
                 	__POINTW1FN _0x20A0000,1
001833 d447      	RCALL SUBOPT_0x86
001834 c07c      	RJMP _0x20C0002
                 _0x20A000C:
001835 85ac      	LDD  R26,Y+12
001836 23aa      	TST  R26
001837 f452      	BRPL _0x20A000F
                +
001838 85e9     +LDD R30 , Y + 9
001839 85fa     +LDD R31 , Y + 9 + 1
00183a 856b     +LDD R22 , Y + 9 + 2
00183b 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
00183c 940e 1da5 	CALL __ANEGF1
00183e d536      	RCALL SUBOPT_0xAF
00183f d53a      	RCALL SUBOPT_0xB0
001840 e2ed      	LDI  R30,LOW(45)
001841 93ec      	ST   X,R30
                 _0x20A000F:
001842 85a8      	LDD  R26,Y+8
001843 30a7      	CPI  R26,LOW(0x7)
001844 f010      	BRLO _0x20A0010
001845 e0e6      	LDI  R30,LOW(6)
001846 87e8      	STD  Y+8,R30
                 _0x20A0010:
001847 8518      	LDD  R17,Y+8
                 _0x20A0011:
001848 2fe1      	MOV  R30,R17
001849 5011      	SUBI R17,1
00184a 30e0      	CPI  R30,0
00184b f021      	BREQ _0x20A0013
00184c d534      	RCALL SUBOPT_0xB1
00184d d450      	RCALL SUBOPT_0x8C
00184e d537      	RCALL SUBOPT_0xB2
00184f cff8      	RJMP _0x20A0011
                 _0x20A0013:
001850 d53a      	RCALL SUBOPT_0xB3
001851 940e 1e4b 	CALL __ADDF12
001853 d521      	RCALL SUBOPT_0xAF
001854 e010      	LDI  R17,LOW(0)
                +
001855 e0e0     +LDI R30 , LOW ( 0x3F800000 )
001856 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001857 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001858 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001859 d52c      	RCALL SUBOPT_0xB2
                 _0x20A0014:
00185a d530      	RCALL SUBOPT_0xB3
00185b 940e 1f2e 	CALL __CMPF12
00185d f060      	BRLO _0x20A0016
00185e d522      	RCALL SUBOPT_0xB1
00185f d433      	RCALL SUBOPT_0x8A
001860 d525      	RCALL SUBOPT_0xB2
001861 5f1f      	SUBI R17,-LOW(1)
001862 3217      	CPI  R17,39
001863 f028      	BRLO _0x20A0017
001864 d50b      	RCALL SUBOPT_0xAE
                +
001865 e2e3     +LDI R30 , LOW ( 2 * _0x20A0000 + ( 5 ) )
001866 e0f4     +LDI R31 , HIGH ( 2 * _0x20A0000 + ( 5 ) )
                 	__POINTW1FN _0x20A0000,5
001867 d413      	RCALL SUBOPT_0x86
001868 c048      	RJMP _0x20C0002
                 _0x20A0017:
001869 cff0      	RJMP _0x20A0014
                 _0x20A0016:
00186a 3010      	CPI  R17,0
00186b f421      	BRNE _0x20A0018
00186c d50d      	RCALL SUBOPT_0xB0
00186d e3e0      	LDI  R30,LOW(48)
00186e 93ec      	ST   X,R30
00186f c01f      	RJMP _0x20A0019
                 _0x20A0018:
                 _0x20A001A:
001870 2fe1      	MOV  R30,R17
001871 5011      	SUBI R17,1
001872 30e0      	CPI  R30,0
001873 f0d9      	BREQ _0x20A001C
001874 d50c      	RCALL SUBOPT_0xB1
001875 d428      	RCALL SUBOPT_0x8C
001876 d420      	RCALL SUBOPT_0x8B
001877 d42d      	RCALL SUBOPT_0x8D
001878 d50d      	RCALL SUBOPT_0xB2
001879 d511      	RCALL SUBOPT_0xB3
00187a 940e 1ee9 	CALL __DIVF21
00187c 940e 1dd8 	CALL __CFD1U
00187e 2f0e      	MOV  R16,R30
00187f d4fa      	RCALL SUBOPT_0xB0
001880 2fe0      	MOV  R30,R16
001881 5de0      	SUBI R30,-LOW(48)
001882 93ec      	ST   X,R30
001883 d316      	RCALL SUBOPT_0x60
001884 d4fc      	RCALL SUBOPT_0xB1
001885 940e 1fa4 	CALL __CWD1
001887 940e 1e11 	CALL __CDF1
001889 940e 1e9b 	CALL __MULF12
00188b d508      	RCALL SUBOPT_0xB4
00188c d427      	RCALL SUBOPT_0x90
00188d d4e7      	RCALL SUBOPT_0xAF
00188e cfe1      	RJMP _0x20A001A
                 _0x20A001C:
                 _0x20A0019:
00188f 85e8      	LDD  R30,Y+8
001890 30e0      	CPI  R30,0
001891 f0d9      	BREQ _0x20C0001
001892 d4e7      	RCALL SUBOPT_0xB0
001893 e2ee      	LDI  R30,LOW(46)
001894 93ec      	ST   X,R30
                 _0x20A001E:
001895 85e8      	LDD  R30,Y+8
001896 50e1      	SUBI R30,LOW(1)
001897 87e8      	STD  Y+8,R30
001898 5fef      	SUBI R30,-LOW(1)
001899 f099      	BREQ _0x20A0020
00189a d4f9      	RCALL SUBOPT_0xB4
00189b d3f7      	RCALL SUBOPT_0x8A
00189c d4d8      	RCALL SUBOPT_0xAF
                +
00189d 85e9     +LDD R30 , Y + 9
00189e 85fa     +LDD R31 , Y + 9 + 1
00189f 856b     +LDD R22 , Y + 9 + 2
0018a0 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
0018a1 940e 1dd8 	CALL __CFD1U
0018a3 2f0e      	MOV  R16,R30
0018a4 d4d5      	RCALL SUBOPT_0xB0
0018a5 2fe0      	MOV  R30,R16
0018a6 5de0      	SUBI R30,-LOW(48)
0018a7 93ec      	ST   X,R30
0018a8 d2f1      	RCALL SUBOPT_0x60
0018a9 d4ea      	RCALL SUBOPT_0xB4
0018aa d0d6      	RCALL SUBOPT_0x1C
0018ab d4c9      	RCALL SUBOPT_0xAF
0018ac cfe8      	RJMP _0x20A001E
                 _0x20A0020:
                 _0x20C0001:
0018ad 81ae      	LDD  R26,Y+6
0018ae 81bf      	LDD  R27,Y+6+1
0018af e0e0      	LDI  R30,LOW(0)
0018b0 93ec      	ST   X,R30
                 _0x20C0002:
0018b1 8119      	LDD  R17,Y+1
0018b2 8108      	LDD  R16,Y+0
0018b3 962d      	ADIW R28,13
0018b4 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _TX_ADDRESS:
0003c5           	.BYTE 0x5
                 _RX_ADDRESS:
0003ca           	.BYTE 0x5
                 _debugMsgBuff:
0003cf           	.BYTE 0x20
                 _rb:
0003ef           	.BYTE 0x1C
                 _robot11:
00040b           	.BYTE 0xE
                 _robot12:
000419           	.BYTE 0xE
                 _robot13:
000427           	.BYTE 0xE
                 _robot21:
000435           	.BYTE 0xE
                 _robot22:
000443           	.BYTE 0xE
                 _robot23:
000451           	.BYTE 0xE
                 _robotctrl:
00045f           	.BYTE 0xE
                 _errangle:
00046d           	.BYTE 0x4
                 _distance:
000471           	.BYTE 0x4
                 _orientation:
000475           	.BYTE 0x4
                 _RxBuf:
000479           	.BYTE 0x20
                 _setRobotX:
000499           	.BYTE 0x4
                 _setRobotY:
00049d           	.BYTE 0x4
                 _setRobotXmin:
0004a1           	.BYTE 0x4
                 _setRobotXmax:
0004a5           	.BYTE 0x4
                 _setRobotAngleX:
0004a9           	.BYTE 0x4
                 _setRobotAngleY:
0004ad           	.BYTE 0x4
                 _offestsanco:
0004b1           	.BYTE 0x4
                 _rbctrlHomeX:
0004b5           	.BYTE 0x4
                 _rbctrlHomeY:
0004b9           	.BYTE 0x4
                 _rbctrlPenaltyX:
0004bd           	.BYTE 0x4
                 _rbctrlPenaltyY:
0004c1           	.BYTE 0x4
                 _rbctrlPenaltyAngle:
0004c5           	.BYTE 0x4
                 _rbctrlHomeAngle:
0004c9           	.BYTE 0x4
                 _cntsethomeRB:
0004cd           	.BYTE 0x2
                 _cntstuckRB:
0004cf           	.BYTE 0x2
                 _cntunlookRB:
0004d1           	.BYTE 0x2
                 _flagsethome:
0004d3           	.BYTE 0x2
                 _flagselftest:
0004d5           	.BYTE 0x2
                 _cntselftest:
0004d7           	.BYTE 0x2
                 _leftSpeed:
0004d9           	.BYTE 0x2
                 _rightSpeed:
0004db           	.BYTE 0x2
                 _id:
0004dd           	.BYTE 0x1
                 _IRFL:
0004de           	.BYTE 0x2
                 _IRFR:
0004e0           	.BYTE 0x2
                 _IRLINE:
0004e2           	.BYTE 0xA
                 _timerstick:
0004ec           	.BYTE 0x2
                 _timerstickdis:
0004ee           	.BYTE 0x2
                 _timerstickang:
0004f0           	.BYTE 0x2
                 _timerstickctr:
0004f2           	.BYTE 0x2
                 _vQEL:
0004f4           	.BYTE 0x2
                 _vQER:
0004f6           	.BYTE 0x2
                 _oldQEL:
0004f8           	.BYTE 0x2
                 _oldQER:
0004fa           	.BYTE 0x2
                 _svQEL:
0004fc           	.BYTE 0x2
                 _svQER:
0004fe           	.BYTE 0x2
                 _seRki_G001:
000500           	.BYTE 0x2
                 _seLki_G001:
000502           	.BYTE 0x2
                 _uL:
000504           	.BYTE 0x2
                 _uR:
000506           	.BYTE 0x2
                 _KpR:
000508           	.BYTE 0x2
                 _KiR:
00050a           	.BYTE 0x2
                 _KpL:
00050c           	.BYTE 0x2
                 _KiL:
00050e           	.BYTE 0x2
                 _xrb_last:
000510           	.BYTE 0x2
                 _yrb_last:
000512           	.BYTE 0x2
                 _angle_last:
000514           	.BYTE 0x4
                 _sd:
000518           	.BYTE 0x2
                 _oldd:
00051a           	.BYTE 0x2
                 _flagwaitctrRobot:
00051c           	.BYTE 0x1
                 _sa:
00051d           	.BYTE 0x2
                 _olda:
00051f           	.BYTE 0x2
                 _flagwaitctrAngle:
000521           	.BYTE 0x1
                 _flagtask:
000522           	.BYTE 0x2
                 _flagtaskold:
000524           	.BYTE 0x2
                 _flaghuongtrue:
000526           	.BYTE 0x2
                 _verranglekisum:
000528           	.BYTE 0x2
                 _QEL:
00052a           	.BYTE 0x2
                 _QER:
00052c           	.BYTE 0x2
                 _rx_buffer:
00052e           	.BYTE 0x8
                 _rx_wr_index:
000536           	.BYTE 0x1
                 _rx_rd_index:
000537           	.BYTE 0x1
                 _rx_counter:
000538           	.BYTE 0x1
                 _tx_buffer:
000539           	.BYTE 0x8
                 _tx_wr_index:
000541           	.BYTE 0x1
                 _tx_rd_index:
000542           	.BYTE 0x1
                 _tx_counter:
000543           	.BYTE 0x1
                 _oldOrientation:
000544           	.BYTE 0x4
                 _timer2Count:
000548           	.BYTE 0x1
                 _posUpdateFlag:
000549           	.BYTE 0x1
                 _oldPos:
00054a           	.BYTE 0x4
                 __seed_G105:
00054e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0018b5 93fa      	ST   -Y,R31
0018b6 93ea      	ST   -Y,R30
0018b7 e0e5      	LDI  R30,LOW(5)
0018b8 e0f0      	LDI  R31,HIGH(5)
0018b9 93fa      	ST   -Y,R31
0018ba 93ea      	ST   -Y,R30
0018bb 940c 0347 	JMP  _SPI_Write_Buf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0018bd 93ea      	ST   -Y,R30
0018be 940e 0309 	CALL _SPI_RW
0018c0 2f1e      	MOV  R17,R30
0018c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0018c2 93ea      	ST   -Y,R30
0018c3 940e 03b4 	CALL _LcdWrite
0018c5 e0e0      	LDI  R30,LOW(0)
0018c6 93ea      	ST   -Y,R30
0018c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0018c8 931a      	ST   -Y,R17
0018c9 930a      	ST   -Y,R16
                +
0018ca e000     +LDI R16 , LOW ( 0 )
0018cb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0018cc e0e1      	LDI  R30,LOW(1)
0018cd 93ea      	ST   -Y,R30
0018ce e0e0      	LDI  R30,LOW(0)
0018cf 93ea      	ST   -Y,R30
0018d0 940e 03b4 	CALL _LcdWrite
                +
0018d2 e000     +LDI R16 , LOW ( 0 )
0018d3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0018d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x4:
0018d5 e0e1      	LDI  R30,LOW(1)
0018d6 93ea      	ST   -Y,R30
0018d7 81eb      	LDD  R30,Y+3
0018d8 e0f0      	LDI  R31,0
0018d9 97b0      	SBIW R30,32
0018da e0a5      	LDI  R26,LOW(5)
0018db e0b0      	LDI  R27,HIGH(5)
0018dc 940e 1fb4 	CALL __MULW12U
0018de 5aec      	SUBI R30,LOW(-_ASCII*2)
0018df 4fff      	SBCI R31,HIGH(-_ASCII*2)
0018e0 0fe0      	ADD  R30,R16
0018e1 1ff1      	ADC  R31,R17
0018e2 91e4      	LPM  R30,Z
0018e3 93ea      	ST   -Y,R30
0018e4 940c 03b4 	JMP  _LcdWrite
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0018e6 93ea      	ST   -Y,R30
0018e7 e0e0      	LDI  R30,LOW(0)
0018e8 93ea      	ST   -Y,R30
0018e9 940c 03b4 	JMP  _LcdWrite
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0018eb 931a      	ST   -Y,R17
0018ec 930a      	ST   -Y,R16
                +
0018ed e000     +LDI R16 , LOW ( 0 )
0018ee e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0018ef e000     +LDI R16 , LOW ( 0 )
0018f0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0018f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:123 WORDS
                 SUBOPT_0x7:
0018f2 93fa      	ST   -Y,R31
0018f3 93ea      	ST   -Y,R30
0018f4 e0e0      	LDI  R30,LOW(0)
0018f5 e0f0      	LDI  R31,HIGH(0)
0018f6 93fa      	ST   -Y,R31
0018f7 93ea      	ST   -Y,R30
0018f8 940c 03c1 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0018fa 2fe1      	MOV  R30,R17
0018fb e0f0      	LDI  R31,0
0018fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x9:
0018fd 01de      	MOVW R26,R28
0018fe 9611      	ADIW R26,1
0018ff 0fea      	ADD  R30,R26
001900 1ffb      	ADC  R31,R27
001901 01bf      	MOVW R22,R30
001902 81ae      	LDD  R26,Y+6
001903 81bf      	LDD  R27,Y+6+1
001904 e0ea      	LDI  R30,LOW(10)
001905 e0f0      	LDI  R31,HIGH(10)
001906 940e 2047 	CALL __MODW21U
001908 01db      	MOVW R26,R22
001909 93ec      	ST   X,R30
00190a 81ae      	LDD  R26,Y+6
00190b 81bf      	LDD  R27,Y+6+1
00190c e0ea      	LDI  R30,LOW(10)
00190d e0f0      	LDI  R31,HIGH(10)
00190e 940e 1ff9 	CALL __DIVW21U
001910 83ee      	STD  Y+6,R30
001911 83ff      	STD  Y+6+1,R31
001912 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xA:
001913 e0a4      	LDI  R26,LOW(4)
001914 e0b0      	LDI  R27,HIGH(4)
001915 940e 20a7 	CALL __SWAPW12
001917 1bea      	SUB  R30,R26
001918 0bfb      	SBC  R31,R27
001919 01de      	MOVW R26,R28
00191a 9611      	ADIW R26,1
00191b 0fae      	ADD  R26,R30
00191c 1fbf      	ADC  R27,R31
00191d 91ec      	LD   R30,X
00191e 5de0      	SUBI R30,-LOW(48)
00191f 93ea      	ST   -Y,R30
001920 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
001921 eee8      	LDI  R30,LOW(1000)
001922 e0f3      	LDI  R31,HIGH(1000)
001923 93fa      	ST   -Y,R31
001924 93ea      	ST   -Y,R30
001925 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
001927 1bea      	SUB  R30,R26
001928 0bfb      	SBC  R31,R27
001929 83e8      	ST   Y,R30
00192a 83f9      	STD  Y+1,R31
00192b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
00192c 93fa      	ST   -Y,R31
00192d 93ea      	ST   -Y,R30
00192e 940c 0448 	JMP  _wn16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 28 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0xE:
001930 93fa      	ST   -Y,R31
001931 93ea      	ST   -Y,R30
001932 940c 03ea 	JMP  _ws
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
001934 50e1      	SUBI R30,LOW(1)
001935 e0f0      	LDI  R31,0
001936 5de2      	SUBI R30,LOW(-_rx_buffer)
001937 4ffa      	SBCI R31,HIGH(-_rx_buffer)
001938 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
001939 50e1      	SUBI R30,LOW(1)
00193a e0f0      	LDI  R31,0
00193b 5ce7      	SUBI R30,LOW(-_tx_buffer)
00193c 4ffa      	SBCI R31,HIGH(-_tx_buffer)
00193d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00193e 93aa      	ST   -Y,R26
00193f 93ba      	ST   -Y,R27
001940 93ea      	ST   -Y,R30
001941 93fa      	ST   -Y,R31
001942 b7ef      	IN   R30,SREG
001943 93ea      	ST   -Y,R30
001944 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x12:
001945 e0e0      	LDI  R30,LOW(0)
001946 93e0 0500 	STS  _seRki_G001,R30
001948 93e0 0501 	STS  _seRki_G001+1,R30
00194a 93e0 0502 	STS  _seLki_G001,R30
00194c 93e0 0503 	STS  _seLki_G001+1,R30
00194e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
00194f 81e8      	LD   R30,Y
001950 e0f0      	LDI  R31,0
001951 93e0 04fc 	STS  _svQEL,R30
001953 93f0 04fd 	STS  _svQEL+1,R31
001955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
001956 91e0 052c 	LDS  R30,_QER
001958 91f0 052d 	LDS  R31,_QER+1
00195a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00195b 0fae      	ADD  R26,R30
00195c 1fbf      	ADC  R27,R31
00195d 01fd      	MOVW R30,R26
00195e 95f6      	LSR  R31
00195f 95e7      	ROR  R30
001960 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
                +
001961 a1e8     +LDD R30 , Y + 32
001962 a1f9     +LDD R31 , Y + 32 + 1
001963 a16a     +LDD R22 , Y + 32 + 2
001964 a17b     +LDD R23 , Y + 32 + 3
                 	__GETD1S 32
001965 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
                +
001966 a1ec     +LDD R30 , Y + 36
001967 a1fd     +LDD R31 , Y + 36 + 1
001968 a16e     +LDD R22 , Y + 36 + 2
001969 a17f     +LDD R23 , Y + 36 + 3
                 	__GETD1S 36
00196a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x18:
                +
00196b a5e8     +LDD R30 , Y + 40
00196c a5f9     +LDD R31 , Y + 40 + 1
00196d a56a     +LDD R22 , Y + 40 + 2
00196e a57b     +LDD R23 , Y + 40 + 3
                 	__GETD1S 40
00196f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
                +
001970 a9e8     +LDD R30 , Y + 48
001971 a9f9     +LDD R31 , Y + 48 + 1
001972 a96a     +LDD R22 , Y + 48 + 2
001973 a97b     +LDD R23 , Y + 48 + 3
                 	__GETD1S 48
001974 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
001975 1bea      	SUB  R30,R26
001976 0bfb      	SBC  R31,R27
001977 940e 1fa4 	CALL __CWD1
001979 940e 1e11 	CALL __CDF1
00197b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1B:
                +
00197c 91e0 0461+LDS R30 , _robotctrl + ( 2 )
00197e 91f0 0462+LDS R31 , _robotctrl + ( 2 ) + 1
                 	__GETW1MN _robotctrl,2
001980 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1C:
001981 940e 1fa4 	CALL __CWD1
001983 940e 1e11 	CALL __CDF1
001985 940e 20a1 	CALL __SWAPD12
001987 940e 1e44 	CALL __SUBF12
001989 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1D:
                +
00198a 91e0 0463+LDS R30 , _robotctrl + ( 4 )
00198c 91f0 0464+LDS R31 , _robotctrl + ( 4 ) + 1
                 	__GETW1MN _robotctrl,4
00198e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
                +
00198f a5ac     +LDD R26 , Y + 44
001990 a5bd     +LDD R27 , Y + 44 + 1
001991 a58e     +LDD R24 , Y + 44 + 2
001992 a59f     +LDD R25 , Y + 44 + 3
                 	__GETD2S 44
001993 940e 1e9b 	CALL __MULF12
001995 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
                +
001996 a5a8     +LDD R26 , Y + 40
001997 a5b9     +LDD R27 , Y + 40 + 1
001998 a58a     +LDD R24 , Y + 40 + 2
001999 a59b     +LDD R25 , Y + 40 + 3
                 	__GETD2S 40
00199a 940e 1e9b 	CALL __MULF12
00199c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
00199d 940e 1e4b 	CALL __ADDF12
00199f 940e 2094 	CALL __PUTPARD1
0019a1 940c 1f4e 	JMP  _sqrt
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
                +
0019a3 a1ac     +LDD R26 , Y + 36
0019a4 a1bd     +LDD R27 , Y + 36 + 1
0019a5 a18e     +LDD R24 , Y + 36 + 2
0019a6 a19f     +LDD R25 , Y + 36 + 3
                 	__GETD2S 36
0019a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
0019a8 a1a8     +LDD R26 , Y + 32
0019a9 a1b9     +LDD R27 , Y + 32 + 1
0019aa a18a     +LDD R24 , Y + 32 + 2
0019ab a19b     +LDD R25 , Y + 32 + 3
                 	__GETD2S 32
0019ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
0019ad 940e 1e4b 	CALL __ADDF12
                +
0019af 8bec     +STD Y + 20 , R30
0019b0 8bfd     +STD Y + 20 + 1 , R31
0019b1 8b6e     +STD Y + 20 + 2 , R22
0019b2 8b7f     +STD Y + 20 + 3 , R23
                 	__PUTD1S 20
0019b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
                +
0019b4 89ac     +LDD R26 , Y + 20
0019b5 89bd     +LDD R27 , Y + 20 + 1
0019b6 898e     +LDD R24 , Y + 20 + 2
0019b7 899f     +LDD R25 , Y + 20 + 3
                 	__GETD2S 20
0019b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x25:
                +
0019b9 8be8     +STD Y + 16 , R30
0019ba 8bf9     +STD Y + 16 + 1 , R31
0019bb 8b6a     +STD Y + 16 + 2 , R22
0019bc 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0019bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
0019be dfac      	RCALL SUBOPT_0x18
0019bf 940e 2094 	CALL __PUTPARD1
0019c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
0019c2 dfad      	RCALL SUBOPT_0x19
0019c3 940e 2094 	CALL __PUTPARD1
0019c5 940c 17d1 	JMP  _atan2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x28:
                +
0019c7 87ec     +STD Y + 12 , R30
0019c8 87fd     +STD Y + 12 + 1 , R31
0019c9 876e     +STD Y + 12 + 2 , R22
0019ca 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
0019cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
                +
0019cc 87e8     +STD Y + 8 , R30
0019cd 87f9     +STD Y + 8 + 1 , R31
0019ce 876a     +STD Y + 8 + 2 , R22
0019cf 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                +
0019d0 85a8     +LDD R26 , Y + 8
0019d1 85b9     +LDD R27 , Y + 8 + 1
0019d2 858a     +LDD R24 , Y + 8 + 2
0019d3 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0019d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
                +
0019d5 85ec     +LDD R30 , Y + 12
0019d6 85fd     +LDD R31 , Y + 12 + 1
0019d7 856e     +LDD R22 , Y + 12 + 2
0019d8 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0019d9 940e 1e44 	CALL __SUBF12
0019db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
                +
0019dc 83ec     +STD Y + 4 , R30
0019dd 83fd     +STD Y + 4 + 1 , R31
0019de 836e     +STD Y + 4 + 2 , R22
0019df 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0019e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
                +
0019e1 89e8     +LDD R30 , Y + 16
0019e2 89f9     +LDD R31 , Y + 16 + 1
0019e3 896a     +LDD R22 , Y + 16 + 2
0019e4 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
0019e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
                +
0019e6 e0a0     +LDI R26 , LOW ( 0x43340000 )
0019e7 e0b0     +LDI R27 , HIGH ( 0x43340000 )
0019e8 e384     +LDI R24 , BYTE3 ( 0x43340000 )
0019e9 e493     +LDI R25 , BYTE4 ( 0x43340000 )
                 	__GETD2N 0x43340000
0019ea 940e 1e9b 	CALL __MULF12
0019ec 01df      	MOVW R26,R30
0019ed 01cb      	MOVW R24,R22
0019ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2E:
                +
0019ef 81ac     +LDD R26 , Y + 4
0019f0 81bd     +LDD R27 , Y + 4 + 1
0019f1 818e     +LDD R24 , Y + 4 + 2
0019f2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0019f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2F:
0019f4 91e0 046d 	LDS  R30,_errangle
0019f6 91f0 046e 	LDS  R31,_errangle+1
0019f8 9160 046f 	LDS  R22,_errangle+2
0019fa 9170 0470 	LDS  R23,_errangle+3
0019fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x30:
0019fd 940e 208f 	CALL __PUTD1S0
0019ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x31:
001a00 940e 208a 	CALL __GETD2S0
001a02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
                +
001a03 e0e0     +LDI R30 , LOW ( 0x3F000000 )
001a04 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
001a05 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
001a06 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
001a07 940e 1e9b 	CALL __MULF12
001a09 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
001a0a 91a0 0475 	LDS  R26,_orientation
001a0c 91b0 0476 	LDS  R27,_orientation+1
001a0e 9180 0477 	LDS  R24,_orientation+2
001a10 9190 0478 	LDS  R25,_orientation+3
001a12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:157 WORDS
                 SUBOPT_0x34:
001a13 e0e0      	LDI  R30,LOW(0)
001a14 93e0 04bd 	STS  _rbctrlPenaltyX,R30
001a16 93e0 04be 	STS  _rbctrlPenaltyX+1,R30
001a18 93e0 04bf 	STS  _rbctrlPenaltyX+2,R30
001a1a 93e0 04c0 	STS  _rbctrlPenaltyX+3,R30
001a1c 93e0 04c1 	STS  _rbctrlPenaltyY,R30
001a1e 93e0 04c2 	STS  _rbctrlPenaltyY+1,R30
001a20 93e0 04c3 	STS  _rbctrlPenaltyY+2,R30
001a22 93e0 04c4 	STS  _rbctrlPenaltyY+3,R30
                +
001a24 e0e0     +LDI R30 , LOW ( 0x43330000 )
001a25 e0f0     +LDI R31 , HIGH ( 0x43330000 )
001a26 e363     +LDI R22 , BYTE3 ( 0x43330000 )
001a27 e473     +LDI R23 , BYTE4 ( 0x43330000 )
                 	__GETD1N 0x43330000
001a28 93e0 04c5 	STS  _rbctrlPenaltyAngle,R30
001a2a 93f0 04c6 	STS  _rbctrlPenaltyAngle+1,R31
001a2c 9360 04c7 	STS  _rbctrlPenaltyAngle+2,R22
001a2e 9370 04c8 	STS  _rbctrlPenaltyAngle+3,R23
001a30 93e0 04c9 	STS  _rbctrlHomeAngle,R30
001a32 93f0 04ca 	STS  _rbctrlHomeAngle+1,R31
001a34 9360 04cb 	STS  _rbctrlHomeAngle+2,R22
001a36 9370 04cc 	STS  _rbctrlHomeAngle+3,R23
001a38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x35:
                +
001a39 e9ea     +LDI R30 , LOW ( 0x4386D99A )
001a3a edf9     +LDI R31 , HIGH ( 0x4386D99A )
001a3b e866     +LDI R22 , BYTE3 ( 0x4386D99A )
001a3c e473     +LDI R23 , BYTE4 ( 0x4386D99A )
                 	__GETD1N 0x4386D99A
001a3d 93e0 04b5 	STS  _rbctrlHomeX,R30
001a3f 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001a41 9360 04b7 	STS  _rbctrlHomeX+2,R22
001a43 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001a45 e9ea     +LDI R30 , LOW ( 0x3FD9999A )
001a46 e9f9     +LDI R31 , HIGH ( 0x3FD9999A )
001a47 ed69     +LDI R22 , BYTE3 ( 0x3FD9999A )
001a48 e37f     +LDI R23 , BYTE4 ( 0x3FD9999A )
                 	__GETD1N 0x3FD9999A
001a49 93e0 04b9 	STS  _rbctrlHomeY,R30
001a4b 93f0 04ba 	STS  _rbctrlHomeY+1,R31
001a4d 9360 04bb 	STS  _rbctrlHomeY+2,R22
001a4f 9370 04bc 	STS  _rbctrlHomeY+3,R23
                +
001a51 e0e0     +LDI R30 , LOW ( 0x42A00000 )
001a52 e0f0     +LDI R31 , HIGH ( 0x42A00000 )
001a53 ea60     +LDI R22 , BYTE3 ( 0x42A00000 )
001a54 e472     +LDI R23 , BYTE4 ( 0x42A00000 )
                 	__GETD1N 0x42A00000
001a55 93e0 04a1 	STS  _setRobotXmin,R30
001a57 93f0 04a2 	STS  _setRobotXmin+1,R31
001a59 9360 04a3 	STS  _setRobotXmin+2,R22
001a5b 9370 04a4 	STS  _setRobotXmin+3,R23
                +
001a5d e0e0     +LDI R30 , LOW ( 0x43820000 )
001a5e e0f0     +LDI R31 , HIGH ( 0x43820000 )
001a5f e862     +LDI R22 , BYTE3 ( 0x43820000 )
001a60 e473     +LDI R23 , BYTE4 ( 0x43820000 )
                 	__GETD1N 0x43820000
001a61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x36:
                +
001a62 e0e0     +LDI R30 , LOW ( 0x42840000 )
001a63 e0f0     +LDI R31 , HIGH ( 0x42840000 )
001a64 e864     +LDI R22 , BYTE3 ( 0x42840000 )
001a65 e472     +LDI R23 , BYTE4 ( 0x42840000 )
                 	__GETD1N 0x42840000
001a66 93e0 04b5 	STS  _rbctrlHomeX,R30
001a68 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001a6a 9360 04b7 	STS  _rbctrlHomeX+2,R22
001a6c 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001a6e eced     +LDI R30 , LOW ( 0x429ECCCD )
001a6f ecfc     +LDI R31 , HIGH ( 0x429ECCCD )
001a70 e96e     +LDI R22 , BYTE3 ( 0x429ECCCD )
001a71 e472     +LDI R23 , BYTE4 ( 0x429ECCCD )
                 	__GETD1N 0x429ECCCD
001a72 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x37:
                +
001a73 e0e0     +LDI R30 , LOW ( 0xC3870000 )
001a74 e0f0     +LDI R31 , HIGH ( 0xC3870000 )
001a75 e867     +LDI R22 , BYTE3 ( 0xC3870000 )
001a76 ec73     +LDI R23 , BYTE4 ( 0xC3870000 )
                 	__GETD1N 0xC3870000
001a77 93e0 04a1 	STS  _setRobotXmin,R30
001a79 93f0 04a2 	STS  _setRobotXmin+1,R31
001a7b 9360 04a3 	STS  _setRobotXmin+2,R22
001a7d 9370 04a4 	STS  _setRobotXmin+3,R23
001a7f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x38:
                +
001a80 e0e0     +LDI R30 , LOW ( 0x43870000 )
001a81 e0f0     +LDI R31 , HIGH ( 0x43870000 )
001a82 e867     +LDI R22 , BYTE3 ( 0x43870000 )
001a83 e473     +LDI R23 , BYTE4 ( 0x43870000 )
                 	__GETD1N 0x43870000
001a84 93e0 04a5 	STS  _setRobotXmax,R30
001a86 93f0 04a6 	STS  _setRobotXmax+1,R31
001a88 9360 04a7 	STS  _setRobotXmax+2,R22
001a8a 9370 04a8 	STS  _setRobotXmax+3,R23
001a8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x39:
001a8d 93e0 04c5 	STS  _rbctrlPenaltyAngle,R30
001a8f 93f0 04c6 	STS  _rbctrlPenaltyAngle+1,R31
001a91 9360 04c7 	STS  _rbctrlPenaltyAngle+2,R22
001a93 9370 04c8 	STS  _rbctrlPenaltyAngle+3,R23
                +
001a95 e0e0     +LDI R30 , LOW ( 0x43330000 )
001a96 e0f0     +LDI R31 , HIGH ( 0x43330000 )
001a97 e363     +LDI R22 , BYTE3 ( 0x43330000 )
001a98 e473     +LDI R23 , BYTE4 ( 0x43330000 )
                 	__GETD1N 0x43330000
001a99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3A:
                +
001a9a e6e6     +LDI R30 , LOW ( 0x42586666 )
001a9b e6f6     +LDI R31 , HIGH ( 0x42586666 )
001a9c e568     +LDI R22 , BYTE3 ( 0x42586666 )
001a9d e472     +LDI R23 , BYTE4 ( 0x42586666 )
                 	__GETD1N 0x42586666
001a9e 93e0 04b5 	STS  _rbctrlHomeX,R30
001aa0 93f0 04b6 	STS  _rbctrlHomeX+1,R31
001aa2 9360 04b7 	STS  _rbctrlHomeX+2,R22
001aa4 9370 04b8 	STS  _rbctrlHomeX+3,R23
                +
001aa6 eced     +LDI R30 , LOW ( 0xC2C7CCCD )
001aa7 ecfc     +LDI R31 , HIGH ( 0xC2C7CCCD )
001aa8 ec67     +LDI R22 , BYTE3 ( 0xC2C7CCCD )
001aa9 ec72     +LDI R23 , BYTE4 ( 0xC2C7CCCD )
                 	__GETD1N 0xC2C7CCCD
001aaa 93e0 04b9 	STS  _rbctrlHomeY,R30
001aac 93f0 04ba 	STS  _rbctrlHomeY+1,R31
001aae 9360 04bb 	STS  _rbctrlHomeY+2,R22
001ab0 9370 04bc 	STS  _rbctrlHomeY+3,R23
001ab2 cfc0      	RJMP SUBOPT_0x37
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x3B:
001ab3 920a      	ST   -Y,R0
001ab4 921a      	ST   -Y,R1
001ab5 92fa      	ST   -Y,R15
001ab6 936a      	ST   -Y,R22
001ab7 937a      	ST   -Y,R23
001ab8 938a      	ST   -Y,R24
001ab9 939a      	ST   -Y,R25
001aba 93aa      	ST   -Y,R26
001abb 93ba      	ST   -Y,R27
001abc 93ea      	ST   -Y,R30
001abd 93fa      	ST   -Y,R31
001abe b7ef      	IN   R30,SREG
001abf 93ea      	ST   -Y,R30
001ac0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x3C:
001ac1 91ed      	LD   R30,X+
001ac2 91fd      	LD   R31,X+
001ac3 9631      	ADIW R30,1
001ac4 93fe      	ST   -X,R31
001ac5 93ee      	ST   -X,R30
001ac6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
001ac7 9724      	SBIW R28,4
001ac8 e0e0      	LDI  R30,LOW(0)
001ac9 83e8      	ST   Y,R30
001aca 83e9      	STD  Y+1,R30
001acb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3E:
001acc 91e0 052a 	LDS  R30,_QEL
001ace 91f0 052b 	LDS  R31,_QEL+1
001ad0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3F:
001ad1 91a0 0500 	LDS  R26,_seRki_G001
001ad3 91b0 0501 	LDS  R27,_seRki_G001+1
001ad5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
001ad6 93e0 0500 	STS  _seRki_G001,R30
001ad8 93f0 0501 	STS  _seRki_G001+1,R31
001ada 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x41:
001adb 91a0 0502 	LDS  R26,_seLki_G001
001add 91b0 0503 	LDS  R27,_seLki_G001+1
001adf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
001ae0 93e0 0502 	STS  _seLki_G001,R30
001ae2 93f0 0503 	STS  _seLki_G001+1,R31
001ae4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
001ae5 e0e0      	LDI  R30,LOW(0)
001ae6 83e8      	ST   Y,R30
001ae7 83e9      	STD  Y+1,R30
001ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
001ae9 dfe2      	RCALL SUBOPT_0x3E
001aea 91a0 052c 	LDS  R26,_QER
001aec 91b0 052d 	LDS  R27,_QER+1
001aee ce6c      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x45:
001aef 91e9      	LD   R30,Y+
001af0 bfef      	OUT  SREG,R30
001af1 91f9      	LD   R31,Y+
001af2 91e9      	LD   R30,Y+
001af3 91b9      	LD   R27,Y+
001af4 91a9      	LD   R26,Y+
001af5 9199      	LD   R25,Y+
001af6 9189      	LD   R24,Y+
001af7 9179      	LD   R23,Y+
001af8 9169      	LD   R22,Y+
001af9 90f9      	LD   R15,Y+
001afa 9019      	LD   R1,Y+
001afb 9009      	LD   R0,Y+
001afc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x46:
001afd 940e 1fa4 	CALL __CWD1
001aff 940e 1e11 	CALL __CDF1
                +
001b01 e9a5     +LDI R26 , LOW ( 0x3D086595 )
001b02 e6b5     +LDI R27 , HIGH ( 0x3D086595 )
001b03 e088     +LDI R24 , BYTE3 ( 0x3D086595 )
001b04 e39d     +LDI R25 , BYTE4 ( 0x3D086595 )
                 	__GETD2N 0x3D086595
001b05 940e 1e9b 	CALL __MULF12
001b07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x47:
                +
001b08 81ec     +LDD R30 , Y + 4
001b09 81fd     +LDD R31 , Y + 4 + 1
001b0a 816e     +LDD R22 , Y + 4 + 2
001b0b 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
001b0c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x48:
                +
001b0d e0a0     +LDI R26 , LOW ( 0x3F800000 )
001b0e e0b0     +LDI R27 , HIGH ( 0x3F800000 )
001b0f e880     +LDI R24 , BYTE3 ( 0x3F800000 )
001b10 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
001b11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x49:
001b12 940e 2085 	CALL __GETD1S0
001b14 dff8      	RCALL SUBOPT_0x48
001b15 940e 1e44 	CALL __SUBF12
001b17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4A:
                +
001b18 85a8     +LDD R26 , Y + 8
001b19 85b9     +LDD R27 , Y + 8 + 1
001b1a 858a     +LDD R24 , Y + 8 + 2
001b1b 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
001b1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4B:
001b1d 93fa      	ST   -Y,R31
001b1e 93ea      	ST   -Y,R30
001b1f e1e4      	LDI  R30,LOW(20)
001b20 e0f0      	LDI  R31,HIGH(20)
001b21 93fa      	ST   -Y,R31
001b22 93ea      	ST   -Y,R30
001b23 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4C:
001b24 ecef      	LDI  R30,LOW(_debugMsgBuff)
001b25 e0f3      	LDI  R31,HIGH(_debugMsgBuff)
001b26 93fa      	ST   -Y,R31
001b27 93ea      	ST   -Y,R30
001b28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4D:
001b29 940e 2094 	CALL __PUTPARD1
001b2b e084      	LDI  R24,4
001b2c 940e 1644 	CALL _sprintf
001b2e 9628      	ADIW R28,8
001b2f 83e8      	ST   Y,R30
001b30 cff3      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4E:
001b31 81ea      	LDD  R30,Y+2
001b32 93ea      	ST   -Y,R30
001b33 940e 038e 	CALL _debug_out
001b35 cfee      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001b36 93fa      	ST   -Y,R31
001b37 93ea      	ST   -Y,R30
001b38 e2e8      	LDI  R30,LOW(40)
001b39 e0f0      	LDI  R31,HIGH(40)
001b3a 93fa      	ST   -Y,R31
001b3b 93ea      	ST   -Y,R30
001b3c 940c 03c1 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x50:
001b3e 93fa      	ST   -Y,R31
001b3f 93ea      	ST   -Y,R30
001b40 940c 0460 	JMP  _wn16s
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x51:
001b42 e0e1      	LDI  R30,LOW(1)
001b43 e0f0      	LDI  R31,HIGH(1)
001b44 93fa      	ST   -Y,R31
001b45 93ea      	ST   -Y,R30
001b46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x52:
001b47 e0e0      	LDI  R30,LOW(0)
001b48 e0f0      	LDI  R31,HIGH(0)
001b49 93fa      	ST   -Y,R31
001b4a 93ea      	ST   -Y,R30
001b4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x53:
001b4c ece8      	LDI  R30,LOW(200)
001b4d e0f0      	LDI  R31,HIGH(200)
001b4e 93fa      	ST   -Y,R31
001b4f 93ea      	ST   -Y,R30
001b50 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x54:
001b52 e0e0      	LDI  R30,LOW(0)
001b53 bbea      	OUT  0x1A,R30
001b54 bbeb      	OUT  0x1B,R30
001b55 940e 03f6 	CALL _LcdClear
001b57 cfef      	RJMP SUBOPT_0x52
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x55:
001b58 e0ea      	LDI  R30,LOW(10)
001b59 e0f0      	LDI  R31,HIGH(10)
001b5a 93fa      	ST   -Y,R31
001b5b 93ea      	ST   -Y,R30
001b5c 940c 03c1 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x56:
001b5e e0e1      	LDI  R30,LOW(1)
001b5f e0f0      	LDI  R31,HIGH(1)
001b60 cd91      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x57:
001b61 e2ea      	LDI  R30,LOW(42)
001b62 e0f0      	LDI  R31,HIGH(42)
001b63 93fa      	ST   -Y,R31
001b64 93ea      	ST   -Y,R30
001b65 940c 03c1 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x58:
001b67 93ea      	ST   -Y,R30
001b68 940e 0562 	CALL _vMRlui
001b6a e5e8      	LDI  R30,LOW(600)
001b6b e0f2      	LDI  R31,HIGH(600)
001b6c 93fa      	ST   -Y,R31
001b6d 93ea      	ST   -Y,R30
001b6e 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x59:
001b70 940e 03a3 	CALL _LEDLtoggle
001b72 940c 03a9 	JMP  _LEDRtoggle
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x5A:
001b74 01f8      	MOVW R30,R16
001b75 eea2      	LDI  R26,LOW(_IRLINE)
001b76 e0b4      	LDI  R27,HIGH(_IRLINE)
001b77 0fee      	LSL  R30
001b78 1fff      	ROL  R31
001b79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x5B:
                +
001b7a 91a0 04e6+LDS R26 , _IRLINE + ( 4 )
001b7c 91b0 04e7+LDS R27 , _IRLINE + ( 4 ) + 1
                 	__GETW2MN _IRLINE,4
001b7e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x5C:
001b7f 0fae      	ADD  R26,R30
001b80 1fbf      	ADC  R27,R31
001b81 940e 207b 	CALL __GETW1P
001b83 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5D:
001b84 940e 0a97 	CALL _readline
                +
001b86 9140 04e2+LDS R20 , 0 + ( _IRLINE )
001b88 9150 04e3+LDS R21 , 0 + ( _IRLINE ) + 1
                 	__GETWRMN 20,21,0,_IRLINE
001b8a e000      	LDI  R16,LOW(0)
001b8b e011      	LDI  R17,LOW(1)
001b8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x5E:
001b8d 2fe1      	MOV  R30,R17
001b8e eea2      	LDI  R26,LOW(_IRLINE)
001b8f e0b4      	LDI  R27,HIGH(_IRLINE)
001b90 e0f0      	LDI  R31,0
001b91 0fee      	LSL  R30
001b92 1fff      	ROL  R31
001b93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5F:
001b94 0fae      	ADD  R26,R30
001b95 1fbf      	ADC  R27,R31
001b96 914d      	LD   R20,X+
001b97 915c      	LD   R21,X
001b98 2f01      	MOV  R16,R17
001b99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x60:
001b9a 2fe0      	MOV  R30,R16
001b9b e0f0      	LDI  R31,0
001b9c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x61:
001b9d e0e1      	LDI  R30,LOW(1)
001b9e 93ea      	ST   -Y,R30
001b9f 940c 0546 	JMP  _vMLtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x62:
001ba1 e1e4      	LDI  R30,LOW(20)
001ba2 93ea      	ST   -Y,R30
001ba3 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x63:
001ba5 e0ef      	LDI  R30,LOW(15)
001ba6 93ea      	ST   -Y,R30
001ba7 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x64:
001ba9 e0ef      	LDI  R30,LOW(15)
001baa 93ea      	ST   -Y,R30
001bab 940c 0546 	JMP  _vMLtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x65:
001bad e0e1      	LDI  R30,LOW(1)
001bae 93ea      	ST   -Y,R30
001baf 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x66:
001bb1 e1e4      	LDI  R30,LOW(20)
001bb2 93ea      	ST   -Y,R30
001bb3 940e 0546 	CALL _vMLtoi
001bb5 cff7      	RJMP SUBOPT_0x65
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x67:
001bb6 e0a0      	LDI  R26,0
001bb7 9998      	SBIC 0x13,0
001bb8 e0a1      	LDI  R26,1
001bb9 30a0      	CPI  R26,LOW(0x0)
001bba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x68:
001bbb e0e3      	LDI  R30,LOW(3)
001bbc e0f0      	LDI  R31,HIGH(3)
001bbd 93fa      	ST   -Y,R31
001bbe 93ea      	ST   -Y,R30
001bbf cf98      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x69:
001bc0 e0e4      	LDI  R30,LOW(4)
001bc1 e0f0      	LDI  R31,HIGH(4)
001bc2 93fa      	ST   -Y,R31
001bc3 93ea      	ST   -Y,R30
001bc4 cf93      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x6A:
001bc5 940e 0a97 	CALL _readline
001bc7 91e0 04e2 	LDS  R30,_IRLINE
001bc9 91f0 04e3 	LDS  R31,_IRLINE+1
001bcb a3eb      	STD  Y+35,R30
001bcc a3fc      	STD  Y+35+1,R31
                +
001bcd e040     +LDI R20 , LOW ( 0 )
001bce e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                +
001bcf e001     +LDI R16 , LOW ( 1 )
001bd0 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
001bd1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6B:
001bd2 a1ab      	LDD  R26,Y+35
001bd3 a1bc      	LDD  R27,Y+35+1
001bd4 17ea      	CP   R30,R26
001bd5 07fb      	CPC  R31,R27
001bd6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6C:
                +
001bd7 30a1     +CPI R26 , LOW ( 0x1 )
001bd8 e0e0     +LDI R30 , HIGH ( 0x1 )
001bd9 07be     +CPC R27 , R30
001bda e0e0     +LDI R30 , BYTE3 ( 0x1 )
001bdb 078e     +CPC R24 , R30
001bdc e0e0     +LDI R30 , BYTE4 ( 0x1 )
001bdd 079e     +CPC R25 , R30
                 	__CPD2N 0x1
001bde 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6D:
                +
001bdf 85ac     +LDD R26 , Y + 12
001be0 85bd     +LDD R27 , Y + 12 + 1
001be1 858e     +LDD R24 , Y + 12 + 2
001be2 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001be3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6E:
001be4 940e 1ee9 	CALL __DIVF21
                +
001be6 89a8     +LDD R26 , Y + 16
001be7 89b9     +LDD R27 , Y + 16 + 1
001be8 898a     +LDD R24 , Y + 16 + 2
001be9 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
001bea 940e 1e4b 	CALL __ADDF12
001bec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6F:
                +
001bed 89a8     +LDD R26 , Y + 16
001bee 89b9     +LDD R27 , Y + 16 + 1
001bef 898a     +LDD R24 , Y + 16 + 2
001bf0 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
001bf1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x70:
001bf2 ddc1      	RCALL SUBOPT_0x24
                +
001bf3 e0e0     +LDI R30 , LOW ( 0x41200000 )
001bf4 e0f0     +LDI R31 , HIGH ( 0x41200000 )
001bf5 e260     +LDI R22 , BYTE3 ( 0x41200000 )
001bf6 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001bf7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x71:
                +
001bf8 8bec     +STD Y + 20 , R30
001bf9 8bfd     +STD Y + 20 + 1 , R31
001bfa 8b6e     +STD Y + 20 + 2 , R22
001bfb 8b7f     +STD Y + 20 + 3 , R23
                 	__PUTD1S 20
001bfc e0e0      	LDI  R30,LOW(0)
                +
001bfd 8be8     +STD Y + 16 , R30
001bfe 8be9     +STD Y + 16 + 1 , R30
001bff 8bea     +STD Y + 16 + 2 , R30
001c00 8beb     +STD Y + 16 + 3 , R30
                 	__CLRD1S 16
001c01 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x72:
                +
001c02 85ec     +LDD R30 , Y + 12
001c03 85fd     +LDD R31 , Y + 12 + 1
001c04 856e     +LDD R22 , Y + 12 + 2
001c05 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
001c06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x73:
001c07 e0e2      	LDI  R30,LOW(2)
001c08 e0f0      	LDI  R31,HIGH(2)
001c09 93fa      	ST   -Y,R31
001c0a 93ea      	ST   -Y,R30
001c0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x74:
001c0c 93ea      	ST   -Y,R30
001c0d 940e 0546 	CALL _vMLtoi
001c0f e0e2      	LDI  R30,LOW(2)
001c10 93ea      	ST   -Y,R30
001c11 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x75:
001c13 940e 03f6 	CALL _LcdClear
001c15 cf31      	RJMP SUBOPT_0x52
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x76:
001c16 93fa      	ST   -Y,R31
001c17 93ea      	ST   -Y,R30
001c18 940c 03c1 	JMP  _hc
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x77:
001c1a 9aac      	SBI  0x15,4
001c1b 9aad      	SBI  0x15,5
001c1c e6e4      	LDI  R30,LOW(100)
001c1d e0f0      	LDI  R31,HIGH(100)
001c1e 93fa      	ST   -Y,R31
001c1f 93ea      	ST   -Y,R30
001c20 940e 1d99 	CALL _delay_ms
001c22 98ac      	CBI  0x15,4
001c23 98ad      	CBI  0x15,5
001c24 e6e4      	LDI  R30,LOW(100)
001c25 e0f0      	LDI  R31,HIGH(100)
001c26 93fa      	ST   -Y,R31
001c27 93ea      	ST   -Y,R30
001c28 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x78:
001c2a 93ea      	ST   -Y,R30
001c2b 940e 0546 	CALL _vMLtoi
001c2d e0e0      	LDI  R30,LOW(0)
001c2e 93ea      	ST   -Y,R30
001c2f 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x79:
001c31 93ea      	ST   -Y,R30
001c32 940e 0546 	CALL _vMLtoi
001c34 e6e4      	LDI  R30,LOW(100)
001c35 93ea      	ST   -Y,R30
001c36 940c 055e 	JMP  _vMRtoi
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x7A:
001c38 e0e2      	LDI  R30,LOW(2)
001c39 e0f0      	LDI  R31,HIGH(2)
001c3a ccb7      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x7B:
001c3b e0ea      	LDI  R30,LOW(10)
001c3c e0f0      	LDI  R31,HIGH(10)
001c3d 93fa      	ST   -Y,R31
001c3e 93ea      	ST   -Y,R30
001c3f 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7C:
001c41 93fa      	ST   -Y,R31
001c42 93ea      	ST   -Y,R30
001c43 940c 0416 	JMP  _wn164
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7D:
001c45 e2eb      	LDI  R30,LOW(43)
001c46 e0f0      	LDI  R31,HIGH(43)
001c47 cfce      	RJMP SUBOPT_0x76
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7E:
001c48 91e0 04dd 	LDS  R30,_id
001c4a e0f0      	LDI  R31,0
001c4b 30e1      	CPI  R30,LOW(0x1)
001c4c e0a0      	LDI  R26,HIGH(0x1)
001c4d 07fa      	CPC  R31,R26
001c4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7F:
001c4f 93fa      	ST   -Y,R31
001c50 93ea      	ST   -Y,R30
001c51 940c 1d99 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x80:
001c53 bfe3      	OUT  0x33,R30
001c54 e0e0      	LDI  R30,LOW(0)
001c55 bfe2      	OUT  0x32,R30
001c56 bfec      	OUT  0x3C,R30
001c57 bde2      	OUT  0x22,R30
001c58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x81:
001c59 940e 1002 	CALL _outlcd1
001c5b cfdc      	RJMP SUBOPT_0x7A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x82:
001c5c 91e0 03ef 	LDS  R30,_rb
001c5e 91f0 03f0 	LDS  R31,_rb+1
001c60 9160 03f1 	LDS  R22,_rb+2
001c62 9170 03f2 	LDS  R23,_rb+3
001c64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x83:
                +
001c65 e0e0     +LDI R30 , LOW ( 0x41200000 )
001c66 e0f0     +LDI R31 , HIGH ( 0x41200000 )
001c67 e260     +LDI R22 , BYTE3 ( 0x41200000 )
001c68 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
001c69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x84:
001c6a dff1      	RCALL SUBOPT_0x82
001c6b 940e 1dda 	CALL __CFD1
001c6d 01df      	MOVW R26,R30
001c6e e0ea      	LDI  R30,LOW(10)
001c6f e0f0      	LDI  R31,HIGH(10)
001c70 940e 200c 	CALL __DIVW21
001c72 015f      	MOVW R10,R30
001c73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x85:
                +
001c74 e0e0     +LDI R30 , LOW ( 0x0 )
001c75 e0f0     +LDI R31 , HIGH ( 0x0 )
001c76 e060     +LDI R22 , BYTE3 ( 0x0 )
001c77 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001c78 940e 2094 	CALL __PUTPARD1
001c7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x86:
001c7b 93fa      	ST   -Y,R31
001c7c 93ea      	ST   -Y,R30
001c7d 940c 130d 	JMP  _strcpyf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x87:
001c7f dd6f      	RCALL SUBOPT_0x2E
001c80 dfe4      	RCALL SUBOPT_0x83
001c81 940e 1e9b 	CALL __MULF12
001c83 cd58      	RJMP SUBOPT_0x2B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x88:
001c84 de83      	RCALL SUBOPT_0x47
001c85 df59      	RCALL SUBOPT_0x6D
001c86 940e 1f2e 	CALL __CMPF12
001c88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x89:
001c89 df55      	RCALL SUBOPT_0x6D
                +
001c8a eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001c8b ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001c8c ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001c8d e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001c8e 940e 1e9b 	CALL __MULF12
001c90 dd36      	RCALL SUBOPT_0x28
001c91 5f3f      	SUBI R19,-LOW(1)
001c92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8A:
001c93 dfd1      	RCALL SUBOPT_0x83
001c94 940e 1e9b 	CALL __MULF12
001c96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8B:
                +
001c97 e0a0     +LDI R26 , LOW ( 0x3F000000 )
001c98 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
001c99 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
001c9a e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
001c9b 940e 1e4b 	CALL __ADDF12
001c9d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8C:
                +
001c9e eced     +LDI R30 , LOW ( 0x3DCCCCCD )
001c9f ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
001ca0 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
001ca1 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
001ca2 940e 1e9b 	CALL __MULF12
001ca4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8D:
001ca5 940e 2094 	CALL __PUTPARD1
001ca7 940c 16a9 	JMP  _floor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8E:
001ca9 85a8      	LDD  R26,Y+8
001caa 85b9      	LDD  R27,Y+8+1
001cab 9611      	ADIW R26,1
001cac 87a8      	STD  Y+8,R26
001cad 87b9      	STD  Y+8+1,R27
001cae 9711      	SBIW R26,1
001caf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8F:
001cb0 dd3e      	RCALL SUBOPT_0x2E
001cb1 940e 1e9b 	CALL __MULF12
001cb3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x90:
001cb4 940e 20a1 	CALL __SWAPD12
001cb6 940e 1e44 	CALL __SUBF12
001cb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x91:
001cb9 85e8      	LDD  R30,Y+8
001cba 85f9      	LDD  R31,Y+8+1
001cbb 9631      	ADIW R30,1
001cbc 87e8      	STD  Y+8,R30
001cbd 87f9      	STD  Y+8+1,R31
001cbe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x92:
001cbf 932a      	ST   -Y,R18
001cc0 81ef      	LDD  R30,Y+7
001cc1 85f8      	LDD  R31,Y+7+1
001cc2 93fa      	ST   -Y,R31
001cc3 93ea      	ST   -Y,R30
001cc4 85eb      	LDD  R30,Y+11
001cc5 85fc      	LDD  R31,Y+11+1
001cc6 9509      	ICALL
001cc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x93:
                +
001cc8 01fe     +MOVW R30 , R28
001cc9 5ae6     +SUBI R30 , LOW ( - 90 )
001cca 4fff     +SBCI R31 , HIGH ( - 90 )
001ccb 9001     +LD R0 , Z +
001ccc 81f0     +LD R31 , Z
001ccd 2de0     +MOV R30 , R0
                 	__GETW1SX 90
001cce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x94:
001ccf 9734      	SBIW R30,4
                +
001cd0 01de     +MOVW R26 , R28
001cd1 5aa6     +SUBI R26 , LOW ( - 90 )
001cd2 4fbf     +SBCI R27 , HIGH ( - 90 )
001cd3 93ed     +ST X + , R30
001cd4 93fc     +ST X , R31
                 	__PUTW1SX 90
001cd5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x95:
001cd6 81ef      	LDD  R30,Y+7
001cd7 85f8      	LDD  R31,Y+7+1
001cd8 93fa      	ST   -Y,R31
001cd9 93ea      	ST   -Y,R30
001cda 85eb      	LDD  R30,Y+11
001cdb 85fc      	LDD  R31,Y+11+1
001cdc 9509      	ICALL
001cdd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x96:
                +
001cde 01de     +MOVW R26 , R28
001cdf 5aa6     +SUBI R26 , LOW ( - 90 )
001ce0 4fbf     +SBCI R27 , HIGH ( - 90 )
001ce1 900d     +LD R0 , X +
001ce2 91bc     +LD R27 , X
001ce3 2da0     +MOV R26 , R0
                 	__GETW2SX 90
001ce4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x97:
                +
001ce5 87ea     +STD Y + 10 , R30
001ce6 87fb     +STD Y + 10 + 1 , R31
001ce7 876c     +STD Y + 10 + 2 , R22
001ce8 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
001ce9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x98:
001cea dfdd      	RCALL SUBOPT_0x93
001ceb cfe3      	RJMP SUBOPT_0x94
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x99:
                +
001cec 85ea     +LDD R30 , Y + 10
001ced 85fb     +LDD R31 , Y + 10 + 1
001cee 856c     +LDD R22 , Y + 10 + 2
001cef 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001cf0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9A:
001cf1 87ee      	STD  Y+14,R30
001cf2 87ff      	STD  Y+14+1,R31
001cf3 93fa      	ST   -Y,R31
001cf4 93ea      	ST   -Y,R30
001cf5 940e 1318 	CALL _strlen
001cf7 2f1e      	MOV  R17,R30
001cf8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x9B:
001cf9 dfe4      	RCALL SUBOPT_0x96
001cfa 9614      	ADIW R26,4
001cfb 940e 207b 	CALL __GETW1P
001cfd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9C:
001cfe 7f0b      	ANDI R16,LOW(251)
001cff 89ed      	LDD  R30,Y+21
001d00 93ea      	ST   -Y,R30
                +
001d01 01fe     +MOVW R30 , R28
001d02 5ae9     +SUBI R30 , LOW ( - 87 )
001d03 4fff     +SBCI R31 , HIGH ( - 87 )
001d04 9001     +LD R0 , Z +
001d05 81f0     +LD R31 , Z
001d06 2de0     +MOV R30 , R0
                 	__GETW1SX 87
001d07 93fa      	ST   -Y,R31
001d08 93ea      	ST   -Y,R30
                +
001d09 01fe     +MOVW R30 , R28
001d0a 5ae5     +SUBI R30 , LOW ( - 91 )
001d0b 4fff     +SBCI R31 , HIGH ( - 91 )
001d0c 9001     +LD R0 , Z +
001d0d 81f0     +LD R31 , Z
001d0e 2de0     +MOV R30 , R0
                 	__GETW1SX 91
001d0f 9509      	ICALL
001d10 3050      	CPI  R21,0
001d11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9D:
001d12 dcce      	RCALL SUBOPT_0x2C
                +
001d13 85aa     +LDD R26 , Y + 10
001d14 85bb     +LDD R27 , Y + 10 + 1
001d15 858c     +LDD R24 , Y + 10 + 2
001d16 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001d17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9E:
001d18 01de      	MOVW R26,R28
001d19 961c      	ADIW R26,12
001d1a 940e 1f84 	CALL __ADDW2R15
001d1c 940e 207b 	CALL __GETW1P
001d1e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x9F:
001d1f 940e 2085 	CALL __GETD1S0
001d21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA0:
001d22 940e 2094 	CALL __PUTPARD1
001d24 940e 167a 	CALL _ftrunc
001d26 ccd6      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA1:
001d27 dff7      	RCALL SUBOPT_0x9F
001d28 cde4      	RJMP SUBOPT_0x48
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA2:
001d29 ddde      	RCALL SUBOPT_0x47
001d2a dded      	RCALL SUBOPT_0x4A
001d2b 940e 1ee9 	CALL __DIVF21
001d2d cccf      	RJMP SUBOPT_0x30
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA3:
001d2e dff0      	RCALL SUBOPT_0x9F
001d2f 940e 2094 	CALL __PUTPARD1
001d31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA4:
001d32 940e 1e9b 	CALL __MULF12
                +
001d34 e4ae     +LDI R26 , LOW ( 0x414A8F4E )
001d35 e8bf     +LDI R27 , HIGH ( 0x414A8F4E )
001d36 e48a     +LDI R24 , BYTE3 ( 0x414A8F4E )
001d37 e491     +LDI R25 , BYTE4 ( 0x414A8F4E )
                 	__GETD2N 0x414A8F4E
001d38 940e 1e4b 	CALL __ADDF12
001d3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA5:
001d3b 940e 1ee9 	CALL __DIVF21
001d3d 940e 2094 	CALL __PUTPARD1
001d3f 940c 16f2 	JMP  _xatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA6:
                +
001d41 81ad     +LDD R26 , Y + 5
001d42 81be     +LDD R27 , Y + 5 + 1
001d43 818f     +LDD R24 , Y + 5 + 2
001d44 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
001d45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA7:
                +
001d46 e0e0     +LDI R30 , LOW ( 0xBF800000 )
001d47 e0f0     +LDI R31 , HIGH ( 0xBF800000 )
001d48 e860     +LDI R22 , BYTE3 ( 0xBF800000 )
001d49 eb7f     +LDI R23 , BYTE4 ( 0xBF800000 )
                 	__GETD1N 0xBF800000
001d4a 940e 1f2e 	CALL __CMPF12
001d4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA8:
                +
001d4d e0e0     +LDI R30 , LOW ( 0x3F800000 )
001d4e e0f0     +LDI R31 , HIGH ( 0x3F800000 )
001d4f e860     +LDI R22 , BYTE3 ( 0x3F800000 )
001d50 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
001d51 940e 1f2e 	CALL __CMPF12
001d53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA9:
                +
001d54 efef     +LDI R30 , LOW ( 0x7F7FFFFF )
001d55 efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
001d56 e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
001d57 e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
001d58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAA:
                +
001d59 81ed     +LDD R30 , Y + 5
001d5a 81fe     +LDD R31 , Y + 5 + 1
001d5b 816f     +LDD R22 , Y + 5 + 2
001d5c 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
001d5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAB:
001d5e 940e 1ee9 	CALL __DIVF21
001d60 940e 2094 	CALL __PUTPARD1
001d62 940c 171b 	JMP  _yatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAC:
                +
001d64 81e9     +LDD R30 , Y + 1
001d65 81fa     +LDD R31 , Y + 1 + 1
001d66 816b     +LDD R22 , Y + 1 + 2
001d67 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
001d68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xAD:
001d69 dfb5      	RCALL SUBOPT_0x9F
001d6a 940e 1da5 	CALL __ANEGF1
001d6c 940e 2094 	CALL __PUTPARD1
001d6e 940c 171b 	JMP  _yatan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xAE:
001d70 81ee      	LDD  R30,Y+6
001d71 81ff      	LDD  R31,Y+6+1
001d72 93fa      	ST   -Y,R31
001d73 93ea      	ST   -Y,R30
001d74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xAF:
                +
001d75 87e9     +STD Y + 9 , R30
001d76 87fa     +STD Y + 9 + 1 , R31
001d77 876b     +STD Y + 9 + 2 , R22
001d78 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001d79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB0:
001d7a 81ae      	LDD  R26,Y+6
001d7b 81bf      	LDD  R27,Y+6+1
001d7c 9611      	ADIW R26,1
001d7d 83ae      	STD  Y+6,R26
001d7e 83bf      	STD  Y+6+1,R27
001d7f 9711      	SBIW R26,1
001d80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB1:
                +
001d81 81aa     +LDD R26 , Y + 2
001d82 81bb     +LDD R27 , Y + 2 + 1
001d83 818c     +LDD R24 , Y + 2 + 2
001d84 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001d85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB2:
                +
001d86 83ea     +STD Y + 2 , R30
001d87 83fb     +STD Y + 2 + 1 , R31
001d88 836c     +STD Y + 2 + 2 , R22
001d89 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001d8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB3:
                +
001d8b 81ea     +LDD R30 , Y + 2
001d8c 81fb     +LDD R31 , Y + 2 + 1
001d8d 816c     +LDD R22 , Y + 2 + 2
001d8e 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
001d8f 85a9     +LDD R26 , Y + 9
001d90 85ba     +LDD R27 , Y + 9 + 1
001d91 858b     +LDD R24 , Y + 9 + 2
001d92 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001d93 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB4:
                +
001d94 85a9     +LDD R26 , Y + 9
001d95 85ba     +LDD R27 , Y + 9 + 1
001d96 858b     +LDD R24 , Y + 9 + 2
001d97 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001d98 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001d99 91e9      	ld   r30,y+
001d9a 91f9      	ld   r31,y+
001d9b 9630      	adiw r30,0
001d9c f039      	breq __delay_ms1
                 __delay_ms0:
                +
001d9d ed80     +LDI R24 , LOW ( 0x7D0 )
001d9e e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001d9f 9701     +SBIW R24 , 1
001da0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001da1 95a8      	wdr
001da2 9731      	sbiw r30,1
001da3 f7c9      	brne __delay_ms0
                 __delay_ms1:
001da4 9508      	ret
                 
                 __ANEGF1:
001da5 9730      	SBIW R30,0
001da6 4060      	SBCI R22,0
001da7 4070      	SBCI R23,0
001da8 f009      	BREQ __ANEGF10
001da9 5870      	SUBI R23,0x80
                 __ANEGF10:
001daa 9508      	RET
                 
                 __ROUND_REPACK:
001dab 2355      	TST  R21
001dac f442      	BRPL __REPACK
001dad 3850      	CPI  R21,0x80
001dae f411      	BRNE __ROUND_REPACK0
001daf ffe0      	SBRS R30,0
001db0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001db1 9631      	ADIW R30,1
001db2 1f69      	ADC  R22,R25
001db3 1f79      	ADC  R23,R25
001db4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001db5 e850      	LDI  R21,0x80
001db6 2757      	EOR  R21,R23
001db7 f411      	BRNE __REPACK0
001db8 935f      	PUSH R21
001db9 c0cf      	RJMP __ZERORES
                 __REPACK0:
001dba 3f5f      	CPI  R21,0xFF
001dbb f031      	BREQ __REPACK1
001dbc 0f66      	LSL  R22
001dbd 0c00      	LSL  R0
001dbe 9557      	ROR  R21
001dbf 9567      	ROR  R22
001dc0 2f75      	MOV  R23,R21
001dc1 9508      	RET
                 __REPACK1:
001dc2 935f      	PUSH R21
001dc3 2000      	TST  R0
001dc4 f00a      	BRMI __REPACK2
001dc5 c0cf      	RJMP __MAXRES
                 __REPACK2:
001dc6 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
001dc7 e850      	LDI  R21,0x80
001dc8 2e19      	MOV  R1,R25
001dc9 2215      	AND  R1,R21
001dca 0f88      	LSL  R24
001dcb 1f99      	ROL  R25
001dcc 2795      	EOR  R25,R21
001dcd 0f55      	LSL  R21
001dce 9587      	ROR  R24
                 
                 __UNPACK1:
001dcf e850      	LDI  R21,0x80
001dd0 2e07      	MOV  R0,R23
001dd1 2205      	AND  R0,R21
001dd2 0f66      	LSL  R22
001dd3 1f77      	ROL  R23
001dd4 2775      	EOR  R23,R21
001dd5 0f55      	LSL  R21
001dd6 9567      	ROR  R22
001dd7 9508      	RET
                 
                 __CFD1U:
001dd8 9468      	SET
001dd9 c001      	RJMP __CFD1U0
                 __CFD1:
001dda 94e8      	CLT
                 __CFD1U0:
001ddb 935f      	PUSH R21
001ddc dff2      	RCALL __UNPACK1
001ddd 3870      	CPI  R23,0x80
001dde f018      	BRLO __CFD10
001ddf 3f7f      	CPI  R23,0xFF
001de0 f408      	BRCC __CFD10
001de1 c0a7      	RJMP __ZERORES
                 __CFD10:
001de2 e156      	LDI  R21,22
001de3 1b57      	SUB  R21,R23
001de4 f4aa      	BRPL __CFD11
001de5 9551      	NEG  R21
001de6 3058      	CPI  R21,8
001de7 f40e      	BRTC __CFD19
001de8 3059      	CPI  R21,9
                 __CFD19:
001de9 f030      	BRLO __CFD17
001dea efef      	SER  R30
001deb efff      	SER  R31
001dec ef6f      	SER  R22
001ded e77f      	LDI  R23,0x7F
001dee f977      	BLD  R23,7
001def c01a      	RJMP __CFD15
                 __CFD17:
001df0 2777      	CLR  R23
001df1 2355      	TST  R21
001df2 f0b9      	BREQ __CFD15
                 __CFD18:
001df3 0fee      	LSL  R30
001df4 1fff      	ROL  R31
001df5 1f66      	ROL  R22
001df6 1f77      	ROL  R23
001df7 955a      	DEC  R21
001df8 f7d1      	BRNE __CFD18
001df9 c010      	RJMP __CFD15
                 __CFD11:
001dfa 2777      	CLR  R23
                 __CFD12:
001dfb 3058      	CPI  R21,8
001dfc f028      	BRLO __CFD13
001dfd 2fef      	MOV  R30,R31
001dfe 2ff6      	MOV  R31,R22
001dff 2f67      	MOV  R22,R23
001e00 5058      	SUBI R21,8
001e01 cff9      	RJMP __CFD12
                 __CFD13:
001e02 2355      	TST  R21
001e03 f031      	BREQ __CFD15
                 __CFD14:
001e04 9576      	LSR  R23
001e05 9567      	ROR  R22
001e06 95f7      	ROR  R31
001e07 95e7      	ROR  R30
001e08 955a      	DEC  R21
001e09 f7d1      	BRNE __CFD14
                 __CFD15:
001e0a 2000      	TST  R0
001e0b f40a      	BRPL __CFD16
001e0c d189      	RCALL __ANEGD1
                 __CFD16:
001e0d 915f      	POP  R21
001e0e 9508      	RET
                 
                 __CDF1U:
001e0f 9468      	SET
001e10 c001      	RJMP __CDF1U0
                 __CDF1:
001e11 94e8      	CLT
                 __CDF1U0:
001e12 9730      	SBIW R30,0
001e13 4060      	SBCI R22,0
001e14 4070      	SBCI R23,0
001e15 f0b1      	BREQ __CDF10
001e16 2400      	CLR  R0
001e17 f026      	BRTS __CDF11
001e18 2377      	TST  R23
001e19 f412      	BRPL __CDF11
001e1a 9400      	COM  R0
001e1b d17a      	RCALL __ANEGD1
                 __CDF11:
001e1c 2e17      	MOV  R1,R23
001e1d e17e      	LDI  R23,30
001e1e 2011      	TST  R1
                 __CDF12:
001e1f f032      	BRMI __CDF13
001e20 957a      	DEC  R23
001e21 0fee      	LSL  R30
001e22 1fff      	ROL  R31
001e23 1f66      	ROL  R22
001e24 1c11      	ROL  R1
001e25 cff9      	RJMP __CDF12
                 __CDF13:
001e26 2fef      	MOV  R30,R31
001e27 2ff6      	MOV  R31,R22
001e28 2d61      	MOV  R22,R1
001e29 935f      	PUSH R21
001e2a df8a      	RCALL __REPACK
001e2b 915f      	POP  R21
                 __CDF10:
001e2c 9508      	RET
                 
                 __SWAPACC:
001e2d 934f      	PUSH R20
001e2e 01af      	MOVW R20,R30
001e2f 01fd      	MOVW R30,R26
001e30 01da      	MOVW R26,R20
001e31 01ab      	MOVW R20,R22
001e32 01bc      	MOVW R22,R24
001e33 01ca      	MOVW R24,R20
001e34 2d40      	MOV  R20,R0
001e35 2c01      	MOV  R0,R1
001e36 2e14      	MOV  R1,R20
001e37 914f      	POP  R20
001e38 9508      	RET
                 
                 __UADD12:
001e39 0fea      	ADD  R30,R26
001e3a 1ffb      	ADC  R31,R27
001e3b 1f68      	ADC  R22,R24
001e3c 9508      	RET
                 
                 __NEGMAN1:
001e3d 95e0      	COM  R30
001e3e 95f0      	COM  R31
001e3f 9560      	COM  R22
001e40 5fef      	SUBI R30,-1
001e41 4fff      	SBCI R31,-1
001e42 4f6f      	SBCI R22,-1
001e43 9508      	RET
                 
                 __SUBF12:
001e44 935f      	PUSH R21
001e45 df81      	RCALL __UNPACK
001e46 3890      	CPI  R25,0x80
001e47 f171      	BREQ __ADDF129
001e48 e850      	LDI  R21,0x80
001e49 2615      	EOR  R1,R21
                 
001e4a c004      	RJMP __ADDF120
                 
                 __ADDF12:
001e4b 935f      	PUSH R21
001e4c df7a      	RCALL __UNPACK
001e4d 3890      	CPI  R25,0x80
001e4e f139      	BREQ __ADDF129
                 
                 __ADDF120:
001e4f 3870      	CPI  R23,0x80
001e50 f121      	BREQ __ADDF128
                 __ADDF121:
001e51 2f57      	MOV  R21,R23
001e52 1b59      	SUB  R21,R25
001e53 f12b      	BRVS __ADDF1211
001e54 f412      	BRPL __ADDF122
001e55 dfd7      	RCALL __SWAPACC
001e56 cffa      	RJMP __ADDF121
                 __ADDF122:
001e57 3158      	CPI  R21,24
001e58 f018      	BRLO __ADDF123
001e59 27aa      	CLR  R26
001e5a 27bb      	CLR  R27
001e5b 2788      	CLR  R24
                 __ADDF123:
001e5c 3058      	CPI  R21,8
001e5d f028      	BRLO __ADDF124
001e5e 2fab      	MOV  R26,R27
001e5f 2fb8      	MOV  R27,R24
001e60 2788      	CLR  R24
001e61 5058      	SUBI R21,8
001e62 cff9      	RJMP __ADDF123
                 __ADDF124:
001e63 2355      	TST  R21
001e64 f029      	BREQ __ADDF126
                 __ADDF125:
001e65 9586      	LSR  R24
001e66 95b7      	ROR  R27
001e67 95a7      	ROR  R26
001e68 955a      	DEC  R21
001e69 f7d9      	BRNE __ADDF125
                 __ADDF126:
001e6a 2d50      	MOV  R21,R0
001e6b 2551      	EOR  R21,R1
001e6c f072      	BRMI __ADDF127
001e6d dfcb      	RCALL __UADD12
001e6e f438      	BRCC __ADDF129
001e6f 9567      	ROR  R22
001e70 95f7      	ROR  R31
001e71 95e7      	ROR  R30
001e72 9573      	INC  R23
001e73 f413      	BRVC __ADDF129
001e74 c020      	RJMP __MAXRES
                 __ADDF128:
001e75 dfb7      	RCALL __SWAPACC
                 __ADDF129:
001e76 df3e      	RCALL __REPACK
001e77 915f      	POP  R21
001e78 9508      	RET
                 __ADDF1211:
001e79 f7d8      	BRCC __ADDF128
001e7a cffb      	RJMP __ADDF129
                 __ADDF127:
001e7b 1bea      	SUB  R30,R26
001e7c 0bfb      	SBC  R31,R27
001e7d 0b68      	SBC  R22,R24
001e7e f051      	BREQ __ZERORES
001e7f f410      	BRCC __ADDF1210
001e80 9400      	COM  R0
001e81 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
001e82 2366      	TST  R22
001e83 f392      	BRMI __ADDF129
001e84 0fee      	LSL  R30
001e85 1fff      	ROL  R31
001e86 1f66      	ROL  R22
001e87 957a      	DEC  R23
001e88 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001e89 27ee      	CLR  R30
001e8a 27ff      	CLR  R31
001e8b 2766      	CLR  R22
001e8c 2777      	CLR  R23
001e8d 915f      	POP  R21
001e8e 9508      	RET
                 
                 __MINRES:
001e8f efef      	SER  R30
001e90 efff      	SER  R31
001e91 e76f      	LDI  R22,0x7F
001e92 ef7f      	SER  R23
001e93 915f      	POP  R21
001e94 9508      	RET
                 
                 __MAXRES:
001e95 efef      	SER  R30
001e96 efff      	SER  R31
001e97 e76f      	LDI  R22,0x7F
001e98 e77f      	LDI  R23,0x7F
001e99 915f      	POP  R21
001e9a 9508      	RET
                 
                 __MULF12:
001e9b 935f      	PUSH R21
001e9c df2a      	RCALL __UNPACK
001e9d 3870      	CPI  R23,0x80
001e9e f351      	BREQ __ZERORES
001e9f 3890      	CPI  R25,0x80
001ea0 f341      	BREQ __ZERORES
001ea1 2401      	EOR  R0,R1
001ea2 9408      	SEC
001ea3 1f79      	ADC  R23,R25
001ea4 f423      	BRVC __MULF124
001ea5 f31c      	BRLT __ZERORES
                 __MULF125:
001ea6 2000      	TST  R0
001ea7 f33a      	BRMI __MINRES
001ea8 cfec      	RJMP __MAXRES
                 __MULF124:
001ea9 920f      	PUSH R0
001eaa 931f      	PUSH R17
001eab 932f      	PUSH R18
001eac 933f      	PUSH R19
001ead 934f      	PUSH R20
001eae 2711      	CLR  R17
001eaf 2722      	CLR  R18
001eb0 2799      	CLR  R25
001eb1 9f68      	MUL  R22,R24
001eb2 01a0      	MOVW R20,R0
001eb3 9f8f      	MUL  R24,R31
001eb4 2d30      	MOV  R19,R0
001eb5 0d41      	ADD  R20,R1
001eb6 1f59      	ADC  R21,R25
001eb7 9f6b      	MUL  R22,R27
001eb8 0d30      	ADD  R19,R0
001eb9 1d41      	ADC  R20,R1
001eba 1f59      	ADC  R21,R25
001ebb 9f8e      	MUL  R24,R30
001ebc d027      	RCALL __MULF126
001ebd 9fbf      	MUL  R27,R31
001ebe d025      	RCALL __MULF126
001ebf 9f6a      	MUL  R22,R26
001ec0 d023      	RCALL __MULF126
001ec1 9fbe      	MUL  R27,R30
001ec2 d01d      	RCALL __MULF127
001ec3 9faf      	MUL  R26,R31
001ec4 d01b      	RCALL __MULF127
001ec5 9fae      	MUL  R26,R30
001ec6 0d11      	ADD  R17,R1
001ec7 1f29      	ADC  R18,R25
001ec8 1f39      	ADC  R19,R25
001ec9 1f49      	ADC  R20,R25
001eca 1f59      	ADC  R21,R25
001ecb 2fe3      	MOV  R30,R19
001ecc 2ff4      	MOV  R31,R20
001ecd 2f65      	MOV  R22,R21
001ece 2f52      	MOV  R21,R18
001ecf 914f      	POP  R20
001ed0 913f      	POP  R19
001ed1 912f      	POP  R18
001ed2 911f      	POP  R17
001ed3 900f      	POP  R0
001ed4 2366      	TST  R22
001ed5 f02a      	BRMI __MULF122
001ed6 0f55      	LSL  R21
001ed7 1fee      	ROL  R30
001ed8 1fff      	ROL  R31
001ed9 1f66      	ROL  R22
001eda c002      	RJMP __MULF123
                 __MULF122:
001edb 9573      	INC  R23
001edc f24b      	BRVS __MULF125
                 __MULF123:
001edd decd      	RCALL __ROUND_REPACK
001ede 915f      	POP  R21
001edf 9508      	RET
                 
                 __MULF127:
001ee0 0d10      	ADD  R17,R0
001ee1 1d21      	ADC  R18,R1
001ee2 1f39      	ADC  R19,R25
001ee3 c002      	RJMP __MULF128
                 __MULF126:
001ee4 0d20      	ADD  R18,R0
001ee5 1d31      	ADC  R19,R1
                 __MULF128:
001ee6 1f49      	ADC  R20,R25
001ee7 1f59      	ADC  R21,R25
001ee8 9508      	RET
                 
                 __DIVF21:
001ee9 935f      	PUSH R21
001eea dedc      	RCALL __UNPACK
001eeb 3870      	CPI  R23,0x80
001eec f421      	BRNE __DIVF210
001eed 2011      	TST  R1
                 __DIVF211:
001eee f40a      	BRPL __DIVF219
001eef cf9f      	RJMP __MINRES
                 __DIVF219:
001ef0 cfa4      	RJMP __MAXRES
                 __DIVF210:
001ef1 3890      	CPI  R25,0x80
001ef2 f409      	BRNE __DIVF218
                 __DIVF217:
001ef3 cf95      	RJMP __ZERORES
                 __DIVF218:
001ef4 2401      	EOR  R0,R1
001ef5 9408      	SEC
001ef6 0b97      	SBC  R25,R23
001ef7 f41b      	BRVC __DIVF216
001ef8 f3d4      	BRLT __DIVF217
001ef9 2000      	TST  R0
001efa cff3      	RJMP __DIVF211
                 __DIVF216:
001efb 2f79      	MOV  R23,R25
001efc 931f      	PUSH R17
001efd 932f      	PUSH R18
001efe 933f      	PUSH R19
001eff 934f      	PUSH R20
001f00 2411      	CLR  R1
001f01 2711      	CLR  R17
001f02 2722      	CLR  R18
001f03 2733      	CLR  R19
001f04 2744      	CLR  R20
001f05 2755      	CLR  R21
001f06 e290      	LDI  R25,32
                 __DIVF212:
001f07 17ae      	CP   R26,R30
001f08 07bf      	CPC  R27,R31
001f09 0786      	CPC  R24,R22
001f0a 0741      	CPC  R20,R17
001f0b f030      	BRLO __DIVF213
001f0c 1bae      	SUB  R26,R30
001f0d 0bbf      	SBC  R27,R31
001f0e 0b86      	SBC  R24,R22
001f0f 0b41      	SBC  R20,R17
001f10 9408      	SEC
001f11 c001      	RJMP __DIVF214
                 __DIVF213:
001f12 9488      	CLC
                 __DIVF214:
001f13 1f55      	ROL  R21
001f14 1f22      	ROL  R18
001f15 1f33      	ROL  R19
001f16 1c11      	ROL  R1
001f17 1faa      	ROL  R26
001f18 1fbb      	ROL  R27
001f19 1f88      	ROL  R24
001f1a 1f44      	ROL  R20
001f1b 959a      	DEC  R25
001f1c f751      	BRNE __DIVF212
001f1d 01f9      	MOVW R30,R18
001f1e 2d61      	MOV  R22,R1
001f1f 914f      	POP  R20
001f20 913f      	POP  R19
001f21 912f      	POP  R18
001f22 911f      	POP  R17
001f23 2366      	TST  R22
001f24 f032      	BRMI __DIVF215
001f25 0f55      	LSL  R21
001f26 1fee      	ROL  R30
001f27 1fff      	ROL  R31
001f28 1f66      	ROL  R22
001f29 957a      	DEC  R23
001f2a f243      	BRVS __DIVF217
                 __DIVF215:
001f2b de7f      	RCALL __ROUND_REPACK
001f2c 915f      	POP  R21
001f2d 9508      	RET
                 
                 __CMPF12:
001f2e 2399      	TST  R25
001f2f f09a      	BRMI __CMPF120
001f30 2377      	TST  R23
001f31 f042      	BRMI __CMPF121
001f32 1797      	CP   R25,R23
001f33 f048      	BRLO __CMPF122
001f34 f429      	BRNE __CMPF121
001f35 17ae      	CP   R26,R30
001f36 07bf      	CPC  R27,R31
001f37 0786      	CPC  R24,R22
001f38 f020      	BRLO __CMPF122
001f39 f031      	BREQ __CMPF123
                 __CMPF121:
001f3a 9498      	CLZ
001f3b 9488      	CLC
001f3c 9508      	RET
                 __CMPF122:
001f3d 9498      	CLZ
001f3e 9408      	SEC
001f3f 9508      	RET
                 __CMPF123:
001f40 9418      	SEZ
001f41 9488      	CLC
001f42 9508      	RET
                 __CMPF120:
001f43 2377      	TST  R23
001f44 f7c2      	BRPL __CMPF122
001f45 1797      	CP   R25,R23
001f46 f398      	BRLO __CMPF121
001f47 f7a9      	BRNE __CMPF122
001f48 17ea      	CP   R30,R26
001f49 07fb      	CPC  R31,R27
001f4a 0768      	CPC  R22,R24
001f4b f388      	BRLO __CMPF122
001f4c f399      	BREQ __CMPF123
001f4d cfec      	RJMP __CMPF121
                 
                 _sqrt:
001f4e 9724      	sbiw r28,4
001f4f 935f      	push r21
001f50 819f      	ldd  r25,y+7
001f51 2399      	tst  r25
001f52 f411      	brne __sqrt0
001f53 9628      	adiw r28,8
001f54 cf34      	rjmp __zerores
                 __sqrt0:
001f55 f412      	brpl __sqrt1
001f56 9628      	adiw r28,8
001f57 cf3d      	rjmp __maxres
                 __sqrt1:
001f58 934f      	push r20
001f59 e442      	ldi  r20,66
001f5a 818e      	ldd  r24,y+6
001f5b 81bd      	ldd  r27,y+5
001f5c 81ac      	ldd  r26,y+4
                 __sqrt2:
001f5d 8388      	st   y,r24
001f5e 8399      	std  y+1,r25
001f5f 83aa      	std  y+2,r26
001f60 83bb      	std  y+3,r27
001f61 01fd      	movw r30,r26
001f62 01bc      	movw r22,r24
001f63 81ac      	ldd  r26,y+4
001f64 81bd      	ldd  r27,y+5
001f65 818e      	ldd  r24,y+6
001f66 819f      	ldd  r25,y+7
001f67 df81      	rcall __divf21
001f68 8188      	ld   r24,y
001f69 8199      	ldd  r25,y+1
001f6a 81aa      	ldd  r26,y+2
001f6b 81bb      	ldd  r27,y+3
001f6c dede      	rcall __addf12
001f6d de61      	rcall __unpack1
001f6e 957a      	dec  r23
001f6f de45      	rcall __repack
001f70 8188      	ld   r24,y
001f71 8199      	ldd  r25,y+1
001f72 81aa      	ldd  r26,y+2
001f73 81bb      	ldd  r27,y+3
001f74 27ae      	eor  r26,r30
001f75 7fa8      	andi r26,0xf8
001f76 f421      	brne __sqrt4
001f77 17bf      	cp   r27,r31
001f78 0786      	cpc  r24,r22
001f79 0797      	cpc  r25,r23
001f7a f029      	breq __sqrt3
                 __sqrt4:
001f7b 954a      	dec  r20
001f7c f019      	breq __sqrt3
001f7d 01df      	movw r26,r30
001f7e 01cb      	movw r24,r22
001f7f cfdd      	rjmp __sqrt2
                 __sqrt3:
001f80 914f      	pop  r20
001f81 915f      	pop  r21
001f82 9628      	adiw r28,8
001f83 9508      	ret
                 
                 __ADDW2R15:
001f84 2400      	CLR  R0
001f85 0daf      	ADD  R26,R15
001f86 1db0      	ADC  R27,R0
001f87 9508      	RET
                 
                 __ADDD12:
001f88 0fea      	ADD  R30,R26
001f89 1ffb      	ADC  R31,R27
001f8a 1f68      	ADC  R22,R24
001f8b 1f79      	ADC  R23,R25
001f8c 9508      	RET
                 
                 __SUBD12:
001f8d 1bea      	SUB  R30,R26
001f8e 0bfb      	SBC  R31,R27
001f8f 0b68      	SBC  R22,R24
001f90 0b79      	SBC  R23,R25
001f91 9508      	RET
                 
                 __ANEGW1:
001f92 95f1      	NEG  R31
001f93 95e1      	NEG  R30
001f94 40f0      	SBCI R31,0
001f95 9508      	RET
                 
                 __ANEGD1:
001f96 95f0      	COM  R31
001f97 9560      	COM  R22
001f98 9570      	COM  R23
001f99 95e1      	NEG  R30
001f9a 4fff      	SBCI R31,-1
001f9b 4f6f      	SBCI R22,-1
001f9c 4f7f      	SBCI R23,-1
001f9d 9508      	RET
                 
                 __CBD1:
001f9e 2ffe      	MOV  R31,R30
001f9f 0fff      	ADD  R31,R31
001fa0 0bff      	SBC  R31,R31
001fa1 2f6f      	MOV  R22,R31
001fa2 2f7f      	MOV  R23,R31
001fa3 9508      	RET
                 
                 __CWD1:
001fa4 2f6f      	MOV  R22,R31
001fa5 0f66      	ADD  R22,R22
001fa6 0b66      	SBC  R22,R22
001fa7 2f76      	MOV  R23,R22
001fa8 9508      	RET
                 
                 __CWD2:
001fa9 2f8b      	MOV  R24,R27
001faa 0f88      	ADD  R24,R24
001fab 0b88      	SBC  R24,R24
001fac 2f98      	MOV  R25,R24
001fad 9508      	RET
                 
                 __LTW12U:
001fae 17ae      	CP   R26,R30
001faf 07bf      	CPC  R27,R31
001fb0 e0e1      	LDI  R30,1
001fb1 f008      	BRLO __LTW12UT
001fb2 27ee      	CLR  R30
                 __LTW12UT:
001fb3 9508      	RET
                 
                 __MULW12U:
001fb4 9ffa      	MUL  R31,R26
001fb5 2df0      	MOV  R31,R0
001fb6 9feb      	MUL  R30,R27
001fb7 0df0      	ADD  R31,R0
001fb8 9fea      	MUL  R30,R26
001fb9 2de0      	MOV  R30,R0
001fba 0df1      	ADD  R31,R1
001fbb 9508      	RET
                 
                 __MULD12U:
001fbc 9f7a      	MUL  R23,R26
001fbd 2d70      	MOV  R23,R0
001fbe 9f6b      	MUL  R22,R27
001fbf 0d70      	ADD  R23,R0
001fc0 9ff8      	MUL  R31,R24
001fc1 0d70      	ADD  R23,R0
001fc2 9fe9      	MUL  R30,R25
001fc3 0d70      	ADD  R23,R0
001fc4 9f6a      	MUL  R22,R26
001fc5 2d60      	MOV  R22,R0
001fc6 0d71      	ADD  R23,R1
001fc7 9ffb      	MUL  R31,R27
001fc8 0d60      	ADD  R22,R0
001fc9 1d71      	ADC  R23,R1
001fca 9fe8      	MUL  R30,R24
001fcb 0d60      	ADD  R22,R0
001fcc 1d71      	ADC  R23,R1
001fcd 2788      	CLR  R24
001fce 9ffa      	MUL  R31,R26
001fcf 2df0      	MOV  R31,R0
001fd0 0d61      	ADD  R22,R1
001fd1 1f78      	ADC  R23,R24
001fd2 9feb      	MUL  R30,R27
001fd3 0df0      	ADD  R31,R0
001fd4 1d61      	ADC  R22,R1
001fd5 1f78      	ADC  R23,R24
001fd6 9fea      	MUL  R30,R26
001fd7 2de0      	MOV  R30,R0
001fd8 0df1      	ADD  R31,R1
001fd9 1f68      	ADC  R22,R24
001fda 1f78      	ADC  R23,R24
001fdb 9508      	RET
                 
                 __MULW12:
001fdc d07d      	RCALL __CHKSIGNW
001fdd dfd6      	RCALL __MULW12U
001fde f40e      	BRTC __MULW121
001fdf dfb2      	RCALL __ANEGW1
                 __MULW121:
001fe0 9508      	RET
                 
                 __MULD12:
001fe1 d086      	RCALL __CHKSIGND
001fe2 dfd9      	RCALL __MULD12U
001fe3 f40e      	BRTC __MULD121
001fe4 dfb1      	RCALL __ANEGD1
                 __MULD121:
001fe5 9508      	RET
                 
                 __DIVB21U:
001fe6 2400      	CLR  R0
001fe7 e098      	LDI  R25,8
                 __DIVB21U1:
001fe8 0faa      	LSL  R26
001fe9 1c00      	ROL  R0
001fea 1a0e      	SUB  R0,R30
001feb f410      	BRCC __DIVB21U2
001fec 0e0e      	ADD  R0,R30
001fed c001      	RJMP __DIVB21U3
                 __DIVB21U2:
001fee 60a1      	SBR  R26,1
                 __DIVB21U3:
001fef 959a      	DEC  R25
001ff0 f7b9      	BRNE __DIVB21U1
001ff1 2fea      	MOV  R30,R26
001ff2 2da0      	MOV  R26,R0
001ff3 9508      	RET
                 
                 __DIVB21:
001ff4 d059      	RCALL __CHKSIGNB
001ff5 dff0      	RCALL __DIVB21U
001ff6 f40e      	BRTC __DIVB211
001ff7 95e1      	NEG  R30
                 __DIVB211:
001ff8 9508      	RET
                 
                 __DIVW21U:
001ff9 2400      	CLR  R0
001ffa 2411      	CLR  R1
001ffb e190      	LDI  R25,16
                 __DIVW21U1:
001ffc 0faa      	LSL  R26
001ffd 1fbb      	ROL  R27
001ffe 1c00      	ROL  R0
001fff 1c11      	ROL  R1
002000 1a0e      	SUB  R0,R30
002001 0a1f      	SBC  R1,R31
002002 f418      	BRCC __DIVW21U2
002003 0e0e      	ADD  R0,R30
002004 1e1f      	ADC  R1,R31
002005 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
002006 60a1      	SBR  R26,1
                 __DIVW21U3:
002007 959a      	DEC  R25
002008 f799      	BRNE __DIVW21U1
002009 01fd      	MOVW R30,R26
00200a 01d0      	MOVW R26,R0
00200b 9508      	RET
                 
                 __DIVW21:
00200c d04d      	RCALL __CHKSIGNW
00200d dfeb      	RCALL __DIVW21U
00200e f40e      	BRTC __DIVW211
00200f df82      	RCALL __ANEGW1
                 __DIVW211:
002010 9508      	RET
                 
                 __DIVD21U:
002011 933f      	PUSH R19
002012 934f      	PUSH R20
002013 935f      	PUSH R21
002014 2400      	CLR  R0
002015 2411      	CLR  R1
002016 2744      	CLR  R20
002017 2755      	CLR  R21
002018 e230      	LDI  R19,32
                 __DIVD21U1:
002019 0faa      	LSL  R26
00201a 1fbb      	ROL  R27
00201b 1f88      	ROL  R24
00201c 1f99      	ROL  R25
00201d 1c00      	ROL  R0
00201e 1c11      	ROL  R1
00201f 1f44      	ROL  R20
002020 1f55      	ROL  R21
002021 1a0e      	SUB  R0,R30
002022 0a1f      	SBC  R1,R31
002023 0b46      	SBC  R20,R22
002024 0b57      	SBC  R21,R23
002025 f428      	BRCC __DIVD21U2
002026 0e0e      	ADD  R0,R30
002027 1e1f      	ADC  R1,R31
002028 1f46      	ADC  R20,R22
002029 1f57      	ADC  R21,R23
00202a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00202b 60a1      	SBR  R26,1
                 __DIVD21U3:
00202c 953a      	DEC  R19
00202d f759      	BRNE __DIVD21U1
00202e 01fd      	MOVW R30,R26
00202f 01bc      	MOVW R22,R24
002030 01d0      	MOVW R26,R0
002031 01ca      	MOVW R24,R20
002032 915f      	POP  R21
002033 914f      	POP  R20
002034 913f      	POP  R19
002035 9508      	RET
                 
                 __DIVD21:
002036 d031      	RCALL __CHKSIGND
002037 dfd9      	RCALL __DIVD21U
002038 f40e      	BRTC __DIVD211
002039 df5c      	RCALL __ANEGD1
                 __DIVD211:
00203a 9508      	RET
                 
                 __MODB21:
00203b 94e8      	CLT
00203c ffa7      	SBRS R26,7
00203d c002      	RJMP __MODB211
00203e 95a1      	NEG  R26
00203f 9468      	SET
                 __MODB211:
002040 fde7      	SBRC R30,7
002041 95e1      	NEG  R30
002042 dfa3      	RCALL __DIVB21U
002043 2fea      	MOV  R30,R26
002044 f40e      	BRTC __MODB212
002045 95e1      	NEG  R30
                 __MODB212:
002046 9508      	RET
                 
                 __MODW21U:
002047 dfb1      	RCALL __DIVW21U
002048 01fd      	MOVW R30,R26
002049 9508      	RET
                 
                 __MODD21U:
00204a dfc6      	RCALL __DIVD21U
00204b 01fd      	MOVW R30,R26
00204c 01bc      	MOVW R22,R24
00204d 9508      	RET
                 
                 __CHKSIGNB:
00204e 94e8      	CLT
00204f ffe7      	SBRS R30,7
002050 c002      	RJMP __CHKSB1
002051 95e1      	NEG  R30
002052 9468      	SET
                 __CHKSB1:
002053 ffa7      	SBRS R26,7
002054 c004      	RJMP __CHKSB2
002055 95a1      	NEG  R26
002056 f800      	BLD  R0,0
002057 9403      	INC  R0
002058 fa00      	BST  R0,0
                 __CHKSB2:
002059 9508      	RET
                 
                 __CHKSIGNW:
00205a 94e8      	CLT
00205b fff7      	SBRS R31,7
00205c c002      	RJMP __CHKSW1
00205d df34      	RCALL __ANEGW1
00205e 9468      	SET
                 __CHKSW1:
00205f ffb7      	SBRS R27,7
002060 c006      	RJMP __CHKSW2
002061 95a0      	COM  R26
002062 95b0      	COM  R27
002063 9611      	ADIW R26,1
002064 f800      	BLD  R0,0
002065 9403      	INC  R0
002066 fa00      	BST  R0,0
                 __CHKSW2:
002067 9508      	RET
                 
                 __CHKSIGND:
002068 94e8      	CLT
002069 ff77      	SBRS R23,7
00206a c002      	RJMP __CHKSD1
00206b df2a      	RCALL __ANEGD1
00206c 9468      	SET
                 __CHKSD1:
00206d ff97      	SBRS R25,7
00206e c00b      	RJMP __CHKSD2
00206f 2400      	CLR  R0
002070 95a0      	COM  R26
002071 95b0      	COM  R27
002072 9580      	COM  R24
002073 9590      	COM  R25
002074 9611      	ADIW R26,1
002075 1d80      	ADC  R24,R0
002076 1d90      	ADC  R25,R0
002077 f800      	BLD  R0,0
002078 9403      	INC  R0
002079 fa00      	BST  R0,0
                 __CHKSD2:
00207a 9508      	RET
                 
                 __GETW1P:
00207b 91ed      	LD   R30,X+
00207c 91fc      	LD   R31,X
00207d 9711      	SBIW R26,1
00207e 9508      	RET
                 
                 __GETD1P:
00207f 91ed      	LD   R30,X+
002080 91fd      	LD   R31,X+
002081 916d      	LD   R22,X+
002082 917c      	LD   R23,X
002083 9713      	SBIW R26,3
002084 9508      	RET
                 
                 __GETD1S0:
002085 81e8      	LD   R30,Y
002086 81f9      	LDD  R31,Y+1
002087 816a      	LDD  R22,Y+2
002088 817b      	LDD  R23,Y+3
002089 9508      	RET
                 
                 __GETD2S0:
00208a 81a8      	LD   R26,Y
00208b 81b9      	LDD  R27,Y+1
00208c 818a      	LDD  R24,Y+2
00208d 819b      	LDD  R25,Y+3
00208e 9508      	RET
                 
                 __PUTD1S0:
00208f 83e8      	ST   Y,R30
002090 83f9      	STD  Y+1,R31
002091 836a      	STD  Y+2,R22
002092 837b      	STD  Y+3,R23
002093 9508      	RET
                 
                 __PUTPARD1:
002094 937a      	ST   -Y,R23
002095 936a      	ST   -Y,R22
002096 93fa      	ST   -Y,R31
002097 93ea      	ST   -Y,R30
002098 9508      	RET
                 
                 __PUTPARL:
002099 27bb      	CLR  R27
                 __PUTPAR:
00209a 0fea      	ADD  R30,R26
00209b 1ffb      	ADC  R31,R27
                 __PUTPAR0:
00209c 9002      	LD   R0,-Z
00209d 920a      	ST   -Y,R0
00209e 9711      	SBIW R26,1
00209f f7e1      	BRNE __PUTPAR0
0020a0 9508      	RET
                 
                 __SWAPD12:
0020a1 2e18      	MOV  R1,R24
0020a2 2f86      	MOV  R24,R22
0020a3 2d61      	MOV  R22,R1
0020a4 2e19      	MOV  R1,R25
0020a5 2f97      	MOV  R25,R23
0020a6 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
0020a7 2e1b      	MOV  R1,R27
0020a8 2fbf      	MOV  R27,R31
0020a9 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
0020aa 2e1a      	MOV  R1,R26
0020ab 2fae      	MOV  R26,R30
0020ac 2de1      	MOV  R30,R1
0020ad 9508      	RET
                 
                 __COPYMML:
0020ae 2799      	CLR  R25
                 __COPYMM:
0020af 93ef      	PUSH R30
0020b0 93ff      	PUSH R31
                 __COPYMM0:
0020b1 9161      	LD   R22,Z+
0020b2 936d      	ST   X+,R22
0020b3 9701      	SBIW R24,1
0020b4 f7e1      	BRNE __COPYMM0
0020b5 91ff      	POP  R31
0020b6 91ef      	POP  R30
0020b7 9508      	RET
                 
                 __CPD01:
0020b8 2400      	CLR  R0
0020b9 160e      	CP   R0,R30
0020ba 060f      	CPC  R0,R31
0020bb 0606      	CPC  R0,R22
0020bc 0607      	CPC  R0,R23
0020bd 9508      	RET
                 
                 __CPD10:
0020be 9730      	SBIW R30,0
0020bf 4060      	SBCI R22,0
0020c0 4070      	SBCI R23,0
0020c1 9508      	RET
                 
                 __CPD02:
0020c2 2400      	CLR  R0
0020c3 160a      	CP   R0,R26
0020c4 060b      	CPC  R0,R27
0020c5 0608      	CPC  R0,R24
0020c6 0609      	CPC  R0,R25
0020c7 9508      	RET
                 
                 __SAVELOCR6:
0020c8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0020c9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0020ca 933a      	ST   -Y,R19
                 __SAVELOCR3:
0020cb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0020cc 931a      	ST   -Y,R17
0020cd 930a      	ST   -Y,R16
0020ce 9508      	RET
                 
                 __LOADLOCR6:
0020cf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0020d0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0020d1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0020d2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0020d3 8119      	LDD  R17,Y+1
0020d4 8108      	LD   R16,Y
0020d5 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0020d6 0fac      	ADD  R26,R28
0020d7 1fbd      	ADC  R27,R29
                 __INITLOC0:
0020d8 9005      	LPM  R0,Z+
0020d9 920d      	ST   X+,R0
0020da 958a      	DEC  R24
0020db f7e1      	BRNE __INITLOC0
0020dc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 : 105 r1 :  51 r2 :   1 r3 :   0 r4 :   2 r5 :   1 r6 :   1 r7 :   0 
r8 :   1 r9 :   0 r10:   1 r11:   0 r12:   4 r13:   2 r14:   0 r15:   6 
r16: 138 r17: 186 r18:  64 r19:  50 r20:  75 r21: 106 r22: 254 r23: 236 
r24: 153 r25: 126 r26: 517 r27: 265 r28:  92 r29:   2 r30:1524 r31: 691 
x  :  63 y  :1072 z  :  34 
Registers used: 30 out of 35 (85.7%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  54 add   :  47 
adiw  :  67 and   :   6 andi  :   7 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :  15 brcs  :   3 break :   0 breq  :  69 
brge  :  26 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  44 
brlt  :  10 brmi  :  13 brne  : 142 brpl  :  15 brsh  :  41 brtc  :   8 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   5 call  : 919 
cbi   :  35 cbr   :   1 clc   :   3 clh   :   0 cli   :   5 cln   :   0 
clr   :  66 cls   :   0 clt   :   7 clv   :   0 clz   :   2 com   :  14 
cp    :  30 cpc   : 118 cpi   : 194 cpse  :   0 dec   :  17 des   :   0 
eor   :   8 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  14 inc   :   5 jmp   :  78 ld    : 105 ldd   : 430 ldi   :1032 
lds   : 172 lpm   :  15 lsl   :  17 lsr   :   4 mov   : 109 movw  : 102 
mul   :  24 muls  :   0 mulsu :   0 neg   :  11 nop   :   0 or    :   0 
ori   :  14 out   :  78 pop   :  68 push  :  68 rcall : 178 ret   : 240 
reti  :   4 rjmp  : 325 rol   :  37 ror   :  16 sbc   :  26 sbci  :  43 
sbi   :  60 sbic  :   7 sbis  :  14 sbiw  :  70 sbr   :   5 sbrc  :   4 
sbrs  :  25 sec   :   5 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   7 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    : 328 std   : 293 sts   : 204 sub   :  18 subi  :  97 swap  :   0 
tst   :  32 wdr   :   1 
Instructions used: 81 out of 116 (69.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0041ba  15556   1270  16826   32768  51.3%
[.dseg] 0x000060 0x000552      0    754    754    2143  35.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 18 warnings
