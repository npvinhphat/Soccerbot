;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Evaluation
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/4/2015
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <stdio.h>
;#include <string.h>
;#include <stdarg.h>
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <spi.h>
;#include <nRF24L01/nRF24L01.h>
;#include <math.h>
;
;/* Debug mode definition */
;#define DEBUG_MODE 1    // USE OUR CODE, ask Phat for more details
;//#define DEBUG_EN 1      // Blue tooth mode
;
;/* For Dat */
;#define VBASE 15
;#define KMOVE 25
;
;/* PIN DEFINITION */
;// PIN LED ROBO KIT
;
;#define LEDL	PORTC.4
;#define LEDR	PORTC.5
;#define LEDFL   PORTA.4
;#define LEDFR   PORTA.5
;#define LEDBL   PORTA.6
;#define LEDBR   PORTA.7
;#define keyKT   PINC.0 // Nut ben trai
;#define keyKP   PINC.1 // Nut ben phai
;#define S0  PINA.0
;#define S1  PINA.1
;#define S2  PINA.2
;#define S3  PINA.3
;#define S4  PINA.7
;#define MLdir   PORTC.6
;#define MRdir   PORTC.7
;// PIN NOKIA 5110
;#define RST    PORTB.0
;#define SCE    PORTB.1
;#define DC     PORTB.2
;#define DIN    PORTB.5
;#define SCK    PORTB.7
;#define LCD_C     0
;#define LCD_D     1
;#define LCD_X     84
;#define LCD_Y     48
;#define Black 1
;#define White 0
;#define Filled 1
;#define NotFilled 0
;// VARIABLES FOR ROBOT CONTROL
;#define CtrVelocity    //uncomment de chon chay pid dieu khien van toc, va su dung cac ham vMLtoi,vMLlui,....
;#define ROBOT_ID 4
;#define SAN_ID 1  //CHON HUONG TAN CONG LA X >0;
;#define M_PI    3.14159265358979323846    /* pi */
;
;typedef   signed          char int8_t;
;typedef   signed           int int16_t;
;typedef   signed  long    int int32_t;
;typedef   unsigned         char uint8_t;
;typedef   unsigned        int  uint16_t;
;typedef   unsigned long    int  uint32_t;
;typedef   float            float32_t;
;typedef struct   {
;        float x;
;        float y;
;} Ball ;
;typedef struct {
;    int x;
;    int y;
;} IntBall;
;typedef struct   {
;        float id;
;        float x;
;        float y;
;        float ox;
;        float oy;
;        Ball ball;
;} Robot;
;typedef struct {
;    int id;
;    int x;
;    int y;
;    int ox;
;    int oy;
;    IntBall ball;
;} IntRobot;
;
;// FUNCTION DECLARATION
;IntRobot convertRobot2IntRobot(Robot robot);
;unsigned char readposition();
;void runEscBlindSpot();
;void ctrrobot();// can phai luon luon chay de dieu khien robot
;void rb_move(float x,float y);
;int rb_wait(unsigned long int time );
;void rb_rotate(int angle);     // goc xoay so voi truc x cua toa do
;void calcvitri(float x,float y);
;int calcVangle(int angle);
;
;// VARIABLES DECLARATION
;Robot rb;
;IntRobot robot11, robot12, robot13, robot21, robot22, robot23, robotctrl;
;float errangle=0, distance=0,orentation=0;
;int flagtancong=1;
;int offsetphongthu=0;
;int goctancong=0;
;unsigned char RxBuf[32];
;float setRobotX=0;
;float setRobotY=0;
;float setRobotXmin=0;
;float setRobotXmax=0;
;float setRobotAngleX=0;
;float setRobotAngleY=0;
;float offestsanco=0;
;float rbctrlHomeX=0;
;float rbctrlHomeY=0;
;float rbctrlPenaltyX=0;
;float rbctrlPenaltyY=0;
;float rbctrlPenaltyAngle=0;
;float rbctrlHomeAngle=0;
;unsigned int cmdCtrlRobot,idRobot;
;unsigned int cntsethomeRB  =0;
;unsigned int cntstuckRB=0;
;unsigned int cntunlookRB=0;
;unsigned int flagunlookRB=0;
;unsigned int cntunsignalRF=0;
;unsigned int flagunsignalRF=0;
;unsigned int flagsethome=0;
;unsigned int flagselftest = 0;
;unsigned int cntselftest = 0;
;int leftSpeed = 0;
;int rightSpeed = 0;
;
;//======USER VARIABLES=========
;unsigned char id = 1;

	.DSEG
;//======IR READER VARIABLES====
;unsigned int IRFL=0;
;unsigned int IRFR=0;
;unsigned int IRBL=0;
;unsigned int IRLINE[5];
;//======MOTOR CONTROL========
;//------VELOCITY CONTROL=====
;unsigned int timerstick=0,timerstickdis =0,timerstickang=0,timerstickctr=0;
;unsigned int vQEL=0;  //do (xung/250ms)
;unsigned int vQER=0;  //do (xung/250ms)
;unsigned int oldQEL=0;
;unsigned int oldQER=0;
;unsigned int svQEL=0;  //dat (xung/250ms) (range: 0-22)
;unsigned int svQER=0;  //dat (xung/250ms) (range: 0-22)
;static int seRki=0,seLki=0;
;int uL = 0 ;
;int uR = 0;
;int KpR = 10;
;int KiR = 1;
;int KpL = 10;
;int KiL = 1;
;#define LDIVR 1
;
;// Robot Control Algorithm
;// The idea is simple. There are two vectors: robot direction (vrb) and robot to target (vdes).
;// The vector vrb will rotate at an  angle of 'delta' which is equal to the  angle between 2 vectors.
;// So that two vectors will be on a same line and the robot can reach its destination.
;// However, in order to achieve robot's arrival with desired orientation, a new vector (vgoal), which
;// shows the desired orientation, is introduced and added to vrb before the rotation.
;
;// Return the absolute value
;int absolute(int a) {
; 0001 00BD int absolute(int a) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 00BE     if (a > 0) return a;
;	a -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 00BF     return (-a);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 00C0 }
;PCODE: $0000001A VOL: 0
;float min3(float a, float b, float c){
; 0001 00C1 float min3(float a, float b, float c){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 00C2    	float m = a;
; 0001 00C3     if (m > b) m = b;
;PCODE: $0000001D VOL: 0
;	a -> Y+12
;	b -> Y+8
;	c -> Y+4
;	m -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 00C4     if (m > c) m = c;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 00C5     return m;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 00C6 }
;PCODE: $00000031 VOL: 0
;float max3(float a, float b, float c){
; 0001 00C7 float max3(float a, float b, float c){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 00C8    	float m = a;
; 0001 00C9     if (m < b) m = b;
;PCODE: $00000034 VOL: 0
;	a -> Y+12
;	b -> Y+8
;	c -> Y+4
;	m -> Y+0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 00CA     if (m < c) m = c;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 00CB     return m;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 00CC }
;PCODE: $00000048 VOL: 0
;
;void setSpeed(int leftSpeed, int rightSpeed) {
; 0001 00CE void setSpeed(int leftSpeed, int rightSpeed) {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 00CF     // Reset I of both wheel
; 0001 00D0     seRki=0;//reset thanh phan I
;	leftSpeed -> Y+2
;	rightSpeed -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 00D1     seLki=0;//reset thanh phan I
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 00D2 
; 0001 00D3     // Left speed control
; 0001 00D4     if (leftSpeed > 0) { // forward
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 00D5         MLdir = 1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 00D6     } else {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 00D7         MLdir = 0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 00D8         leftSpeed = -leftSpeed;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 00D9     }
;PCODE: $0000005B VOL: 0
; 0001 00DA     svQEL = leftSpeed; // Don't know this
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 00DB 
; 0001 00DC     // Right speed control
; 0001 00DD     if (rightSpeed > 0) { // forward
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 00DE         MRdir = 1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 00DF     } else {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 00E0         MRdir = 0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 00E1         rightSpeed = -rightSpeed;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 00E2     }
;PCODE: $0000006A VOL: 0
; 0001 00E3     svQER = rightSpeed;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 00E4 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
; 0001 00E6 void kick(int x_des, int y_des, int x_goal, int y_goal, char mode){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 00E7 
; 0001 00E8     int vx_des, vy_des, vx_goal, vy_goal;                    // vdes & vgoal coordinates
; 0001 00E9     int rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
; 0001 00EA     int rotation_angle;                           // this is needed to calculate motor velocity
; 0001 00EB     int minimum, maximum;                       //  this is needed to check whether vector a is between vector b and c
; 0001 00EC     int wl, wr;
; 0001 00ED     int vx_rb, vy_rb;
; 0001 00EE 
; 0001 00EF     vx_des = x_des - robotctrl.x;            // vdes calculation
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;	x_des -> Y+37
;	y_des -> Y+35
;	x_goal -> Y+33
;	y_goal -> Y+31
;	mode -> Y+30
;	vx_des -> R16,R17
;	vy_des -> R18,R19
;	vx_goal -> R20,R21
;	vy_goal -> Y+28
;	rb_angle -> Y+26
;	des_angle -> Y+24
;	goal_angle -> Y+22
;	new_angle -> Y+20
;	rotation_angle -> Y+18
;	minimum -> Y+16
;	maximum -> Y+14
;	wl -> Y+12
;	wr -> Y+10
;	vx_rb -> Y+8
;	vy_rb -> Y+6
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 00F0     vy_des = y_des - robotctrl.y;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 00F1 
; 0001 00F2     vx_goal = x_goal - x_des;            //vgoal calculation
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 00F3 	vy_goal = y_goal - y_des;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 00F4 
; 0001 00F5     // Conversion to unit vector
; 0001 00F6 	if (x_goal== 0)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 00F7         y_goal = y_goal/absolute(y_goal);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 00F8     else if (y_goal == 0)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 00F9         x_goal = x_goal/absolute(x_goal);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 00FA     else {
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 00FB         y_goal = y_goal/absolute(x_goal);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 00FC         x_goal = x_goal/absolute(x_goal);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 00FD     }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 00FE 
; 0001 00FF 	// Angle calculation
; 0001 0100     goal_angle = atan2(vy_goal,vx_goal);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 0101     rb_angle = atan2(robotctrl.ox, robotctrl.oy);			// done
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 0102     des_angle = atan2(vy_des,vx_des);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0103 
; 0001 0104 	// Adding vgoal to vrb
; 0001 0105     // NEED TESTING
; 0001 0106 	vx_rb = robotctrl.ox + vx_goal;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0107     vy_rb = robotctrl.oy + vy_goal;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 0108 
; 0001 0109     new_angle = atan2(vx_rb, vy_rb);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 010A     rotation_angle = new_angle - des_angle;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 010B 
; 0001 010C 	//  *rotation_angle > 180* counter-measure
; 0001 010D     if (rotation_angle < -PI) {
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 010E         rotation_angle = 2*PI + rotation_angle;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0001 010F         if (new_angle > des_angle)
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 0110             rotation_angle = -rotation_angle;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0001 0111     }
;PCODE: $000000F5 VOL: 0
; 0001 0112 
; 0001 0113     if (rotation_angle > PI) {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0001 0114         rotation_angle = 2*PI - rotation_angle;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 0115         if (new_angle > des_angle)
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 0116             rotation_angle = -rotation_angle;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0001 0117 	}
;PCODE: $0000010C VOL: 0
; 0001 0118 
; 0001 0119 	// *Spiral* counter-measure: Spiral happens when vdes is between the new vector and vrb
; 0001 011A     minimum = min3(rb_angle, des_angle, new_angle);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 011B     maximum = max3(rb_angle, des_angle, new_angle);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0001 011C 
; 0001 011D 	if (absolute(rb_angle - new_angle)>PI) {
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 011E         if (des_angle == maximum || des_angle == minimum)
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 011F             rotation_angle = rotation_angle / 15;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 0120         else if (minimum < des_angle && des_angle < maximum)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 0121             rotation_angle = rotation_angle / 15;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0122 	}
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 0123 
; 0001 0124 	// Motor speed calculation
; 0001 0125     switch ( mode ) {
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 0126         case 'f': // Going forward
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 0127             wl = 30 + rotation_angle * 50;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 0128             wr = 30 - rotation_angle * 50;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0001 0129             break;
;PCODE: $00000164 VOL: 0
; 0001 012A         case 'b': // Going backward
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0001 012B             rotation_angle = -rotation_angle;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0001 012C             wl = 30 - rotation_angle * 50;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0001 012D             wr = 30 +  rotation_angle * 50;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 012E             break;
;PCODE: $00000176 VOL: 0
; 0001 012F     }
;PCODE: $00000177 VOL: 0
; 0001 0130 
; 0001 0131     // Set the speed immediately
; 0001 0132     leftSpeed = wl;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 0133     rightSpeed = wr;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0001 0134 }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;
;void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
; 0001 0136 void movePoint(IntRobot rbctrl, int x_des, int y_des, int angle, char mode){
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0001 0137 
; 0001 0138 	int vx_des, vy_des, vx_goal, vy_goal;	                // vdes & vgoal coordinates
; 0001 0139 	int rb_angle, des_angle, goal_angle, new_angle;       // angles of vrb, vdes, vgoal & (vdes + vgoal) to x-axis
; 0001 013A 	int rotation_angle;
; 0001 013B 	int minimum, maximum;
; 0001 013C     int wl, wr;
; 0001 013D     int vx_rb, vy_rb;
; 0001 013E     int dirx, diry;
; 0001 013F 
; 0001 0140 	vx_des = x_des - rbctrl.x;			// vdes calculation
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;	rbctrl -> Y+41
;	x_des -> Y+39
;	y_des -> Y+37
;	angle -> Y+35
;	mode -> Y+34
;	vx_des -> R16,R17
;	vy_des -> R18,R19
;	vx_goal -> R20,R21
;	vy_goal -> Y+32
;	rb_angle -> Y+30
;	des_angle -> Y+28
;	goal_angle -> Y+26
;	new_angle -> Y+24
;	rotation_angle -> Y+22
;	minimum -> Y+20
;	maximum -> Y+18
;	wl -> Y+16
;	wr -> Y+14
;	vx_rb -> Y+12
;	vy_rb -> Y+10
;	dirx -> Y+8
;	diry -> Y+6
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0001 0141 	vy_des = y_des - rbctrl.y;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 0142 
; 0001 0143     dirx = rbctrl.ox - rbctrl.x;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0001 0144     diry = rbctrl.oy - rbctrl.y;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 0145 
; 0001 0146 	switch ( angle ) { // vgoal calculation
;PCODE: $00000194 VOL: 0
; 0001 0147 		case 0: 	vx_goal = 1 ; vy_goal = 0;break;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 0148 		case 90: 	vx_goal = 0 ; vy_goal = 1;break;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 0149 		case 180: vx_goal = -1 ; vy_goal = 0;break;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0001 014A 		case -90: vx_goal = 0; vy_goal = -1;break;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 014B 		default:	vx_goal = 1; vy_goal = vx_goal * tan(angle);break;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0001 014C     }
;PCODE: $000001C2 VOL: 0
; 0001 014D 
; 0001 014E 	// Angle calculation
; 0001 014F     rb_angle = atan2(diry, dirx);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0001 0150     des_angle = atan2(vy_des,vx_des);
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0001 0151 
; 0001 0152 	// Adding vgoal to vrb
; 0001 0153 	vx_rb = dirx + vx_goal;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0001 0154     vy_rb = diry + vy_goal;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0001 0155 
; 0001 0156     new_angle = atan2(vy_rb,vx_rb);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 0157     rotation_angle = new_angle - des_angle;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0001 0158 
; 0001 0159 	//  *rotation_angle > 180* counter-measure
; 0001 015A         	if (rotation_angle < -PI) {
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0001 015B             		rotation_angle = 2*PI + rotation_angle;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0001 015C             		if (new_angle > des_angle)               rotation_angle = -rotation_angle;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0001 015D 	}
;PCODE: $00000201 VOL: 0
; 0001 015E                 if (rotation_angle > PI) {
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0001 015F             		rotation_angle = 2*PI - rotation_angle;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0001 0160             		if (new_angle > des_angle)                rotation_angle = -rotation_angle;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0001 0161 	}
;PCODE: $00000218 VOL: 0
; 0001 0162 
; 0001 0163 	// *SPIral* counter-measure: SPIral happens when vdes is between the new vector and vrb
; 0001 0164         	minimum = min3(rb_angle,des_angle,new_angle);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0001 0165         	maximum = max3(rb_angle,des_angle,new_angle);
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 0166 
; 0001 0167 	if (absolute(rb_angle - new_angle)> PI) {
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0001 0168             		if (des_angle == maximum || des_angle == minimum)                rotation_angle = rotation_angle/15;
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0001 0169           	else
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0001 016A             		if (minimum < des_angle && des_angle < maximum)               rotation_angle = rotation_angle/15;
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0001 016B 	}
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0001 016C 
; 0001 016D 	// Motor speed calculation
; 0001 016E 	switch ( mode ) {
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0001 016F 		case 'f': // Going forward
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0001 0170     			wl = VBASE + rotation_angle * KMOVE;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0001 0171    	 		wr = VBASE -  rotation_angle * KMOVE;
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0001 0172 			break;
;PCODE: $00000270 VOL: 0
; 0001 0173     	case 'b': // Going backward
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0001 0174 			rotation_angle = -rotation_angle;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0001 0175 			wl = VBASE - rotation_angle * KMOVE;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0001 0176    	 		wr = VBASE +  rotation_angle * KMOVE;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0001 0177             break;
;PCODE: $00000282 VOL: 0
; 0001 0178     }
;PCODE: $00000283 VOL: 0
; 0001 0179 	// Set speed for motor
; 0001 017A     leftSpeed = wl;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 017B     rightSpeed = wr;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0001 017C 	// need some function here
; 0001 017D }
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;
;// some function to set speed = 0
;void stop() {
; 0001 0180 void stop() {
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0001 0181 
; 0001 0182 }
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;
;void rotate(int angle){
; 0001 0184 void rotate(int angle){
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0001 0185 	angle = angle * LDIVR * 0.5;
;	angle -> Y+0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0001 0186 	setSpeed(angle, -angle);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0001 0187 }
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;
;
;//------POSITION CONTROL-----
;unsigned int sd=0;// dat khoang cach  di chuyen (xung)
;unsigned int oldd=0;// bien luu gia tri vi tri cu
;unsigned char flagwaitctrRobot = 0;
;//-----ANGLES CONTROL----
;unsigned int sa=0;// dat goc quay (xung) ( 54 xung/vong quay)
;unsigned int olda=0;// bien luu gia tri goc cu
;unsigned char  flagwaitctrAngle = 0;
;//-----ROBOT BEHAVIOR CONTROL-----
;unsigned int flagtask=0;
;unsigned int flagtaskold=0;
;unsigned int flaghuongtrue=0;
;int verranglekisum = 0;
;//=====ENCODER======
; unsigned int QEL=0;
; unsigned int QER=0;
;//=====LCD=========
; unsigned char menu=0,test=0,ok=0,runing_test=0,run_robot=0,ft=1,timer=0;

	.DSEG
;flash unsigned char ASCII[][5] = {
; {0x00, 0x00, 0x00, 0x00, 0x00} // 20
;,{0x00, 0x00, 0x5f, 0x00, 0x00} // 21 !
;,{0x00, 0x07, 0x00, 0x07, 0x00} // 22 "
;,{0x14, 0x7f, 0x14, 0x7f, 0x14} // 23 #
;,{0x24, 0x2a, 0x7f, 0x2a, 0x12} // 24 $
;,{0x23, 0x13, 0x08, 0x64, 0x62} // 25 %
;,{0x36, 0x49, 0x55, 0x22, 0x50} // 26 &
;,{0x00, 0x05, 0x03, 0x00, 0x00} // 27 '
;,{0x00, 0x1c, 0x22, 0x41, 0x00} // 28 (
;,{0x00, 0x41, 0x22, 0x1c, 0x00} // 29 )
;,{0x14, 0x08, 0x3e, 0x08, 0x14} // 2a *
;,{0x08, 0x08, 0x3e, 0x08, 0x08} // 2b +
;,{0x00, 0x50, 0x30, 0x00, 0x00} // 2c ,
;,{0x08, 0x08, 0x08, 0x08, 0x08} // 2d -
;,{0x00, 0x60, 0x60, 0x00, 0x00} // 2e .
;,{0x20, 0x10, 0x08, 0x04, 0x02} // 2f /
;,{0x3e, 0x51, 0x49, 0x45, 0x3e} // 30 0
;,{0x00, 0x42, 0x7f, 0x40, 0x00} // 31 1
;,{0x42, 0x61, 0x51, 0x49, 0x46} // 32 2
;,{0x21, 0x41, 0x45, 0x4b, 0x31} // 33 3
;,{0x18, 0x14, 0x12, 0x7f, 0x10} // 34 4
;,{0x27, 0x45, 0x45, 0x45, 0x39} // 35 5
;,{0x3c, 0x4a, 0x49, 0x49, 0x30} // 36 6
;,{0x01, 0x71, 0x09, 0x05, 0x03} // 37 7
;,{0x36, 0x49, 0x49, 0x49, 0x36} // 38 8
;,{0x06, 0x49, 0x49, 0x29, 0x1e} // 39 9
;,{0x00, 0x36, 0x36, 0x00, 0x00} // 3a :
;,{0x00, 0x56, 0x36, 0x00, 0x00} // 3b ;
;,{0x08, 0x14, 0x22, 0x41, 0x00} // 3c <
;,{0x14, 0x14, 0x14, 0x14, 0x14} // 3d =
;,{0x00, 0x41, 0x22, 0x14, 0x08} // 3e >
;,{0x02, 0x01, 0x51, 0x09, 0x06} // 3f ?
;,{0x32, 0x49, 0x79, 0x41, 0x3e} // 40 @
;,{0x7e, 0x11, 0x11, 0x11, 0x7e} // 41 A
;,{0x7f, 0x49, 0x49, 0x49, 0x36} // 42 B
;,{0x3e, 0x41, 0x41, 0x41, 0x22} // 43 C
;,{0x7f, 0x41, 0x41, 0x22, 0x1c} // 44 D
;,{0x7f, 0x49, 0x49, 0x49, 0x41} // 45 E
;,{0x7f, 0x09, 0x09, 0x09, 0x01} // 46 F
;,{0x3e, 0x41, 0x49, 0x49, 0x7a} // 47 G
;,{0x7f, 0x08, 0x08, 0x08, 0x7f} // 48 H
;,{0x00, 0x41, 0x7f, 0x41, 0x00} // 49 I
;,{0x20, 0x40, 0x41, 0x3f, 0x01} // 4a J
;,{0x7f, 0x08, 0x14, 0x22, 0x41} // 4b K
;,{0x7f, 0x40, 0x40, 0x40, 0x40} // 4c L
;,{0x7f, 0x02, 0x0c, 0x02, 0x7f} // 4d M
;,{0x7f, 0x04, 0x08, 0x10, 0x7f} // 4e N
;,{0x3e, 0x41, 0x41, 0x41, 0x3e} // 4f O
;,{0x7f, 0x09, 0x09, 0x09, 0x06} // 50 P
;,{0x3e, 0x41, 0x51, 0x21, 0x5e} // 51 Q
;,{0x7f, 0x09, 0x19, 0x29, 0x46} // 52 R
;,{0x46, 0x49, 0x49, 0x49, 0x31} // 53 S
;,{0x01, 0x01, 0x7f, 0x01, 0x01} // 54 T
;,{0x3f, 0x40, 0x40, 0x40, 0x3f} // 55 U
;,{0x1f, 0x20, 0x40, 0x20, 0x1f} // 56 V
;,{0x3f, 0x40, 0x38, 0x40, 0x3f} // 57 W
;,{0x63, 0x14, 0x08, 0x14, 0x63} // 58 X
;,{0x07, 0x08, 0x70, 0x08, 0x07} // 59 Y
;,{0x61, 0x51, 0x49, 0x45, 0x43} // 5a Z
;,{0x00, 0x7f, 0x41, 0x41, 0x00} // 5b [
;,{0x02, 0x04, 0x08, 0x10, 0x20} // 5c ¥
;,{0x00, 0x41, 0x41, 0x7f, 0x00} // 5d ]
;,{0x04, 0x02, 0x01, 0x02, 0x04} // 5e ^
;,{0x40, 0x40, 0x40, 0x40, 0x40} // 5f _
;,{0x00, 0x01, 0x02, 0x04, 0x00} // 60 `
;,{0x20, 0x54, 0x54, 0x54, 0x78} // 61 a
;,{0x7f, 0x48, 0x44, 0x44, 0x38} // 62 b
;,{0x38, 0x44, 0x44, 0x44, 0x20} // 63 c
;,{0x38, 0x44, 0x44, 0x48, 0x7f} // 64 d
;,{0x38, 0x54, 0x54, 0x54, 0x18} // 65 e
;,{0x08, 0x7e, 0x09, 0x01, 0x02} // 66 f
;,{0x0c, 0x52, 0x52, 0x52, 0x3e} // 67 g
;,{0x7f, 0x08, 0x04, 0x04, 0x78} // 68 h
;,{0x00, 0x44, 0x7d, 0x40, 0x00} // 69 i
;,{0x20, 0x40, 0x44, 0x3d, 0x00} // 6a j
;,{0x7f, 0x10, 0x28, 0x44, 0x00} // 6b k
;,{0x00, 0x41, 0x7f, 0x40, 0x00} // 6c l
;,{0x7c, 0x04, 0x18, 0x04, 0x78} // 6d m
;,{0x7c, 0x08, 0x04, 0x04, 0x78} // 6e n
;,{0x38, 0x44, 0x44, 0x44, 0x38} // 6f o
;,{0x7c, 0x14, 0x14, 0x14, 0x08} // 70 p
;,{0x08, 0x14, 0x14, 0x18, 0x7c} // 71 q
;,{0x7c, 0x08, 0x04, 0x04, 0x08} // 72 r
;,{0x48, 0x54, 0x54, 0x54, 0x20} // 73 s
;,{0x04, 0x3f, 0x44, 0x40, 0x20} // 74 t
;,{0x3c, 0x40, 0x40, 0x20, 0x7c} // 75 u
;,{0x1c, 0x20, 0x40, 0x20, 0x1c} // 76 v
;,{0x3c, 0x40, 0x30, 0x40, 0x3c} // 77 w
;,{0x44, 0x28, 0x10, 0x28, 0x44} // 78 x
;,{0x0c, 0x50, 0x50, 0x50, 0x3c} // 79 y
;,{0x44, 0x64, 0x54, 0x4c, 0x44} // 7a z
;,{0x00, 0x08, 0x36, 0x41, 0x00} // 7b {
;,{0x00, 0x00, 0x7f, 0x00, 0x00} // 7c |
;,{0x00, 0x41, 0x36, 0x08, 0x00} // 7d }
;,{0x10, 0x08, 0x08, 0x10, 0x08} // 7e ?
;,{0x78, 0x46, 0x41, 0x46, 0x78} // 7f ?
;};
;
;/* LED FUNCTIONS */
;void LEDLtoggle()
; 0001 0201 {

	.CSEG
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0001 0202     if(LEDL==0){LEDL=1;}else{LEDL=0;}
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0001 0203 }
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;
;void LEDRtoggle()
; 0001 0206 {
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0001 0207     if(LEDR==0){LEDR=1;}else{LEDR=0;}
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0001 0208 }
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;
;/* SPI */
;void sPItx(unsigned char temtx)
; 0001 020C {
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0001 020D // unsigned char transPI;
; 0001 020E     SPDR = temtx;
;	temtx -> Y+0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0001 020F     while (!(SPSR & 0x80));
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0001 0210 }
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;
;/* LCD FUNCTIONS */
;void LcdWrite(unsigned char dc, unsigned char data)
; 0001 0214 {
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0001 0215     DC = dc;
;	dc -> Y+1
;	data -> Y+0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0001 0216     SCE=1;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0001 0217     SCE=0;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0001 0218     sPItx(data);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0001 0219     SCE=1;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0001 021A }
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;//This takes a large array of bits and sends them to the LCD
;void LcdBitmap(char my_array[]){
; 0001 021C void LcdBitmap(char my_array[]){
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0001 021D     int index = 0;
; 0001 021E     for (index = 0 ; index < (LCD_X * LCD_Y / 8) ; index++)
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;	my_array -> Y+2
;	index -> R16,R17
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0001 021F         LcdWrite(LCD_D, my_array[index]);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0001 0220 }
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;
;void hc(int x, int y) {
; 0001 0222 void hc(int x, int y) {
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0001 0223     LcdWrite(0, 0x40 | x);  // Row.  ?
;	x -> Y+2
;	y -> Y+0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0001 0224     LcdWrite(0, 0x80 | y);  // Column.
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0001 0225 }
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;
;void LcdCharacter(unsigned char character)
; 0001 0228 {
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0001 0229     int index = 0;
; 0001 022A     LcdWrite(LCD_D, 0x00);
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;	character -> Y+2
;	index -> R16,R17
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0001 022B     for (index = 0; index < 5; index++)
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0001 022C     {
; 0001 022D         LcdWrite(LCD_D, ASCII[character - 0x20][index]);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0001 022E     }
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0001 022F     LcdWrite(LCD_D, 0x00);
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0001 0230 }
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;
;void wc(unsigned char character)
; 0001 0233 {
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0001 0234     int index = 0;
; 0001 0235     LcdWrite(LCD_D, 0x00);
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;	character -> Y+2
;	index -> R16,R17
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0001 0236     for (index = 0; index < 5; index++)
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0001 0237     {
; 0001 0238         LcdWrite(LCD_D, ASCII[character - 0x20][index]);
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0001 0239     }
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0001 023A     LcdWrite(LCD_D, 0x00);
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0001 023B }
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;
;void ws(unsigned char *characters)
; 0001 023E {
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0001 023F     while (*characters)
;	*characters -> Y+0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0001 0240     {
; 0001 0241         LcdCharacter(*characters++);
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0001 0242     }
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0001 0243 }
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;
;void LcdClear(void)
; 0001 0246 {
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0001 0247     int index=0;
; 0001 0248     for (index = 0; index < LCD_X * LCD_Y / 8; index++)
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;	index -> R16,R17
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0001 0249     {
; 0001 024A         LcdWrite(LCD_D, 0);
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0001 024B     }
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0001 024C     hc(0, 0); //After we clear the display, return to the home position
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0001 024D }
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;
;void clear(void)
; 0001 0250 {
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
; 0001 0251     int index=0;
; 0001 0252     for (index = 0; index < LCD_X * LCD_Y / 8; index++)
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;	index -> R16,R17
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0001 0253     {
; 0001 0254         LcdWrite(LCD_D, 0);
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
; 0001 0255     }
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0001 0256     hc(0, 0); //After we clear the display, return to the home position
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0001 0257 }
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;
;void wn164(unsigned int so)
; 0001 025A {
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0001 025B     unsigned char a[5],i;
; 0001 025C     for(i=0;i<5;i++)
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;	so -> Y+6
;	a -> Y+1
;	i -> R17
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0001 025D     {
; 0001 025E         a[i]=so%10;        //a[0]= byte thap nhat
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
; 0001 025F         so=so/10;
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
; 0001 0260     }
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0001 0261     for(i=1;i<5;i++)
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0001 0262         {wc(a[4-i]+0x30);}
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0001 0263 }
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;
;void LcdInitialise()
; 0001 0266 {
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0001 0267     //reset
; 0001 0268     RST=0;
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0001 0269     delay_us(10);
;PCODE: $0000040E VOL: 0
; 0001 026A     RST=1;
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0001 026B 
; 0001 026C     delay_ms(1000);
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
; 0001 026D     //khoi dong
; 0001 026E     LcdWrite(LCD_C, 0x21 );  //Tell LCD that extended commands follow
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0001 026F     LcdWrite(LCD_C, 0xBF  );  //Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF = Dam nhat
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0001 0270     LcdWrite(LCD_C, 0x06 );  // Set Temp coefficent. //0x04
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0001 0271     LcdWrite(LCD_C, 0x13 );  //LCD bias mode 1:48: Try 0x13 or 0x14
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0001 0272     LcdWrite(LCD_C, 0x20 );  //We must send 0x20 before modifying the display control mode
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0001 0273     LcdWrite(LCD_C, 0x0C );  //Set display control, normal mode. 0x0D for inverse, 0x0C normal
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0001 0274 }
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;// Hien thi so 16 bits
;void wn16(unsigned int so)
; 0001 0277 {
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
; 0001 0278     unsigned char a[5],i;
; 0001 0279     for(i=0;i<5;i++)
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;	so -> Y+6
;	a -> Y+1
;	i -> R17
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0001 027A     {
; 0001 027B         a[i]=so%10;        //a[0]= byte thap nhat
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0001 027C         so=so/10;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0001 027D     }
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0001 027E     for(i=0;i<5;i++)
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0001 027F     {LcdCharacter(a[4-i]+0x30);}
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0001 0280 }
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;// Hien thi so 16 bits co dau
; void wn16s( int so)
; 0001 0283 {
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
; 0001 0284     if(so<0){so=0-so; LcdCharacter('-');} else{ LcdCharacter(' ');}
;	so -> Y+0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0001 0285     wn16(so);
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0001 0286 }
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;// hien thi so 32bit co dau
; void wn32s( int so)
; 0001 0289 {
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0001 028A     char tmp[20];
; 0001 028B     sprintf(tmp,"%d",so);
;PCODE: $0000048C VOL: 0
;	so -> Y+20
;	tmp -> Y+0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0001 028C     ws(tmp);
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0001 028D }
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;// Hien thi so 32bit co dau
; void wnf( float so)
; 0001 0290 {
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0001 0291     char tmp[30];
; 0001 0292     sprintf(tmp,"%0.2f",so);
;PCODE: $000004A1 VOL: 0
;	so -> Y+30
;	tmp -> Y+0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0001 0293     ws(tmp);
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0001 0294 }
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;// Hien thi so 32bit co dau
; void wfmt(float so)
; 0001 0297 {
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0001 0298     char tmp[30];
; 0001 0299     sprintf(tmp,"%0.2f",so);
;PCODE: $000004B5 VOL: 0
;	so -> Y+30
;	tmp -> Y+0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
; 0001 029A     ws(tmp);
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0001 029B }
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;/* SPI & LCD INIT */
;void SPIinit()
; 0001 029E {
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
; 0001 029F     SPCR |=1<<SPE | 1<<MSTR;                                         //if sPI is used, uncomment this section out
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0001 02A0     SPSR |=1<<SPI2X;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0001 02A1 }
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;void LCDinit()
; 0001 02A3 {
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0001 02A4     LcdInitialise();
;PCODE: $000004D2 VOL: 0
; 0001 02A5     LcdClear();
;PCODE: $000004D3 VOL: 0
; 0001 02A6     ws(" <AKBOTKIT>");
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0001 02A7 }
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0

	.DSEG
_0x20083:
	.BYTE 0xC
;
;/* ADC */
;#define ADC_VREF_TYPE 0x40
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0001 02AD {

	.CSEG
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0001 02AE     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0001 02AF     // Delay needed for the stabilization of the ADC input voltage
; 0001 02B0     delay_us(10);
;PCODE: $000004DF VOL: 0
; 0001 02B1     // Start the AD conversion
; 0001 02B2     ADCSRA|=0x40;
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0001 02B3     // Wait for the AD conversion to complete
; 0001 02B4     while ((ADCSRA & 0x10)==0);
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0001 02B5     ADCSRA|=0x10;
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0001 02B6     return ADCW;
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0001 02B7 }
;PCODE: $000004ED VOL: 0
;
;/* UART BLUETOOTH */
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0001 02EB {
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0001 02EC     char status,data;
; 0001 02ED     status=UCSRA;
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0001 02EE     data=UDR;
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
; 0001 02EF     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0001 02F0     {
; 0001 02F1         rx_buffer[rx_wr_index++]=data;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0001 02F2         #if RX_BUFFER_SIZE == 256
; 0001 02F3         // special case for receiver buffer size=256
; 0001 02F4         if (++rx_counter == 0) {
; 0001 02F5         #else
; 0001 02F6         if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
; 0001 02F7         if (++rx_counter == RX_BUFFER_SIZE) {
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0001 02F8             rx_counter=0;
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
; 0001 02F9         #endif
; 0001 02FA             rx_buffer_overflow=1;
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0001 02FB         }
; 0001 02FC     }
;PCODE: $00000510 VOL: 0
; 0001 02FD }
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0001 0304 {
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0001 0305     char data;
; 0001 0306     while (rx_counter==0);
;PCODE: $00000518 VOL: 0
;	data -> R17
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0001 0307     data=rx_buffer[rx_rd_index++];
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0001 0308     #if RX_BUFFER_SIZE != 256
; 0001 0309     if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
; 0001 030A     #endif
; 0001 030B     #asm("cli")
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
	cli
;PCODE: $0000052D VOL: 0
; 0001 030C     --rx_counter;
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0001 030D     #asm("sei")
;PCODE: $00000531 VOL: 0
	sei
;PCODE: $00000532 VOL: 0
; 0001 030E     return data;
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0001 030F }
;PCODE: $00000536 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0001 031F {
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 0001 0320     if (tx_counter)
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0001 0321        {
; 0001 0322        --tx_counter;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
; 0001 0323        UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 0001 0324     #if TX_BUFFER_SIZE != 256
; 0001 0325        if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
; 0001 0326     #endif
; 0001 0327        }
;PCODE: $0000054C VOL: 0
; 0001 0328 }
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0001 032F {
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
; 0001 0330     while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0001 0331     #asm("cli")
;PCODE: $00000559 VOL: 0
	cli
;PCODE: $0000055A VOL: 0
; 0001 0332     if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0001 0333        {
; 0001 0334        tx_buffer[tx_wr_index++]=c;
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0001 0335     #if TX_BUFFER_SIZE != 256
; 0001 0336        if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0001 0337     #endif
; 0001 0338        ++tx_counter;
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
; 0001 0339        }
; 0001 033A     else
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
; 0001 033B        UDR=c;
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
; 0001 033C     #asm("sei")
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
	sei
;PCODE: $0000057A VOL: 0
; 0001 033D }
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;#pragma used-
;#endif
;void inituart()
; 0001 0341 {
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0001 0342     // USART initialization
; 0001 0343     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0001 0344     // USART Receiver: On
; 0001 0345     // USART Transmitter: On
; 0001 0346     // USART Mode: Asynchronous
; 0001 0347     // USART Baud Rate: 38400
; 0001 0348     UCSRA=0x00;
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0001 0349     UCSRB=0xD8;
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0001 034A     UCSRC=0x06;
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0001 034B     UBRRH=0x00;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0001 034C     UBRRL=0x0C;
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
; 0001 034D }
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;
;//========================================================
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0001 0352 {
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
; 0001 0353      QEL++;
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0001 0354 }
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0001 0358 {
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
; 0001 0359     QER++;
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
; 0001 035A }
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;//========================================================
;//khoi tao encoder
;void initencoder()
; 0001 035E {
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0001 035F     // Dem 24 xung / 1 vong banh xe
; 0001 0360     // External Interrupt(s) initialization
; 0001 0361     // INT0: On
; 0001 0362     // INT0 Mode: Any change
; 0001 0363     // INT1: On
; 0001 0364     // INT1 Mode: Any change
; 0001 0365     // INT2: Off
; 0001 0366     GICR|=0xC0;
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
; 0001 0367     MCUCR=0x05;
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
; 0001 0368     MCUCSR=0x00;
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0001 0369     GIFR=0xC0;
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0001 036A     // Global enable interrupts
; 0001 036B 
; 0001 036C     //OCR1A=0-255; MOTOR LEFT
; 0001 036D     //OCR1B=0-255; MOTOR RIGHT
; 0001 036E }
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;
;//========================================================
;//control velocity motor
;void vMLtoi(unsigned char v) //congsuat=0-22 (%)
; 0001 0373 {
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0001 0374     seRki=0;//reset thanh phan I
;	v -> Y+0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0001 0375     seLki=0;//reset thanh phan I
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0001 0376     //uRold=0;
; 0001 0377     MLdir = 1;
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0001 0378     svQEL = v;
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0001 0379 }
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;//========================================================
;void vMLlui(unsigned char v) //congsuat=0-22 (%)
; 0001 037C {
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
; 0001 037D     seRki=0;//reset thanh phan I
;	v -> Y+0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 0001 037E     seLki=0;//reset thanh phan I
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
; 0001 037F 
; 0001 0380     //uRold=0;
; 0001 0381     MLdir = 0;
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
; 0001 0382     svQEL = v;
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0001 0383 }
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;//========================================================
;void vMLstop()
; 0001 0386 {
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 0001 0387     seRki=0;//reset thanh phan I
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
; 0001 0388     seLki=0;//reset thanh phan I
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
; 0001 0389     MLdir = 1;
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
; 0001 038A     OCR1A = 0;
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
; 0001 038B     svQEL = 0;
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
; 0001 038C }
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;//========================================================
;//========================================================
;void vMRtoi(unsigned char v) //congsuat=0-22 (%)
; 0001 0390 {
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0001 0391     seRki=0;//reset thanh phan I
;	v -> Y+0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
; 0001 0392     seLki=0;//reset thanh phan I
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 0001 0393     MRdir = 1;
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
; 0001 0394     svQER = v;
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0001 0395 }
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;//========================================================
;void vMRlui(unsigned char v) //congsuat=0-22 (%)
; 0001 0398 {
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0001 0399     seRki=0;//reset thanh phan I
;	v -> Y+0
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
; 0001 039A     seLki=0;//reset thanh phan I
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
; 0001 039B     MRdir = 0;
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
; 0001 039C     svQER = v;
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0001 039D }
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;//========================================================
;void vMRstop()
; 0001 03A0 {
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
; 0001 03A1     seRki=0;//reset thanh phan I
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0001 03A2     seLki=0;//reset thanh phan I
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0001 03A3     MRdir = 1;
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
; 0001 03A4     OCR1B = 0;
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
; 0001 03A5     svQER=0;
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
; 0001 03A6 }
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;//========================================================
;// ham dieu khien vi tri
;void ctrRobottoi(unsigned int d,unsigned int v)  //v:0-22
; 0001 03AA {
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
; 0001 03AB      flagwaitctrAngle=0;
;	d -> Y+2
;	v -> Y+0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
; 0001 03AC      flagwaitctrRobot=1;
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
; 0001 03AD      sd=d;// set gia tri khoang cach di chuyen
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
; 0001 03AE      oldd = (QEL+QER)/2; // luu gia tri vi tri hien tai
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0001 03AF      vMRtoi(v);
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0001 03B0      vMLtoi(v);
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0001 03B1 }
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;// ham dieu khien vi tri
;void ctrRobotlui(unsigned int d,unsigned int v)  //v:0-22
; 0001 03B4 {
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
; 0001 03B5      flagwaitctrAngle=0;
;	d -> Y+2
;	v -> Y+0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
; 0001 03B6      flagwaitctrRobot=1;
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
; 0001 03B7      sd=d;// set gia tri khoang cach di chuyen
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
; 0001 03B8      oldd = (QEL+QER)/2; // luu gia tri vi tri hien tai
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
; 0001 03B9      vMRlui(v);
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
; 0001 03BA      vMLlui(v);
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
; 0001 03BB }
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;// ham dieu khien goc quay
;void ctrRobotXoay(int angle,unsigned int v)  //v:0-22
; 0001 03BE {
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
; 0001 03BF      float fangle=0;
; 0001 03C0      flagwaitctrRobot=0;
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;	angle -> Y+6
;	v -> Y+4
;	fangle -> Y+0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0001 03C1      if(angle>0)  { //xoay trai
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
; 0001 03C2         if(angle > 1) vMRtoi(v);
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
; 0001 03C3         else vMRtoi(0);
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0001 03C4         if(angle > 1) vMLlui(v);
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0001 03C5         else vMLlui(0);
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
; 0001 03C6      } else  //xoay phai
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
; 0001 03C7      {
; 0001 03C8         angle=-angle;
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0001 03C9         if(angle > 1) vMRlui(v);
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0001 03CA         else vMRlui(0);
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0001 03CB         if(angle > 1) vMLtoi(v);
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
; 0001 03CC         else vMLtoi(0);
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
; 0001 03CD      }
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0001 03CE      flagwaitctrAngle=1;
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
; 0001 03CF      fangle=angle*0.35;// nhan chia so float
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
; 0001 03D0      sa=fangle;
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
; 0001 03D1      olda = QEL; // luu gia tri vi tri hien tai
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
; 0001 03D2 }
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;
;
;//============Phat==============
;IntRobot convertRobot2IntRobot(Robot robot)
; 0001 03D7 {
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
; 0001 03D8     IntRobot intRb;
; 0001 03D9     intRb.id = (int)robot.id;
;PCODE: $00000685 VOL: 0
;	robot -> Y+28
;	intRb -> Y+0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0001 03DA     intRb.x = (int)robot.x;
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0001 03DB     intRb.y = (int)robot.y;
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
; 0001 03DC     intRb.ox = (int)robot.ox;
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
; 0001 03DD     intRb.oy = (int)robot.oy;
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
; 0001 03DE     intRb.ball.x = (int)robot.ball.x;
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
; 0001 03DF     intRb.ball.y = (int)robot.ball.y;
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
; 0001 03E0     return intRb;
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
; 0001 03E1 }
;PCODE: $000006A4 VOL: 0
;
;//========================================================
;// read  vi tri robot   PHUC
;//========================================================
;/* Comment to return
;unsigned char readposition()
;{
;    unsigned char  i=0;
;    unsigned flagstatus=0;
;
;    if(nRF24L01_RxPacket(RxBuf)==1)         // Neu nhan duoc du lieu
;    {
;        for( i=0;i<28;i++)
;        {
;            *(uint8_t *) ((uint8_t *)&rb + i)=RxBuf[i];
;        }
;
;        idRobot = fmod(rb.id,10); // doc id
;        cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
;
;        switch (idRobot)
;        {
;            case 1:
;                robot11=convertRobot2IntRobot(rb);
;                break;
;            case 2:
;                robot12=convertRobot2IntRobot(rb);
;                break;
;            case 3:
;                robot13=convertRobot2IntRobot(rb);
;            break;
;            case 4:
;                robot21=convertRobot2IntRobot(rb);
;                break;
;            case 5:
;                robot22=convertRobot2IntRobot(rb);
;                break;
;            case 6:
;                robot23=convertRobot2IntRobot(rb);
;                break;
;        }
;
;        if(idRobot==ROBOT_ID)
;        {
;            LEDL=!LEDL;
;            cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
;            flagstatus=1;
;            robotctrl=convertRobot2IntRobot(rb);
;        }
;    }
;    return flagstatus;
;}     */
;//========================================================
;// calc  vi tri robot   so voi mot diem (x,y)        PHUC
;// return goclenh va khoang cach, HUONG TAN CONG
;//========================================================
;void calcvitri(float x,float y)
; 0001 041B {
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0001 041C     float ahx,ahy,aox,aoy,dah,dao,ahay,cosgoc,anpla0,anpla1,detaanpla;
; 0001 041D     ahx = robotctrl.ox-robotctrl.x;
;PCODE: $000006A7 VOL: 0
;	x -> Y+48
;	y -> Y+44
;	ahx -> Y+40
;	ahy -> Y+36
;	aox -> Y+32
;	aoy -> Y+28
;	dah -> Y+24
;	dao -> Y+20
;	ahay -> Y+16
;	cosgoc -> Y+12
;	anpla0 -> Y+8
;	anpla1 -> Y+4
;	detaanpla -> Y+0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0001 041E     ahy = robotctrl.oy-robotctrl.y;
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
; 0001 041F     aox = x-robotctrl.x;
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0001 0420     aoy = y-robotctrl.y;
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
; 0001 0421     dah = sqrt(ahx*ahx+ahy*ahy)  ;
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
; 0001 0422     dao = sqrt(aox*aox+aoy*aoy)  ;
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
; 0001 0423     ahay= ahx*aox+ahy*aoy;
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
; 0001 0424     cosgoc = ahay/(dah*dao);
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
; 0001 0425 
; 0001 0426     anpla0 = atan2(ahy,ahx);
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0001 0427     anpla1 = atan2(aoy,aox);
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
; 0001 0428     detaanpla= anpla0-anpla1;
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
; 0001 0429 
; 0001 042A     errangle = acos(cosgoc)*180/3.14;
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
; 0001 042B     if(((detaanpla>0)&&(detaanpla <M_PI))|| (detaanpla <-M_PI))  // xet truong hop goc ben phai
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0001 042C     {
; 0001 042D          errangle = - errangle; // ben phai
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
; 0001 042E     }
; 0001 042F     else
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
; 0001 0430     {
; 0001 0431         errangle = errangle;   // ben trai
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0001 0432 
; 0001 0433     }
;PCODE: $0000071B VOL: 0
; 0001 0434     distance = sqrt(aox*3.48*aox*3.48+aoy*2.89*aoy*2.89); //tinh khoang cach
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
; 0001 0435     orentation = atan2(ahy,ahx)*180/M_PI + offestsanco;//tinh huong ra goc
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
; 0001 0436     if(( 0 < orentation && orentation < 74) ||   ( 0 > orentation && orentation > -80) )
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
; 0001 0437     {
; 0001 0438        if(SAN_ID == 1)// phan san duong
; 0001 0439        {
; 0001 043A         flagtancong=0;
;PCODE: $00000751 VOL: 0
; 0001 043B         offsetphongthu = 70 ;
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
; 0001 043C         goctancong = 180;
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
; 0001 043D        }
; 0001 043E        else // phan san am
;PCODE: $00000756 VOL: 0
; 0001 043F        {
; 0001 0440         flagtancong=1;
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
; 0001 0441 
; 0001 0442        }
;PCODE: $00000759 VOL: 0
; 0001 0443     }else
;PCODE: $0000075A VOL: 0
;PCODE: $0000075B VOL: 0
; 0001 0444     {
; 0001 0445        if(SAN_ID == 1)
; 0001 0446        {
; 0001 0447        flagtancong=1;
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
; 0001 0448        }
; 0001 0449        else
;PCODE: $0000075E VOL: 0
; 0001 044A        {
; 0001 044B         flagtancong=0;
;PCODE: $0000075F VOL: 0
; 0001 044C         offsetphongthu = -70 ;
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
; 0001 044D         goctancong = 0;
;PCODE: $00000762 VOL: 0
; 0001 044E        }
;PCODE: $00000763 VOL: 0
; 0001 044F     }
;PCODE: $00000764 VOL: 0
; 0001 0450 }
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;void runEscStuck()
; 0001 0452 {
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
; 0001 0453     while(cmdCtrlRobot==4)
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
; 0001 0454     {
; 0001 0455 
; 0001 0456         DDRA    = 0x00;
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
; 0001 0457         PORTA   = 0x00;
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
; 0001 0458         IRFL=read_adc(4);
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
; 0001 0459         IRFR=read_adc(5);
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
; 0001 045A 
; 0001 045B         if((IRFL<300)&&(IRFR<300))
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
; 0001 045C         {
; 0001 045D             vMLtoi(22);vMRlui(22);
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
; 0001 045E             delay_ms(100);
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
; 0001 045F         }
; 0001 0460          if (IRFL>300 && IRFR<300)
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
; 0001 0461         {
; 0001 0462             vMLlui(0);vMRlui(25);delay_ms(100);
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
; 0001 0463         }
; 0001 0464         if (IRFR>300 && IRFL<300 )
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
; 0001 0465         {
; 0001 0466             vMLlui(25);vMRlui(0);delay_ms(100);
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
; 0001 0467         }
; 0001 0468         LEDBR=!LEDBR;
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
; 0001 0469         readposition();//doc RF cap nhat ai robot
;PCODE: $000007C0 VOL: 0
; 0001 046A     }
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
; 0001 046B }
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;void runEscStucksethome()
; 0001 046D {
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
; 0001 046E     while(cmdCtrlRobot==7)
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
; 0001 046F     {
; 0001 0470         DDRA    = 0x00;
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
; 0001 0471         PORTA   = 0x00;
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
; 0001 0472         readposition();//doc RF cap nhat ai robot
;PCODE: $000007CF VOL: 0
; 0001 0473         IRFL=read_adc(4);
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
; 0001 0474         IRFR=read_adc(5);
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
; 0001 0475 
; 0001 0476         if((IRFL<300)&&(IRFR<300))
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
; 0001 0477         {
; 0001 0478             vMLtoi(22);vMRlui(22);
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
; 0001 0479             delay_ms(100);
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
;PCODE: $000007EA VOL: 0
; 0001 047A         }
; 0001 047B 
; 0001 047C         if (IRFL>300 && IRFR<300)
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
; 0001 047D         {
; 0001 047E             vMLlui(0);vMRlui(22);delay_ms(300);
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
; 0001 047F         }
; 0001 0480         if (IRFR>300 && IRFL<300 )
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
; 0001 0481         {
; 0001 0482             vMLlui(22);vMRlui(0);delay_ms(300);
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
; 0001 0483         }
; 0001 0484 
; 0001 0485         LEDBR=!LEDBR;
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;PCODE: $0000081D VOL: 0
; 0001 0486     }
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
; 0001 0487 }
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;void runEscBlindSpot()
; 0001 0489 {
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
; 0001 048A     while(cmdCtrlRobot==3)
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
; 0001 048B     {
; 0001 048C         DDRA    = 0x00;
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
; 0001 048D         PORTA   = 0x00;
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
; 0001 048E         readposition();//doc RF cap nhat ai robot
;PCODE: $0000082C VOL: 0
; 0001 048F         IRFL=read_adc(4);
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
; 0001 0490         IRFR=read_adc(5);
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
; 0001 0491         if (IRFL>300 && IRFR<300)
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
; 0001 0492         {
; 0001 0493             vMLlui(0);vMRlui(22);delay_ms(300);
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
; 0001 0494         }
; 0001 0495         if (IRFR>300 && IRFL<300 )
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
; 0001 0496         {
; 0001 0497             vMLlui(22);vMRlui(0);delay_ms(300);
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
; 0001 0498         }
; 0001 0499 
; 0001 049A         if((IRFL<300)&&(IRFR<300))
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
; 0001 049B         {
; 0001 049C             vMLtoi(20);vMRtoi(20);
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
; 0001 049D             delay_ms(20);
;PCODE: $0000086D VOL: 0
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
; 0001 049E         }
; 0001 049F 
; 0001 04A0         LEDR=!LEDR;
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
; 0001 04A1     }
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
; 0001 04A2 }
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;
;void runEscBlindSpotsethome()
; 0001 04A5 {
;PCODE: $0000087F VOL: 0
;PCODE: $00000880 VOL: 0
; 0001 04A6     while(cmdCtrlRobot==6)
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
; 0001 04A7     {
; 0001 04A8         DDRA    = 0x00;
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
; 0001 04A9         PORTA   = 0x00;
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
; 0001 04AA         readposition();
;PCODE: $00000889 VOL: 0
; 0001 04AB         IRFL=read_adc(4);
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
; 0001 04AC         IRFR=read_adc(5);
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
; 0001 04AD         if (IRFL>300 && IRFR<300)
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
; 0001 04AE         {
; 0001 04AF             vMLlui(0);vMRlui(22);delay_ms(300);
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
; 0001 04B0         }
; 0001 04B1         if (IRFR>300 && IRFL<300 )
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
; 0001 04B2         {
; 0001 04B3             vMLlui(22);vMRlui(0);delay_ms(300);
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
; 0001 04B4         }
; 0001 04B5 
; 0001 04B6         if((IRFL<300)&&(IRFR<300))
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
; 0001 04B7         {
; 0001 04B8             vMLtoi(20);vMRtoi(20);
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
; 0001 04B9             delay_ms(10);
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
; 0001 04BA         }
; 0001 04BB 
; 0001 04BC         LEDR=!LEDR;
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
; 0001 04BD     }
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
; 0001 04BE }
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;
;//========================================================
;// SET HOME  vi tri robot, de chuan bi cho tran dau       PHUC//
;//========================================================
;int sethomeRB()
; 0001 04C4 {
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
; 0001 04C5        while(flagsethome==0)
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
; 0001 04C6        {
; 0001 04C7             LEDL=!LEDL;
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
;PCODE: $000008E4 VOL: 0
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
; 0001 04C8               //PHUC SH
; 0001 04C9             if(readposition()==1)//co du lieu moi
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
; 0001 04CA             {
; 0001 04CB                     //hc(3,40);wn16s(cmdCtrlRobot);
; 0001 04CC                     if(cmdCtrlRobot==1)      // dung ma lenh stop chuong trinh
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
; 0001 04CD                     {
; 0001 04CE                         flagsethome=0;
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
; 0001 04CF                          return 0;
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
; 0001 04D0                     }
; 0001 04D1 
; 0001 04D2                     if(cmdCtrlRobot==2 || cmdCtrlRobot==3 || cmdCtrlRobot==4)      // dung ma lenh stop chuong trinh
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
; 0001 04D3                     {
; 0001 04D4                         flagsethome=0;
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
; 0001 04D5                         return 0;
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
; 0001 04D6                     }
; 0001 04D7 
; 0001 04D8                     if(cmdCtrlRobot==5)  //sethome robot
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
; 0001 04D9                     {
; 0001 04DA 
; 0001 04DB                         calcvitri(rbctrlHomeX,rbctrlHomeY);
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
; 0001 04DC                         if(distance>100) //chay den vi tri
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
; 0001 04DD                         {
; 0001 04DE                             if(errangle>18 || errangle<-18 )
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
; 0001 04DF                             {
; 0001 04E0                             int nv = errangle*27/180 ;
; 0001 04E1                             int verrangle = calcVangle(errangle);
; 0001 04E2                             ctrRobotXoay(nv,verrangle);
;PCODE: $0000091D VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0001 04E3                             delay_ms(1);
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
; 0001 04E4                             }else
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
; 0001 04E5                             {
; 0001 04E6                             //1xung = 3.14 * 40/24 =5.22
; 0001 04E7                             ctrRobottoi(distance/5.22,15);
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
; 0001 04E8                             // verranglekisum=0;//RESET I.
; 0001 04E9                             }
;PCODE: $0000093E VOL: 0
; 0001 04EA                         }
; 0001 04EB                         else //XOAY DUNG HUONG
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
; 0001 04EC                         {
; 0001 04ED                             setRobotAngleX=10*cos(rbctrlHomeAngle*M_PI/180);
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
; 0001 04EE                             setRobotAngleY=10*sin(rbctrlHomeAngle*M_PI/180);;
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
; 0001 04EF                             calcvitri(robotctrl.x + setRobotAngleX,robotctrl.y + setRobotAngleY);
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
; 0001 04F0                             if(errangle>90 || errangle<-90 )
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
; 0001 04F1                              {
; 0001 04F2 
; 0001 04F3                                int nv = errangle*27/180 ;
; 0001 04F4                                int verrangle = calcVangle(errangle);
; 0001 04F5                                ctrRobotXoay(nv,verrangle);
;PCODE: $0000096E VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
; 0001 04F6                                delay_ms(1);
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
; 0001 04F7                              }else
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
; 0001 04F8                              {
; 0001 04F9 
; 0001 04FA                                  verranglekisum=0;//RESET I.
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
; 0001 04FB                                  flaghuongtrue=0;
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
; 0001 04FC                                  flagsethome=1;  // bao da set home khong can set nua
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
; 0001 04FD                                  vMRstop();
;PCODE: $0000098D VOL: 0
; 0001 04FE                                  vMLstop();
;PCODE: $0000098E VOL: 0
; 0001 04FF                                   return 0;
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
; 0001 0500 
; 0001 0501                              }
;PCODE: $00000991 VOL: 0
; 0001 0502                         }
;PCODE: $00000992 VOL: 0
; 0001 0503 
; 0001 0504                     }
; 0001 0505 
; 0001 0506                     if(cmdCtrlRobot==7)  //sethome IS STUCKED
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
; 0001 0507                     {
; 0001 0508 
; 0001 0509                        cntstuckRB++;
;PCODE: $00000997 VOL: 0
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
; 0001 050A                        if(cntstuckRB > 2)
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
; 0001 050B                        {
; 0001 050C                          runEscStucksethome();
;PCODE: $0000099E VOL: 0
; 0001 050D                          cntstuckRB=0;
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
; 0001 050E                        }
; 0001 050F                     }
;PCODE: $000009A1 VOL: 0
; 0001 0510 
; 0001 0511                     if(cmdCtrlRobot==6) //sethome IS //roi vao diem mu (blind spot) , mat vi tri hay huong
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
; 0001 0512                     {
; 0001 0513                        LEDBL=1;
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
; 0001 0514                        cntunlookRB++;
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
; 0001 0515                        if(cntunlookRB > 2)
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
; 0001 0516                        {
; 0001 0517                          runEscBlindSpotsethome();
;PCODE: $000009AF VOL: 0
; 0001 0518                          cntunlookRB=0;
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
; 0001 0519 
; 0001 051A                        }
; 0001 051B 
; 0001 051C                     }
;PCODE: $000009B2 VOL: 0
; 0001 051D 
; 0001 051E 
; 0001 051F             }
;PCODE: $000009B3 VOL: 0
; 0001 0520 
; 0001 0521             LEDR=!LEDR;
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
; 0001 0522 
; 0001 0523        }
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
; 0001 0524        return 0;
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
; 0001 0525 
; 0001 0526 }
;PCODE: $000009C3 VOL: 0
;
;int codePenalty()
; 0001 0529 {
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
; 0001 052A    // chay den vi tri duoc dat truoc, sau do da banh 1 lan
; 0001 052B       //PHUC SH
; 0001 052C       if(readposition()==1)//co du lieu moi
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
; 0001 052D       {
; 0001 052E            if(cmdCtrlRobot==8)  //set vi tri penalty robot
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
; 0001 052F             {
; 0001 0530                 calcvitri(rbctrlPenaltyX,rbctrlPenaltyY);
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
; 0001 0531                 if(distance>50) //chay den vi tri
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0001 0532                 {
; 0001 0533                     if(errangle>18 || errangle<-18 )
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
; 0001 0534                     {
; 0001 0535                     int nv = errangle*27/180 ;
; 0001 0536                     int verrangle = calcVangle(errangle);
; 0001 0537                     ctrRobotXoay(nv,verrangle);
;PCODE: $000009DF VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
; 0001 0538                     delay_ms(1);
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
;PCODE: $000009F4 VOL: 0
; 0001 0539                     }else
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
; 0001 053A                     {
; 0001 053B                     //1xung = 3.14 * 40/24 =5.22
; 0001 053C                     ctrRobottoi(distance/5.22,15);
;PCODE: $000009F8 VOL: 0
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
; 0001 053D                     // verranglekisum=0;//RESET I.
; 0001 053E                     }
;PCODE: $00000A00 VOL: 0
; 0001 053F                 }
; 0001 0540                 else //XOAY DUNG HUONG
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
; 0001 0541                 {
; 0001 0542                     setRobotAngleX=10*cos(rbctrlPenaltyAngle*M_PI/180);
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
; 0001 0543                     setRobotAngleY=10*sin(rbctrlPenaltyAngle*M_PI/180);;
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
; 0001 0544                     calcvitri(robotctrl.x + setRobotAngleX,robotctrl.y + setRobotAngleY);
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
;PCODE: $00000A23 VOL: 0
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
; 0001 0545                     if(errangle>10 || errangle<-10 )
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
;PCODE: $00000A2F VOL: 0
; 0001 0546                      {
; 0001 0547 
; 0001 0548                        int nv = errangle*27/180 ;
; 0001 0549                        int verrangle = calcVangle(errangle);
; 0001 054A                        ctrRobotXoay(nv,verrangle);
;PCODE: $00000A30 VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
;PCODE: $00000A42 VOL: 0
; 0001 054B                        delay_ms(1);
;PCODE: $00000A43 VOL: 0
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
; 0001 054C                      }else
;PCODE: $00000A46 VOL: 0
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
; 0001 054D                      {
; 0001 054E 
; 0001 054F                          verranglekisum=0;//RESET I.
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
; 0001 0550                          flaghuongtrue=0;
;PCODE: $00000A4B VOL: 0
;PCODE: $00000A4C VOL: 0
; 0001 0551                          flagsethome=1;  // bao da set vitri penalty
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
; 0001 0552                          while(cmdCtrlRobot!=2) //cho nhan nut start
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
;PCODE: $00000A52 VOL: 0
; 0001 0553                          {
; 0001 0554                             readposition();
;PCODE: $00000A53 VOL: 0
; 0001 0555                          }
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
; 0001 0556                          // da banh
; 0001 0557                          vMRtoi(22);
;PCODE: $00000A56 VOL: 0
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
; 0001 0558                          vMLtoi(22);
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
;PCODE: $00000A5B VOL: 0
; 0001 0559                          delay_ms(1000);
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
; 0001 055A                          vMRlui(10);
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
; 0001 055B                          vMLlui(10);
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
; 0001 055C                          delay_ms(1000);
;PCODE: $00000A65 VOL: 0
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
; 0001 055D                          vMRstop();
;PCODE: $00000A68 VOL: 0
; 0001 055E                          vMLstop();
;PCODE: $00000A69 VOL: 0
; 0001 055F                           return 0;
;PCODE: $00000A6A VOL: 0
;PCODE: $00000A6B VOL: 0
; 0001 0560 
; 0001 0561                      }
;PCODE: $00000A6C VOL: 0
; 0001 0562                 }
;PCODE: $00000A6D VOL: 0
; 0001 0563 
; 0001 0564             }
; 0001 0565       }
;PCODE: $00000A6E VOL: 0
; 0001 0566 
; 0001 0567 }
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;void settoadoHomRB()
; 0001 0569 {
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
; 0001 056A     switch(ROBOT_ID)
;PCODE: $00000A74 VOL: 0
; 0001 056B     {
; 0001 056C     //PHUC
; 0001 056D        case 1:
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
; 0001 056E 
; 0001 056F 
; 0001 0570             rbctrlPenaltyX = 0;
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
; 0001 0571             rbctrlPenaltyY = 0;
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
; 0001 0572 
; 0001 0573             if(SAN_ID==1)
; 0001 0574             {
; 0001 0575               rbctrlPenaltyAngle = 179;
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
; 0001 0576               rbctrlHomeAngle = 179 ;
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
; 0001 0577               rbctrlHomeX = 269.7 ;
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
; 0001 0578               rbctrlHomeY = 1.7  ;
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
; 0001 0579               setRobotXmin=80;
;PCODE: $00000A83 VOL: 0
;PCODE: $00000A84 VOL: 0
; 0001 057A               setRobotXmax=260;
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
; 0001 057B             }
; 0001 057C             else
;PCODE: $00000A87 VOL: 0
; 0001 057D             {
; 0001 057E               rbctrlPenaltyAngle = -15;
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
; 0001 057F               rbctrlHomeAngle = -15 ;
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
; 0001 0580               rbctrlHomeX =-226.1 ;
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
; 0001 0581               rbctrlHomeY = 1.6  ;
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
; 0001 0582               setRobotXmin=-260;
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
; 0001 0583               setRobotXmax=-80;
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
; 0001 0584             }
;PCODE: $00000A94 VOL: 0
; 0001 0585        break;
;PCODE: $00000A95 VOL: 0
; 0001 0586        case 2:
;PCODE: $00000A96 VOL: 0
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
; 0001 0587 
; 0001 0588 
; 0001 0589             rbctrlPenaltyX=0;
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
; 0001 058A             rbctrlPenaltyY=0;
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
; 0001 058B 
; 0001 058C             if(SAN_ID==1)
; 0001 058D             {
; 0001 058E               rbctrlPenaltyAngle = 179;
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
; 0001 058F               rbctrlHomeAngle = 179 ;
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
; 0001 0590               rbctrlHomeX =66.0 ;
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
; 0001 0591               rbctrlHomeY = 79.4  ;
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
; 0001 0592               setRobotXmin=-270;
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
; 0001 0593               setRobotXmax=270;
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
; 0001 0594             }
; 0001 0595             else
;PCODE: $00000AA9 VOL: 0
; 0001 0596             {
; 0001 0597               rbctrlPenaltyAngle = -15;
;PCODE: $00000AAA VOL: 0
;PCODE: $00000AAB VOL: 0
; 0001 0598               rbctrlHomeAngle = -15  ;
;PCODE: $00000AAC VOL: 0
;PCODE: $00000AAD VOL: 0
; 0001 0599               rbctrlHomeX =-44.3 ;
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
; 0001 059A               rbctrlHomeY = 82.7  ;
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
; 0001 059B               setRobotXmin=-270;
;PCODE: $00000AB2 VOL: 0
;PCODE: $00000AB3 VOL: 0
; 0001 059C               setRobotXmax=270;
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
; 0001 059D             }
;PCODE: $00000AB6 VOL: 0
; 0001 059E        break;
;PCODE: $00000AB7 VOL: 0
; 0001 059F        case 3:
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
; 0001 05A0 
; 0001 05A1 
; 0001 05A2             rbctrlPenaltyX = 0;
;PCODE: $00000ABB VOL: 0
;PCODE: $00000ABC VOL: 0
; 0001 05A3             rbctrlPenaltyY = 0;
;PCODE: $00000ABD VOL: 0
;PCODE: $00000ABE VOL: 0
; 0001 05A4             rbctrlPenaltyAngle = -15;
;PCODE: $00000ABF VOL: 0
;PCODE: $00000AC0 VOL: 0
; 0001 05A5             if(SAN_ID==1)
; 0001 05A6             {
; 0001 05A7               rbctrlPenaltyAngle = 179;
;PCODE: $00000AC1 VOL: 0
;PCODE: $00000AC2 VOL: 0
; 0001 05A8               rbctrlHomeAngle = 179 ;
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
; 0001 05A9               rbctrlHomeX =54.1 ;
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
; 0001 05AA               rbctrlHomeY = -99.9  ;
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
; 0001 05AB               setRobotXmin=-270;
;PCODE: $00000AC9 VOL: 0
;PCODE: $00000ACA VOL: 0
; 0001 05AC               setRobotXmax=20;
;PCODE: $00000ACB VOL: 0
;PCODE: $00000ACC VOL: 0
; 0001 05AD             }
; 0001 05AE             else
;PCODE: $00000ACD VOL: 0
; 0001 05AF             {
; 0001 05B0               rbctrlPenaltyAngle = -15;
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
; 0001 05B1               rbctrlHomeAngle = -15  ;
;PCODE: $00000AD0 VOL: 0
;PCODE: $00000AD1 VOL: 0
; 0001 05B2               rbctrlHomeX =-53.5 ;
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
; 0001 05B3               rbctrlHomeY =  -93.8 ;
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
; 0001 05B4               setRobotXmin=-20;
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
; 0001 05B5               setRobotXmax=270;
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
; 0001 05B6             }
;PCODE: $00000ADA VOL: 0
; 0001 05B7        break;
;PCODE: $00000ADB VOL: 0
; 0001 05B8        case 4:
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
;PCODE: $00000ADE VOL: 0
; 0001 05B9 
; 0001 05BA             rbctrlPenaltyX=0;
;PCODE: $00000ADF VOL: 0
;PCODE: $00000AE0 VOL: 0
; 0001 05BB             rbctrlPenaltyY=0;
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
; 0001 05BC 
; 0001 05BD              if(SAN_ID==1)
; 0001 05BE             {
; 0001 05BF               rbctrlPenaltyAngle = 179;
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
; 0001 05C0               rbctrlHomeAngle = 179 ;
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
; 0001 05C1               rbctrlHomeX = 269.7 ;
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
; 0001 05C2               rbctrlHomeY = 1.7  ;
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
; 0001 05C3               setRobotXmin=80;
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
; 0001 05C4               setRobotXmax=260;
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
; 0001 05C5             }
; 0001 05C6             else
;PCODE: $00000AEF VOL: 0
; 0001 05C7             {
; 0001 05C8               rbctrlPenaltyAngle = -15;
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
; 0001 05C9               rbctrlHomeAngle = -15  ;
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
; 0001 05CA               rbctrlHomeX =-226.1 ;
;PCODE: $00000AF4 VOL: 0
;PCODE: $00000AF5 VOL: 0
; 0001 05CB               rbctrlHomeY = 1.6  ;
;PCODE: $00000AF6 VOL: 0
;PCODE: $00000AF7 VOL: 0
; 0001 05CC               setRobotXmin=-260;
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
; 0001 05CD               setRobotXmax=-80;
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
; 0001 05CE             }
;PCODE: $00000AFC VOL: 0
; 0001 05CF        break;
;PCODE: $00000AFD VOL: 0
; 0001 05D0        case 5:
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
; 0001 05D1 
; 0001 05D2             rbctrlPenaltyX = 0;
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
; 0001 05D3             rbctrlPenaltyY = 0;
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
; 0001 05D4              if(SAN_ID==1)
; 0001 05D5             {
; 0001 05D6                 rbctrlPenaltyAngle = 179;
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
; 0001 05D7                rbctrlHomeAngle = 179 ;
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
; 0001 05D8                rbctrlHomeX =66.0 ;
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
; 0001 05D9               rbctrlHomeY = 79.4  ;
;PCODE: $00000B0B VOL: 0
;PCODE: $00000B0C VOL: 0
; 0001 05DA               setRobotXmin=-270;
;PCODE: $00000B0D VOL: 0
;PCODE: $00000B0E VOL: 0
; 0001 05DB               setRobotXmax=270;
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
; 0001 05DC             }
; 0001 05DD             else
;PCODE: $00000B11 VOL: 0
; 0001 05DE             {
; 0001 05DF               rbctrlPenaltyAngle = -15;
;PCODE: $00000B12 VOL: 0
;PCODE: $00000B13 VOL: 0
; 0001 05E0               rbctrlHomeAngle = -15  ;
;PCODE: $00000B14 VOL: 0
;PCODE: $00000B15 VOL: 0
; 0001 05E1               rbctrlHomeX =-44.3 ;
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
; 0001 05E2               rbctrlHomeY = 82.7  ;
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
; 0001 05E3               setRobotXmin=-270;
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
; 0001 05E4               setRobotXmax=270;
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
; 0001 05E5             }
;PCODE: $00000B1E VOL: 0
; 0001 05E6        break;
;PCODE: $00000B1F VOL: 0
; 0001 05E7        case 6:
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
; 0001 05E8 
; 0001 05E9 
; 0001 05EA             rbctrlPenaltyX = 0;
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
; 0001 05EB             rbctrlPenaltyY = 0;
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
; 0001 05EC             if(SAN_ID==1)
; 0001 05ED             {
; 0001 05EE                rbctrlPenaltyAngle = 179;
;PCODE: $00000B27 VOL: 0
;PCODE: $00000B28 VOL: 0
; 0001 05EF               rbctrlHomeAngle = 179 ;
;PCODE: $00000B29 VOL: 0
;PCODE: $00000B2A VOL: 0
; 0001 05F0               rbctrlHomeX =54.1 ;
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 0
; 0001 05F1               rbctrlHomeY = -99.9  ;
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
; 0001 05F2               setRobotXmin=-270;
;PCODE: $00000B2F VOL: 0
;PCODE: $00000B30 VOL: 0
; 0001 05F3               setRobotXmax=20;
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
; 0001 05F4             }
; 0001 05F5             else
;PCODE: $00000B33 VOL: 0
; 0001 05F6             {
; 0001 05F7               rbctrlPenaltyAngle = -15;
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
; 0001 05F8               rbctrlHomeAngle = -15  ;
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
; 0001 05F9               rbctrlHomeX =-53.5 ;
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
; 0001 05FA               rbctrlHomeY =  -93.8 ;
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
; 0001 05FB               setRobotXmin=-20;
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
; 0001 05FC               setRobotXmax=270;
;PCODE: $00000B3E VOL: 0
;PCODE: $00000B3F VOL: 0
; 0001 05FD             }
;PCODE: $00000B40 VOL: 0
; 0001 05FE        break;
;PCODE: $00000B41 VOL: 0
; 0001 05FF 
; 0001 0600 
; 0001 0601     }
;PCODE: $00000B42 VOL: 0
; 0001 0602 }
;PCODE: $00000B43 VOL: 0
;PCODE: $00000B44 VOL: 0
;//=======================================================
;// Tinh luc theo goc quay de dieu khien robot
;int calcVangle(int angle)
; 0001 0606 {
;PCODE: $00000B45 VOL: 0
;PCODE: $00000B46 VOL: 0
; 0001 0607     int verrangle=0;
; 0001 0608     //tinh thanh phan I
; 0001 0609     verranglekisum = verranglekisum + angle/20;
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;	angle -> Y+2
;	verrangle -> R16,R17
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
; 0001 060A     if(verranglekisum>15)verranglekisum = 15;
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
; 0001 060B     if(verranglekisum<-15)verranglekisum = -15;
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
; 0001 060C     //tinh thanh phan dieu khien
; 0001 060D     verrangle = 10 + angle/12 + verranglekisum ;
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
; 0001 060E     //gioi han bao hoa
; 0001 060F     if(verrangle<0) verrangle=-verrangle;//lay tri tuyet doi cua van toc v dieu khien
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
; 0001 0610     if(verrangle>20) verrangle = 20;
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
; 0001 0611     if(verrangle<8) verrangle = 8;
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
; 0001 0612     return  verrangle;
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
; 0001 0613 }
;PCODE: $00000B7D VOL: 0
;//ctrl robot
;void ctrrobot()
; 0001 0616 {
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
; 0001 0617     if(readposition()==1)//co du lieu moi
;PCODE: $00000B80 VOL: 0
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
; 0001 0618     {
; 0001 0619 //          hc(3,40);wn16s(cmdCtrlRobot);
; 0001 061A //        hc(4,40);wn16s(idRobot);
; 0001 061B          //-------------------------------------------------
; 0001 061C         if(cmdCtrlRobot==8)      // dung ma lenh stop chuong trinh
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
; 0001 061D         {
; 0001 061E             flagsethome=0; //cho phep sethome
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
; 0001 061F             while(cmdCtrlRobot==8)
;PCODE: $00000B88 VOL: 0
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
; 0001 0620             {
; 0001 0621               codePenalty();
;PCODE: $00000B8C VOL: 0
; 0001 0622             }
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
; 0001 0623         }
; 0001 0624 
; 0001 0625         if(cmdCtrlRobot==1)      // dung ma lenh stop chuong trinh
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
;PCODE: $00000B92 VOL: 0
; 0001 0626         {
; 0001 0627             flagsethome=0; //cho phep sethome
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
; 0001 0628             while(cmdCtrlRobot==1)
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
; 0001 0629             {
; 0001 062A               readposition();
;PCODE: $00000B99 VOL: 0
; 0001 062B             }
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
; 0001 062C         }
; 0001 062D 
; 0001 062E         if(cmdCtrlRobot==5)  //sethome robot
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
; 0001 062F         {
; 0001 0630 
; 0001 0631            cntsethomeRB++;
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
;PCODE: $00000BA3 VOL: 0
; 0001 0632            if(cntsethomeRB > 2)
;PCODE: $00000BA4 VOL: 0
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
; 0001 0633            {
; 0001 0634              LEDBR=1;
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
; 0001 0635              if (flagsethome == 0)sethomeRB();
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
; 0001 0636              cntsethomeRB=0;
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
; 0001 0637            }
; 0001 0638 
; 0001 0639         }
;PCODE: $00000BB0 VOL: 0
; 0001 063A 
; 0001 063B         if(cmdCtrlRobot==4)  //sethome robot
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
; 0001 063C         {
; 0001 063D            flagsethome=0; //cho phep sethome
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
; 0001 063E            cntstuckRB++;
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
; 0001 063F            if(cntstuckRB > 2)
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
; 0001 0640            {
; 0001 0641              runEscStuck();
;PCODE: $00000BBE VOL: 0
; 0001 0642              cntstuckRB=0;
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
; 0001 0643            }
; 0001 0644         }
;PCODE: $00000BC1 VOL: 0
; 0001 0645 
; 0001 0646         if(cmdCtrlRobot==3)  //roi vao diem mu (blind spot) , mat vi tri hay huong
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
; 0001 0647         {
; 0001 0648            flagsethome=0; //cho phep sethome
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
; 0001 0649            cntunlookRB++;
;PCODE: $00000BC8 VOL: 0
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
;PCODE: $00000BCB VOL: 0
; 0001 064A            if(cntunlookRB > 2)
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
; 0001 064B            {
; 0001 064C              runEscBlindSpot();
;PCODE: $00000BCF VOL: 0
; 0001 064D              cntunlookRB=0;
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
; 0001 064E            }
; 0001 064F 
; 0001 0650         }
;PCODE: $00000BD2 VOL: 0
; 0001 0651 
; 0001 0652 
; 0001 0653         //------------------------------------------------
; 0001 0654         if(cmdCtrlRobot==2) {// run chuong trinh
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
; 0001 0655             flagsethome=0; //cho phep sethome
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
; 0001 0656             switch(flagtask)
;PCODE: $00000BD9 VOL: 0
; 0001 0657             {
; 0001 0658               // chay den vi tri duoc set boi nguoi dieu khien
; 0001 0659               case 0:
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
; 0001 065A                      if(setRobotX < setRobotXmin)   setRobotX =  setRobotXmin;
;PCODE: $00000BDC VOL: 0
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
; 0001 065B                      if(setRobotX >setRobotXmax)    setRobotX =  setRobotXmax;
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
; 0001 065C                      calcvitri(setRobotX,setRobotY);
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
;PCODE: $00000BEE VOL: 0
; 0001 065D                      if(distance>80) //chay den vi tri
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
; 0001 065E                      {
; 0001 065F                          if(errangle>18 || errangle<-18 )
;PCODE: $00000BF3 VOL: 0
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
; 0001 0660                          {
; 0001 0661                            int nv = errangle*27/180 ;
; 0001 0662                            int verrangle = calcVangle(errangle);
; 0001 0663                            ctrRobotXoay(nv,verrangle);
;PCODE: $00000BFD VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
;PCODE: $00000C00 VOL: 0
;PCODE: $00000C01 VOL: 0
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;PCODE: $00000C0A VOL: 0
;PCODE: $00000C0B VOL: 0
;PCODE: $00000C0C VOL: 0
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
; 0001 0664                            delay_ms(1);
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
; 0001 0665                          }else
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
;PCODE: $00000C15 VOL: 0
; 0001 0666                          {
; 0001 0667                            //1xung = 3.14 * 40/24 =5.22
; 0001 0668                            ctrRobottoi(distance/5.22,15);
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
;PCODE: $00000C18 VOL: 0
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
; 0001 0669                           // verranglekisum=0;//RESET I.
; 0001 066A                          }
;PCODE: $00000C1E VOL: 0
; 0001 066B                      }
; 0001 066C                      else
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
; 0001 066D                      {
; 0001 066E                          flagtask=10;
;PCODE: $00000C21 VOL: 0
;PCODE: $00000C22 VOL: 0
; 0001 066F                      }
;PCODE: $00000C23 VOL: 0
; 0001 0670                      break;
;PCODE: $00000C24 VOL: 0
; 0001 0671               // quay dung huong duoc set boi nguoi dieu khien
; 0001 0672               case 1:
;PCODE: $00000C25 VOL: 0
;PCODE: $00000C26 VOL: 0
;PCODE: $00000C27 VOL: 0
; 0001 0673 
; 0001 0674                     calcvitri(robotctrl.x + setRobotAngleX,robotctrl.y + setRobotAngleY);
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
; 0001 0675                     if(errangle>18 || errangle<-18 )
;PCODE: $00000C35 VOL: 0
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
;PCODE: $00000C3C VOL: 0
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
; 0001 0676                      {
; 0001 0677 
; 0001 0678                        int nv = errangle*27/180 ;
; 0001 0679                        int verrangle = calcVangle(errangle);
; 0001 067A                        ctrRobotXoay(nv,verrangle);
;PCODE: $00000C3F VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
;PCODE: $00000C43 VOL: 0
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
; 0001 067B                       // ctrRobotXoay(nv,10);
; 0001 067C                        delay_ms(1);
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
;PCODE: $00000C54 VOL: 0
; 0001 067D                      }else
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
; 0001 067E                      {
; 0001 067F                        flaghuongtrue++;
;PCODE: $00000C58 VOL: 0
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
; 0001 0680                        if(flaghuongtrue>3)
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
; 0001 0681                        {
; 0001 0682                         //verranglekisum=0;//RESET I.
; 0001 0683                          flaghuongtrue=0;
;PCODE: $00000C5F VOL: 0
;PCODE: $00000C60 VOL: 0
; 0001 0684                          flagtask=10;
;PCODE: $00000C61 VOL: 0
;PCODE: $00000C62 VOL: 0
; 0001 0685                        }
; 0001 0686 
; 0001 0687                      }
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
; 0001 0688                     break;
;PCODE: $00000C65 VOL: 0
; 0001 0689               // chay den vi tri bong
; 0001 068A               case 2:
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
; 0001 068B 
; 0001 068C                     //PHUC test    rb1 ,s1
; 0001 068D                     if(robotctrl.ball.x < setRobotXmin)   robotctrl.ball.x =  setRobotXmin;
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
; 0001 068E                     if(robotctrl.ball.x >setRobotXmax)    robotctrl.ball.x =  setRobotXmax;
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
; 0001 068F                     calcvitri(robotctrl.ball.x,robotctrl.ball.y);
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
; 0001 0690 
; 0001 0691                      if(errangle>18 || errangle<-18 )
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
; 0001 0692                      {
; 0001 0693                        int nv = errangle*27/180 ;
; 0001 0694                        int verrangle = calcVangle(errangle);
; 0001 0695                        ctrRobotXoay(nv,verrangle);
;PCODE: $00000C94 VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
; 0001 0696                        delay_ms(1);
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
; 0001 0697                      }else
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
; 0001 0698                      {
; 0001 0699                          //1xung = 3.14 * 40/24 =5.22
; 0001 069A                          if(distance>10) //chay den vi tri
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
; 0001 069B                          {
; 0001 069C                            ctrRobottoi(distance/5.22,15);
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
;PCODE: $00000CB8 VOL: 0
; 0001 069D                            delay_ms(5);
;PCODE: $00000CB9 VOL: 0
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
; 0001 069E                          }else
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
; 0001 069F                          {
; 0001 06A0                            flagtask=10;
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
; 0001 06A1                          }
;PCODE: $00000CC0 VOL: 0
; 0001 06A2                         // verranglekisum=0;//RESET I.
; 0001 06A3                      }
;PCODE: $00000CC1 VOL: 0
; 0001 06A4 
; 0001 06A5                     break;
;PCODE: $00000CC2 VOL: 0
; 0001 06A6               // da bong
; 0001 06A7               case 3:
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
; 0001 06A8                     ctrRobottoi(40,22);
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
;PCODE: $00000CCA VOL: 0
; 0001 06A9                     delay_ms(400);
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
; 0001 06AA                     ctrRobotlui(40,15);
;PCODE: $00000CCE VOL: 0
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
; 0001 06AB                     delay_ms(400);
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
;PCODE: $00000CD5 VOL: 0
; 0001 06AC                     flagtask = 10;
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
; 0001 06AD                     break;
;PCODE: $00000CD8 VOL: 0
; 0001 06AE               case 10:
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
; 0001 06AF                     vMRtoi(0);
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
; 0001 06B0                     vMLtoi(0);
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
; 0001 06B1                     break;
;PCODE: $00000CE2 VOL: 0
; 0001 06B2               //chay theo bong co dinh huong
; 0001 06B3               case 4:
;PCODE: $00000CE3 VOL: 0
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
; 0001 06B4                     calcvitri(robotctrl.ball.x,robotctrl.ball.y);
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
; 0001 06B5                     if(errangle>18 || errangle<-18 )
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
; 0001 06B6                      {
; 0001 06B7 
; 0001 06B8                        int nv = errangle*27/180 ;
; 0001 06B9                        int verrangle = calcVangle(errangle);
; 0001 06BA                        ctrRobotXoay(nv,verrangle);
;PCODE: $00000CF9 VOL: 0
;	nv -> Y+2
;	verrangle -> Y+0
;PCODE: $00000CFA VOL: 0
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
;PCODE: $00000D0B VOL: 0
; 0001 06BB                       // ctrRobotXoay(nv,10);
; 0001 06BC                        delay_ms(1);
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
;PCODE: $00000D0E VOL: 0
; 0001 06BD                      }else
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
; 0001 06BE                      {
; 0001 06BF                        flaghuongtrue++;
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
; 0001 06C0                        if(flaghuongtrue>3)
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
; 0001 06C1                        {
; 0001 06C2                         //verranglekisum=0;//RESET I.
; 0001 06C3                          flaghuongtrue=0;
;PCODE: $00000D19 VOL: 0
;PCODE: $00000D1A VOL: 0
; 0001 06C4                          flagtask=10;
;PCODE: $00000D1B VOL: 0
;PCODE: $00000D1C VOL: 0
; 0001 06C5                        }
; 0001 06C6 
; 0001 06C7                      }
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
; 0001 06C8                     break;
;PCODE: $00000D1F VOL: 0
; 0001 06C9            }
;PCODE: $00000D20 VOL: 0
; 0001 06CA        }//end if(cmdCtrlRobot==2)
; 0001 06CB     }else   //khong co tin hieu RF hay khong thay robot
;PCODE: $00000D21 VOL: 0
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
; 0001 06CC     {
; 0001 06CD          //if(flagunlookRB==1) runEscBlindSpot();
; 0001 06CE 
; 0001 06CF     }
;PCODE: $00000D24 VOL: 0
; 0001 06D0 
; 0001 06D1 
; 0001 06D2 }
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;
;void rb_move(float x,float y)
; 0001 06D5 {
;PCODE: $00000D27 VOL: 0
;PCODE: $00000D28 VOL: 0
; 0001 06D6    flagtask = 0;
;	x -> Y+4
;	y -> Y+0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
; 0001 06D7    flagtaskold=flagtask;
;PCODE: $00000D2B VOL: 0
;PCODE: $00000D2C VOL: 0
; 0001 06D8    setRobotX=x;
;PCODE: $00000D2D VOL: 0
;PCODE: $00000D2E VOL: 0
; 0001 06D9    setRobotY=y;
;PCODE: $00000D2F VOL: 0
;PCODE: $00000D30 VOL: 0
; 0001 06DA }
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;void rb_rotate(int angle)     // goc xoay so voi truc x cua toa do
; 0001 06DC {
;PCODE: $00000D34 VOL: 0
;PCODE: $00000D35 VOL: 0
; 0001 06DD    flagtask = 1;
;	angle -> Y+0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
; 0001 06DE    flagtaskold=flagtask;
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
; 0001 06DF    setRobotAngleX=10*cos(angle*M_PI/180);
;PCODE: $00000D3A VOL: 0
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
;PCODE: $00000D3E VOL: 0
;PCODE: $00000D3F VOL: 0
;PCODE: $00000D40 VOL: 0
;PCODE: $00000D41 VOL: 0
;PCODE: $00000D42 VOL: 0
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
; 0001 06E0    setRobotAngleY=10*sin(angle*M_PI/180);;
;PCODE: $00000D46 VOL: 0
;PCODE: $00000D47 VOL: 0
;PCODE: $00000D48 VOL: 0
;PCODE: $00000D49 VOL: 0
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
;PCODE: $00000D4E VOL: 0
;PCODE: $00000D4F VOL: 0
;PCODE: $00000D50 VOL: 0
;PCODE: $00000D51 VOL: 0
; 0001 06E1 }
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
;PCODE: $00000D54 VOL: 0
;
;void rb_goball()
; 0001 06E4 {
;PCODE: $00000D55 VOL: 0
;PCODE: $00000D56 VOL: 0
; 0001 06E5    flagtask = 2;
;PCODE: $00000D57 VOL: 0
;PCODE: $00000D58 VOL: 0
; 0001 06E6    flagtaskold=flagtask;
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
; 0001 06E7 }
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
;void rb_kick()
; 0001 06E9 {
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
; 0001 06EA    flagtask = 3;
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
; 0001 06EB    flagtaskold=flagtask;
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
; 0001 06EC }
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
;int rb_wait(unsigned long int time )
; 0001 06EE {
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
; 0001 06EF    time=time*10;
;	time -> Y+0
;PCODE: $00000D67 VOL: 0
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
; 0001 06F0    while(time--)
;PCODE: $00000D6B VOL: 0
;PCODE: $00000D6C VOL: 0
;PCODE: $00000D6D VOL: 0
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
; 0001 06F1    {
; 0001 06F2      ctrrobot();
;PCODE: $00000D71 VOL: 0
; 0001 06F3      if(flagtask==10) return 1 ;// thuc hien xong nhiem vu
;PCODE: $00000D72 VOL: 0
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
; 0001 06F4    }
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
;PCODE: $00000D7A VOL: 0
; 0001 06F5     return 0;
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
; 0001 06F6 }
;PCODE: $00000D7E VOL: 0
;//========================================================
;// Timer1 overflow interrupt service routine
;// period =1/2khz= 0.5ms
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0001 06FB {
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
; 0001 06FC // Place your code here
; 0001 06FD    timerstick++;
;PCODE: $00000D81 VOL: 0
;PCODE: $00000D82 VOL: 0
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
; 0001 06FE    timerstickdis++;
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
; 0001 06FF    timerstickang++;
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
; 0001 0700    timerstickctr++;
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
; 0001 0701  #ifdef CtrVelocity
; 0001 0702  // dieu khien van toc
; 0001 0703    if(timerstick>250)    // 125ms/0.5ms=250 : dung chu ki lay mau = 125 ms
;PCODE: $00000D91 VOL: 0
;PCODE: $00000D92 VOL: 0
;PCODE: $00000D93 VOL: 0
; 0001 0704    {
; 0001 0705      int eR=0,eL=0;
; 0001 0706 
; 0001 0707      //-------------------------------------------
; 0001 0708      //cap nhat van toc
; 0001 0709      vQER = (QER-oldQER);     //(xung / 10ms)
;PCODE: $00000D94 VOL: 0
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
;	eR -> Y+2
;	eL -> Y+0
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
; 0001 070A      vQEL = (QEL-oldQEL);     //(xung /10ms)
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0001 070B      oldQEL=QEL;
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
; 0001 070C      oldQER=QER;
;PCODE: $00000DA7 VOL: 0
;PCODE: $00000DA8 VOL: 0
; 0001 070D      timerstick=0;
;PCODE: $00000DA9 VOL: 0
;PCODE: $00000DAA VOL: 0
; 0001 070E 
; 0001 070F      //--------------------------------------------
; 0001 0710      //tinh PID van toc
; 0001 0711      //--------------------------------------------
; 0001 0712      eR=svQER-vQER;
;PCODE: $00000DAB VOL: 0
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
; 0001 0713      //tinh thanh phan I
; 0001 0714      seRki=seRki+KiR*eR;
;PCODE: $00000DAF VOL: 0
;PCODE: $00000DB0 VOL: 0
;PCODE: $00000DB1 VOL: 0
;PCODE: $00000DB2 VOL: 0
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
; 0001 0715      if(seRki>100) seRki=100;
;PCODE: $00000DB5 VOL: 0
;PCODE: $00000DB6 VOL: 0
;PCODE: $00000DB7 VOL: 0
;PCODE: $00000DB8 VOL: 0
;PCODE: $00000DB9 VOL: 0
; 0001 0716      if(seRki<-100) seRki = -100;
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
; 0001 0717      //tinh them thanh phan P
; 0001 0718      uR = 100 + KpR*eR + seRki;
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
; 0001 0719      if(uR>255) uR =255;
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
; 0001 071A      if(uR<0) uR =0;
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
; 0001 071B 
; 0001 071C      eL=svQEL-vQEL;
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
;PCODE: $00000DD6 VOL: 0
;PCODE: $00000DD7 VOL: 0
; 0001 071D      //tinh thanh phan I
; 0001 071E      seLki=seLki+KiL*eL;
;PCODE: $00000DD8 VOL: 0
;PCODE: $00000DD9 VOL: 0
;PCODE: $00000DDA VOL: 0
;PCODE: $00000DDB VOL: 0
;PCODE: $00000DDC VOL: 0
;PCODE: $00000DDD VOL: 0
; 0001 071F      if(seLki>100) seLki=100;
;PCODE: $00000DDE VOL: 0
;PCODE: $00000DDF VOL: 0
;PCODE: $00000DE0 VOL: 0
;PCODE: $00000DE1 VOL: 0
;PCODE: $00000DE2 VOL: 0
; 0001 0720      if(seLki<-100) seLki = -100;
;PCODE: $00000DE3 VOL: 0
;PCODE: $00000DE4 VOL: 0
;PCODE: $00000DE5 VOL: 0
;PCODE: $00000DE6 VOL: 0
;PCODE: $00000DE7 VOL: 0
;PCODE: $00000DE8 VOL: 0
; 0001 0721      //tinh them thanh phan P
; 0001 0722      uL = 100 + KpL*eL + seLki;
;PCODE: $00000DE9 VOL: 0
;PCODE: $00000DEA VOL: 0
;PCODE: $00000DEB VOL: 0
;PCODE: $00000DEC VOL: 0
;PCODE: $00000DED VOL: 0
;PCODE: $00000DEE VOL: 0
;PCODE: $00000DEF VOL: 0
;PCODE: $00000DF0 VOL: 0
; 0001 0723      if(uL>255) uL =255;
;PCODE: $00000DF1 VOL: 0
;PCODE: $00000DF2 VOL: 0
;PCODE: $00000DF3 VOL: 0
;PCODE: $00000DF4 VOL: 0
;PCODE: $00000DF5 VOL: 0
; 0001 0724      if(uL<0) uL =0;
;PCODE: $00000DF6 VOL: 0
;PCODE: $00000DF7 VOL: 0
;PCODE: $00000DF8 VOL: 0
;PCODE: $00000DF9 VOL: 0
;PCODE: $00000DFA VOL: 0
;PCODE: $00000DFB VOL: 0
; 0001 0725 
; 0001 0726      if(svQER!=0)OCR1B= uR;
;PCODE: $00000DFC VOL: 0
;PCODE: $00000DFD VOL: 0
;PCODE: $00000DFE VOL: 0
;PCODE: $00000DFF VOL: 0
;PCODE: $00000E00 VOL: 0
;PCODE: $00000E01 VOL: 0
; 0001 0727      else  OCR1B = 0;
;PCODE: $00000E02 VOL: 0
;PCODE: $00000E03 VOL: 0
;PCODE: $00000E04 VOL: 0
;PCODE: $00000E05 VOL: 0
; 0001 0728 
; 0001 0729      if(svQEL!=0) OCR1A= uL;
;PCODE: $00000E06 VOL: 0
;PCODE: $00000E07 VOL: 0
;PCODE: $00000E08 VOL: 0
;PCODE: $00000E09 VOL: 0
;PCODE: $00000E0A VOL: 0
;PCODE: $00000E0B VOL: 0
; 0001 072A      else  OCR1A = 0;
;PCODE: $00000E0C VOL: 0
;PCODE: $00000E0D VOL: 0
;PCODE: $00000E0E VOL: 0
;PCODE: $00000E0F VOL: 0
; 0001 072B 
; 0001 072C    }
;PCODE: $00000E10 VOL: 0
;PCODE: $00000E11 VOL: 0
; 0001 072D // dieu khien khoang cach
; 0001 072E   if(timerstickdis>10 && (flagwaitctrRobot==1))
;PCODE: $00000E12 VOL: 0
;PCODE: $00000E13 VOL: 0
;PCODE: $00000E14 VOL: 0
;PCODE: $00000E15 VOL: 0
;PCODE: $00000E16 VOL: 0
;PCODE: $00000E17 VOL: 0
;PCODE: $00000E18 VOL: 0
;PCODE: $00000E19 VOL: 0
;PCODE: $00000E1A VOL: 0
;PCODE: $00000E1B VOL: 0
;PCODE: $00000E1C VOL: 0
; 0001 072F   {
; 0001 0730     unsigned int deltad1=0;
; 0001 0731     deltad1 =(QER + QEL)/2 - oldd;
;PCODE: $00000E1D VOL: 0
;PCODE: $00000E1E VOL: 0
;PCODE: $00000E1F VOL: 0
;PCODE: $00000E20 VOL: 0
;PCODE: $00000E21 VOL: 0
;	deltad1 -> Y+0
;PCODE: $00000E22 VOL: 0
;PCODE: $00000E23 VOL: 0
;PCODE: $00000E24 VOL: 0
;PCODE: $00000E25 VOL: 0
;PCODE: $00000E26 VOL: 0
;PCODE: $00000E27 VOL: 0
;PCODE: $00000E28 VOL: 0
;PCODE: $00000E29 VOL: 0
; 0001 0732     //if(deltad1<0) deltad1=0;// co the am do kieu so
; 0001 0733     //hc(3,0);ws("            ");
; 0001 0734     //hc(3,0);wn16s(deltad1);
; 0001 0735     if(deltad1>sd)
;PCODE: $00000E2A VOL: 0
;PCODE: $00000E2B VOL: 0
;PCODE: $00000E2C VOL: 0
;PCODE: $00000E2D VOL: 0
; 0001 0736     {
; 0001 0737 
; 0001 0738         vMLstop();
;PCODE: $00000E2E VOL: 0
; 0001 0739         vMRstop();
;PCODE: $00000E2F VOL: 0
; 0001 073A         flagwaitctrRobot=0;
;PCODE: $00000E30 VOL: 0
;PCODE: $00000E31 VOL: 0
; 0001 073B         oldd=(QER+QEL)/2;
;PCODE: $00000E32 VOL: 0
;PCODE: $00000E33 VOL: 0
;PCODE: $00000E34 VOL: 0
;PCODE: $00000E35 VOL: 0
;PCODE: $00000E36 VOL: 0
;PCODE: $00000E37 VOL: 0
; 0001 073C 
; 0001 073D     }
; 0001 073E     timerstickdis=0;
;PCODE: $00000E38 VOL: 0
;PCODE: $00000E39 VOL: 0
;PCODE: $00000E3A VOL: 0
; 0001 073F 
; 0001 0740   }
;PCODE: $00000E3B VOL: 0
; 0001 0741   // dieu khien  vi tri goc quay
; 0001 0742   if(timerstickang>10 && (flagwaitctrAngle==1))
;PCODE: $00000E3C VOL: 0
;PCODE: $00000E3D VOL: 0
;PCODE: $00000E3E VOL: 0
;PCODE: $00000E3F VOL: 0
;PCODE: $00000E40 VOL: 0
;PCODE: $00000E41 VOL: 0
;PCODE: $00000E42 VOL: 0
;PCODE: $00000E43 VOL: 0
;PCODE: $00000E44 VOL: 0
;PCODE: $00000E45 VOL: 0
;PCODE: $00000E46 VOL: 0
; 0001 0743   {
; 0001 0744     unsigned int deltaa=0;
; 0001 0745     deltaa =(QEL) - olda;
;PCODE: $00000E47 VOL: 0
;PCODE: $00000E48 VOL: 0
;PCODE: $00000E49 VOL: 0
;PCODE: $00000E4A VOL: 0
;PCODE: $00000E4B VOL: 0
;	deltaa -> Y+0
;PCODE: $00000E4C VOL: 0
;PCODE: $00000E4D VOL: 0
;PCODE: $00000E4E VOL: 0
;PCODE: $00000E4F VOL: 0
; 0001 0746 //    hc(4,0);ws("            ");
; 0001 0747 //    hc(4,0);wn16s(deltaa);
; 0001 0748     if(deltaa>sa)
;PCODE: $00000E50 VOL: 0
;PCODE: $00000E51 VOL: 0
;PCODE: $00000E52 VOL: 0
;PCODE: $00000E53 VOL: 0
; 0001 0749     {
; 0001 074A         vMLstop();
;PCODE: $00000E54 VOL: 0
; 0001 074B         vMRstop();
;PCODE: $00000E55 VOL: 0
; 0001 074C         flagwaitctrAngle=0;
;PCODE: $00000E56 VOL: 0
;PCODE: $00000E57 VOL: 0
; 0001 074D         olda=QEL;
;PCODE: $00000E58 VOL: 0
;PCODE: $00000E59 VOL: 0
; 0001 074E     }
; 0001 074F     timerstickang=0;
;PCODE: $00000E5A VOL: 0
;PCODE: $00000E5B VOL: 0
;PCODE: $00000E5C VOL: 0
; 0001 0750   }
;PCODE: $00000E5D VOL: 0
; 0001 0751   // dieu khien robot robot
; 0001 0752   if(timerstickctr>1)
;PCODE: $00000E5E VOL: 0
;PCODE: $00000E5F VOL: 0
;PCODE: $00000E60 VOL: 0
;PCODE: $00000E61 VOL: 0
; 0001 0753   {
; 0001 0754     timerstickctr=0;
;PCODE: $00000E62 VOL: 0
;PCODE: $00000E63 VOL: 0
; 0001 0755   }
; 0001 0756 #endif
; 0001 0757 }
;PCODE: $00000E64 VOL: 0
;PCODE: $00000E65 VOL: 0
;PCODE: $00000E66 VOL: 0
;PCODE: $00000E67 VOL: 0
;
;//========================================================
;// read  vi tri robot   PHUC
;//========================================================
;unsigned char testposition()
; 0001 075D {
;PCODE: $00000E68 VOL: 0
;PCODE: $00000E69 VOL: 0
; 0001 075E         unsigned char  i=0;
; 0001 075F         unsigned flagstatus=0;
; 0001 0760 
; 0001 0761    while(keyKT!=0)
;PCODE: $00000E6A VOL: 0
;	i -> R17
;	flagstatus -> R18,R19
;PCODE: $00000E6B VOL: 0
;PCODE: $00000E6C VOL: 0
;PCODE: $00000E6D VOL: 0
;PCODE: $00000E6E VOL: 0
;PCODE: $00000E6F VOL: 0
;PCODE: $00000E70 VOL: 0
;PCODE: $00000E71 VOL: 0
;PCODE: $00000E72 VOL: 0
; 0001 0762    {
; 0001 0763         readposition();
;PCODE: $00000E73 VOL: 0
; 0001 0764 
; 0001 0765          if(idRobot==ROBOT_ID)
;PCODE: $00000E74 VOL: 0
;PCODE: $00000E75 VOL: 0
;PCODE: $00000E76 VOL: 0
; 0001 0766          {
; 0001 0767              hc(5,40);wn16s(robotctrl.ball.y);
;PCODE: $00000E77 VOL: 0
;PCODE: $00000E78 VOL: 0
;PCODE: $00000E79 VOL: 0
;PCODE: $00000E7A VOL: 0
;PCODE: $00000E7B VOL: 0
;PCODE: $00000E7C VOL: 0
;PCODE: $00000E7D VOL: 0
;PCODE: $00000E7E VOL: 0
;PCODE: $00000E7F VOL: 0
; 0001 0768              hc(4,40);wn16s(robotctrl.ball.x);
;PCODE: $00000E80 VOL: 0
;PCODE: $00000E81 VOL: 0
;PCODE: $00000E82 VOL: 0
;PCODE: $00000E83 VOL: 0
;PCODE: $00000E84 VOL: 0
;PCODE: $00000E85 VOL: 0
;PCODE: $00000E86 VOL: 0
;PCODE: $00000E87 VOL: 0
;PCODE: $00000E88 VOL: 0
; 0001 0769              hc(3,20);wn16s(robotctrl.x);
;PCODE: $00000E89 VOL: 0
;PCODE: $00000E8A VOL: 0
;PCODE: $00000E8B VOL: 0
;PCODE: $00000E8C VOL: 0
;PCODE: $00000E8D VOL: 0
;PCODE: $00000E8E VOL: 0
;PCODE: $00000E8F VOL: 0
;PCODE: $00000E90 VOL: 0
;PCODE: $00000E91 VOL: 0
; 0001 076A              hc(2,20);wn16s(robotctrl.y);
;PCODE: $00000E92 VOL: 0
;PCODE: $00000E93 VOL: 0
;PCODE: $00000E94 VOL: 0
;PCODE: $00000E95 VOL: 0
;PCODE: $00000E96 VOL: 0
;PCODE: $00000E97 VOL: 0
;PCODE: $00000E98 VOL: 0
;PCODE: $00000E99 VOL: 0
;PCODE: $00000E9A VOL: 0
; 0001 076B              hc(1,1);wn16s(robotctrl.ox);
;PCODE: $00000E9B VOL: 0
;PCODE: $00000E9C VOL: 0
;PCODE: $00000E9D VOL: 0
;PCODE: $00000E9E VOL: 0
;PCODE: $00000E9F VOL: 0
;PCODE: $00000EA0 VOL: 0
;PCODE: $00000EA1 VOL: 0
;PCODE: $00000EA2 VOL: 0
;PCODE: $00000EA3 VOL: 0
; 0001 076C              hc(0,1);wn16s(robotctrl.oy);
;PCODE: $00000EA4 VOL: 0
;PCODE: $00000EA5 VOL: 0
;PCODE: $00000EA6 VOL: 0
;PCODE: $00000EA7 VOL: 0
;PCODE: $00000EA8 VOL: 0
;PCODE: $00000EA9 VOL: 0
;PCODE: $00000EAA VOL: 0
;PCODE: $00000EAB VOL: 0
;PCODE: $00000EAC VOL: 0
; 0001 076D              delay_ms(200);
;PCODE: $00000EAD VOL: 0
;PCODE: $00000EAE VOL: 0
;PCODE: $00000EAF VOL: 0
; 0001 076E          }
; 0001 076F 
; 0001 0770      }
;PCODE: $00000EB0 VOL: 0
;PCODE: $00000EB1 VOL: 0
;PCODE: $00000EB2 VOL: 0
; 0001 0771     return flagstatus;
;PCODE: $00000EB3 VOL: 0
;PCODE: $00000EB4 VOL: 0
;PCODE: $00000EB5 VOL: 0
;PCODE: $00000EB6 VOL: 0
; 0001 0772 }
;PCODE: $00000EB7 VOL: 0
;//========================================================
;void robotwall()
; 0001 0775 {
;PCODE: $00000EB8 VOL: 0
;PCODE: $00000EB9 VOL: 0
; 0001 0776 unsigned int demled;
; 0001 0777         DDRA    = 0x00;
;PCODE: $00000EBA VOL: 0
;PCODE: $00000EBB VOL: 0
;	demled -> R16,R17
;PCODE: $00000EBC VOL: 0
;PCODE: $00000EBD VOL: 0
; 0001 0778         PORTA   = 0x00;
;PCODE: $00000EBE VOL: 0
;PCODE: $00000EBF VOL: 0
; 0001 0779 
; 0001 077A         LcdClear();
;PCODE: $00000EC0 VOL: 0
; 0001 077B         hc(0,10);
;PCODE: $00000EC1 VOL: 0
;PCODE: $00000EC2 VOL: 0
;PCODE: $00000EC3 VOL: 0
;PCODE: $00000EC4 VOL: 0
;PCODE: $00000EC5 VOL: 0
; 0001 077C         ws ("ROBOT WALL");
;PCODE: $00000EC6 VOL: 0
;PCODE: $00000EC7 VOL: 0
;PCODE: $00000EC8 VOL: 0
;PCODE: $00000EC9 VOL: 0
; 0001 077D         LEDL=1;LEDR=1;
;PCODE: $00000ECA VOL: 0
;PCODE: $00000ECB VOL: 0
;PCODE: $00000ECC VOL: 0
;PCODE: $00000ECD VOL: 0
; 0001 077E 
; 0001 077F    while(keyKT!=0)
;PCODE: $00000ECE VOL: 0
;PCODE: $00000ECF VOL: 0
;PCODE: $00000ED0 VOL: 0
;PCODE: $00000ED1 VOL: 0
; 0001 0780    {
; 0001 0781         IRFL=read_adc(4);
;PCODE: $00000ED2 VOL: 0
;PCODE: $00000ED3 VOL: 0
;PCODE: $00000ED4 VOL: 0
;PCODE: $00000ED5 VOL: 0
; 0001 0782         IRFR=read_adc(5);
;PCODE: $00000ED6 VOL: 0
;PCODE: $00000ED7 VOL: 0
;PCODE: $00000ED8 VOL: 0
;PCODE: $00000ED9 VOL: 0
; 0001 0783         hc(1,0) ; wn16(IRFL);
;PCODE: $00000EDA VOL: 0
;PCODE: $00000EDB VOL: 0
;PCODE: $00000EDC VOL: 0
;PCODE: $00000EDD VOL: 0
;PCODE: $00000EDE VOL: 0
;PCODE: $00000EDF VOL: 0
;PCODE: $00000EE0 VOL: 0
;PCODE: $00000EE1 VOL: 0
; 0001 0784         hc(1,42); wn16(IRFR);
;PCODE: $00000EE2 VOL: 0
;PCODE: $00000EE3 VOL: 0
;PCODE: $00000EE4 VOL: 0
;PCODE: $00000EE5 VOL: 0
;PCODE: $00000EE6 VOL: 0
;PCODE: $00000EE7 VOL: 0
;PCODE: $00000EE8 VOL: 0
;PCODE: $00000EE9 VOL: 0
; 0001 0785 
; 0001 0786         if (IRFL>250)
;PCODE: $00000EEA VOL: 0
;PCODE: $00000EEB VOL: 0
;PCODE: $00000EEC VOL: 0
; 0001 0787         {
; 0001 0788             vMLlui(22);vMRlui(10);delay_ms(600);
;PCODE: $00000EED VOL: 0
;PCODE: $00000EEE VOL: 0
;PCODE: $00000EEF VOL: 0
;PCODE: $00000EF0 VOL: 0
;PCODE: $00000EF1 VOL: 0
;PCODE: $00000EF2 VOL: 0
;PCODE: $00000EF3 VOL: 0
;PCODE: $00000EF4 VOL: 0
;PCODE: $00000EF5 VOL: 0
; 0001 0789         }
; 0001 078A         if (IRFR>250)
;PCODE: $00000EF6 VOL: 0
;PCODE: $00000EF7 VOL: 0
;PCODE: $00000EF8 VOL: 0
;PCODE: $00000EF9 VOL: 0
; 0001 078B         {
; 0001 078C             vMLlui(10);vMRlui(22);delay_ms(600);
;PCODE: $00000EFA VOL: 0
;PCODE: $00000EFB VOL: 0
;PCODE: $00000EFC VOL: 0
;PCODE: $00000EFD VOL: 0
;PCODE: $00000EFE VOL: 0
;PCODE: $00000EFF VOL: 0
;PCODE: $00000F00 VOL: 0
;PCODE: $00000F01 VOL: 0
;PCODE: $00000F02 VOL: 0
; 0001 078D         }
; 0001 078E         if((IRFL<300)&(IRFR<300))
;PCODE: $00000F03 VOL: 0
;PCODE: $00000F04 VOL: 0
;PCODE: $00000F05 VOL: 0
;PCODE: $00000F06 VOL: 0
;PCODE: $00000F07 VOL: 0
;PCODE: $00000F08 VOL: 0
;PCODE: $00000F09 VOL: 0
;PCODE: $00000F0A VOL: 0
;PCODE: $00000F0B VOL: 0
;PCODE: $00000F0C VOL: 0
; 0001 078F         {
; 0001 0790             vMLtoi(22);vMRtoi(22);
;PCODE: $00000F0D VOL: 0
;PCODE: $00000F0E VOL: 0
;PCODE: $00000F0F VOL: 0
;PCODE: $00000F10 VOL: 0
;PCODE: $00000F11 VOL: 0
;PCODE: $00000F12 VOL: 0
; 0001 0791         }
; 0001 0792 
; 0001 0793        demled++;
;PCODE: $00000F13 VOL: 0
;PCODE: $00000F14 VOL: 0
;PCODE: $00000F15 VOL: 0
; 0001 0794        if(demled>50){demled=0;LEDLtoggle(); LEDRtoggle();}
;PCODE: $00000F16 VOL: 0
;PCODE: $00000F17 VOL: 0
;PCODE: $00000F18 VOL: 0
;PCODE: $00000F19 VOL: 0
;PCODE: $00000F1A VOL: 0
;PCODE: $00000F1B VOL: 0
;PCODE: $00000F1C VOL: 0
; 0001 0795    }
;PCODE: $00000F1D VOL: 0
;PCODE: $00000F1E VOL: 0
;PCODE: $00000F1F VOL: 0
; 0001 0796 
; 0001 0797 }
;PCODE: $00000F20 VOL: 0
;PCODE: $00000F21 VOL: 0
;PCODE: $00000F22 VOL: 0

	.DSEG
_0x20193:
	.BYTE 0xB
;////========================================================
;//void robotline() //DIGITAL I/O
;//{
;//    unsigned char status=2;
;//    unsigned char prestatus=2;
;//
;//    DDRA =0x00;
;//    PORTA=0xFF;
;////#define S0  PINA.0 status 0
;////#define S1  PINA.1 status 1
;////#define S2  PINA.2 status 2
;////#define S3  PINA.3 status 3
;////#define S4  PINA.7 status 4
;//        LcdClear();
;//        hc(0,1);
;//        ws ("LINE FOLOWER");
;//        hc(1,20);
;//        ws (" ROBOT");
;//        LEDL=1;LEDR=1;
;//
;//   while(keyKT!=0)
;//   {
;//      if (S2==0)
;//      {
;//          status=2;
;//          vMLtoi(80);vMRtoi(80);
;//      }
;//      //===========================
;//      if ((prestatus==2)&(S1==0))
;//      {
;//          status=1;
;//          vMLtoi(80);vMRtoi(50);
;//      }
;//      if ((prestatus==2)&(S0==0))
;//      {
;//          status=0;
;//          vMLtoi(80);vMRtoi(30);
;//      }
;//       //===========================
;//      if ((prestatus==2)&(S3==0))
;//      {
;//          status=1;
;//          vMLtoi(50);vMRtoi(80);
;//      }
;//      if ((prestatus==2)&(S4==0))
;//      {
;//          status=0;
;//          vMLtoi(30);vMRtoi(80);
;//      }
;//       //===========================
;//      if ((prestatus==1)&(S0==0))
;//      {
;//          status=1;
;//          vMLtoi(80);vMRtoi(40);
;//      }
;//      if ((prestatus==3)&(S4==0))
;//      {
;//          status=0;
;//          vMLtoi(40);vMRtoi(80);
;//      }
;//
;//      prestatus=status;
;//      delay_ms(200);LEDLtoggle();LEDRtoggle();
;//
;//  }
;// }
;
;
;//========================================================
;void readline()
; 0001 07DE {

	.CSEG
;PCODE: $00000F23 VOL: 0
;PCODE: $00000F24 VOL: 0
; 0001 07DF     int i=0,j=0;
; 0001 07E0     // reset the values
; 0001 07E1         for(i = 0; i < 5; i++)
;PCODE: $00000F25 VOL: 0
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $00000F26 VOL: 0
;PCODE: $00000F27 VOL: 0
;PCODE: $00000F28 VOL: 0
;PCODE: $00000F29 VOL: 0
;PCODE: $00000F2A VOL: 0
;PCODE: $00000F2B VOL: 0
;PCODE: $00000F2C VOL: 0
;PCODE: $00000F2D VOL: 0
;PCODE: $00000F2E VOL: 0
;PCODE: $00000F2F VOL: 0
;PCODE: $00000F30 VOL: 0
;PCODE: $00000F31 VOL: 0
;PCODE: $00000F32 VOL: 0
; 0001 07E2         IRLINE[i] = 0;
;PCODE: $00000F33 VOL: 0
;PCODE: $00000F34 VOL: 0
;PCODE: $00000F35 VOL: 0
;PCODE: $00000F36 VOL: 0
;PCODE: $00000F37 VOL: 0
;PCODE: $00000F38 VOL: 0
;PCODE: $00000F39 VOL: 0
;PCODE: $00000F3A VOL: 0
;PCODE: $00000F3B VOL: 0
;PCODE: $00000F3C VOL: 0
;PCODE: $00000F3D VOL: 0
; 0001 07E4 for (j = 0; j < 50; j++)
;PCODE: $00000F3E VOL: 0
;PCODE: $00000F3F VOL: 0
;PCODE: $00000F40 VOL: 0
;PCODE: $00000F41 VOL: 0
;PCODE: $00000F42 VOL: 0
;PCODE: $00000F43 VOL: 0
;PCODE: $00000F44 VOL: 0
;PCODE: $00000F45 VOL: 0
;PCODE: $00000F46 VOL: 0
; 0001 07E5         {
; 0001 07E6             IRLINE[0]= IRLINE[0]+read_adc(0);
;PCODE: $00000F47 VOL: 0
;PCODE: $00000F48 VOL: 0
;PCODE: $00000F49 VOL: 0
;PCODE: $00000F4A VOL: 0
;PCODE: $00000F4B VOL: 0
;PCODE: $00000F4C VOL: 0
; 0001 07E7             IRLINE[1]= IRLINE[1]+read_adc(1);
;PCODE: $00000F4D VOL: 0
;PCODE: $00000F4E VOL: 0
;PCODE: $00000F4F VOL: 0
;PCODE: $00000F50 VOL: 0
;PCODE: $00000F51 VOL: 0
;PCODE: $00000F52 VOL: 0
;PCODE: $00000F53 VOL: 0
;PCODE: $00000F54 VOL: 0
; 0001 07E8             IRLINE[2]= IRLINE[2]+read_adc(2);
;PCODE: $00000F55 VOL: 0
;PCODE: $00000F56 VOL: 0
;PCODE: $00000F57 VOL: 0
;PCODE: $00000F58 VOL: 0
;PCODE: $00000F59 VOL: 0
;PCODE: $00000F5A VOL: 0
;PCODE: $00000F5B VOL: 0
;PCODE: $00000F5C VOL: 0
; 0001 07E9             IRLINE[3]= IRLINE[3]+read_adc(3);
;PCODE: $00000F5D VOL: 0
;PCODE: $00000F5E VOL: 0
;PCODE: $00000F5F VOL: 0
;PCODE: $00000F60 VOL: 0
;PCODE: $00000F61 VOL: 0
;PCODE: $00000F62 VOL: 0
;PCODE: $00000F63 VOL: 0
;PCODE: $00000F64 VOL: 0
; 0001 07EA             IRLINE[4]= IRLINE[4]+read_adc(7);
;PCODE: $00000F65 VOL: 0
;PCODE: $00000F66 VOL: 0
;PCODE: $00000F67 VOL: 0
;PCODE: $00000F68 VOL: 0
;PCODE: $00000F69 VOL: 0
;PCODE: $00000F6A VOL: 0
;PCODE: $00000F6B VOL: 0
;PCODE: $00000F6C VOL: 0
; 0001 07EB         }
;PCODE: $00000F6D VOL: 0
;PCODE: $00000F6E VOL: 0
;PCODE: $00000F6F VOL: 0
;PCODE: $00000F70 VOL: 0
;PCODE: $00000F71 VOL: 0
; 0001 07EC         // get the rounded average of the readings for each sensor
; 0001 07ED         for (i = 0; i < 5; i++)
;PCODE: $00000F72 VOL: 0
;PCODE: $00000F73 VOL: 0
;PCODE: $00000F74 VOL: 0
;PCODE: $00000F75 VOL: 0
;PCODE: $00000F76 VOL: 0
;PCODE: $00000F77 VOL: 0
;PCODE: $00000F78 VOL: 0
;PCODE: $00000F79 VOL: 0
;PCODE: $00000F7A VOL: 0
; 0001 07EE         IRLINE[i] = (IRLINE[i] + (50 >> 1)) /50;
;PCODE: $00000F7B VOL: 0
;PCODE: $00000F7C VOL: 0
;PCODE: $00000F7D VOL: 0
;PCODE: $00000F7E VOL: 0
;PCODE: $00000F7F VOL: 0
;PCODE: $00000F80 VOL: 0
;PCODE: $00000F81 VOL: 0
;PCODE: $00000F82 VOL: 0
;PCODE: $00000F83 VOL: 0
;PCODE: $00000F84 VOL: 0
;PCODE: $00000F85 VOL: 0
;PCODE: $00000F86 VOL: 0
;PCODE: $00000F87 VOL: 0
;PCODE: $00000F88 VOL: 0
;PCODE: $00000F89 VOL: 0
;PCODE: $00000F8A VOL: 0
;PCODE: $00000F8B VOL: 0
;PCODE: $00000F8C VOL: 0
;PCODE: $00000F8D VOL: 0
;PCODE: $00000F8E VOL: 0
;PCODE: $00000F8F VOL: 0
; 0001 07EF }
;PCODE: $00000F90 VOL: 0
;PCODE: $00000F91 VOL: 0
;PCODE: $00000F92 VOL: 0
;PCODE: $00000F93 VOL: 0
;//========================================================
;void robotwhiteline() //ANALOG OK
; 0001 07F2 {
;PCODE: $00000F94 VOL: 0
;PCODE: $00000F95 VOL: 0
; 0001 07F3     unsigned char i=0,imax;
; 0001 07F4     int imaxlast=0;
; 0001 07F5     unsigned int  admax;
; 0001 07F6     unsigned int  demled=0;
; 0001 07F7     unsigned int flagblindT=0;
; 0001 07F8     unsigned int flagblindP=0;
; 0001 07F9     DDRA =0x00;
;PCODE: $00000F96 VOL: 0
;PCODE: $00000F97 VOL: 0
;PCODE: $00000F98 VOL: 0
;PCODE: $00000F99 VOL: 0
;PCODE: $00000F9A VOL: 0
;PCODE: $00000F9B VOL: 0
;PCODE: $00000F9C VOL: 0
;PCODE: $00000F9D VOL: 0
;PCODE: $00000F9E VOL: 0
;PCODE: $00000F9F VOL: 0
;PCODE: $00000FA0 VOL: 0
;PCODE: $00000FA1 VOL: 0
;PCODE: $00000FA2 VOL: 0
;PCODE: $00000FA3 VOL: 0
;	i -> R17
;	imax -> R16
;	imaxlast -> R18,R19
;	admax -> R20,R21
;	demled -> Y+10
;	flagblindT -> Y+8
;	flagblindP -> Y+6
;PCODE: $00000FA4 VOL: 0
;PCODE: $00000FA5 VOL: 0
;PCODE: $00000FA6 VOL: 0
;PCODE: $00000FA7 VOL: 0
;PCODE: $00000FA8 VOL: 0
;PCODE: $00000FA9 VOL: 0
; 0001 07FA     PORTA=0x00;
;PCODE: $00000FAA VOL: 0
;PCODE: $00000FAB VOL: 0
; 0001 07FB 
; 0001 07FC         LcdClear();
;PCODE: $00000FAC VOL: 0
; 0001 07FD         hc(0,1);
;PCODE: $00000FAD VOL: 0
;PCODE: $00000FAE VOL: 0
;PCODE: $00000FAF VOL: 0
;PCODE: $00000FB0 VOL: 0
;PCODE: $00000FB1 VOL: 0
; 0001 07FE         ws ("WHITE LINE");
;PCODE: $00000FB2 VOL: 0
;PCODE: $00000FB3 VOL: 0
;PCODE: $00000FB4 VOL: 0
;PCODE: $00000FB5 VOL: 0
; 0001 07FF         hc(1,10);
;PCODE: $00000FB6 VOL: 0
;PCODE: $00000FB7 VOL: 0
;PCODE: $00000FB8 VOL: 0
;PCODE: $00000FB9 VOL: 0
;PCODE: $00000FBA VOL: 0
; 0001 0800         ws ("FOLOWER");
;PCODE: $00000FBB VOL: 0
;PCODE: $00000FBC VOL: 0
;PCODE: $00000FBD VOL: 0
;PCODE: $00000FBE VOL: 0
; 0001 0801         LEDL=1;LEDR=1;
;PCODE: $00000FBF VOL: 0
;PCODE: $00000FC0 VOL: 0
;PCODE: $00000FC1 VOL: 0
;PCODE: $00000FC2 VOL: 0
; 0001 0802         //doc va khoi dong gia tri cho imaxlast
; 0001 0803          readline();
;PCODE: $00000FC3 VOL: 0
; 0001 0804         admax = IRLINE[0];imax=0;
;PCODE: $00000FC4 VOL: 0
;PCODE: $00000FC5 VOL: 0
;PCODE: $00000FC6 VOL: 0
;PCODE: $00000FC7 VOL: 0
; 0001 0805         for(i=1;i<5;i++){if(admax<IRLINE[i]){admax=IRLINE[i];imax=i;}}
;PCODE: $00000FC8 VOL: 0
;PCODE: $00000FC9 VOL: 0
;PCODE: $00000FCA VOL: 0
;PCODE: $00000FCB VOL: 0
;PCODE: $00000FCC VOL: 0
;PCODE: $00000FCD VOL: 0
;PCODE: $00000FCE VOL: 0
;PCODE: $00000FCF VOL: 0
;PCODE: $00000FD0 VOL: 0
;PCODE: $00000FD1 VOL: 0
;PCODE: $00000FD2 VOL: 0
;PCODE: $00000FD3 VOL: 0
;PCODE: $00000FD4 VOL: 0
;PCODE: $00000FD5 VOL: 0
;PCODE: $00000FD6 VOL: 0
;PCODE: $00000FD7 VOL: 0
;PCODE: $00000FD8 VOL: 0
;PCODE: $00000FD9 VOL: 0
;PCODE: $00000FDA VOL: 0
;PCODE: $00000FDB VOL: 0
;PCODE: $00000FDC VOL: 0
;PCODE: $00000FDD VOL: 0
;PCODE: $00000FDE VOL: 0
;PCODE: $00000FDF VOL: 0
;PCODE: $00000FE0 VOL: 0
;PCODE: $00000FE1 VOL: 0
;PCODE: $00000FE2 VOL: 0
;PCODE: $00000FE3 VOL: 0
;PCODE: $00000FE4 VOL: 0
;PCODE: $00000FE5 VOL: 0
;PCODE: $00000FE6 VOL: 0
; 0001 0806         imaxlast=imax;
;PCODE: $00000FE7 VOL: 0
;PCODE: $00000FE8 VOL: 0
;PCODE: $00000FE9 VOL: 0
; 0001 0807    while(keyKT!=0)
;PCODE: $00000FEA VOL: 0
;PCODE: $00000FEB VOL: 0
;PCODE: $00000FEC VOL: 0
;PCODE: $00000FED VOL: 0
; 0001 0808    {
; 0001 0809         //doc gia tri cam bien
; 0001 080A         readline();
;PCODE: $00000FEE VOL: 0
; 0001 080B         admax = IRLINE[0];imax=0;
;PCODE: $00000FEF VOL: 0
;PCODE: $00000FF0 VOL: 0
;PCODE: $00000FF1 VOL: 0
;PCODE: $00000FF2 VOL: 0
; 0001 080C         for(i=1;i<5;i++){if(admax<IRLINE[i]){admax=IRLINE[i];imax=i;}}
;PCODE: $00000FF3 VOL: 0
;PCODE: $00000FF4 VOL: 0
;PCODE: $00000FF5 VOL: 0
;PCODE: $00000FF6 VOL: 0
;PCODE: $00000FF7 VOL: 0
;PCODE: $00000FF8 VOL: 0
;PCODE: $00000FF9 VOL: 0
;PCODE: $00000FFA VOL: 0
;PCODE: $00000FFB VOL: 0
;PCODE: $00000FFC VOL: 0
;PCODE: $00000FFD VOL: 0
;PCODE: $00000FFE VOL: 0
;PCODE: $00000FFF VOL: 0
;PCODE: $00001000 VOL: 0
;PCODE: $00001001 VOL: 0
;PCODE: $00001002 VOL: 0
;PCODE: $00001003 VOL: 0
;PCODE: $00001004 VOL: 0
;PCODE: $00001005 VOL: 0
;PCODE: $00001006 VOL: 0
;PCODE: $00001007 VOL: 0
;PCODE: $00001008 VOL: 0
;PCODE: $00001009 VOL: 0
;PCODE: $0000100A VOL: 0
;PCODE: $0000100B VOL: 0
;PCODE: $0000100C VOL: 0
;PCODE: $0000100D VOL: 0
;PCODE: $0000100E VOL: 0
;PCODE: $0000100F VOL: 0
;PCODE: $00001010 VOL: 0
;PCODE: $00001011 VOL: 0
; 0001 080D           //imax=2;
; 0001 080E          if((imax-imaxlast > 1)||(imax-imaxlast <-1))  //tranh truong hop nhay bo trang thai
;PCODE: $00001012 VOL: 0
;PCODE: $00001013 VOL: 0
;PCODE: $00001014 VOL: 0
;PCODE: $00001015 VOL: 0
;PCODE: $00001016 VOL: 0
;PCODE: $00001017 VOL: 0
;PCODE: $00001018 VOL: 0
;PCODE: $00001019 VOL: 0
;PCODE: $0000101A VOL: 0
;PCODE: $0000101B VOL: 0
;PCODE: $0000101C VOL: 0
; 0001 080F         {
; 0001 0810         }
; 0001 0811         else
;PCODE: $0000101D VOL: 0
;PCODE: $0000101E VOL: 0
; 0001 0812         {
; 0001 0813             switch(imax)
;PCODE: $0000101F VOL: 0
;PCODE: $00001020 VOL: 0
; 0001 0814             {
; 0001 0815               case 0:
;PCODE: $00001021 VOL: 0
;PCODE: $00001022 VOL: 0
; 0001 0816                   vMLtoi(1); vMRtoi(20) ;
;PCODE: $00001023 VOL: 0
;PCODE: $00001024 VOL: 0
;PCODE: $00001025 VOL: 0
;PCODE: $00001026 VOL: 0
;PCODE: $00001027 VOL: 0
;PCODE: $00001028 VOL: 0
; 0001 0817                   //flagblindT = 0;
; 0001 0818                   flagblindP = 1;
;PCODE: $00001029 VOL: 0
;PCODE: $0000102A VOL: 0
; 0001 0819                 break;
;PCODE: $0000102B VOL: 0
; 0001 081A               case 1:
;PCODE: $0000102C VOL: 0
;PCODE: $0000102D VOL: 0
;PCODE: $0000102E VOL: 0
; 0001 081B                   vMLtoi(1); vMRtoi(15) ;
;PCODE: $0000102F VOL: 0
;PCODE: $00001030 VOL: 0
;PCODE: $00001031 VOL: 0
;PCODE: $00001032 VOL: 0
;PCODE: $00001033 VOL: 0
;PCODE: $00001034 VOL: 0
; 0001 081C                 break;
;PCODE: $00001035 VOL: 0
; 0001 081D               case 2:
;PCODE: $00001036 VOL: 0
;PCODE: $00001037 VOL: 0
;PCODE: $00001038 VOL: 0
; 0001 081E                   vMLtoi(15);vMRtoi(15) ;
;PCODE: $00001039 VOL: 0
;PCODE: $0000103A VOL: 0
;PCODE: $0000103B VOL: 0
;PCODE: $0000103C VOL: 0
;PCODE: $0000103D VOL: 0
;PCODE: $0000103E VOL: 0
; 0001 081F                 break;
;PCODE: $0000103F VOL: 0
; 0001 0820               case 3:
;PCODE: $00001040 VOL: 0
;PCODE: $00001041 VOL: 0
;PCODE: $00001042 VOL: 0
; 0001 0821                  vMLtoi(15); vMRtoi(1) ;
;PCODE: $00001043 VOL: 0
;PCODE: $00001044 VOL: 0
;PCODE: $00001045 VOL: 0
;PCODE: $00001046 VOL: 0
;PCODE: $00001047 VOL: 0
;PCODE: $00001048 VOL: 0
; 0001 0822                 break;
;PCODE: $00001049 VOL: 0
; 0001 0823               case 4:
;PCODE: $0000104A VOL: 0
;PCODE: $0000104B VOL: 0
;PCODE: $0000104C VOL: 0
; 0001 0824                   vMLtoi(20);vMRtoi(1)  ;
;PCODE: $0000104D VOL: 0
;PCODE: $0000104E VOL: 0
;PCODE: $0000104F VOL: 0
;PCODE: $00001050 VOL: 0
;PCODE: $00001051 VOL: 0
;PCODE: $00001052 VOL: 0
; 0001 0825                   flagblindT = 1;
;PCODE: $00001053 VOL: 0
;PCODE: $00001054 VOL: 0
; 0001 0826                   //flagblindP = 0;
; 0001 0827                 break;
;PCODE: $00001055 VOL: 0
; 0001 0828               default:
;PCODE: $00001056 VOL: 0
; 0001 0829                  // vMLtoi(5); vMRtoi(5) ;
; 0001 082A                 break;
;PCODE: $00001057 VOL: 0
; 0001 082B             }
;PCODE: $00001058 VOL: 0
; 0001 082C              imaxlast=imax;
;PCODE: $00001059 VOL: 0
;PCODE: $0000105A VOL: 0
;PCODE: $0000105B VOL: 0
; 0001 082D         }
;PCODE: $0000105C VOL: 0
; 0001 082E 
; 0001 082F             while(flagblindT ==1 && keyKT!=0) //lac duong ben trai
;PCODE: $0000105D VOL: 0
;PCODE: $0000105E VOL: 0
;PCODE: $0000105F VOL: 0
;PCODE: $00001060 VOL: 0
;PCODE: $00001061 VOL: 0
;PCODE: $00001062 VOL: 0
;PCODE: $00001063 VOL: 0
;PCODE: $00001064 VOL: 0
;PCODE: $00001065 VOL: 0
;PCODE: $00001066 VOL: 0
;PCODE: $00001067 VOL: 0
;PCODE: $00001068 VOL: 0
; 0001 0830             {
; 0001 0831                vMLtoi(20);vMRtoi(1)  ;
;PCODE: $00001069 VOL: 0
;PCODE: $0000106A VOL: 0
;PCODE: $0000106B VOL: 0
;PCODE: $0000106C VOL: 0
;PCODE: $0000106D VOL: 0
;PCODE: $0000106E VOL: 0
; 0001 0832                 readline();
;PCODE: $0000106F VOL: 0
; 0001 0833                 admax = IRLINE[0];imax=0;
;PCODE: $00001070 VOL: 0
;PCODE: $00001071 VOL: 0
;PCODE: $00001072 VOL: 0
;PCODE: $00001073 VOL: 0
; 0001 0834                 for(i=1;i<5;i++){if(admax<IRLINE[i]){admax=IRLINE[i];imax=i;}}
;PCODE: $00001074 VOL: 0
;PCODE: $00001075 VOL: 0
;PCODE: $00001076 VOL: 0
;PCODE: $00001077 VOL: 0
;PCODE: $00001078 VOL: 0
;PCODE: $00001079 VOL: 0
;PCODE: $0000107A VOL: 0
;PCODE: $0000107B VOL: 0
;PCODE: $0000107C VOL: 0
;PCODE: $0000107D VOL: 0
;PCODE: $0000107E VOL: 0
;PCODE: $0000107F VOL: 0
;PCODE: $00001080 VOL: 0
;PCODE: $00001081 VOL: 0
;PCODE: $00001082 VOL: 0
;PCODE: $00001083 VOL: 0
;PCODE: $00001084 VOL: 0
;PCODE: $00001085 VOL: 0
;PCODE: $00001086 VOL: 0
;PCODE: $00001087 VOL: 0
;PCODE: $00001088 VOL: 0
;PCODE: $00001089 VOL: 0
;PCODE: $0000108A VOL: 0
;PCODE: $0000108B VOL: 0
;PCODE: $0000108C VOL: 0
;PCODE: $0000108D VOL: 0
;PCODE: $0000108E VOL: 0
;PCODE: $0000108F VOL: 0
;PCODE: $00001090 VOL: 0
;PCODE: $00001091 VOL: 0
;PCODE: $00001092 VOL: 0
; 0001 0835                 imaxlast=imax;
;PCODE: $00001093 VOL: 0
;PCODE: $00001094 VOL: 0
;PCODE: $00001095 VOL: 0
; 0001 0836                if(IRLINE[2]>500)  flagblindT=0;
;PCODE: $00001096 VOL: 0
;PCODE: $00001097 VOL: 0
;PCODE: $00001098 VOL: 0
;PCODE: $00001099 VOL: 0
;PCODE: $0000109A VOL: 0
;PCODE: $0000109B VOL: 0
; 0001 0837 
; 0001 0838 
; 0001 0839             }
;PCODE: $0000109C VOL: 0
;PCODE: $0000109D VOL: 0
;PCODE: $0000109E VOL: 0
; 0001 083A             while(flagblindP ==1 && keyKT!=0 ) //lac duong ben phai
;PCODE: $0000109F VOL: 0
;PCODE: $000010A0 VOL: 0
;PCODE: $000010A1 VOL: 0
;PCODE: $000010A2 VOL: 0
;PCODE: $000010A3 VOL: 0
;PCODE: $000010A4 VOL: 0
;PCODE: $000010A5 VOL: 0
;PCODE: $000010A6 VOL: 0
;PCODE: $000010A7 VOL: 0
;PCODE: $000010A8 VOL: 0
;PCODE: $000010A9 VOL: 0
;PCODE: $000010AA VOL: 0
; 0001 083B             {
; 0001 083C                vMLtoi(1);vMRtoi(20)  ;
;PCODE: $000010AB VOL: 0
;PCODE: $000010AC VOL: 0
;PCODE: $000010AD VOL: 0
;PCODE: $000010AE VOL: 0
;PCODE: $000010AF VOL: 0
;PCODE: $000010B0 VOL: 0
; 0001 083D                 readline();
;PCODE: $000010B1 VOL: 0
; 0001 083E                 admax = IRLINE[0];imax=0;
;PCODE: $000010B2 VOL: 0
;PCODE: $000010B3 VOL: 0
;PCODE: $000010B4 VOL: 0
;PCODE: $000010B5 VOL: 0
; 0001 083F                 for(i=1;i<5;i++){if(admax<IRLINE[i]){admax=IRLINE[i];imax=i;}}
;PCODE: $000010B6 VOL: 0
;PCODE: $000010B7 VOL: 0
;PCODE: $000010B8 VOL: 0
;PCODE: $000010B9 VOL: 0
;PCODE: $000010BA VOL: 0
;PCODE: $000010BB VOL: 0
;PCODE: $000010BC VOL: 0
;PCODE: $000010BD VOL: 0
;PCODE: $000010BE VOL: 0
;PCODE: $000010BF VOL: 0
;PCODE: $000010C0 VOL: 0
;PCODE: $000010C1 VOL: 0
;PCODE: $000010C2 VOL: 0
;PCODE: $000010C3 VOL: 0
;PCODE: $000010C4 VOL: 0
;PCODE: $000010C5 VOL: 0
;PCODE: $000010C6 VOL: 0
;PCODE: $000010C7 VOL: 0
;PCODE: $000010C8 VOL: 0
;PCODE: $000010C9 VOL: 0
;PCODE: $000010CA VOL: 0
;PCODE: $000010CB VOL: 0
;PCODE: $000010CC VOL: 0
;PCODE: $000010CD VOL: 0
;PCODE: $000010CE VOL: 0
;PCODE: $000010CF VOL: 0
;PCODE: $000010D0 VOL: 0
;PCODE: $000010D1 VOL: 0
;PCODE: $000010D2 VOL: 0
;PCODE: $000010D3 VOL: 0
;PCODE: $000010D4 VOL: 0
; 0001 0840                 imaxlast=imax;
;PCODE: $000010D5 VOL: 0
;PCODE: $000010D6 VOL: 0
;PCODE: $000010D7 VOL: 0
; 0001 0841                if(IRLINE[2]>500)  flagblindP=0;
;PCODE: $000010D8 VOL: 0
;PCODE: $000010D9 VOL: 0
;PCODE: $000010DA VOL: 0
;PCODE: $000010DB VOL: 0
;PCODE: $000010DC VOL: 0
;PCODE: $000010DD VOL: 0
; 0001 0842 
; 0001 0843             }
;PCODE: $000010DE VOL: 0
;PCODE: $000010DF VOL: 0
;PCODE: $000010E0 VOL: 0
; 0001 0844         hc(3,10);wn16s(imax);
;PCODE: $000010E1 VOL: 0
;PCODE: $000010E2 VOL: 0
;PCODE: $000010E3 VOL: 0
;PCODE: $000010E4 VOL: 0
;PCODE: $000010E5 VOL: 0
;PCODE: $000010E6 VOL: 0
;PCODE: $000010E7 VOL: 0
;PCODE: $000010E8 VOL: 0
;PCODE: $000010E9 VOL: 0
; 0001 0845         hc(4,10);wn16s(admax);
;PCODE: $000010EA VOL: 0
;PCODE: $000010EB VOL: 0
;PCODE: $000010EC VOL: 0
;PCODE: $000010ED VOL: 0
;PCODE: $000010EE VOL: 0
;PCODE: $000010EF VOL: 0
;PCODE: $000010F0 VOL: 0
; 0001 0846 
; 0001 0847        demled++;
;PCODE: $000010F1 VOL: 0
;PCODE: $000010F2 VOL: 0
;PCODE: $000010F3 VOL: 0
; 0001 0848        if(demled>30){demled=0;LEDLtoggle();LEDRtoggle(); }
;PCODE: $000010F4 VOL: 0
;PCODE: $000010F5 VOL: 0
;PCODE: $000010F6 VOL: 0
;PCODE: $000010F7 VOL: 0
;PCODE: $000010F8 VOL: 0
;PCODE: $000010F9 VOL: 0
;PCODE: $000010FA VOL: 0
; 0001 0849    }
;PCODE: $000010FB VOL: 0
;PCODE: $000010FC VOL: 0
;PCODE: $000010FD VOL: 0
; 0001 084A }
;PCODE: $000010FE VOL: 0
;PCODE: $000010FF VOL: 0
;PCODE: $00001100 VOL: 0
;PCODE: $00001101 VOL: 0

	.DSEG
_0x201A8:
	.BYTE 0x13
;
;//========================================================
;void robotblackline() //ANALOG OK
; 0001 084E {

	.CSEG
;PCODE: $00001102 VOL: 0
;PCODE: $00001103 VOL: 0
; 0001 084F     long int lastvalueline=0, valueline=0,value=0,online=0;
; 0001 0850     int i=0,j=0
; 0001 0851     ,imin=0;
; 0001 0852     long int avrg=0,sum=0 ;
; 0001 0853     unsigned int admin;
; 0001 0854      unsigned char imax;
; 0001 0855     int imaxlast=0;
; 0001 0856     unsigned int  admax;
; 0001 0857     unsigned int demled=0;
; 0001 0858     unsigned int flagblindT=0;
; 0001 0859     unsigned int flagblindP=0;
; 0001 085A     float udk,sumi=0,err,lasterr;
; 0001 085B 
; 0001 085C     int iminlast=0;
; 0001 085D     DDRA =0x00;
;PCODE: $00001104 VOL: 0
;PCODE: $00001105 VOL: 0
;PCODE: $00001106 VOL: 0
;PCODE: $00001107 VOL: 0
;PCODE: $00001108 VOL: 0
;PCODE: $00001109 VOL: 0
;	lastvalueline -> Y+57
;	valueline -> Y+53
;	value -> Y+49
;	online -> Y+45
;	i -> R16,R17
;	j -> R18,R19
;	imin -> R20,R21
;	avrg -> Y+41
;	sum -> Y+37
;	admin -> Y+35
;	imax -> Y+34
;	imaxlast -> Y+32
;	admax -> Y+30
;	demled -> Y+28
;	flagblindT -> Y+26
;	flagblindP -> Y+24
;	udk -> Y+20
;	sumi -> Y+16
;	err -> Y+12
;	lasterr -> Y+8
;	iminlast -> Y+6
;PCODE: $0000110A VOL: 0
;PCODE: $0000110B VOL: 0
;PCODE: $0000110C VOL: 0
;PCODE: $0000110D VOL: 0
;PCODE: $0000110E VOL: 0
;PCODE: $0000110F VOL: 0
;PCODE: $00001110 VOL: 0
;PCODE: $00001111 VOL: 0
; 0001 085E     PORTA=0x00;
;PCODE: $00001112 VOL: 0
;PCODE: $00001113 VOL: 0
; 0001 085F 
; 0001 0860         LcdClear();
;PCODE: $00001114 VOL: 0
; 0001 0861         hc(0,1);
;PCODE: $00001115 VOL: 0
;PCODE: $00001116 VOL: 0
;PCODE: $00001117 VOL: 0
;PCODE: $00001118 VOL: 0
;PCODE: $00001119 VOL: 0
; 0001 0862         ws ("BLACK LINE");
;PCODE: $0000111A VOL: 0
;PCODE: $0000111B VOL: 0
;PCODE: $0000111C VOL: 0
;PCODE: $0000111D VOL: 0
; 0001 0863         hc(1,10);
;PCODE: $0000111E VOL: 0
;PCODE: $0000111F VOL: 0
;PCODE: $00001120 VOL: 0
;PCODE: $00001121 VOL: 0
;PCODE: $00001122 VOL: 0
; 0001 0864         ws ("FOLOWER");
;PCODE: $00001123 VOL: 0
;PCODE: $00001124 VOL: 0
;PCODE: $00001125 VOL: 0
;PCODE: $00001126 VOL: 0
; 0001 0865         LEDL=1;LEDR=1;
;PCODE: $00001127 VOL: 0
;PCODE: $00001128 VOL: 0
;PCODE: $00001129 VOL: 0
;PCODE: $0000112A VOL: 0
; 0001 0866 
; 0001 0867         //doc lan dau tien  de khoi dong gia tri iminlast;
; 0001 0868         readline();
;PCODE: $0000112B VOL: 0
; 0001 0869         admin = IRLINE[0];imin=0;
;PCODE: $0000112C VOL: 0
;PCODE: $0000112D VOL: 0
;PCODE: $0000112E VOL: 0
;PCODE: $0000112F VOL: 0
; 0001 086A         for(i=1;i<5;i++){if(admin>IRLINE[i]){admin=IRLINE[i];imin=i;}}
;PCODE: $00001130 VOL: 0
;PCODE: $00001131 VOL: 0
;PCODE: $00001132 VOL: 0
;PCODE: $00001133 VOL: 0
;PCODE: $00001134 VOL: 0
;PCODE: $00001135 VOL: 0
;PCODE: $00001136 VOL: 0
;PCODE: $00001137 VOL: 0
;PCODE: $00001138 VOL: 0
;PCODE: $00001139 VOL: 0
;PCODE: $0000113A VOL: 0
;PCODE: $0000113B VOL: 0
;PCODE: $0000113C VOL: 0
;PCODE: $0000113D VOL: 0
;PCODE: $0000113E VOL: 0
;PCODE: $0000113F VOL: 0
;PCODE: $00001140 VOL: 0
;PCODE: $00001141 VOL: 0
;PCODE: $00001142 VOL: 0
;PCODE: $00001143 VOL: 0
;PCODE: $00001144 VOL: 0
;PCODE: $00001145 VOL: 0
;PCODE: $00001146 VOL: 0
;PCODE: $00001147 VOL: 0
;PCODE: $00001148 VOL: 0
;PCODE: $00001149 VOL: 0
;PCODE: $0000114A VOL: 0
;PCODE: $0000114B VOL: 0
;PCODE: $0000114C VOL: 0
;PCODE: $0000114D VOL: 0
;PCODE: $0000114E VOL: 0
; 0001 086B         iminlast=imin;
;PCODE: $0000114F VOL: 0
;PCODE: $00001150 VOL: 0
; 0001 086C         admin = 1024;
;PCODE: $00001151 VOL: 0
;PCODE: $00001152 VOL: 0
; 0001 086D         admax = 0;
;PCODE: $00001153 VOL: 0
;PCODE: $00001154 VOL: 0
; 0001 086E    //calib
; 0001 086F    while(keyKT!=0)
;PCODE: $00001155 VOL: 0
;PCODE: $00001156 VOL: 0
;PCODE: $00001157 VOL: 0
;PCODE: $00001158 VOL: 0
; 0001 0870    {
; 0001 0871       //doc gia tri cam bien
; 0001 0872       readline();
;PCODE: $00001159 VOL: 0
; 0001 0873 
; 0001 0874       for(i=1;i<5;i++){if(admin>IRLINE[i]){admin=IRLINE[i];imin=i;}}
;PCODE: $0000115A VOL: 0
;PCODE: $0000115B VOL: 0
;PCODE: $0000115C VOL: 0
;PCODE: $0000115D VOL: 0
;PCODE: $0000115E VOL: 0
;PCODE: $0000115F VOL: 0
;PCODE: $00001160 VOL: 0
;PCODE: $00001161 VOL: 0
;PCODE: $00001162 VOL: 0
;PCODE: $00001163 VOL: 0
;PCODE: $00001164 VOL: 0
;PCODE: $00001165 VOL: 0
;PCODE: $00001166 VOL: 0
;PCODE: $00001167 VOL: 0
;PCODE: $00001168 VOL: 0
;PCODE: $00001169 VOL: 0
;PCODE: $0000116A VOL: 0
;PCODE: $0000116B VOL: 0
;PCODE: $0000116C VOL: 0
;PCODE: $0000116D VOL: 0
;PCODE: $0000116E VOL: 0
;PCODE: $0000116F VOL: 0
;PCODE: $00001170 VOL: 0
;PCODE: $00001171 VOL: 0
;PCODE: $00001172 VOL: 0
;PCODE: $00001173 VOL: 0
;PCODE: $00001174 VOL: 0
;PCODE: $00001175 VOL: 0
;PCODE: $00001176 VOL: 0
;PCODE: $00001177 VOL: 0
;PCODE: $00001178 VOL: 0
; 0001 0875       //hc(3,10);wn16s(admin);
; 0001 0876       hc(3,10);wn16s(admin);
;PCODE: $00001179 VOL: 0
;PCODE: $0000117A VOL: 0
;PCODE: $0000117B VOL: 0
;PCODE: $0000117C VOL: 0
;PCODE: $0000117D VOL: 0
;PCODE: $0000117E VOL: 0
;PCODE: $0000117F VOL: 0
;PCODE: $00001180 VOL: 0
; 0001 0877 
; 0001 0878       for(i=1;i<5;i++){if(admax<IRLINE[i]){admax=IRLINE[i];imax=i;}}
;PCODE: $00001181 VOL: 0
;PCODE: $00001182 VOL: 0
;PCODE: $00001183 VOL: 0
;PCODE: $00001184 VOL: 0
;PCODE: $00001185 VOL: 0
;PCODE: $00001186 VOL: 0
;PCODE: $00001187 VOL: 0
;PCODE: $00001188 VOL: 0
;PCODE: $00001189 VOL: 0
;PCODE: $0000118A VOL: 0
;PCODE: $0000118B VOL: 0
;PCODE: $0000118C VOL: 0
;PCODE: $0000118D VOL: 0
;PCODE: $0000118E VOL: 0
;PCODE: $0000118F VOL: 0
;PCODE: $00001190 VOL: 0
;PCODE: $00001191 VOL: 0
;PCODE: $00001192 VOL: 0
;PCODE: $00001193 VOL: 0
;PCODE: $00001194 VOL: 0
;PCODE: $00001195 VOL: 0
;PCODE: $00001196 VOL: 0
;PCODE: $00001197 VOL: 0
;PCODE: $00001198 VOL: 0
;PCODE: $00001199 VOL: 0
;PCODE: $0000119A VOL: 0
;PCODE: $0000119B VOL: 0
;PCODE: $0000119C VOL: 0
;PCODE: $0000119D VOL: 0
;PCODE: $0000119E VOL: 0
;PCODE: $0000119F VOL: 0
; 0001 0879       hc(4,10);wn16s(admax);
;PCODE: $000011A0 VOL: 0
;PCODE: $000011A1 VOL: 0
;PCODE: $000011A2 VOL: 0
;PCODE: $000011A3 VOL: 0
;PCODE: $000011A4 VOL: 0
;PCODE: $000011A5 VOL: 0
;PCODE: $000011A6 VOL: 0
;PCODE: $000011A7 VOL: 0
; 0001 087A    }
;PCODE: $000011A8 VOL: 0
;PCODE: $000011A9 VOL: 0
; 0001 087B    //test gia tri doc line
; 0001 087C    online=0;
;PCODE: $000011AA VOL: 0
;PCODE: $000011AB VOL: 0
; 0001 087D    while(1)
;PCODE: $000011AC VOL: 0
; 0001 087E    {
; 0001 087F       //doc gia tri cam bien
; 0001 0880       readline();
;PCODE: $000011AD VOL: 0
; 0001 0881       for(i=0;i<5;i++)
;PCODE: $000011AE VOL: 0
;PCODE: $000011AF VOL: 0
;PCODE: $000011B0 VOL: 0
;PCODE: $000011B1 VOL: 0
;PCODE: $000011B2 VOL: 0
;PCODE: $000011B3 VOL: 0
;PCODE: $000011B4 VOL: 0
;PCODE: $000011B5 VOL: 0
;PCODE: $000011B6 VOL: 0
; 0001 0882       {
; 0001 0883          value=IRLINE[i];
;PCODE: $000011B7 VOL: 0
;PCODE: $000011B8 VOL: 0
;PCODE: $000011B9 VOL: 0
;PCODE: $000011BA VOL: 0
;PCODE: $000011BB VOL: 0
;PCODE: $000011BC VOL: 0
;PCODE: $000011BD VOL: 0
; 0001 0884          if(value<280) online=1;
;PCODE: $000011BE VOL: 0
;PCODE: $000011BF VOL: 0
;PCODE: $000011C0 VOL: 0
;PCODE: $000011C1 VOL: 0
;PCODE: $000011C2 VOL: 0
; 0001 0885          avrg = avrg+i*1000*value;
;PCODE: $000011C3 VOL: 0
;PCODE: $000011C4 VOL: 0
;PCODE: $000011C5 VOL: 0
;PCODE: $000011C6 VOL: 0
;PCODE: $000011C7 VOL: 0
;PCODE: $000011C8 VOL: 0
;PCODE: $000011C9 VOL: 0
;PCODE: $000011CA VOL: 0
;PCODE: $000011CB VOL: 0
;PCODE: $000011CC VOL: 0
;PCODE: $000011CD VOL: 0
; 0001 0886          sum = sum+value;
;PCODE: $000011CE VOL: 0
;PCODE: $000011CF VOL: 0
;PCODE: $000011D0 VOL: 0
;PCODE: $000011D1 VOL: 0
; 0001 0887       }
;PCODE: $000011D2 VOL: 0
;PCODE: $000011D3 VOL: 0
;PCODE: $000011D4 VOL: 0
;PCODE: $000011D5 VOL: 0
;PCODE: $000011D6 VOL: 0
; 0001 0888       //hc(1,10);wn16s(online);
; 0001 0889       if(online==1)
;PCODE: $000011D7 VOL: 0
;PCODE: $000011D8 VOL: 0
;PCODE: $000011D9 VOL: 0
; 0001 088A       {
; 0001 088B          valueline=(int)(avrg/ sum);
;PCODE: $000011DA VOL: 0
;PCODE: $000011DB VOL: 0
;PCODE: $000011DC VOL: 0
;PCODE: $000011DD VOL: 0
;PCODE: $000011DE VOL: 0
;PCODE: $000011DF VOL: 0
; 0001 088C         // hc(2,10);wn16s(valueline);
; 0001 088D          online=0;
;PCODE: $000011E0 VOL: 0
;PCODE: $000011E1 VOL: 0
; 0001 088E          avrg=0;
;PCODE: $000011E2 VOL: 0
;PCODE: $000011E3 VOL: 0
; 0001 088F          sum=0;
;PCODE: $000011E4 VOL: 0
;PCODE: $000011E5 VOL: 0
; 0001 0890       }else
;PCODE: $000011E6 VOL: 0
;PCODE: $000011E7 VOL: 0
; 0001 0891       {
; 0001 0892          if(lastvalueline>1935)
;PCODE: $000011E8 VOL: 0
;PCODE: $000011E9 VOL: 0
;PCODE: $000011EA VOL: 0
; 0001 0893          valueline=2000;
;PCODE: $000011EB VOL: 0
;PCODE: $000011EC VOL: 0
; 0001 0894          else
;PCODE: $000011ED VOL: 0
;PCODE: $000011EE VOL: 0
; 0001 0895          valueline=1800;
;PCODE: $000011EF VOL: 0
;PCODE: $000011F0 VOL: 0
; 0001 0896       }
;PCODE: $000011F1 VOL: 0
;PCODE: $000011F2 VOL: 0
; 0001 0897       err = 1935-valueline;
;PCODE: $000011F3 VOL: 0
;PCODE: $000011F4 VOL: 0
;PCODE: $000011F5 VOL: 0
;PCODE: $000011F6 VOL: 0
;PCODE: $000011F7 VOL: 0
; 0001 0898       if(err>100) err=100;
;PCODE: $000011F8 VOL: 0
;PCODE: $000011F9 VOL: 0
;PCODE: $000011FA VOL: 0
;PCODE: $000011FB VOL: 0
;PCODE: $000011FC VOL: 0
;PCODE: $000011FD VOL: 0
; 0001 0899       if(err<-100) err=-100;
;PCODE: $000011FE VOL: 0
;PCODE: $000011FF VOL: 0
;PCODE: $00001200 VOL: 0
;PCODE: $00001201 VOL: 0
;PCODE: $00001202 VOL: 0
;PCODE: $00001203 VOL: 0
;PCODE: $00001204 VOL: 0
; 0001 089A       sumi=sumi+ err/35;
;PCODE: $00001205 VOL: 0
;PCODE: $00001206 VOL: 0
;PCODE: $00001207 VOL: 0
;PCODE: $00001208 VOL: 0
;PCODE: $00001209 VOL: 0
;PCODE: $0000120A VOL: 0
;PCODE: $0000120B VOL: 0
; 0001 089B       if(sumi>6) sumi=6;
;PCODE: $0000120C VOL: 0
;PCODE: $0000120D VOL: 0
;PCODE: $0000120E VOL: 0
;PCODE: $0000120F VOL: 0
;PCODE: $00001210 VOL: 0
;PCODE: $00001211 VOL: 0
; 0001 089C       if(sumi<-6) sumi=-6;
;PCODE: $00001212 VOL: 0
;PCODE: $00001213 VOL: 0
;PCODE: $00001214 VOL: 0
;PCODE: $00001215 VOL: 0
;PCODE: $00001216 VOL: 0
;PCODE: $00001217 VOL: 0
;PCODE: $00001218 VOL: 0
; 0001 089D       udk = err/7 + sumi+(err-lasterr)/30;
;PCODE: $00001219 VOL: 0
;PCODE: $0000121A VOL: 0
;PCODE: $0000121B VOL: 0
;PCODE: $0000121C VOL: 0
;PCODE: $0000121D VOL: 0
;PCODE: $0000121E VOL: 0
;PCODE: $0000121F VOL: 0
;PCODE: $00001220 VOL: 0
;PCODE: $00001221 VOL: 0
;PCODE: $00001222 VOL: 0
;PCODE: $00001223 VOL: 0
;PCODE: $00001224 VOL: 0
;PCODE: $00001225 VOL: 0
;PCODE: $00001226 VOL: 0
;PCODE: $00001227 VOL: 0
;PCODE: $00001228 VOL: 0
; 0001 089E       if(udk>10) {udk=9;sumi=0;}
;PCODE: $00001229 VOL: 0
;PCODE: $0000122A VOL: 0
;PCODE: $0000122B VOL: 0
;PCODE: $0000122C VOL: 0
;PCODE: $0000122D VOL: 0
;PCODE: $0000122E VOL: 0
;PCODE: $0000122F VOL: 0
;PCODE: $00001230 VOL: 0
; 0001 089F       if(udk<-10){ udk=-9;sumi=0;}
;PCODE: $00001231 VOL: 0
;PCODE: $00001232 VOL: 0
;PCODE: $00001233 VOL: 0
;PCODE: $00001234 VOL: 0
;PCODE: $00001235 VOL: 0
;PCODE: $00001236 VOL: 0
;PCODE: $00001237 VOL: 0
;PCODE: $00001238 VOL: 0
;PCODE: $00001239 VOL: 0
; 0001 08A0       //hc(5,10);wn16s(udk);
; 0001 08A1       vMLtoi(10+udk); vMRtoi(10-udk) ;
;PCODE: $0000123A VOL: 0
;PCODE: $0000123B VOL: 0
;PCODE: $0000123C VOL: 0
;PCODE: $0000123D VOL: 0
;PCODE: $0000123E VOL: 0
;PCODE: $0000123F VOL: 0
;PCODE: $00001240 VOL: 0
;PCODE: $00001241 VOL: 0
;PCODE: $00001242 VOL: 0
;PCODE: $00001243 VOL: 0
;PCODE: $00001244 VOL: 0
;PCODE: $00001245 VOL: 0
;PCODE: $00001246 VOL: 0
; 0001 08A2 
; 0001 08A3       lastvalueline=valueline;
;PCODE: $00001247 VOL: 0
;PCODE: $00001248 VOL: 0
; 0001 08A4       lasterr=err;
;PCODE: $00001249 VOL: 0
;PCODE: $0000124A VOL: 0
; 0001 08A5    }
;PCODE: $0000124B VOL: 0
;PCODE: $0000124C VOL: 0
; 0001 08A6 
; 0001 08A7    while(keyKT!=0)
;PCODE: $0000124D VOL: 0
;PCODE: $0000124E VOL: 0
;PCODE: $0000124F VOL: 0
;PCODE: $00001250 VOL: 0
; 0001 08A8    {
; 0001 08A9        //doc gia tri cam bien
; 0001 08AA         readline();
;PCODE: $00001251 VOL: 0
; 0001 08AB         admin = IRLINE[0];imin=0;
;PCODE: $00001252 VOL: 0
;PCODE: $00001253 VOL: 0
;PCODE: $00001254 VOL: 0
;PCODE: $00001255 VOL: 0
; 0001 08AC         for(i=1;i<5;i++){if(admin>IRLINE[i]){admin=IRLINE[i];imin=i;}}
;PCODE: $00001256 VOL: 0
;PCODE: $00001257 VOL: 0
;PCODE: $00001258 VOL: 0
;PCODE: $00001259 VOL: 0
;PCODE: $0000125A VOL: 0
;PCODE: $0000125B VOL: 0
;PCODE: $0000125C VOL: 0
;PCODE: $0000125D VOL: 0
;PCODE: $0000125E VOL: 0
;PCODE: $0000125F VOL: 0
;PCODE: $00001260 VOL: 0
;PCODE: $00001261 VOL: 0
;PCODE: $00001262 VOL: 0
;PCODE: $00001263 VOL: 0
;PCODE: $00001264 VOL: 0
;PCODE: $00001265 VOL: 0
;PCODE: $00001266 VOL: 0
;PCODE: $00001267 VOL: 0
;PCODE: $00001268 VOL: 0
;PCODE: $00001269 VOL: 0
;PCODE: $0000126A VOL: 0
;PCODE: $0000126B VOL: 0
;PCODE: $0000126C VOL: 0
;PCODE: $0000126D VOL: 0
;PCODE: $0000126E VOL: 0
;PCODE: $0000126F VOL: 0
;PCODE: $00001270 VOL: 0
;PCODE: $00001271 VOL: 0
;PCODE: $00001272 VOL: 0
;PCODE: $00001273 VOL: 0
;PCODE: $00001274 VOL: 0
; 0001 08AD         hc(2,10);wn16s(iminlast);
;PCODE: $00001275 VOL: 0
;PCODE: $00001276 VOL: 0
;PCODE: $00001277 VOL: 0
;PCODE: $00001278 VOL: 0
;PCODE: $00001279 VOL: 0
;PCODE: $0000127A VOL: 0
;PCODE: $0000127B VOL: 0
;PCODE: $0000127C VOL: 0
; 0001 08AE         hc(3,10);wn16s(imin);
;PCODE: $0000127D VOL: 0
;PCODE: $0000127E VOL: 0
;PCODE: $0000127F VOL: 0
;PCODE: $00001280 VOL: 0
;PCODE: $00001281 VOL: 0
;PCODE: $00001282 VOL: 0
;PCODE: $00001283 VOL: 0
; 0001 08AF         hc(4,10);wn16s(admin);
;PCODE: $00001284 VOL: 0
;PCODE: $00001285 VOL: 0
;PCODE: $00001286 VOL: 0
;PCODE: $00001287 VOL: 0
;PCODE: $00001288 VOL: 0
;PCODE: $00001289 VOL: 0
;PCODE: $0000128A VOL: 0
;PCODE: $0000128B VOL: 0
; 0001 08B0 
; 0001 08B1         if((imin-iminlast > 1)||(imin-iminlast <-1))  //tranh truong hop nhay bo trang thai
;PCODE: $0000128C VOL: 0
;PCODE: $0000128D VOL: 0
;PCODE: $0000128E VOL: 0
;PCODE: $0000128F VOL: 0
;PCODE: $00001290 VOL: 0
;PCODE: $00001291 VOL: 0
;PCODE: $00001292 VOL: 0
;PCODE: $00001293 VOL: 0
;PCODE: $00001294 VOL: 0
;PCODE: $00001295 VOL: 0
;PCODE: $00001296 VOL: 0
; 0001 08B2         {
; 0001 08B3         }
; 0001 08B4         else
;PCODE: $00001297 VOL: 0
;PCODE: $00001298 VOL: 0
; 0001 08B5         {
; 0001 08B6              switch(imin)
;PCODE: $00001299 VOL: 0
; 0001 08B7             {
; 0001 08B8               case 0:
;PCODE: $0000129A VOL: 0
;PCODE: $0000129B VOL: 0
; 0001 08B9                   vMLtoi(1); vMRtoi(15) ;
;PCODE: $0000129C VOL: 0
;PCODE: $0000129D VOL: 0
;PCODE: $0000129E VOL: 0
;PCODE: $0000129F VOL: 0
;PCODE: $000012A0 VOL: 0
;PCODE: $000012A1 VOL: 0
; 0001 08BA                   //flagblindT = 0;
; 0001 08BB                   flagblindP = 1;
;PCODE: $000012A2 VOL: 0
;PCODE: $000012A3 VOL: 0
; 0001 08BC                 break;
;PCODE: $000012A4 VOL: 0
; 0001 08BD               case 1:
;PCODE: $000012A5 VOL: 0
;PCODE: $000012A6 VOL: 0
;PCODE: $000012A7 VOL: 0
; 0001 08BE                   vMLtoi(2); vMRtoi(8) ;
;PCODE: $000012A8 VOL: 0
;PCODE: $000012A9 VOL: 0
;PCODE: $000012AA VOL: 0
;PCODE: $000012AB VOL: 0
;PCODE: $000012AC VOL: 0
;PCODE: $000012AD VOL: 0
; 0001 08BF                 break;
;PCODE: $000012AE VOL: 0
; 0001 08C0               case 2:
;PCODE: $000012AF VOL: 0
;PCODE: $000012B0 VOL: 0
;PCODE: $000012B1 VOL: 0
; 0001 08C1                   vMLtoi(10);vMRtoi(10) ;
;PCODE: $000012B2 VOL: 0
;PCODE: $000012B3 VOL: 0
;PCODE: $000012B4 VOL: 0
;PCODE: $000012B5 VOL: 0
;PCODE: $000012B6 VOL: 0
;PCODE: $000012B7 VOL: 0
; 0001 08C2                 break;
;PCODE: $000012B8 VOL: 0
; 0001 08C3               case 3:
;PCODE: $000012B9 VOL: 0
;PCODE: $000012BA VOL: 0
;PCODE: $000012BB VOL: 0
; 0001 08C4                  vMLtoi(8); vMRtoi(2) ;
;PCODE: $000012BC VOL: 0
;PCODE: $000012BD VOL: 0
;PCODE: $000012BE VOL: 0
;PCODE: $000012BF VOL: 0
;PCODE: $000012C0 VOL: 0
;PCODE: $000012C1 VOL: 0
; 0001 08C5                 break;
;PCODE: $000012C2 VOL: 0
; 0001 08C6               case 4:
;PCODE: $000012C3 VOL: 0
;PCODE: $000012C4 VOL: 0
;PCODE: $000012C5 VOL: 0
; 0001 08C7                   vMLtoi(15);vMRtoi(1)  ;
;PCODE: $000012C6 VOL: 0
;PCODE: $000012C7 VOL: 0
;PCODE: $000012C8 VOL: 0
;PCODE: $000012C9 VOL: 0
;PCODE: $000012CA VOL: 0
;PCODE: $000012CB VOL: 0
; 0001 08C8                   flagblindT = 1;
;PCODE: $000012CC VOL: 0
;PCODE: $000012CD VOL: 0
; 0001 08C9                   //flagblindP = 0;
; 0001 08CA                 break;
;PCODE: $000012CE VOL: 0
; 0001 08CB               default:
;PCODE: $000012CF VOL: 0
; 0001 08CC                  // vMLtoi(5); vMRtoi(5) ;
; 0001 08CD                 break;
;PCODE: $000012D0 VOL: 0
; 0001 08CE             }
;PCODE: $000012D1 VOL: 0
; 0001 08CF 
; 0001 08D0               iminlast=imin;
;PCODE: $000012D2 VOL: 0
;PCODE: $000012D3 VOL: 0
; 0001 08D1          }
;PCODE: $000012D4 VOL: 0
; 0001 08D2 
; 0001 08D3 
; 0001 08D4             while(flagblindT == 1 && keyKT!=0) //lac duong ben trai
;PCODE: $000012D5 VOL: 0
;PCODE: $000012D6 VOL: 0
;PCODE: $000012D7 VOL: 0
;PCODE: $000012D8 VOL: 0
;PCODE: $000012D9 VOL: 0
;PCODE: $000012DA VOL: 0
;PCODE: $000012DB VOL: 0
;PCODE: $000012DC VOL: 0
;PCODE: $000012DD VOL: 0
;PCODE: $000012DE VOL: 0
;PCODE: $000012DF VOL: 0
;PCODE: $000012E0 VOL: 0
; 0001 08D5             {
; 0001 08D6                vMLtoi(20);vMRtoi(2)  ;
;PCODE: $000012E1 VOL: 0
;PCODE: $000012E2 VOL: 0
;PCODE: $000012E3 VOL: 0
;PCODE: $000012E4 VOL: 0
;PCODE: $000012E5 VOL: 0
;PCODE: $000012E6 VOL: 0
; 0001 08D7                readline();
;PCODE: $000012E7 VOL: 0
; 0001 08D8                admin = IRLINE[0];imin=0;
;PCODE: $000012E8 VOL: 0
;PCODE: $000012E9 VOL: 0
;PCODE: $000012EA VOL: 0
;PCODE: $000012EB VOL: 0
; 0001 08D9                for(i=1;i<5;i++){if(admin>IRLINE[i]){admin=IRLINE[i];imin=i;}}
;PCODE: $000012EC VOL: 0
;PCODE: $000012ED VOL: 0
;PCODE: $000012EE VOL: 0
;PCODE: $000012EF VOL: 0
;PCODE: $000012F0 VOL: 0
;PCODE: $000012F1 VOL: 0
;PCODE: $000012F2 VOL: 0
;PCODE: $000012F3 VOL: 0
;PCODE: $000012F4 VOL: 0
;PCODE: $000012F5 VOL: 0
;PCODE: $000012F6 VOL: 0
;PCODE: $000012F7 VOL: 0
;PCODE: $000012F8 VOL: 0
;PCODE: $000012F9 VOL: 0
;PCODE: $000012FA VOL: 0
;PCODE: $000012FB VOL: 0
;PCODE: $000012FC VOL: 0
;PCODE: $000012FD VOL: 0
;PCODE: $000012FE VOL: 0
;PCODE: $000012FF VOL: 0
;PCODE: $00001300 VOL: 0
;PCODE: $00001301 VOL: 0
;PCODE: $00001302 VOL: 0
;PCODE: $00001303 VOL: 0
;PCODE: $00001304 VOL: 0
;PCODE: $00001305 VOL: 0
;PCODE: $00001306 VOL: 0
;PCODE: $00001307 VOL: 0
;PCODE: $00001308 VOL: 0
;PCODE: $00001309 VOL: 0
;PCODE: $0000130A VOL: 0
; 0001 08DA                iminlast=imin;
;PCODE: $0000130B VOL: 0
;PCODE: $0000130C VOL: 0
; 0001 08DB                if(IRLINE[2]<310)  flagblindT=0;
;PCODE: $0000130D VOL: 0
;PCODE: $0000130E VOL: 0
;PCODE: $0000130F VOL: 0
;PCODE: $00001310 VOL: 0
;PCODE: $00001311 VOL: 0
;PCODE: $00001312 VOL: 0
; 0001 08DC 
; 0001 08DD             }
;PCODE: $00001313 VOL: 0
;PCODE: $00001314 VOL: 0
;PCODE: $00001315 VOL: 0
; 0001 08DE             while(flagblindP ==1 && keyKT!=0) //lac duong ben phai
;PCODE: $00001316 VOL: 0
;PCODE: $00001317 VOL: 0
;PCODE: $00001318 VOL: 0
;PCODE: $00001319 VOL: 0
;PCODE: $0000131A VOL: 0
;PCODE: $0000131B VOL: 0
;PCODE: $0000131C VOL: 0
;PCODE: $0000131D VOL: 0
;PCODE: $0000131E VOL: 0
;PCODE: $0000131F VOL: 0
;PCODE: $00001320 VOL: 0
;PCODE: $00001321 VOL: 0
; 0001 08DF             {
; 0001 08E0                vMLtoi(2);vMRtoi(20)  ;
;PCODE: $00001322 VOL: 0
;PCODE: $00001323 VOL: 0
;PCODE: $00001324 VOL: 0
;PCODE: $00001325 VOL: 0
;PCODE: $00001326 VOL: 0
;PCODE: $00001327 VOL: 0
; 0001 08E1                readline();
;PCODE: $00001328 VOL: 0
; 0001 08E2                admin = IRLINE[0];imin=0;
;PCODE: $00001329 VOL: 0
;PCODE: $0000132A VOL: 0
;PCODE: $0000132B VOL: 0
;PCODE: $0000132C VOL: 0
; 0001 08E3                for(i=1;i<5;i++){if(admin>IRLINE[i]){admin=IRLINE[i];imin=i;}}
;PCODE: $0000132D VOL: 0
;PCODE: $0000132E VOL: 0
;PCODE: $0000132F VOL: 0
;PCODE: $00001330 VOL: 0
;PCODE: $00001331 VOL: 0
;PCODE: $00001332 VOL: 0
;PCODE: $00001333 VOL: 0
;PCODE: $00001334 VOL: 0
;PCODE: $00001335 VOL: 0
;PCODE: $00001336 VOL: 0
;PCODE: $00001337 VOL: 0
;PCODE: $00001338 VOL: 0
;PCODE: $00001339 VOL: 0
;PCODE: $0000133A VOL: 0
;PCODE: $0000133B VOL: 0
;PCODE: $0000133C VOL: 0
;PCODE: $0000133D VOL: 0
;PCODE: $0000133E VOL: 0
;PCODE: $0000133F VOL: 0
;PCODE: $00001340 VOL: 0
;PCODE: $00001341 VOL: 0
;PCODE: $00001342 VOL: 0
;PCODE: $00001343 VOL: 0
;PCODE: $00001344 VOL: 0
;PCODE: $00001345 VOL: 0
;PCODE: $00001346 VOL: 0
;PCODE: $00001347 VOL: 0
;PCODE: $00001348 VOL: 0
;PCODE: $00001349 VOL: 0
;PCODE: $0000134A VOL: 0
;PCODE: $0000134B VOL: 0
; 0001 08E4                iminlast=imin;
;PCODE: $0000134C VOL: 0
;PCODE: $0000134D VOL: 0
; 0001 08E5                if(IRLINE[2]<310)  flagblindP=0;
;PCODE: $0000134E VOL: 0
;PCODE: $0000134F VOL: 0
;PCODE: $00001350 VOL: 0
;PCODE: $00001351 VOL: 0
;PCODE: $00001352 VOL: 0
;PCODE: $00001353 VOL: 0
; 0001 08E6 
; 0001 08E7             }
;PCODE: $00001354 VOL: 0
;PCODE: $00001355 VOL: 0
;PCODE: $00001356 VOL: 0
; 0001 08E8 
; 0001 08E9 
; 0001 08EA        demled++;
;PCODE: $00001357 VOL: 0
;PCODE: $00001358 VOL: 0
;PCODE: $00001359 VOL: 0
; 0001 08EB        if(demled>30){demled=0;LEDLtoggle();LEDRtoggle(); }
;PCODE: $0000135A VOL: 0
;PCODE: $0000135B VOL: 0
;PCODE: $0000135C VOL: 0
;PCODE: $0000135D VOL: 0
;PCODE: $0000135E VOL: 0
;PCODE: $0000135F VOL: 0
;PCODE: $00001360 VOL: 0
; 0001 08EC    }
;PCODE: $00001361 VOL: 0
;PCODE: $00001362 VOL: 0
;PCODE: $00001363 VOL: 0
; 0001 08ED }
;PCODE: $00001364 VOL: 0
;PCODE: $00001365 VOL: 0
;PCODE: $00001366 VOL: 0
;PCODE: $00001367 VOL: 0

	.DSEG
_0x201DB:
	.BYTE 0x13
;//========================================================
;void bluetooth()
; 0001 08F0 {  unsigned char kytu;

	.CSEG
;PCODE: $00001368 VOL: 0
;PCODE: $00001369 VOL: 0
; 0001 08F1    unsigned int demled;
; 0001 08F2 
; 0001 08F3         LcdClear();
;PCODE: $0000136A VOL: 0
;	kytu -> R17
;	demled -> R18,R19
;PCODE: $0000136B VOL: 0
; 0001 08F4         hc(0,10);
;PCODE: $0000136C VOL: 0
;PCODE: $0000136D VOL: 0
;PCODE: $0000136E VOL: 0
;PCODE: $0000136F VOL: 0
;PCODE: $00001370 VOL: 0
; 0001 08F5         ws ("BLUETOOTH");
;PCODE: $00001371 VOL: 0
;PCODE: $00001372 VOL: 0
;PCODE: $00001373 VOL: 0
;PCODE: $00001374 VOL: 0
; 0001 08F6         hc(1,25);
;PCODE: $00001375 VOL: 0
;PCODE: $00001376 VOL: 0
;PCODE: $00001377 VOL: 0
;PCODE: $00001378 VOL: 0
;PCODE: $00001379 VOL: 0
; 0001 08F7         ws ("DRIVE");
;PCODE: $0000137A VOL: 0
;PCODE: $0000137B VOL: 0
;PCODE: $0000137C VOL: 0
;PCODE: $0000137D VOL: 0
; 0001 08F8 
; 0001 08F9         LEDL=1;LEDR=1;
;PCODE: $0000137E VOL: 0
;PCODE: $0000137F VOL: 0
;PCODE: $00001380 VOL: 0
;PCODE: $00001381 VOL: 0
; 0001 08FA 
; 0001 08FB    while(keyKT!=0)
;PCODE: $00001382 VOL: 0
;PCODE: $00001383 VOL: 0
;PCODE: $00001384 VOL: 0
;PCODE: $00001385 VOL: 0
; 0001 08FC    {
; 0001 08FD         LEDL=1; LEDR=1;
;PCODE: $00001386 VOL: 0
;PCODE: $00001387 VOL: 0
;PCODE: $00001388 VOL: 0
;PCODE: $00001389 VOL: 0
; 0001 08FE         delay_ms(100);
;PCODE: $0000138A VOL: 0
;PCODE: $0000138B VOL: 0
;PCODE: $0000138C VOL: 0
; 0001 08FF         LEDL=0; LEDR=0;
;PCODE: $0000138D VOL: 0
;PCODE: $0000138E VOL: 0
;PCODE: $0000138F VOL: 0
;PCODE: $00001390 VOL: 0
; 0001 0900         delay_ms(100);
;PCODE: $00001391 VOL: 0
;PCODE: $00001392 VOL: 0
;PCODE: $00001393 VOL: 0
; 0001 0901 
; 0001 0902       if (rx_counter)
;PCODE: $00001394 VOL: 0
;PCODE: $00001395 VOL: 0
;PCODE: $00001396 VOL: 0
; 0001 0903       {
; 0001 0904        //LcdClear();
; 0001 0905        hc(2,42);
;PCODE: $00001397 VOL: 0
;PCODE: $00001398 VOL: 0
;PCODE: $00001399 VOL: 0
;PCODE: $0000139A VOL: 0
;PCODE: $0000139B VOL: 0
; 0001 0906        kytu = getchar();
;PCODE: $0000139C VOL: 0
;PCODE: $0000139D VOL: 0
; 0001 0907        LcdCharacter(kytu);
;PCODE: $0000139E VOL: 0
;PCODE: $0000139F VOL: 0
; 0001 0908        //putchar(getchar());
; 0001 0909        if(kytu=='S'){vMLtoi(0);vMRtoi(0);}
;PCODE: $000013A0 VOL: 0
;PCODE: $000013A1 VOL: 0
;PCODE: $000013A2 VOL: 0
;PCODE: $000013A3 VOL: 0
;PCODE: $000013A4 VOL: 0
;PCODE: $000013A5 VOL: 0
;PCODE: $000013A6 VOL: 0
;PCODE: $000013A7 VOL: 0
;PCODE: $000013A8 VOL: 0
; 0001 090A        if(kytu=='F'){vMLtoi(100);vMRtoi(100);}
;PCODE: $000013A9 VOL: 0
;PCODE: $000013AA VOL: 0
;PCODE: $000013AB VOL: 0
;PCODE: $000013AC VOL: 0
;PCODE: $000013AD VOL: 0
;PCODE: $000013AE VOL: 0
;PCODE: $000013AF VOL: 0
;PCODE: $000013B0 VOL: 0
;PCODE: $000013B1 VOL: 0
;PCODE: $000013B2 VOL: 0
; 0001 090B        if(kytu=='B'){vMLlui(100);vMRlui(100);}
;PCODE: $000013B3 VOL: 0
;PCODE: $000013B4 VOL: 0
;PCODE: $000013B5 VOL: 0
;PCODE: $000013B6 VOL: 0
;PCODE: $000013B7 VOL: 0
;PCODE: $000013B8 VOL: 0
;PCODE: $000013B9 VOL: 0
;PCODE: $000013BA VOL: 0
;PCODE: $000013BB VOL: 0
;PCODE: $000013BC VOL: 0
; 0001 090C        if(kytu=='R'){vMLtoi(100);vMRtoi(0);}
;PCODE: $000013BD VOL: 0
;PCODE: $000013BE VOL: 0
;PCODE: $000013BF VOL: 0
;PCODE: $000013C0 VOL: 0
;PCODE: $000013C1 VOL: 0
;PCODE: $000013C2 VOL: 0
;PCODE: $000013C3 VOL: 0
;PCODE: $000013C4 VOL: 0
;PCODE: $000013C5 VOL: 0
;PCODE: $000013C6 VOL: 0
; 0001 090D        if(kytu=='L'){vMLtoi(0);vMRtoi(100);}
;PCODE: $000013C7 VOL: 0
;PCODE: $000013C8 VOL: 0
;PCODE: $000013C9 VOL: 0
;PCODE: $000013CA VOL: 0
;PCODE: $000013CB VOL: 0
;PCODE: $000013CC VOL: 0
;PCODE: $000013CD VOL: 0
;PCODE: $000013CE VOL: 0
;PCODE: $000013CF VOL: 0
;PCODE: $000013D0 VOL: 0
; 0001 090E 
; 0001 090F        demled++;
;PCODE: $000013D1 VOL: 0
;PCODE: $000013D2 VOL: 0
;PCODE: $000013D3 VOL: 0
; 0001 0910        if(demled>1000){demled=0;LEDLtoggle(); LEDRtoggle();}
;PCODE: $000013D4 VOL: 0
;PCODE: $000013D5 VOL: 0
;PCODE: $000013D6 VOL: 0
;PCODE: $000013D7 VOL: 0
;PCODE: $000013D8 VOL: 0
;PCODE: $000013D9 VOL: 0
;PCODE: $000013DA VOL: 0
; 0001 0911       }
;PCODE: $000013DB VOL: 0
; 0001 0912     }
;PCODE: $000013DC VOL: 0
;PCODE: $000013DD VOL: 0
;PCODE: $000013DE VOL: 0
; 0001 0913 }
;PCODE: $000013DF VOL: 0
;PCODE: $000013E0 VOL: 0
;PCODE: $000013E1 VOL: 0
;PCODE: $000013E2 VOL: 0

	.DSEG
_0x20229:
	.BYTE 0x10
;//========================================================
;
;//Chuong trinh test robot
;   void testmotor()
; 0001 0918    {

	.CSEG
;PCODE: $000013E3 VOL: 0
;PCODE: $000013E4 VOL: 0
; 0001 0919         LcdClear();
;PCODE: $000013E5 VOL: 0
; 0001 091A         hc(0,10);
;PCODE: $000013E6 VOL: 0
;PCODE: $000013E7 VOL: 0
;PCODE: $000013E8 VOL: 0
;PCODE: $000013E9 VOL: 0
;PCODE: $000013EA VOL: 0
; 0001 091B         ws ("TEST MOTOR");
;PCODE: $000013EB VOL: 0
;PCODE: $000013EC VOL: 0
;PCODE: $000013ED VOL: 0
;PCODE: $000013EE VOL: 0
; 0001 091C 
; 0001 091D         vMRtoi(20);
;PCODE: $000013EF VOL: 0
;PCODE: $000013F0 VOL: 0
;PCODE: $000013F1 VOL: 0
; 0001 091E         vMLtoi(20);
;PCODE: $000013F2 VOL: 0
;PCODE: $000013F3 VOL: 0
;PCODE: $000013F4 VOL: 0
; 0001 091F       while(keyKT!=0)
;PCODE: $000013F5 VOL: 0
;PCODE: $000013F6 VOL: 0
;PCODE: $000013F7 VOL: 0
;PCODE: $000013F8 VOL: 0
; 0001 0920       {
; 0001 0921         hc(2,0);
;PCODE: $000013F9 VOL: 0
;PCODE: $000013FA VOL: 0
;PCODE: $000013FB VOL: 0
;PCODE: $000013FC VOL: 0
;PCODE: $000013FD VOL: 0
; 0001 0922         ws ("MotorL");
;PCODE: $000013FE VOL: 0
;PCODE: $000013FF VOL: 0
;PCODE: $00001400 VOL: 0
;PCODE: $00001401 VOL: 0
; 0001 0923         hc(2,45);
;PCODE: $00001402 VOL: 0
;PCODE: $00001403 VOL: 0
;PCODE: $00001404 VOL: 0
;PCODE: $00001405 VOL: 0
;PCODE: $00001406 VOL: 0
; 0001 0924         wn16(QEL);
;PCODE: $00001407 VOL: 0
;PCODE: $00001408 VOL: 0
;PCODE: $00001409 VOL: 0
; 0001 0925         hc(3,0);
;PCODE: $0000140A VOL: 0
;PCODE: $0000140B VOL: 0
;PCODE: $0000140C VOL: 0
;PCODE: $0000140D VOL: 0
;PCODE: $0000140E VOL: 0
; 0001 0926         ws ("MotorR");
;PCODE: $0000140F VOL: 0
;PCODE: $00001410 VOL: 0
;PCODE: $00001411 VOL: 0
;PCODE: $00001412 VOL: 0
; 0001 0927         hc(3,45);
;PCODE: $00001413 VOL: 0
;PCODE: $00001414 VOL: 0
;PCODE: $00001415 VOL: 0
;PCODE: $00001416 VOL: 0
;PCODE: $00001417 VOL: 0
; 0001 0928         wn16(QER);
;PCODE: $00001418 VOL: 0
;PCODE: $00001419 VOL: 0
;PCODE: $0000141A VOL: 0
; 0001 0929         delay_ms(10);
;PCODE: $0000141B VOL: 0
;PCODE: $0000141C VOL: 0
;PCODE: $0000141D VOL: 0
; 0001 092A       }
;PCODE: $0000141E VOL: 0
;PCODE: $0000141F VOL: 0
; 0001 092B 
; 0001 092C        vMRstop();
;PCODE: $00001420 VOL: 0
; 0001 092D        vMLstop();
;PCODE: $00001421 VOL: 0
; 0001 092E    }
;PCODE: $00001422 VOL: 0
;PCODE: $00001423 VOL: 0

	.DSEG
_0x20240:
	.BYTE 0x19
; //========================================================
; // UART TEST
;   void testuart()
; 0001 0932    {

	.CSEG
;PCODE: $00001424 VOL: 0
;PCODE: $00001425 VOL: 0
; 0001 0933           if (rx_counter)
;PCODE: $00001426 VOL: 0
;PCODE: $00001427 VOL: 0
;PCODE: $00001428 VOL: 0
; 0001 0934           {
; 0001 0935           LcdClear();
;PCODE: $00001429 VOL: 0
; 0001 0936            hc(0,10);
;PCODE: $0000142A VOL: 0
;PCODE: $0000142B VOL: 0
;PCODE: $0000142C VOL: 0
;PCODE: $0000142D VOL: 0
;PCODE: $0000142E VOL: 0
; 0001 0937            ws ("TEST UART");
;PCODE: $0000142F VOL: 0
;PCODE: $00001430 VOL: 0
;PCODE: $00001431 VOL: 0
;PCODE: $00001432 VOL: 0
; 0001 0938            putchar(getchar());
;PCODE: $00001433 VOL: 0
;PCODE: $00001434 VOL: 0
;PCODE: $00001435 VOL: 0
; 0001 0939           }
; 0001 093A 
; 0001 093B    }
;PCODE: $00001436 VOL: 0
;PCODE: $00001437 VOL: 0
;PCODE: $00001438 VOL: 0

	.DSEG
_0x20245:
	.BYTE 0xA
;   //========================================================
; // UART TEST
;   void testrf()
; 0001 093F    {

	.CSEG
;PCODE: $00001439 VOL: 0
;PCODE: $0000143A VOL: 0
; 0001 0940 
; 0001 0941 
; 0001 0942    }
;PCODE: $0000143B VOL: 0
;PCODE: $0000143C VOL: 0
;
;//========================================================
;   void testir()
; 0001 0946    {    unsigned int AD[8];
;PCODE: $0000143D VOL: 0
;PCODE: $0000143E VOL: 0
; 0001 0947 
; 0001 0948         DDRA    = 0x00;
;PCODE: $0000143F VOL: 0
;	AD -> Y+0
;PCODE: $00001440 VOL: 0
;PCODE: $00001441 VOL: 0
; 0001 0949         PORTA   = 0x00;
;PCODE: $00001442 VOL: 0
;PCODE: $00001443 VOL: 0
; 0001 094A 
; 0001 094B         clear();
;PCODE: $00001444 VOL: 0
; 0001 094C         hc(0,10);
;PCODE: $00001445 VOL: 0
;PCODE: $00001446 VOL: 0
;PCODE: $00001447 VOL: 0
;PCODE: $00001448 VOL: 0
;PCODE: $00001449 VOL: 0
; 0001 094D         ws ("TEST IR");
;PCODE: $0000144A VOL: 0
;PCODE: $0000144B VOL: 0
;PCODE: $0000144C VOL: 0
;PCODE: $0000144D VOL: 0
; 0001 094E 
; 0001 094F         while(keyKT!=0)
;PCODE: $0000144E VOL: 0
;PCODE: $0000144F VOL: 0
;PCODE: $00001450 VOL: 0
;PCODE: $00001451 VOL: 0
; 0001 0950         {
; 0001 0951 
; 0001 0952         AD[0]=read_adc(0);
;PCODE: $00001452 VOL: 0
;PCODE: $00001453 VOL: 0
;PCODE: $00001454 VOL: 0
;PCODE: $00001455 VOL: 0
; 0001 0953         AD[1]=read_adc(1);
;PCODE: $00001456 VOL: 0
;PCODE: $00001457 VOL: 0
;PCODE: $00001458 VOL: 0
;PCODE: $00001459 VOL: 0
; 0001 0954         AD[2]=read_adc(2);
;PCODE: $0000145A VOL: 0
;PCODE: $0000145B VOL: 0
;PCODE: $0000145C VOL: 0
;PCODE: $0000145D VOL: 0
; 0001 0955         AD[3]=read_adc(3);
;PCODE: $0000145E VOL: 0
;PCODE: $0000145F VOL: 0
;PCODE: $00001460 VOL: 0
;PCODE: $00001461 VOL: 0
; 0001 0956         AD[4]=read_adc(4);
;PCODE: $00001462 VOL: 0
;PCODE: $00001463 VOL: 0
;PCODE: $00001464 VOL: 0
;PCODE: $00001465 VOL: 0
; 0001 0957         AD[5]=read_adc(5);
;PCODE: $00001466 VOL: 0
;PCODE: $00001467 VOL: 0
;PCODE: $00001468 VOL: 0
;PCODE: $00001469 VOL: 0
; 0001 0958         AD[6]=read_adc(6);
;PCODE: $0000146A VOL: 0
;PCODE: $0000146B VOL: 0
;PCODE: $0000146C VOL: 0
;PCODE: $0000146D VOL: 0
; 0001 0959         AD[7]=read_adc(7);
;PCODE: $0000146E VOL: 0
;PCODE: $0000146F VOL: 0
;PCODE: $00001470 VOL: 0
;PCODE: $00001471 VOL: 0
; 0001 095A 
; 0001 095B         hc(1,0) ;ws("0.");wn164(AD[0]);
;PCODE: $00001472 VOL: 0
;PCODE: $00001473 VOL: 0
;PCODE: $00001474 VOL: 0
;PCODE: $00001475 VOL: 0
;PCODE: $00001476 VOL: 0
;PCODE: $00001477 VOL: 0
;PCODE: $00001478 VOL: 0
;PCODE: $00001479 VOL: 0
;PCODE: $0000147A VOL: 0
;PCODE: $0000147B VOL: 0
;PCODE: $0000147C VOL: 0
;PCODE: $0000147D VOL: 0
; 0001 095C         hc(1,43);ws("1.");wn164(AD[1]);
;PCODE: $0000147E VOL: 0
;PCODE: $0000147F VOL: 0
;PCODE: $00001480 VOL: 0
;PCODE: $00001481 VOL: 0
;PCODE: $00001482 VOL: 0
;PCODE: $00001483 VOL: 0
;PCODE: $00001484 VOL: 0
;PCODE: $00001485 VOL: 0
;PCODE: $00001486 VOL: 0
;PCODE: $00001487 VOL: 0
;PCODE: $00001488 VOL: 0
;PCODE: $00001489 VOL: 0
; 0001 095D         hc(2,0) ;ws("2.");wn164(AD[2]);
;PCODE: $0000148A VOL: 0
;PCODE: $0000148B VOL: 0
;PCODE: $0000148C VOL: 0
;PCODE: $0000148D VOL: 0
;PCODE: $0000148E VOL: 0
;PCODE: $0000148F VOL: 0
;PCODE: $00001490 VOL: 0
;PCODE: $00001491 VOL: 0
;PCODE: $00001492 VOL: 0
;PCODE: $00001493 VOL: 0
;PCODE: $00001494 VOL: 0
;PCODE: $00001495 VOL: 0
; 0001 095E         hc(2,43);ws("3.");wn164(AD[3]);
;PCODE: $00001496 VOL: 0
;PCODE: $00001497 VOL: 0
;PCODE: $00001498 VOL: 0
;PCODE: $00001499 VOL: 0
;PCODE: $0000149A VOL: 0
;PCODE: $0000149B VOL: 0
;PCODE: $0000149C VOL: 0
;PCODE: $0000149D VOL: 0
;PCODE: $0000149E VOL: 0
;PCODE: $0000149F VOL: 0
;PCODE: $000014A0 VOL: 0
;PCODE: $000014A1 VOL: 0
; 0001 095F         hc(3,0) ;ws("4.");wn164(AD[4]);
;PCODE: $000014A2 VOL: 0
;PCODE: $000014A3 VOL: 0
;PCODE: $000014A4 VOL: 0
;PCODE: $000014A5 VOL: 0
;PCODE: $000014A6 VOL: 0
;PCODE: $000014A7 VOL: 0
;PCODE: $000014A8 VOL: 0
;PCODE: $000014A9 VOL: 0
;PCODE: $000014AA VOL: 0
;PCODE: $000014AB VOL: 0
;PCODE: $000014AC VOL: 0
;PCODE: $000014AD VOL: 0
; 0001 0960         hc(3,43);ws("5.");wn164(AD[5]);
;PCODE: $000014AE VOL: 0
;PCODE: $000014AF VOL: 0
;PCODE: $000014B0 VOL: 0
;PCODE: $000014B1 VOL: 0
;PCODE: $000014B2 VOL: 0
;PCODE: $000014B3 VOL: 0
;PCODE: $000014B4 VOL: 0
;PCODE: $000014B5 VOL: 0
;PCODE: $000014B6 VOL: 0
;PCODE: $000014B7 VOL: 0
;PCODE: $000014B8 VOL: 0
;PCODE: $000014B9 VOL: 0
; 0001 0961         hc(4,0) ;ws("6.");wn164(AD[6]);
;PCODE: $000014BA VOL: 0
;PCODE: $000014BB VOL: 0
;PCODE: $000014BC VOL: 0
;PCODE: $000014BD VOL: 0
;PCODE: $000014BE VOL: 0
;PCODE: $000014BF VOL: 0
;PCODE: $000014C0 VOL: 0
;PCODE: $000014C1 VOL: 0
;PCODE: $000014C2 VOL: 0
;PCODE: $000014C3 VOL: 0
;PCODE: $000014C4 VOL: 0
;PCODE: $000014C5 VOL: 0
; 0001 0962         hc(4,43);ws("7.");wn164(AD[7]);
;PCODE: $000014C6 VOL: 0
;PCODE: $000014C7 VOL: 0
;PCODE: $000014C8 VOL: 0
;PCODE: $000014C9 VOL: 0
;PCODE: $000014CA VOL: 0
;PCODE: $000014CB VOL: 0
;PCODE: $000014CC VOL: 0
;PCODE: $000014CD VOL: 0
;PCODE: $000014CE VOL: 0
;PCODE: $000014CF VOL: 0
;PCODE: $000014D0 VOL: 0
;PCODE: $000014D1 VOL: 0
; 0001 0963 
; 0001 0964         delay_ms(1000);
;PCODE: $000014D2 VOL: 0
;PCODE: $000014D3 VOL: 0
;PCODE: $000014D4 VOL: 0
; 0001 0965         }
;PCODE: $000014D5 VOL: 0
;PCODE: $000014D6 VOL: 0
; 0001 0966 
; 0001 0967    }
;PCODE: $000014D7 VOL: 0
;PCODE: $000014D8 VOL: 0
;PCODE: $000014D9 VOL: 0

	.DSEG
_0x20246:
	.BYTE 0x20
;
;//========================================================
; void outlcd1()
; 0001 096B  {

	.CSEG
;PCODE: $000014DA VOL: 0
;PCODE: $000014DB VOL: 0
; 0001 096C      LcdClear();
;PCODE: $000014DC VOL: 0
; 0001 096D      hc(0,5);
;PCODE: $000014DD VOL: 0
;PCODE: $000014DE VOL: 0
;PCODE: $000014DF VOL: 0
;PCODE: $000014E0 VOL: 0
;PCODE: $000014E1 VOL: 0
; 0001 096E      ws("<SELF TEST>");
;PCODE: $000014E2 VOL: 0
;PCODE: $000014E3 VOL: 0
;PCODE: $000014E4 VOL: 0
;PCODE: $000014E5 VOL: 0
; 0001 096F      hc(1,0);
;PCODE: $000014E6 VOL: 0
;PCODE: $000014E7 VOL: 0
;PCODE: $000014E8 VOL: 0
;PCODE: $000014E9 VOL: 0
;PCODE: $000014EA VOL: 0
; 0001 0970      ws("************");
;PCODE: $000014EB VOL: 0
;PCODE: $000014EC VOL: 0
;PCODE: $000014ED VOL: 0
;PCODE: $000014EE VOL: 0
; 0001 0971  }
;PCODE: $000014EF VOL: 0
;PCODE: $000014F0 VOL: 0

	.DSEG
_0x2024A:
	.BYTE 0x19
;//========================================================
;void chopledtheoid()
; 0001 0974 {    unsigned char i;

	.CSEG
;PCODE: $000014F1 VOL: 0
;PCODE: $000014F2 VOL: 0
; 0001 0975         DDRA=0xFF;
;PCODE: $000014F3 VOL: 0
;	i -> R17
;PCODE: $000014F4 VOL: 0
;PCODE: $000014F5 VOL: 0
; 0001 0976 
; 0001 0977          switch (id)
;PCODE: $000014F6 VOL: 0
;PCODE: $000014F7 VOL: 0
; 0001 0978             {
; 0001 0979                 case 1:
;PCODE: $000014F8 VOL: 0
;PCODE: $000014F9 VOL: 0
; 0001 097A                     LEDR=1;
;PCODE: $000014FA VOL: 0
;PCODE: $000014FB VOL: 0
; 0001 097B                     LEDL=1;PORTA.4=1;delay_ms(10);
;PCODE: $000014FC VOL: 0
;PCODE: $000014FD VOL: 0
;PCODE: $000014FE VOL: 0
;PCODE: $000014FF VOL: 0
;PCODE: $00001500 VOL: 0
;PCODE: $00001501 VOL: 0
;PCODE: $00001502 VOL: 0
; 0001 097C                     LEDL=0;PORTA.4=0;delay_ms(30);
;PCODE: $00001503 VOL: 0
;PCODE: $00001504 VOL: 0
;PCODE: $00001505 VOL: 0
;PCODE: $00001506 VOL: 0
;PCODE: $00001507 VOL: 0
;PCODE: $00001508 VOL: 0
;PCODE: $00001509 VOL: 0
; 0001 097D                 break;
;PCODE: $0000150A VOL: 0
; 0001 097E                 case 2:
;PCODE: $0000150B VOL: 0
;PCODE: $0000150C VOL: 0
;PCODE: $0000150D VOL: 0
; 0001 097F                     LEDR=1;
;PCODE: $0000150E VOL: 0
;PCODE: $0000150F VOL: 0
; 0001 0980                     LEDL=1;PORTA.6=1;delay_ms(10);
;PCODE: $00001510 VOL: 0
;PCODE: $00001511 VOL: 0
;PCODE: $00001512 VOL: 0
;PCODE: $00001513 VOL: 0
;PCODE: $00001514 VOL: 0
;PCODE: $00001515 VOL: 0
;PCODE: $00001516 VOL: 0
; 0001 0981                     LEDL=0;PORTA.6=0;delay_ms(30);
;PCODE: $00001517 VOL: 0
;PCODE: $00001518 VOL: 0
;PCODE: $00001519 VOL: 0
;PCODE: $0000151A VOL: 0
;PCODE: $0000151B VOL: 0
;PCODE: $0000151C VOL: 0
;PCODE: $0000151D VOL: 0
; 0001 0982                 break;
;PCODE: $0000151E VOL: 0
; 0001 0983                 case 3:
;PCODE: $0000151F VOL: 0
;PCODE: $00001520 VOL: 0
;PCODE: $00001521 VOL: 0
; 0001 0984                     LEDR=1;
;PCODE: $00001522 VOL: 0
;PCODE: $00001523 VOL: 0
; 0001 0985                     LEDL=1;PORTA.7=1;delay_ms(10);
;PCODE: $00001524 VOL: 0
;PCODE: $00001525 VOL: 0
;PCODE: $00001526 VOL: 0
;PCODE: $00001527 VOL: 0
;PCODE: $00001528 VOL: 0
;PCODE: $00001529 VOL: 0
;PCODE: $0000152A VOL: 0
; 0001 0986                     LEDL=0;PORTA.7=0;delay_ms(30);
;PCODE: $0000152B VOL: 0
;PCODE: $0000152C VOL: 0
;PCODE: $0000152D VOL: 0
;PCODE: $0000152E VOL: 0
;PCODE: $0000152F VOL: 0
;PCODE: $00001530 VOL: 0
;PCODE: $00001531 VOL: 0
; 0001 0987                 break;
;PCODE: $00001532 VOL: 0
; 0001 0988                 case 4:
;PCODE: $00001533 VOL: 0
;PCODE: $00001534 VOL: 0
;PCODE: $00001535 VOL: 0
; 0001 0989                     LEDR=1;
;PCODE: $00001536 VOL: 0
;PCODE: $00001537 VOL: 0
; 0001 098A                     LEDL=1;PORTA.5=1;delay_ms(10);
;PCODE: $00001538 VOL: 0
;PCODE: $00001539 VOL: 0
;PCODE: $0000153A VOL: 0
;PCODE: $0000153B VOL: 0
;PCODE: $0000153C VOL: 0
;PCODE: $0000153D VOL: 0
;PCODE: $0000153E VOL: 0
; 0001 098B                     LEDL=0;PORTA.5=0;delay_ms(30);
;PCODE: $0000153F VOL: 0
;PCODE: $00001540 VOL: 0
;PCODE: $00001541 VOL: 0
;PCODE: $00001542 VOL: 0
;PCODE: $00001543 VOL: 0
;PCODE: $00001544 VOL: 0
;PCODE: $00001545 VOL: 0
; 0001 098C                 break;
;PCODE: $00001546 VOL: 0
; 0001 098D                 case 5:
;PCODE: $00001547 VOL: 0
;PCODE: $00001548 VOL: 0
;PCODE: $00001549 VOL: 0
; 0001 098E                     LEDL=1;
;PCODE: $0000154A VOL: 0
;PCODE: $0000154B VOL: 0
; 0001 098F                     LEDR=1;PORTA.4=1;delay_ms(10);
;PCODE: $0000154C VOL: 0
;PCODE: $0000154D VOL: 0
;PCODE: $0000154E VOL: 0
;PCODE: $0000154F VOL: 0
;PCODE: $00001550 VOL: 0
;PCODE: $00001551 VOL: 0
;PCODE: $00001552 VOL: 0
; 0001 0990                     LEDR=0;PORTA.4=0;delay_ms(30);
;PCODE: $00001553 VOL: 0
;PCODE: $00001554 VOL: 0
;PCODE: $00001555 VOL: 0
;PCODE: $00001556 VOL: 0
;PCODE: $00001557 VOL: 0
;PCODE: $00001558 VOL: 0
;PCODE: $00001559 VOL: 0
; 0001 0991                 break;
;PCODE: $0000155A VOL: 0
; 0001 0992                 case 6:
;PCODE: $0000155B VOL: 0
;PCODE: $0000155C VOL: 0
;PCODE: $0000155D VOL: 0
; 0001 0993                     LEDL=1;
;PCODE: $0000155E VOL: 0
;PCODE: $0000155F VOL: 0
; 0001 0994                     LEDR=1;PORTA.6=1;delay_ms(10);
;PCODE: $00001560 VOL: 0
;PCODE: $00001561 VOL: 0
;PCODE: $00001562 VOL: 0
;PCODE: $00001563 VOL: 0
;PCODE: $00001564 VOL: 0
;PCODE: $00001565 VOL: 0
;PCODE: $00001566 VOL: 0
; 0001 0995                     LEDR=0;PORTA.6=0;delay_ms(30);
;PCODE: $00001567 VOL: 0
;PCODE: $00001568 VOL: 0
;PCODE: $00001569 VOL: 0
;PCODE: $0000156A VOL: 0
;PCODE: $0000156B VOL: 0
;PCODE: $0000156C VOL: 0
;PCODE: $0000156D VOL: 0
; 0001 0996                 break;
;PCODE: $0000156E VOL: 0
; 0001 0997                 case 7:
;PCODE: $0000156F VOL: 0
;PCODE: $00001570 VOL: 0
;PCODE: $00001571 VOL: 0
; 0001 0998                     LEDL=1;
;PCODE: $00001572 VOL: 0
;PCODE: $00001573 VOL: 0
; 0001 0999                     LEDR=1;PORTA.7=1;delay_ms(10);
;PCODE: $00001574 VOL: 0
;PCODE: $00001575 VOL: 0
;PCODE: $00001576 VOL: 0
;PCODE: $00001577 VOL: 0
;PCODE: $00001578 VOL: 0
;PCODE: $00001579 VOL: 0
;PCODE: $0000157A VOL: 0
; 0001 099A                     LEDR=0;PORTA.7=0;delay_ms(30);
;PCODE: $0000157B VOL: 0
;PCODE: $0000157C VOL: 0
;PCODE: $0000157D VOL: 0
;PCODE: $0000157E VOL: 0
;PCODE: $0000157F VOL: 0
;PCODE: $00001580 VOL: 0
;PCODE: $00001581 VOL: 0
; 0001 099B                 break;
;PCODE: $00001582 VOL: 0
; 0001 099C                 case 8:
;PCODE: $00001583 VOL: 0
;PCODE: $00001584 VOL: 0
;PCODE: $00001585 VOL: 0
; 0001 099D                     LEDL=1;
;PCODE: $00001586 VOL: 0
;PCODE: $00001587 VOL: 0
; 0001 099E                     LEDR=1;PORTA.5=1;delay_ms(10);
;PCODE: $00001588 VOL: 0
;PCODE: $00001589 VOL: 0
;PCODE: $0000158A VOL: 0
;PCODE: $0000158B VOL: 0
;PCODE: $0000158C VOL: 0
;PCODE: $0000158D VOL: 0
;PCODE: $0000158E VOL: 0
; 0001 099F                     LEDR=0;PORTA.5=0;delay_ms(30);
;PCODE: $0000158F VOL: 0
;PCODE: $00001590 VOL: 0
;PCODE: $00001591 VOL: 0
;PCODE: $00001592 VOL: 0
;PCODE: $00001593 VOL: 0
;PCODE: $00001594 VOL: 0
;PCODE: $00001595 VOL: 0
; 0001 09A0                 break;
;PCODE: $00001596 VOL: 0
; 0001 09A1                 case 9:
;PCODE: $00001597 VOL: 0
;PCODE: $00001598 VOL: 0
;PCODE: $00001599 VOL: 0
; 0001 09A2                     LEDL=1;LEDR=1;PORTA.4=1;delay_ms(10);
;PCODE: $0000159A VOL: 0
;PCODE: $0000159B VOL: 0
;PCODE: $0000159C VOL: 0
;PCODE: $0000159D VOL: 0
;PCODE: $0000159E VOL: 0
;PCODE: $0000159F VOL: 0
;PCODE: $000015A0 VOL: 0
;PCODE: $000015A1 VOL: 0
;PCODE: $000015A2 VOL: 0
; 0001 09A3                     LEDL=0;LEDR=0;PORTA.4=0;delay_ms(30);
;PCODE: $000015A3 VOL: 0
;PCODE: $000015A4 VOL: 0
;PCODE: $000015A5 VOL: 0
;PCODE: $000015A6 VOL: 0
;PCODE: $000015A7 VOL: 0
;PCODE: $000015A8 VOL: 0
;PCODE: $000015A9 VOL: 0
;PCODE: $000015AA VOL: 0
;PCODE: $000015AB VOL: 0
; 0001 09A4                 break;
;PCODE: $000015AC VOL: 0
; 0001 09A5             };
;PCODE: $000015AD VOL: 0
; 0001 09A6         //LEDL=1;delay_ms(100);
; 0001 09A7         //LEDL=0;delay_ms(100);
; 0001 09A8         //for(i=0;i<id;i++)
; 0001 09A9         //{
; 0001 09AA         //    LEDR=1;delay_ms(150);
; 0001 09AB         //    LEDR=0;delay_ms(150);
; 0001 09AC         //}
; 0001 09AD }
;PCODE: $000015AE VOL: 0
;PCODE: $000015AF VOL: 0
;PCODE: $000015B0 VOL: 0
;//========================================================
;//========================================================
;void testRCservo()
; 0001 09B1 {
;PCODE: $000015B1 VOL: 0
;PCODE: $000015B2 VOL: 0
; 0001 09B2         clear();
;PCODE: $000015B3 VOL: 0
; 0001 09B3         hc(0,10);
;PCODE: $000015B4 VOL: 0
;PCODE: $000015B5 VOL: 0
;PCODE: $000015B6 VOL: 0
;PCODE: $000015B7 VOL: 0
;PCODE: $000015B8 VOL: 0
; 0001 09B4         ws ("RC SERVO");
;PCODE: $000015B9 VOL: 0
;PCODE: $000015BA VOL: 0
;PCODE: $000015BB VOL: 0
;PCODE: $000015BC VOL: 0
; 0001 09B5 // Timer/Counter 0 initialization
; 0001 09B6 // Clock source: System Clock
; 0001 09B7 // Clock value: 7.813 kHz
; 0001 09B8 // Mode: Phase correct PWM top=0xFF
; 0001 09B9 // OC0 output: Non-Inverted PWM
; 0001 09BA TCCR0=0x65;     //15.32Hz
;PCODE: $000015BD VOL: 0
;PCODE: $000015BE VOL: 0
; 0001 09BB TCNT0=0x00;
;PCODE: $000015BF VOL: 0
;PCODE: $000015C0 VOL: 0
; 0001 09BC OCR0=0x00;
;PCODE: $000015C1 VOL: 0
;PCODE: $000015C2 VOL: 0
; 0001 09BD 
; 0001 09BE // Timer/Counter 2 initialization
; 0001 09BF // Clock source: System Clock
; 0001 09C0 // Clock value: 7.813 kHz
; 0001 09C1 // Mode: Phase correct PWM top=0xFF
; 0001 09C2 // OC2 output: Non-Inverted PWM
; 0001 09C3 ASSR=0x00;      //15.32Hz
;PCODE: $000015C3 VOL: 0
;PCODE: $000015C4 VOL: 0
; 0001 09C4 TCCR2=0x67;
;PCODE: $000015C5 VOL: 0
;PCODE: $000015C6 VOL: 0
; 0001 09C5 TCNT2=0x00;
;PCODE: $000015C7 VOL: 0
;PCODE: $000015C8 VOL: 0
; 0001 09C6 OCR2=0x00;
;PCODE: $000015C9 VOL: 0
;PCODE: $000015CA VOL: 0
; 0001 09C7 
; 0001 09C8   while(keyKT!=0)
;PCODE: $000015CB VOL: 0
;PCODE: $000015CC VOL: 0
;PCODE: $000015CD VOL: 0
;PCODE: $000015CE VOL: 0
; 0001 09C9    {
; 0001 09CA    LEDL=1;LEDR=1;//PORTB.3=1;
;PCODE: $000015CF VOL: 0
;PCODE: $000015D0 VOL: 0
;PCODE: $000015D1 VOL: 0
;PCODE: $000015D2 VOL: 0
; 0001 09CB    OCR0=2; OCR2=2;
;PCODE: $000015D3 VOL: 0
;PCODE: $000015D4 VOL: 0
;PCODE: $000015D5 VOL: 0
;PCODE: $000015D6 VOL: 0
; 0001 09CC    delay_ms(2000);
;PCODE: $000015D7 VOL: 0
;PCODE: $000015D8 VOL: 0
;PCODE: $000015D9 VOL: 0
; 0001 09CD 
; 0001 09CE    LEDL=0;LEDR=0;//PORTB.3=1;
;PCODE: $000015DA VOL: 0
;PCODE: $000015DB VOL: 0
;PCODE: $000015DC VOL: 0
;PCODE: $000015DD VOL: 0
; 0001 09CF    OCR0=10; OCR2=10;
;PCODE: $000015DE VOL: 0
;PCODE: $000015DF VOL: 0
;PCODE: $000015E0 VOL: 0
;PCODE: $000015E1 VOL: 0
; 0001 09D0    delay_ms(2000);
;PCODE: $000015E2 VOL: 0
;PCODE: $000015E3 VOL: 0
;PCODE: $000015E4 VOL: 0
; 0001 09D1    }
;PCODE: $000015E5 VOL: 0
;PCODE: $000015E6 VOL: 0
; 0001 09D2 // Timer/Counter 0 initialization
; 0001 09D3 // Clock source: System Clock
; 0001 09D4 // Clock value: Timer 0 Stopped
; 0001 09D5 // Mode: Normal top=0xFF
; 0001 09D6 // OC0 output: Disconnected
; 0001 09D7 TCCR0=0x00;
;PCODE: $000015E7 VOL: 0
;PCODE: $000015E8 VOL: 0
; 0001 09D8 TCNT0=0x00;
;PCODE: $000015E9 VOL: 0
;PCODE: $000015EA VOL: 0
; 0001 09D9 OCR0=0x00;
;PCODE: $000015EB VOL: 0
;PCODE: $000015EC VOL: 0
; 0001 09DA 
; 0001 09DB // Timer/Counter 2 initialization
; 0001 09DC // Clock source: System Clock
; 0001 09DD // Clock value: Timer2 Stopped
; 0001 09DE // Mode: Normal top=0xFF
; 0001 09DF // OC2 output: Disconnected
; 0001 09E0 ASSR =0x00;
;PCODE: $000015ED VOL: 0
;PCODE: $000015EE VOL: 0
; 0001 09E1 TCCR2=0x00;
;PCODE: $000015EF VOL: 0
;PCODE: $000015F0 VOL: 0
; 0001 09E2 TCNT2=0x00;
;PCODE: $000015F1 VOL: 0
;PCODE: $000015F2 VOL: 0
; 0001 09E3 OCR2 =0x00;
;PCODE: $000015F3 VOL: 0
;PCODE: $000015F4 VOL: 0
; 0001 09E4 
; 0001 09E5 }
;PCODE: $000015F5 VOL: 0
;PCODE: $000015F6 VOL: 0

	.DSEG
_0x202B3:
	.BYTE 0x9
;
;void selftest()
; 0001 09E8 {

	.CSEG
;PCODE: $000015F7 VOL: 0
;PCODE: $000015F8 VOL: 0
; 0001 09E9     outlcd1();
;PCODE: $000015F9 VOL: 0
; 0001 09EA     hc(2,0);
;PCODE: $000015FA VOL: 0
;PCODE: $000015FB VOL: 0
;PCODE: $000015FC VOL: 0
;PCODE: $000015FD VOL: 0
;PCODE: $000015FE VOL: 0
; 0001 09EB     ws ("1.ROBOT WALL");delay_ms(200);
;PCODE: $000015FF VOL: 0
;PCODE: $00001600 VOL: 0
;PCODE: $00001601 VOL: 0
;PCODE: $00001602 VOL: 0
;PCODE: $00001603 VOL: 0
;PCODE: $00001604 VOL: 0
;PCODE: $00001605 VOL: 0
; 0001 09EC      while(flagselftest==1)
;PCODE: $00001606 VOL: 0
;PCODE: $00001607 VOL: 0
;PCODE: $00001608 VOL: 0
;PCODE: $00001609 VOL: 0
; 0001 09ED      {
; 0001 09EE         //------------------------------------------------------------------------
; 0001 09EF         //test menu kiem tra  robot
; 0001 09F0          chopledtheoid();
;PCODE: $0000160A VOL: 0
; 0001 09F1           if(keyKT==0)
;PCODE: $0000160B VOL: 0
;PCODE: $0000160C VOL: 0
;PCODE: $0000160D VOL: 0
; 0001 09F2             {
; 0001 09F3                 id++;
;PCODE: $0000160E VOL: 0
;PCODE: $0000160F VOL: 0
;PCODE: $00001610 VOL: 0
; 0001 09F4                 if(id>11){id=1;}
;PCODE: $00001611 VOL: 0
;PCODE: $00001612 VOL: 0
;PCODE: $00001613 VOL: 0
;PCODE: $00001614 VOL: 0
;PCODE: $00001615 VOL: 0
; 0001 09F5                 switch (id)
;PCODE: $00001616 VOL: 0
;PCODE: $00001617 VOL: 0
;PCODE: $00001618 VOL: 0
; 0001 09F6                 {
; 0001 09F7 
; 0001 09F8                 case 1:
;PCODE: $00001619 VOL: 0
;PCODE: $0000161A VOL: 0
; 0001 09F9                     outlcd1();
;PCODE: $0000161B VOL: 0
; 0001 09FA                     hc(2,0);
;PCODE: $0000161C VOL: 0
;PCODE: $0000161D VOL: 0
;PCODE: $0000161E VOL: 0
;PCODE: $0000161F VOL: 0
;PCODE: $00001620 VOL: 0
; 0001 09FB                     ws ("1.ROBOT WALL");delay_ms(200);
;PCODE: $00001621 VOL: 0
;PCODE: $00001622 VOL: 0
;PCODE: $00001623 VOL: 0
;PCODE: $00001624 VOL: 0
;PCODE: $00001625 VOL: 0
;PCODE: $00001626 VOL: 0
;PCODE: $00001627 VOL: 0
; 0001 09FC                 break;
;PCODE: $00001628 VOL: 0
; 0001 09FD                 case 2:
;PCODE: $00001629 VOL: 0
;PCODE: $0000162A VOL: 0
;PCODE: $0000162B VOL: 0
; 0001 09FE                     outlcd1();
;PCODE: $0000162C VOL: 0
; 0001 09FF                     hc(2,0);
;PCODE: $0000162D VOL: 0
;PCODE: $0000162E VOL: 0
;PCODE: $0000162F VOL: 0
;PCODE: $00001630 VOL: 0
;PCODE: $00001631 VOL: 0
; 0001 0A00                     ws ("2.BLUETOOTH ");delay_ms(200);
;PCODE: $00001632 VOL: 0
;PCODE: $00001633 VOL: 0
;PCODE: $00001634 VOL: 0
;PCODE: $00001635 VOL: 0
;PCODE: $00001636 VOL: 0
;PCODE: $00001637 VOL: 0
;PCODE: $00001638 VOL: 0
; 0001 0A01                 break;
;PCODE: $00001639 VOL: 0
; 0001 0A02                 case 3:
;PCODE: $0000163A VOL: 0
;PCODE: $0000163B VOL: 0
;PCODE: $0000163C VOL: 0
; 0001 0A03                     outlcd1();
;PCODE: $0000163D VOL: 0
; 0001 0A04                     hc(2,0);
;PCODE: $0000163E VOL: 0
;PCODE: $0000163F VOL: 0
;PCODE: $00001640 VOL: 0
;PCODE: $00001641 VOL: 0
;PCODE: $00001642 VOL: 0
; 0001 0A05                     ws ("3.WHITE LINE");delay_ms(200);
;PCODE: $00001643 VOL: 0
;PCODE: $00001644 VOL: 0
;PCODE: $00001645 VOL: 0
;PCODE: $00001646 VOL: 0
;PCODE: $00001647 VOL: 0
;PCODE: $00001648 VOL: 0
;PCODE: $00001649 VOL: 0
; 0001 0A06                 break;
;PCODE: $0000164A VOL: 0
; 0001 0A07                 case 4:
;PCODE: $0000164B VOL: 0
;PCODE: $0000164C VOL: 0
;PCODE: $0000164D VOL: 0
; 0001 0A08                     outlcd1();
;PCODE: $0000164E VOL: 0
; 0001 0A09                     hc(2,0);
;PCODE: $0000164F VOL: 0
;PCODE: $00001650 VOL: 0
;PCODE: $00001651 VOL: 0
;PCODE: $00001652 VOL: 0
;PCODE: $00001653 VOL: 0
; 0001 0A0A                     ws ("4.BLACK LINE");delay_ms(200);
;PCODE: $00001654 VOL: 0
;PCODE: $00001655 VOL: 0
;PCODE: $00001656 VOL: 0
;PCODE: $00001657 VOL: 0
;PCODE: $00001658 VOL: 0
;PCODE: $00001659 VOL: 0
;PCODE: $0000165A VOL: 0
; 0001 0A0B                 break;
;PCODE: $0000165B VOL: 0
; 0001 0A0C                 case 5:
;PCODE: $0000165C VOL: 0
;PCODE: $0000165D VOL: 0
;PCODE: $0000165E VOL: 0
; 0001 0A0D                     outlcd1();
;PCODE: $0000165F VOL: 0
; 0001 0A0E                     hc(2,0);
;PCODE: $00001660 VOL: 0
;PCODE: $00001661 VOL: 0
;PCODE: $00001662 VOL: 0
;PCODE: $00001663 VOL: 0
;PCODE: $00001664 VOL: 0
; 0001 0A0F                     ws ("5.TEST MOTOR");delay_ms(200);
;PCODE: $00001665 VOL: 0
;PCODE: $00001666 VOL: 0
;PCODE: $00001667 VOL: 0
;PCODE: $00001668 VOL: 0
;PCODE: $00001669 VOL: 0
;PCODE: $0000166A VOL: 0
;PCODE: $0000166B VOL: 0
; 0001 0A10                 break;
;PCODE: $0000166C VOL: 0
; 0001 0A11                 case 6:
;PCODE: $0000166D VOL: 0
;PCODE: $0000166E VOL: 0
;PCODE: $0000166F VOL: 0
; 0001 0A12                     outlcd1();
;PCODE: $00001670 VOL: 0
; 0001 0A13                     hc(2,0);
;PCODE: $00001671 VOL: 0
;PCODE: $00001672 VOL: 0
;PCODE: $00001673 VOL: 0
;PCODE: $00001674 VOL: 0
;PCODE: $00001675 VOL: 0
; 0001 0A14                     ws ("6.TEST IR   ");delay_ms(200);
;PCODE: $00001676 VOL: 0
;PCODE: $00001677 VOL: 0
;PCODE: $00001678 VOL: 0
;PCODE: $00001679 VOL: 0
;PCODE: $0000167A VOL: 0
;PCODE: $0000167B VOL: 0
;PCODE: $0000167C VOL: 0
; 0001 0A15                 break;
;PCODE: $0000167D VOL: 0
; 0001 0A16                 case 7:
;PCODE: $0000167E VOL: 0
;PCODE: $0000167F VOL: 0
;PCODE: $00001680 VOL: 0
; 0001 0A17                     outlcd1();
;PCODE: $00001681 VOL: 0
; 0001 0A18                     hc(2,0);
;PCODE: $00001682 VOL: 0
;PCODE: $00001683 VOL: 0
;PCODE: $00001684 VOL: 0
;PCODE: $00001685 VOL: 0
;PCODE: $00001686 VOL: 0
; 0001 0A19                     ws ("7.TEST RF   ");delay_ms(200);
;PCODE: $00001687 VOL: 0
;PCODE: $00001688 VOL: 0
;PCODE: $00001689 VOL: 0
;PCODE: $0000168A VOL: 0
;PCODE: $0000168B VOL: 0
;PCODE: $0000168C VOL: 0
;PCODE: $0000168D VOL: 0
; 0001 0A1A                 break;
;PCODE: $0000168E VOL: 0
; 0001 0A1B                 case 8:
;PCODE: $0000168F VOL: 0
;PCODE: $00001690 VOL: 0
;PCODE: $00001691 VOL: 0
; 0001 0A1C                     outlcd1();
;PCODE: $00001692 VOL: 0
; 0001 0A1D                     hc(2,0);
;PCODE: $00001693 VOL: 0
;PCODE: $00001694 VOL: 0
;PCODE: $00001695 VOL: 0
;PCODE: $00001696 VOL: 0
;PCODE: $00001697 VOL: 0
; 0001 0A1E                     ws ("8.TEST UART ");delay_ms(200);
;PCODE: $00001698 VOL: 0
;PCODE: $00001699 VOL: 0
;PCODE: $0000169A VOL: 0
;PCODE: $0000169B VOL: 0
;PCODE: $0000169C VOL: 0
;PCODE: $0000169D VOL: 0
;PCODE: $0000169E VOL: 0
; 0001 0A1F                 break;
;PCODE: $0000169F VOL: 0
; 0001 0A20                 case 9:
;PCODE: $000016A0 VOL: 0
;PCODE: $000016A1 VOL: 0
;PCODE: $000016A2 VOL: 0
; 0001 0A21                     outlcd1();
;PCODE: $000016A3 VOL: 0
; 0001 0A22                     hc(2,0);
;PCODE: $000016A4 VOL: 0
;PCODE: $000016A5 VOL: 0
;PCODE: $000016A6 VOL: 0
;PCODE: $000016A7 VOL: 0
;PCODE: $000016A8 VOL: 0
; 0001 0A23                     ws ("9.RC SERVO ");delay_ms(200);
;PCODE: $000016A9 VOL: 0
;PCODE: $000016AA VOL: 0
;PCODE: $000016AB VOL: 0
;PCODE: $000016AC VOL: 0
;PCODE: $000016AD VOL: 0
;PCODE: $000016AE VOL: 0
;PCODE: $000016AF VOL: 0
; 0001 0A24                 break;
;PCODE: $000016B0 VOL: 0
; 0001 0A25                 case 10:
;PCODE: $000016B1 VOL: 0
;PCODE: $000016B2 VOL: 0
;PCODE: $000016B3 VOL: 0
; 0001 0A26                     outlcd1();
;PCODE: $000016B4 VOL: 0
; 0001 0A27                     hc(2,0);
;PCODE: $000016B5 VOL: 0
;PCODE: $000016B6 VOL: 0
;PCODE: $000016B7 VOL: 0
;PCODE: $000016B8 VOL: 0
;PCODE: $000016B9 VOL: 0
; 0001 0A28                     ws ("10.UPDATE RB");delay_ms(200);
;PCODE: $000016BA VOL: 0
;PCODE: $000016BB VOL: 0
;PCODE: $000016BC VOL: 0
;PCODE: $000016BD VOL: 0
;PCODE: $000016BE VOL: 0
;PCODE: $000016BF VOL: 0
;PCODE: $000016C0 VOL: 0
; 0001 0A29                 break;
;PCODE: $000016C1 VOL: 0
; 0001 0A2A                 };
;PCODE: $000016C2 VOL: 0
; 0001 0A2B             }
; 0001 0A2C          if(keyKP==0)
;PCODE: $000016C3 VOL: 0
;PCODE: $000016C4 VOL: 0
;PCODE: $000016C5 VOL: 0
;PCODE: $000016C6 VOL: 0
; 0001 0A2D             {
; 0001 0A2E                 switch (id)
;PCODE: $000016C7 VOL: 0
;PCODE: $000016C8 VOL: 0
; 0001 0A2F                 {
; 0001 0A30                 case 1:
;PCODE: $000016C9 VOL: 0
;PCODE: $000016CA VOL: 0
; 0001 0A31                     robotwall() ;
;PCODE: $000016CB VOL: 0
; 0001 0A32                 break;
;PCODE: $000016CC VOL: 0
; 0001 0A33                 case 2:
;PCODE: $000016CD VOL: 0
;PCODE: $000016CE VOL: 0
;PCODE: $000016CF VOL: 0
; 0001 0A34                     bluetooth() ;
;PCODE: $000016D0 VOL: 0
; 0001 0A35                 break;
;PCODE: $000016D1 VOL: 0
; 0001 0A36                 case 3:
;PCODE: $000016D2 VOL: 0
;PCODE: $000016D3 VOL: 0
;PCODE: $000016D4 VOL: 0
; 0001 0A37                     robotwhiteline() ;
;PCODE: $000016D5 VOL: 0
; 0001 0A38                 break;
;PCODE: $000016D6 VOL: 0
; 0001 0A39                 case 4:
;PCODE: $000016D7 VOL: 0
;PCODE: $000016D8 VOL: 0
;PCODE: $000016D9 VOL: 0
; 0001 0A3A                     robotblackline() ;
;PCODE: $000016DA VOL: 0
; 0001 0A3B                 break;
;PCODE: $000016DB VOL: 0
; 0001 0A3C                 case 5:
;PCODE: $000016DC VOL: 0
;PCODE: $000016DD VOL: 0
;PCODE: $000016DE VOL: 0
; 0001 0A3D                     testmotor() ;
;PCODE: $000016DF VOL: 0
; 0001 0A3E                 break;
;PCODE: $000016E0 VOL: 0
; 0001 0A3F                 case 6:
;PCODE: $000016E1 VOL: 0
;PCODE: $000016E2 VOL: 0
;PCODE: $000016E3 VOL: 0
; 0001 0A40                     testir()    ;
;PCODE: $000016E4 VOL: 0
; 0001 0A41                 break;
;PCODE: $000016E5 VOL: 0
; 0001 0A42                 case 7:
;PCODE: $000016E6 VOL: 0
;PCODE: $000016E7 VOL: 0
;PCODE: $000016E8 VOL: 0
; 0001 0A43                     testrf()    ;
;PCODE: $000016E9 VOL: 0
; 0001 0A44                 break;
;PCODE: $000016EA VOL: 0
; 0001 0A45                 case 8:
;PCODE: $000016EB VOL: 0
;PCODE: $000016EC VOL: 0
;PCODE: $000016ED VOL: 0
; 0001 0A46                     testuart()  ;
;PCODE: $000016EE VOL: 0
; 0001 0A47                 break;
;PCODE: $000016EF VOL: 0
; 0001 0A48                 case 9:
;PCODE: $000016F0 VOL: 0
;PCODE: $000016F1 VOL: 0
;PCODE: $000016F2 VOL: 0
; 0001 0A49                     testRCservo()  ;
;PCODE: $000016F3 VOL: 0
; 0001 0A4A                 break;
;PCODE: $000016F4 VOL: 0
; 0001 0A4B                 case 10:
;PCODE: $000016F5 VOL: 0
;PCODE: $000016F6 VOL: 0
;PCODE: $000016F7 VOL: 0
; 0001 0A4C                     testposition() ;
;PCODE: $000016F8 VOL: 0
; 0001 0A4D                 break;
;PCODE: $000016F9 VOL: 0
; 0001 0A4E 
; 0001 0A4F                 };
;PCODE: $000016FA VOL: 0
; 0001 0A50 
; 0001 0A51             }
; 0001 0A52 
; 0001 0A53 
; 0001 0A54      }//end while(1)
;PCODE: $000016FB VOL: 0
;PCODE: $000016FC VOL: 0
;PCODE: $000016FD VOL: 0
; 0001 0A55 }
;PCODE: $000016FE VOL: 0
;PCODE: $000016FF VOL: 0

	.DSEG
_0x202BF:
	.BYTE 0x8E
;#ifdef DEBUG_EN
;  char debugMsgBuff[32];
;#endif
;void debug_out(char *pMsg,unsigned char len)
; 0001 0A5A {

	.CSEG
;PCODE: $00001700 VOL: 0
;PCODE: $00001701 VOL: 0
; 0001 0A5B     #ifdef DEBUG_EN
; 0001 0A5C     char i=0;
; 0001 0A5D     for(i=0;i<len;i++)
; 0001 0A5E     {
; 0001 0A5F         putchar(*pMsg++);
; 0001 0A60         delay_us(300);
; 0001 0A61     }
; 0001 0A62     #endif
; 0001 0A63     return ;
;	*pMsg -> Y+1
;	len -> Y+0
;PCODE: $00001702 VOL: 0
;PCODE: $00001703 VOL: 0
; 0001 0A64 }
;PCODE: $00001704 VOL: 0
;//[NGUYEN]Set bit and clear bit
;#define setBit(p,n) ((p) |= (1 << (n)))
;#define clrBit(p,n) ((p) &= (~(1) << (n)))
;
;//[NGUYEN] Update position. 64ms/frame
;//call setUpdateRate() in MAIN to init.
;char timer2Count=0;
;char posUpdateFlag=0;
;#define distThresh 100
;
;IntBall oldPos;
;void initPos()
; 0001 0A71 {
;PCODE: $00001705 VOL: 0
;PCODE: $00001706 VOL: 0
; 0001 0A72     oldPos.x = rbctrlHomeX;
;PCODE: $00001707 VOL: 0
;PCODE: $00001708 VOL: 0
;PCODE: $00001709 VOL: 0
;PCODE: $0000170A VOL: 0
; 0001 0A73     oldPos.y = rbctrlHomeY;
;PCODE: $0000170B VOL: 0
;PCODE: $0000170C VOL: 0
;PCODE: $0000170D VOL: 0
;PCODE: $0000170E VOL: 0
;PCODE: $0000170F VOL: 0
; 0001 0A74 }
;PCODE: $00001710 VOL: 0
;PCODE: $00001711 VOL: 0
;
;IntBall estimatePos(IntBall curPos)
; 0001 0A77 {
;PCODE: $00001712 VOL: 0
;PCODE: $00001713 VOL: 0
; 0001 0A78 	return curPos;
;PCODE: $00001714 VOL: 0
;	curPos -> Y+4
;PCODE: $00001715 VOL: 0
;PCODE: $00001716 VOL: 0
;PCODE: $00001717 VOL: 0
;PCODE: $00001718 VOL: 0
;PCODE: $00001719 VOL: 0
;PCODE: $0000171A VOL: 0
;PCODE: $0000171B VOL: 0
;PCODE: $0000171C VOL: 0
;PCODE: $0000171D VOL: 0
; 0001 0A79 }
;PCODE: $0000171E VOL: 0
;
;void updatePosInit()
; 0001 0A7C {
;PCODE: $0000171F VOL: 0
;PCODE: $00001720 VOL: 0
; 0001 0A7D 	// Timer/Counter 2 initialization
; 0001 0A7E 	// Clock source: System Clock
; 0001 0A7F 	// Clock value: 7.813 kHz
; 0001 0A80 	// Mode: CTC top=OCR2
; 0001 0A81 	// OC2 output: Disconnected
; 0001 0A82 	ASSR=0x00;
;PCODE: $00001721 VOL: 0
;PCODE: $00001722 VOL: 0
; 0001 0A83 	TCCR2=0x0F;
;PCODE: $00001723 VOL: 0
;PCODE: $00001724 VOL: 0
; 0001 0A84 	TCNT2=0x12;
;PCODE: $00001725 VOL: 0
;PCODE: $00001726 VOL: 0
; 0001 0A85 	OCR2=254;
;PCODE: $00001727 VOL: 0
;PCODE: $00001728 VOL: 0
; 0001 0A86 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 0A87 	setBit(TIMSK,OCIE2);
;PCODE: $00001729 VOL: 0
;PCODE: $0000172A VOL: 0
;PCODE: $0000172B VOL: 0
; 0001 0A88 }
;PCODE: $0000172C VOL: 0
;PCODE: $0000172D VOL: 0
;//[NGUYEN]
;
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0001 0A8C {
;PCODE: $0000172E VOL: 0
;PCODE: $0000172F VOL: 0
; 0001 0A8D     unsigned char i=0;
; 0001 0A8E     LEDRtoggle();
;PCODE: $00001730 VOL: 0
;	i -> R17
;PCODE: $00001731 VOL: 0
;PCODE: $00001732 VOL: 0
;PCODE: $00001733 VOL: 0
; 0001 0A8F     if (timer2Count++<2)
;PCODE: $00001734 VOL: 0
;PCODE: $00001735 VOL: 0
;PCODE: $00001736 VOL: 0
;PCODE: $00001737 VOL: 0
;PCODE: $00001738 VOL: 0
;PCODE: $00001739 VOL: 0
; 0001 0A90          return;
;PCODE: $0000173A VOL: 0
;PCODE: $0000173B VOL: 0
;PCODE: $0000173C VOL: 0
; 0001 0A91     else
;PCODE: $0000173D VOL: 0
; 0001 0A92     {
; 0001 0A93         timer2Count=0;
;PCODE: $0000173E VOL: 0
;PCODE: $0000173F VOL: 0
; 0001 0A94     }
;PCODE: $00001740 VOL: 0
; 0001 0A95 
; 0001 0A96 
; 0001 0A97         if(nRF24L01_RxPacket(RxBuf)==1)         // Neu nhan duoc du lieu
;PCODE: $00001741 VOL: 0
;PCODE: $00001742 VOL: 0
;PCODE: $00001743 VOL: 0
;PCODE: $00001744 VOL: 0
;PCODE: $00001745 VOL: 0
; 0001 0A98         {
; 0001 0A99          IntRobot intRb;
; 0001 0A9A          for( i=0;i<28;i++)
;PCODE: $00001746 VOL: 0
;	intRb -> Y+0
;PCODE: $00001747 VOL: 0
;PCODE: $00001748 VOL: 0
;PCODE: $00001749 VOL: 0
;PCODE: $0000174A VOL: 0
;PCODE: $0000174B VOL: 0
;PCODE: $0000174C VOL: 0
;PCODE: $0000174D VOL: 0
;PCODE: $0000174E VOL: 0
;PCODE: $0000174F VOL: 0
; 0001 0A9B          {
; 0001 0A9C              *(uint8_t *) ((uint8_t *)&rb + i)=RxBuf[i];
;PCODE: $00001750 VOL: 0
;PCODE: $00001751 VOL: 0
;PCODE: $00001752 VOL: 0
;PCODE: $00001753 VOL: 0
;PCODE: $00001754 VOL: 0
;PCODE: $00001755 VOL: 0
;PCODE: $00001756 VOL: 0
;PCODE: $00001757 VOL: 0
; 0001 0A9D          }
;PCODE: $00001758 VOL: 0
;PCODE: $00001759 VOL: 0
;PCODE: $0000175A VOL: 0
;PCODE: $0000175B VOL: 0
;PCODE: $0000175C VOL: 0
; 0001 0A9E 
; 0001 0A9F 
; 0001 0AA0          idRobot = fmod(rb.id,10); // doc id
;PCODE: $0000175D VOL: 0
;PCODE: $0000175E VOL: 0
;PCODE: $0000175F VOL: 0
;PCODE: $00001760 VOL: 0
;PCODE: $00001761 VOL: 0
;PCODE: $00001762 VOL: 0
;PCODE: $00001763 VOL: 0
; 0001 0AA1          cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
;PCODE: $00001764 VOL: 0
;PCODE: $00001765 VOL: 0
;PCODE: $00001766 VOL: 0
;PCODE: $00001767 VOL: 0
;PCODE: $00001768 VOL: 0
;PCODE: $00001769 VOL: 0
; 0001 0AA2 
; 0001 0AA3          intRb = convertRobot2IntRobot(rb);
;PCODE: $0000176A VOL: 0
;PCODE: $0000176B VOL: 0
;PCODE: $0000176C VOL: 0
;PCODE: $0000176D VOL: 0
;PCODE: $0000176E VOL: 0
;PCODE: $0000176F VOL: 0
; 0001 0AA4 
; 0001 0AA5          switch (idRobot)
;PCODE: $00001770 VOL: 0
; 0001 0AA6          {
; 0001 0AA7               case 1:
;PCODE: $00001771 VOL: 0
;PCODE: $00001772 VOL: 0
; 0001 0AA8                 robot11=intRb;
;PCODE: $00001773 VOL: 0
;PCODE: $00001774 VOL: 0
;PCODE: $00001775 VOL: 0
; 0001 0AA9                 break;
;PCODE: $00001776 VOL: 0
; 0001 0AAA               case 2:
;PCODE: $00001777 VOL: 0
;PCODE: $00001778 VOL: 0
;PCODE: $00001779 VOL: 0
; 0001 0AAB                 robot12=intRb;
;PCODE: $0000177A VOL: 0
;PCODE: $0000177B VOL: 0
;PCODE: $0000177C VOL: 0
; 0001 0AAC                 break;
;PCODE: $0000177D VOL: 0
; 0001 0AAD               case 3:
;PCODE: $0000177E VOL: 0
;PCODE: $0000177F VOL: 0
;PCODE: $00001780 VOL: 0
; 0001 0AAE                 robot13=intRb;
;PCODE: $00001781 VOL: 0
;PCODE: $00001782 VOL: 0
;PCODE: $00001783 VOL: 0
; 0001 0AAF                 break;
;PCODE: $00001784 VOL: 0
; 0001 0AB0               case 4:
;PCODE: $00001785 VOL: 0
;PCODE: $00001786 VOL: 0
;PCODE: $00001787 VOL: 0
; 0001 0AB1                 robot21=intRb;
;PCODE: $00001788 VOL: 0
;PCODE: $00001789 VOL: 0
;PCODE: $0000178A VOL: 0
; 0001 0AB2                 break;
;PCODE: $0000178B VOL: 0
; 0001 0AB3               case 5:
;PCODE: $0000178C VOL: 0
;PCODE: $0000178D VOL: 0
;PCODE: $0000178E VOL: 0
; 0001 0AB4                 robot22=intRb;
;PCODE: $0000178F VOL: 0
;PCODE: $00001790 VOL: 0
;PCODE: $00001791 VOL: 0
; 0001 0AB5                 break;
;PCODE: $00001792 VOL: 0
; 0001 0AB6               case 6:
;PCODE: $00001793 VOL: 0
;PCODE: $00001794 VOL: 0
;PCODE: $00001795 VOL: 0
; 0001 0AB7                 robot23=intRb;
;PCODE: $00001796 VOL: 0
;PCODE: $00001797 VOL: 0
;PCODE: $00001798 VOL: 0
; 0001 0AB8                 break;
;PCODE: $00001799 VOL: 0
; 0001 0AB9 
; 0001 0ABA          }
;PCODE: $0000179A VOL: 0
; 0001 0ABB          if(idRobot==ROBOT_ID)
;PCODE: $0000179B VOL: 0
;PCODE: $0000179C VOL: 0
;PCODE: $0000179D VOL: 0
; 0001 0ABC          {
; 0001 0ABD              LEDL=!LEDL;
;PCODE: $0000179E VOL: 0
;PCODE: $0000179F VOL: 0
;PCODE: $000017A0 VOL: 0
;PCODE: $000017A1 VOL: 0
;PCODE: $000017A2 VOL: 0
;PCODE: $000017A3 VOL: 0
;PCODE: $000017A4 VOL: 0
;PCODE: $000017A5 VOL: 0
;PCODE: $000017A6 VOL: 0
;PCODE: $000017A7 VOL: 0
; 0001 0ABE              cmdCtrlRobot = (int)rb.id/10; // doc ma lenh
;PCODE: $000017A8 VOL: 0
;PCODE: $000017A9 VOL: 0
;PCODE: $000017AA VOL: 0
;PCODE: $000017AB VOL: 0
;PCODE: $000017AC VOL: 0
;PCODE: $000017AD VOL: 0
; 0001 0ABF              posUpdateFlag=1;
;PCODE: $000017AE VOL: 0
;PCODE: $000017AF VOL: 0
; 0001 0AC0 			 robotctrl=intRb;
;PCODE: $000017B0 VOL: 0
;PCODE: $000017B1 VOL: 0
;PCODE: $000017B2 VOL: 0
; 0001 0AC1             if((robotctrl.x - oldPos.x >= distThresh)|| (robotctrl.y - oldPos.y >= distThresh))
;PCODE: $000017B3 VOL: 0
;PCODE: $000017B4 VOL: 0
;PCODE: $000017B5 VOL: 0
;PCODE: $000017B6 VOL: 0
;PCODE: $000017B7 VOL: 0
;PCODE: $000017B8 VOL: 0
;PCODE: $000017B9 VOL: 0
;PCODE: $000017BA VOL: 0
;PCODE: $000017BB VOL: 0
;PCODE: $000017BC VOL: 0
;PCODE: $000017BD VOL: 0
;PCODE: $000017BE VOL: 0
;PCODE: $000017BF VOL: 0
;PCODE: $000017C0 VOL: 0
;PCODE: $000017C1 VOL: 0
; 0001 0AC2 			 {
; 0001 0AC3 				IntBall estPos;
; 0001 0AC4 				IntBall curPos;
; 0001 0AC5 				curPos.x = robotctrl.x;
;PCODE: $000017C2 VOL: 0
;	intRb -> Y+8
;	estPos -> Y+4
;	curPos -> Y+0
;PCODE: $000017C3 VOL: 0
;PCODE: $000017C4 VOL: 0
;PCODE: $000017C5 VOL: 0
; 0001 0AC6 				curPos.y = robotctrl.y;
;PCODE: $000017C6 VOL: 0
;PCODE: $000017C7 VOL: 0
;PCODE: $000017C8 VOL: 0
; 0001 0AC7 				estPos = estimatePos(curPos);
;PCODE: $000017C9 VOL: 0
;PCODE: $000017CA VOL: 0
;PCODE: $000017CB VOL: 0
;PCODE: $000017CC VOL: 0
;PCODE: $000017CD VOL: 0
;PCODE: $000017CE VOL: 0
; 0001 0AC8 				robotctrl.x = estPos.x;
;PCODE: $000017CF VOL: 0
;PCODE: $000017D0 VOL: 0
;PCODE: $000017D1 VOL: 0
; 0001 0AC9 				robotctrl.y = estPos.y;
;PCODE: $000017D2 VOL: 0
;PCODE: $000017D3 VOL: 0
;PCODE: $000017D4 VOL: 0
; 0001 0ACA 
; 0001 0ACB 			 }
;PCODE: $000017D5 VOL: 0
; 0001 0ACC 			 oldPos.x = robotctrl.x;
;PCODE: $000017D6 VOL: 0
;PCODE: $000017D7 VOL: 0
;PCODE: $000017D8 VOL: 0
;PCODE: $000017D9 VOL: 0
; 0001 0ACD 			 oldPos.y = robotctrl.y;
;PCODE: $000017DA VOL: 0
;PCODE: $000017DB VOL: 0
;PCODE: $000017DC VOL: 0
;PCODE: $000017DD VOL: 0
; 0001 0ACE 		}
; 0001 0ACF 
; 0001 0AD0      }
;PCODE: $000017DE VOL: 0
;PCODE: $000017DF VOL: 0
; 0001 0AD1 }
;PCODE: $000017E0 VOL: 0
;PCODE: $000017E1 VOL: 0
;PCODE: $000017E2 VOL: 0
;PCODE: $000017E3 VOL: 0
;PCODE: $000017E4 VOL: 0
;unsigned char readposition()
; 0001 0AD3 {
;PCODE: $000017E5 VOL: 0
;PCODE: $000017E6 VOL: 0
; 0001 0AD4     return;
;PCODE: $000017E7 VOL: 0
;PCODE: $000017E8 VOL: 0
; 0001 0AD5 }
;PCODE: $000017E9 VOL: 0
;
;//========================================================
;//          HAM MAIN
;//========================================================
;void main(void)
; 0001 0ADB {
;PCODE: $000017EA VOL: 0
; 0001 0ADC     // For Testing purpose only, creating a fake robot
; 0001 0ADD     IntRobot rbFake;
; 0001 0ADE     unsigned char flagreadrb;
; 0001 0ADF     unsigned int adctest;
; 0001 0AE0     unsigned char i;
; 0001 0AE1     float PIdl,PIdr,pl,il,pr,ir,ur,ul;
; 0001 0AE2 
; 0001 0AE3     // Testing robot declaration
; 0001 0AE4     rbFake.id = 4;
;PCODE: $000017EB VOL: 0
;	rbFake -> Y+32
;	flagreadrb -> R17
;	adctest -> R18,R19
;	i -> R16
;	PIdl -> Y+28
;	PIdr -> Y+24
;	pl -> Y+20
;	il -> Y+16
;	pr -> Y+12
;	ir -> Y+8
;	ur -> Y+4
;	ul -> Y+0
;PCODE: $000017EC VOL: 0
;PCODE: $000017ED VOL: 0
; 0001 0AE5     rbFake.x = -42;
;PCODE: $000017EE VOL: 0
;PCODE: $000017EF VOL: 0
; 0001 0AE6     rbFake.y = 48;
;PCODE: $000017F0 VOL: 0
;PCODE: $000017F1 VOL: 0
; 0001 0AE7     rbFake.ox = -35;
;PCODE: $000017F2 VOL: 0
;PCODE: $000017F3 VOL: 0
; 0001 0AE8     rbFake.oy = -50;
;PCODE: $000017F4 VOL: 0
;PCODE: $000017F5 VOL: 0
; 0001 0AE9     rbFake.ball.x = 0;
;PCODE: $000017F6 VOL: 0
;PCODE: $000017F7 VOL: 0
; 0001 0AEA     rbFake.ball.y = 0;
;PCODE: $000017F8 VOL: 0
;PCODE: $000017F9 VOL: 0
; 0001 0AEB 
; 0001 0AEC     //------------- khai  bao chuc nang in out cua cac port
; 0001 0AED     DDRA    = 0xFF;
;PCODE: $000017FA VOL: 0
;PCODE: $000017FB VOL: 0
; 0001 0AEE     DDRB    = 0b10111111;
;PCODE: $000017FC VOL: 0
;PCODE: $000017FD VOL: 0
; 0001 0AEF     DDRC    = 0b11111100;
;PCODE: $000017FE VOL: 0
;PCODE: $000017FF VOL: 0
; 0001 0AF0     DDRD    = 0b11110010;
;PCODE: $00001800 VOL: 0
;PCODE: $00001801 VOL: 0
; 0001 0AF1 
; 0001 0AF2     //------------- khai  bao chuc nang cua adc
; 0001 0AF3     // ADC initialization
; 0001 0AF4     // ADC Clock frequency: 1000.000 kHz
; 0001 0AF5     // ADC Voltage Reference: AVCC pin
; 0001 0AF6     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00001802 VOL: 0
;PCODE: $00001803 VOL: 0
; 0001 0AF7     ADCSRA=0x83;
;PCODE: $00001804 VOL: 0
;PCODE: $00001805 VOL: 0
; 0001 0AF8     //---------------------------------------------------------------------
; 0001 0AF9     //------------- khai  bao chuc nang cua bo timer dung lam PWM cho 2 dong co
; 0001 0AFA     // Timer/Counter 1 initialization
; 0001 0AFB     // Clock source: System Clock
; 0001 0AFC     // Clock value: 1000.000 kHz   //PWM 2KHz
; 0001 0AFD     // Mode: Ph. correct PWM top=0x00FF
; 0001 0AFE     // OC1A output: Non-Inv.
; 0001 0AFF     // OC1B output: Non-Inv.
; 0001 0B00     // Noise Canceler: Off
; 0001 0B01     // Input Capture on Falling Edge
; 0001 0B02     // Timer1 Overflow Interrupt: On  // voi period =1/2khz= 0.5ms
; 0001 0B03     // Input Capture Interrupt: Off
; 0001 0B04     // Compare A Match Interrupt: Off
; 0001 0B05     // Compare B Match Interrupt: Off
; 0001 0B06     TCCR1A=0xA1;
;PCODE: $00001806 VOL: 0
;PCODE: $00001807 VOL: 0
; 0001 0B07     TCCR1B=0x02;
;PCODE: $00001808 VOL: 0
;PCODE: $00001809 VOL: 0
; 0001 0B08     TCNT1H=0x00;
;PCODE: $0000180A VOL: 0
;PCODE: $0000180B VOL: 0
; 0001 0B09     TCNT1L=0x00;
;PCODE: $0000180C VOL: 0
;PCODE: $0000180D VOL: 0
; 0001 0B0A     ICR1H=0x00;
;PCODE: $0000180E VOL: 0
;PCODE: $0000180F VOL: 0
; 0001 0B0B     ICR1L=0x00;
;PCODE: $00001810 VOL: 0
;PCODE: $00001811 VOL: 0
; 0001 0B0C     OCR1AH=0x00;
;PCODE: $00001812 VOL: 0
;PCODE: $00001813 VOL: 0
; 0001 0B0D     OCR1AL=0x00;
;PCODE: $00001814 VOL: 0
;PCODE: $00001815 VOL: 0
; 0001 0B0E     OCR1BH=0x00;
;PCODE: $00001816 VOL: 0
;PCODE: $00001817 VOL: 0
; 0001 0B0F     OCR1BL=0x00;
;PCODE: $00001818 VOL: 0
;PCODE: $00001819 VOL: 0
; 0001 0B10     // Timer(s)/Counter(s) Interrupt(s) initialization  timer0
; 0001 0B11     TIMSK=0x04;
;PCODE: $0000181A VOL: 0
;PCODE: $0000181B VOL: 0
; 0001 0B12 
; 0001 0B13     //OCR1A=0-255; MOTOR LEFT
; 0001 0B14     //OCR1B=0-255; MOTOR RIGHT
; 0001 0B15     for(i=0;i<1;i++)
;PCODE: $0000181C VOL: 0
;PCODE: $0000181D VOL: 0
;PCODE: $0000181E VOL: 0
;PCODE: $0000181F VOL: 0
;PCODE: $00001820 VOL: 0
;PCODE: $00001821 VOL: 0
;PCODE: $00001822 VOL: 0
;PCODE: $00001823 VOL: 0
;PCODE: $00001824 VOL: 0
; 0001 0B16     {
; 0001 0B17         LEDL=1; LEDR=1;
;PCODE: $00001825 VOL: 0
;PCODE: $00001826 VOL: 0
;PCODE: $00001827 VOL: 0
;PCODE: $00001828 VOL: 0
; 0001 0B18         delay_ms(100);
;PCODE: $00001829 VOL: 0
;PCODE: $0000182A VOL: 0
;PCODE: $0000182B VOL: 0
; 0001 0B19         LEDL=0; LEDR=0;
;PCODE: $0000182C VOL: 0
;PCODE: $0000182D VOL: 0
;PCODE: $0000182E VOL: 0
;PCODE: $0000182F VOL: 0
; 0001 0B1A         delay_ms(100);
;PCODE: $00001830 VOL: 0
;PCODE: $00001831 VOL: 0
;PCODE: $00001832 VOL: 0
; 0001 0B1B     }
;PCODE: $00001833 VOL: 0
;PCODE: $00001834 VOL: 0
;PCODE: $00001835 VOL: 0
;PCODE: $00001836 VOL: 0
;PCODE: $00001837 VOL: 0
; 0001 0B1C 
; 0001 0B1D     //khai  bao su dung cua glcd
; 0001 0B1E     SPIinit();
;PCODE: $00001838 VOL: 0
; 0001 0B1F     LCDinit();
;PCODE: $00001839 VOL: 0
; 0001 0B20 
; 0001 0B21     // khai  bao su dung rf dung de cap nhat gia tri vi tri cua robot
; 0001 0B22     init_NRF24L01();
;PCODE: $0000183A VOL: 0
; 0001 0B23     SetRX_Mode();  // chon kenh tan so phat, va dia chi phat trong file nRF14l01.c
;PCODE: $0000183B VOL: 0
; 0001 0B24     // khai bao su dung encoder
; 0001 0B25     initencoder(); //lay 2 canh len  xuong
;PCODE: $0000183C VOL: 0
; 0001 0B26     // khai bao su dung uart
; 0001 0B27     inituart();
;PCODE: $0000183D VOL: 0
; 0001 0B28 
; 0001 0B29     // Set interrupt timer 2
; 0001 0B2A     updatePosInit();
;PCODE: $0000183E VOL: 0
; 0001 0B2B     // Set for oldPos variable
; 0001 0B2C     initPos();
;PCODE: $0000183F VOL: 0
; 0001 0B2D 
; 0001 0B2E     #asm("sei")
;PCODE: $00001840 VOL: 0
	sei
;PCODE: $00001841 VOL: 0
; 0001 0B2F 
; 0001 0B30     //man hinh khoi dong robokit
; 0001 0B31     hc(0,10);
;PCODE: $00001842 VOL: 0
;PCODE: $00001843 VOL: 0
;PCODE: $00001844 VOL: 0
;PCODE: $00001845 VOL: 0
;PCODE: $00001846 VOL: 0
; 0001 0B32     ws("<AKBOTKIT>");
;PCODE: $00001847 VOL: 0
;PCODE: $00001848 VOL: 0
;PCODE: $00001849 VOL: 0
;PCODE: $0000184A VOL: 0
; 0001 0B33     hc(1,0);
;PCODE: $0000184B VOL: 0
;PCODE: $0000184C VOL: 0
;PCODE: $0000184D VOL: 0
;PCODE: $0000184E VOL: 0
;PCODE: $0000184F VOL: 0
; 0001 0B34     ws("************");
;PCODE: $00001850 VOL: 0
;PCODE: $00001851 VOL: 0
;PCODE: $00001852 VOL: 0
;PCODE: $00001853 VOL: 0
; 0001 0B35 
; 0001 0B36     //robotwhiteline();
; 0001 0B37     //robotblackline();
; 0001 0B38     //kiem tra neu nhan va giu nut trai se vao chuong trinh selftest (kiem tra hoat dong cua robot)
; 0001 0B39     while (keyKT==0)
;PCODE: $00001854 VOL: 0
;PCODE: $00001855 VOL: 0
;PCODE: $00001856 VOL: 0
;PCODE: $00001857 VOL: 0
; 0001 0B3A     {
; 0001 0B3B       cntselftest++;
;PCODE: $00001858 VOL: 0
;PCODE: $00001859 VOL: 0
;PCODE: $0000185A VOL: 0
;PCODE: $0000185B VOL: 0
; 0001 0B3C       if(cntselftest>10)
;PCODE: $0000185C VOL: 0
;PCODE: $0000185D VOL: 0
;PCODE: $0000185E VOL: 0
; 0001 0B3D       {
; 0001 0B3E            while (keyKT==0);//CHO NHA NUT AN
;PCODE: $0000185F VOL: 0
;PCODE: $00001860 VOL: 0
;PCODE: $00001861 VOL: 0
;PCODE: $00001862 VOL: 0
;PCODE: $00001863 VOL: 0
;PCODE: $00001864 VOL: 0
; 0001 0B3F            cntselftest=0;
;PCODE: $00001865 VOL: 0
;PCODE: $00001866 VOL: 0
; 0001 0B40            flagselftest=1;
;PCODE: $00001867 VOL: 0
;PCODE: $00001868 VOL: 0
; 0001 0B41            selftest();
;PCODE: $00001869 VOL: 0
; 0001 0B42       }
; 0001 0B43       delay_ms(100);
;PCODE: $0000186A VOL: 0
;PCODE: $0000186B VOL: 0
;PCODE: $0000186C VOL: 0
;PCODE: $0000186D VOL: 0
; 0001 0B44     }
;PCODE: $0000186E VOL: 0
;PCODE: $0000186F VOL: 0
; 0001 0B45 
; 0001 0B46     // vao chuong trinh chinh sau khi bo qua phan selftest
; 0001 0B47     hc(2,0);
;PCODE: $00001870 VOL: 0
;PCODE: $00001871 VOL: 0
;PCODE: $00001872 VOL: 0
;PCODE: $00001873 VOL: 0
;PCODE: $00001874 VOL: 0
; 0001 0B48     ws("MAIN PROGRAM");
;PCODE: $00001875 VOL: 0
;PCODE: $00001876 VOL: 0
;PCODE: $00001877 VOL: 0
;PCODE: $00001878 VOL: 0
; 0001 0B49     settoadoHomRB();
;PCODE: $00001879 VOL: 0
; 0001 0B4A 
; 0001 0B4B     // code you here
; 0001 0B4C 
; 0001 0B4D     while (1)
;PCODE: $0000187A VOL: 0
; 0001 0B4E     {
; 0001 0B4F         #ifdef !DEBUG_MODE
; 0001 0B50         {
; 0001 0B51      //LEDR=!LEDR;
; 0001 0B52      //PHUC
; 0001 0B53 ////     //=========================================================   PHUC ID
; 0001 0B54 //         chay theo banh co dinh huong tan cong
; 0001 0B55         readposition();
; 0001 0B56         calcvitri(0,0);    // de xac dinh huong tan cong
; 0001 0B57 
; 0001 0B58         //flagtancong=1;
; 0001 0B59         if(flagtancong==1)
; 0001 0B5A         {
; 0001 0B5B             flagtask=2;
; 0001 0B5C             rb_wait(50);
; 0001 0B5D 
; 0001 0B5E         }else
; 0001 0B5F         {
; 0001 0B60             if(offsetphongthu<0)    offsetphongthu=-offsetphongthu;//lay do lon
; 0001 0B61             if(robotctrl.ball.y <= 0)
; 0001 0B62             {
; 0001 0B63                 setRobotX = robotctrl.ball.x;
; 0001 0B64                 setRobotY = robotctrl.ball.y + offsetphongthu;
; 0001 0B65 
; 0001 0B66                 flagtask=0;
; 0001 0B67                 rb_wait(200);
; 0001 0B68 
; 0001 0B69             }else
; 0001 0B6A             {
; 0001 0B6B                 setRobotX = robotctrl.ball.x;
; 0001 0B6C                 setRobotY = robotctrl.ball.y - offsetphongthu;
; 0001 0B6D 
; 0001 0B6E                 flagtask=0;
; 0001 0B6F                 rb_wait(200);
; 0001 0B70 
; 0001 0B71             }
; 0001 0B72 
; 0001 0B73              setRobotX = robotctrl.ball.x+offsetphongthu;
; 0001 0B74              setRobotY = robotctrl.ball.y;
; 0001 0B75              rb_wait(200);
; 0001 0B76              rb_goball();
; 0001 0B77              rb_wait(200);
; 0001 0B78         }
; 0001 0B79         ctrrobot();// can phai luon luon chay de dieu khien robot
; 0001 0B7A         }
; 0001 0B7B         #else
; 0001 0B7C         {
; 0001 0B7D 
; 0001 0B7E 	        #ifdef DEBUG_EN
; 0001 0B7F             {
; 0001 0B80                 char dbgLen;
; 0001 0B81                 // left speed
; 0001 0B82                 dbgLen=sprintf(debugMsgBuff,"Left Speed: %d \n\r", leftSpeed);
; 0001 0B83                 debug_out(debugMsgBuff,dbgLen);
; 0001 0B84 
; 0001 0B85                 dbgLen=sprintf(debugMsgBuff,"Right Speed: %d \n\n\r", rightSpeed);
; 0001 0B86                 debug_out(debugMsgBuff,dbgLen);
; 0001 0B87             }
; 0001 0B88             #endif
; 0001 0B89 
; 0001 0B8A             movePoint(robotctrl, 0, 0, 0, 'f');
;PCODE: $0000187B VOL: 0
;PCODE: $0000187C VOL: 0
;PCODE: $0000187D VOL: 0
;PCODE: $0000187E VOL: 0
;PCODE: $0000187F VOL: 0
;PCODE: $00001880 VOL: 0
;PCODE: $00001881 VOL: 0
;PCODE: $00001882 VOL: 0
;PCODE: $00001883 VOL: 0
;PCODE: $00001884 VOL: 0
;PCODE: $00001885 VOL: 0
; 0001 0B8B             setSpeed(leftSpeed, rightSpeed);
;PCODE: $00001886 VOL: 0
;PCODE: $00001887 VOL: 0
;PCODE: $00001888 VOL: 0
;PCODE: $00001889 VOL: 0
;PCODE: $0000188A VOL: 0
; 0001 0B8C 
; 0001 0B8D         }
; 0001 0B8E         #endif
; 0001 0B8F      } //end while(1)
;PCODE: $0000188B VOL: 0
;PCODE: $0000188C VOL: 0
; 0001 0B90 }
;PCODE: $0000188D VOL: 0
;PCODE: $0000188E VOL: 0
;PCODE: $0000188F VOL: 0
;PCODE: $00001890 VOL: 0

	.DSEG
_0x20300:
	.BYTE 0x25
;
